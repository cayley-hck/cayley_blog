{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/breed.png","path":"images/breed.png","modified":0,"renderable":0},{"_id":"source/images/cfdisk01.png","path":"images/cfdisk01.png","modified":0,"renderable":0},{"_id":"source/images/pandorabox_2.png","path":"images/pandorabox_2.png","modified":0,"renderable":0},{"_id":"source/images/pandorabox_login.png","path":"images/pandorabox_login.png","modified":0,"renderable":0},{"_id":"source/images/pandorabox_1.png","path":"images/pandorabox_1.png","modified":0,"renderable":0},{"_id":"source/images/pandorabox_3.png","path":"images/pandorabox_3.png","modified":0,"renderable":0},{"_id":"source/images/pandorabox_5.png","path":"images/pandorabox_5.png","modified":0,"renderable":0},{"_id":"source/images/rz-sz02.png","path":"images/rz-sz02.png","modified":0,"renderable":0},{"_id":"source/images/rz-sz01.png","path":"images/rz-sz01.png","modified":0,"renderable":0},{"_id":"source/images/solarized1.png","path":"images/solarized1.png","modified":0,"renderable":0},{"_id":"source/images/pandorabox_4.png","path":"images/pandorabox_4.png","modified":0,"renderable":0},{"_id":"source/images/pandorabox_6.png","path":"images/pandorabox_6.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"0ffec30a00f8b2e079ddb008931b9fdbcfcefa95","modified":1488336752000},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1488336752000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1488336752000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1488336752000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1488336752000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1488336752000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1488336752000},{"_id":"source/_posts/.DS_Store","hash":"dbfcd38188ec01670b7066d0ea03641eb43a5362","modified":1488336752000},{"_id":"source/_posts/CocoaPods-IOS的类库管理工具.md","hash":"f5704bc7e2bc71081fed747422ea625ffc8117a3","modified":1488336752000},{"_id":"source/_posts/Homebrew-Mac下的包管理工具.md","hash":"0bb64b251f9dad07ae60545aba5a9c5d7be8e0e5","modified":1488336752000},{"_id":"source/_posts/PhantomJS总结.md","hash":"692b22c707d0fcccfcb662bb438effeb508d3995","modified":1488336752000},{"_id":"source/_posts/composer-json架构.md","hash":"5ee3520bbf98e4cb39c2d5ce01b8d180467dd237","modified":1488336752000},{"_id":"source/_posts/composer使用.md","hash":"519a5145b00cb31676a6af00a48ee7dbeff62061","modified":1488336752000},{"_id":"source/_posts/composer命令行.md","hash":"94c62429bd1880a3822941d1e9f9d0efd1743d54","modified":1488336752000},{"_id":"source/_posts/docker初探.md","hash":"3b3e258f45a48ff88664c41fee0f755adaf42575","modified":1488336752000},{"_id":"source/_posts/hexo博客搭建.md","hash":"7d17db171ee3b1bfcb89a3127783f1c400907bfa","modified":1488336752000},{"_id":"source/_posts/nginx安装分析.md","hash":"da25fb5aaca931f02f20d5703efabffed48e0ee5","modified":1488336752000},{"_id":"source/_posts/nginx的使用与配置.md","hash":"183e54bf8d3b911eaa12d204cc5fc645c5679ebe","modified":1488336752000},{"_id":"source/_posts/openwrt上的uhttp的使用与配置.md","hash":"ccd68aed929290956d1510512cd6d114063f2bd7","modified":1488336752000},{"_id":"source/_posts/owncloud安装在openwrt路由器上.md","hash":"2b083401358c7ca91d9c36fe0c5d9d589849d3ce","modified":1488336752000},{"_id":"source/_posts/php-xhproff分析扩展.md","hash":"fff206875212add114480d79835dea08f811950b","modified":1488336752000},{"_id":"source/_posts/php7和nginx1-9安装脚本.md","hash":"fa12c247436ea549daa046e246e7e12ee5830e96","modified":1488336752000},{"_id":"source/_posts/php7扩展开发之初见.md","hash":"dcd549145f486e430bcd7a5bb082163f3f7fd0be","modified":1488340021000},{"_id":"source/_posts/php杂记-弱类型总结.md","hash":"b585f90459a7290a2536bef09014aa3319d62ae0","modified":1488336752000},{"_id":"source/_posts/php设计模式-委托.md","hash":"b3ce082e2b024929ba63ed6f632645553f2db512","modified":1488336752000},{"_id":"source/_posts/php设计模式-建造者.md","hash":"6283b7c61d15b4b40d35f69dcd17e471444b77e8","modified":1488336752000},{"_id":"source/_posts/php设计模式-数据访问对象模式.md","hash":"372f33885c161969956fb71b5ba33fa3ff319f02","modified":1488336752000},{"_id":"source/_posts/php设计模式-装饰器.md","hash":"7ccc96ff9b84806d91df5b889c73bd07fabdc365","modified":1488336752000},{"_id":"source/_posts/php设计模式-适配器.md","hash":"b045ae43a68f30ff9ff6086207a8252dfbed4b00","modified":1488336752000},{"_id":"source/_posts/php设计模式学习总结.md","hash":"9fae562b5ceb60797504fe6f62cccfa21e7673b1","modified":1488336752000},{"_id":"source/_posts/redis安全.md","hash":"acd2db31d92b29cd887aeffb0490e4fab4f3b9d7","modified":1488336752000},{"_id":"source/_posts/redis基本命令.md","hash":"420719bf6f98b227414d3ae56fbf1b202847ce2e","modified":1488336752000},{"_id":"source/_posts/redis安装.md","hash":"fa3db73dff6d0599da331c28565c768669435a7c","modified":1488336752000},{"_id":"source/_posts/redis配置.md","hash":"379eeb651a59c0085c41a0c5d736d5a51d93c07b","modified":1488336752000},{"_id":"source/_posts/redis高级命令.md","hash":"034f7f88f62f47fee30d69b29a16703b2f35c56d","modified":1488336752000},{"_id":"source/_posts/ssh秘钥登陆.md","hash":"c46af28eb35931e1ef43e1fd84fc12f8ed383bc7","modified":1488336752000},{"_id":"source/_posts/shadowsocks安装.md","hash":"d7a262bd206d34b8fd92b738baa0aa9c1a21e33c","modified":1488336752000},{"_id":"source/_posts/yum源的配置和使用.md","hash":"640f43b8deffed1db348c61eb40f7212160abafd","modified":1488336752000},{"_id":"source/_posts/优雅的终端.md","hash":"ff96413bbdea3ba088d3a0596c01dee349634c18","modified":1488336752000},{"_id":"source/_posts/使用ownCloud搭建云盘.md","hash":"4fe08604d20b919655ac2636174f2d45ad229938","modified":1488336752000},{"_id":"source/_posts/使用seafile搭建云盘.md","hash":"dc477956c6106b251565acace653433af7bfdad3","modified":1488336752000},{"_id":"source/_posts/字符编码总结.md","hash":"8501cc2f745cffe884d34424dc62db198045969c","modified":1488336752000},{"_id":"source/_posts/编译安装libiconv库.md","hash":"664e509ab19acb30fbc25def27dca9b535e86469","modified":1488336752000},{"_id":"source/_posts/路由器刷Pandorabox及SS配置-科学上网.md","hash":"6da1aeb95bc5e60d9a0bbd545a6342f9d7b7af3e","modified":1488336752000},{"_id":"source/_posts/路由宝刷机pandorabox后利用自带存储卡.md","hash":"3e5d90abf978226904be3068d330a274a7b1c093","modified":1488336752000},{"_id":"source/_posts/配置SSL证书-搭建HTTPS.md","hash":"6b893ca0a5633dfe0be0bcaad3292880272fc625","modified":1488336752000},{"_id":"source/images/.DS_Store","hash":"a729454d0a4f6f3a862577740b16655e59ba1c83","modified":1488336752000},{"_id":"source/images/breed.png","hash":"08edf184a01e6773ad824cbc8f9038c3eb5a4b50","modified":1488336752000},{"_id":"source/images/cfdisk01.png","hash":"4ca8185312befd59ab775d11ed5f277f35576735","modified":1488336752000},{"_id":"source/images/pandorabox_2.png","hash":"0421811cb937d8fd1408b9221eeee018f50a121f","modified":1488336752000},{"_id":"source/images/pandorabox_login.png","hash":"2de3c28113043ff1a12d8da5dd3190f1712fccc8","modified":1488336752000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1488336752000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1488336752000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1488336752000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1488336752000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1488336752000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1488336752000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1488336752000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1488336752000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1488336752000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1488336752000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1488336752000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1488336752000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1488336752000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1488336752000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1488336752000},{"_id":"source/images/pandorabox_1.png","hash":"51fc25d182251960c4561835bdc16f07e3d7a4ed","modified":1488336752000},{"_id":"source/images/pandorabox_3.png","hash":"0c63a39aadfeff3aeb8f49a8fbcd17504c608f2c","modified":1488336752000},{"_id":"source/images/pandorabox_5.png","hash":"d80a6a8523c633a60d34b7ae2de9d97be3dd50f1","modified":1488336752000},{"_id":"source/images/rz-sz02.png","hash":"12737159c5db82ce37cb4e5323dc10548b26daaf","modified":1488336752000},{"_id":"source/images/rz-sz01.png","hash":"fa613ae0576aa964bf317dd1de914b85c6076e26","modified":1488336752000},{"_id":"source/images/solarized1.png","hash":"2282d7842532150f8f97891c709c02c457cba85c","modified":1488336752000},{"_id":"source/images/pandorabox_4.png","hash":"a91325b7190d325c0efd6d51f6a0ce019a2d7732","modified":1488336752000},{"_id":"source/images/pandorabox_6.png","hash":"7556874622bbc7060cb9732f4acbffcbb4b40840","modified":1488336752000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1488336752000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1488336752000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1488336752000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1488336752000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1488336752000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1488336752000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1488336752000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1488336752000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1488336752000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1488336752000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1488336752000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1488336752000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1488336752000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1488336752000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1488336752000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488336752000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488336752000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488336752000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488336752000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488336752000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488336752000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1488336752000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1488336752000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1488336752000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1488336752000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1488336752000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1488336752000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1488336752000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1488336752000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1488336752000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1488336752000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1488336752000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1488336752000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1488336752000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488336752000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1488336752000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488336752000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1488336752000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488336752000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1488336752000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1488336752000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1488336752000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1488336752000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1488336752000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1488336752000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1488336752000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1488336752000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1488336752000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1488336752000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1488336752000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1488336752000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1488336752000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1488336752000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1488336752000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1488336752000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1488336752000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1488336752000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1488336752000},{"_id":"public/2016/12/28/php7扩展开发之初见/index.html","hash":"bf8a47d9f038232fc475e687164eaa95d8a7c53e","modified":1488340026333},{"_id":"public/2016/09/12/PhantomJS总结/index.html","hash":"4f054a603f4dac63e0edf6e1b25005e999d35417","modified":1488339467455},{"_id":"public/2016/09/07/php设计模式-委托/index.html","hash":"c1cb6aef98e1f4e8590db7f621ac571b20325bd2","modified":1488339467456},{"_id":"public/2016/09/06/php设计模式学习总结/index.html","hash":"6414cc99e73b07cc0eb4a7e3f57bfdc949ad0a21","modified":1488339467456},{"_id":"public/2016/08/04/openwrt上的uhttp的使用与配置/index.html","hash":"8af3f933288c2ace79d3d13f7aea28dbd6618a2e","modified":1488339467456},{"_id":"public/2016/07/27/使用seafile搭建云盘/index.html","hash":"00a1d61ba29fdde9a1be9ff262c0ce050a5213bf","modified":1488339467457},{"_id":"public/2016/07/03/redis安全/index.html","hash":"4fb1cab92d50c69bf2a6091cd936a7b306ca948d","modified":1488339467457},{"_id":"public/2016/07/03/redis高级命令/index.html","hash":"a27ba41902aa705e4607e8760797a257ac3549f6","modified":1488339467457},{"_id":"public/2016/07/03/php-xhproff分析扩展/index.html","hash":"6478af9d19bafff442299b8327e1e684926b4da6","modified":1488339467457},{"_id":"public/2016/02/19/php7和nginx1-9安装脚本/index.html","hash":"6283c59b888ee3aae05e7b741c8d361e3b13c644","modified":1488339467457},{"_id":"public/categories/php/index.html","hash":"1bbf3179fcc5988b2ebdbba47075bac24fc0e56d","modified":1488339467457},{"_id":"public/categories/nodejs/index.html","hash":"2a2a1e082ffde28d7615b0366facad6f4bd238c1","modified":1488339467457},{"_id":"public/categories/liunx/index.html","hash":"ecafc0bb09fedf907dd8117aa07a81f6d04905a6","modified":1488339467457},{"_id":"public/categories/redis/index.html","hash":"78fcde0a2ee33760f2d2ce3979fb57044b6f5139","modified":1488339467457},{"_id":"public/archives/index.html","hash":"4b1e9e6dda50bcf1f2b604013e8eb936fe6cffac","modified":1488339467457},{"_id":"public/archives/page/2/index.html","hash":"c2590e5a50aa46f4f3e1224bca46e2cf2ea27cd5","modified":1488339467457},{"_id":"public/archives/page/3/index.html","hash":"67ff6b2bbd8a36e6f1b8dad8778892cbf0c5f641","modified":1488339467457},{"_id":"public/archives/page/4/index.html","hash":"73b9869a1463b7182ceec908d746e42fffc1b1d4","modified":1488339467457},{"_id":"public/archives/2016/index.html","hash":"5d5bc5515fe7afcb8493b3283b45bfb029159f7f","modified":1488339467457},{"_id":"public/archives/2016/page/2/index.html","hash":"36cd589c19839ee28645c38962b5cdbfb738f70c","modified":1488339467457},{"_id":"public/archives/2016/page/3/index.html","hash":"0ad4dfee4fa448fb2317fa3c4c11295b35eaf449","modified":1488339467457},{"_id":"public/archives/2016/page/4/index.html","hash":"4d1316e9121ecf96e96f0bf152dfa338a14bef67","modified":1488339467458},{"_id":"public/archives/2016/02/index.html","hash":"7e768a2e3b45cb0caa45cb70d598e3a2ac24904e","modified":1488339467458},{"_id":"public/archives/2016/07/index.html","hash":"8f0a061505b62db75326bbc7f822251f3cbd41f5","modified":1488339467458},{"_id":"public/archives/2016/07/page/2/index.html","hash":"3e36e7397dacedf8eafdcd5979d104103a5d6953","modified":1488339467458},{"_id":"public/archives/2016/08/index.html","hash":"9831e4fc45ace3cc8606d3902e632a6b2720d4e4","modified":1488339467458},{"_id":"public/archives/2016/09/index.html","hash":"69ef4d338c01cdc3a89381f4201d76b62672d578","modified":1488339467458},{"_id":"public/archives/2016/12/index.html","hash":"7bed41f95b6286f4afcca8e940de732350f18fb6","modified":1488339467458},{"_id":"public/tags/composer/index.html","hash":"df0119e756dfb367b0a9aaf1fe32c91fd7d48404","modified":1488339467458},{"_id":"public/tags/hexo/index.html","hash":"8469333ebed62e9a87b503e1baf6ee5b27aaa2b9","modified":1488339467458},{"_id":"public/tags/nginx/index.html","hash":"e6c88f9c50402247d654614b7a910eccf070fc9e","modified":1488339467458},{"_id":"public/tags/php/index.html","hash":"febbb05b965ab8fd8f71b72968521418a5f53678","modified":1488339467458},{"_id":"public/tags/redis/index.html","hash":"1218e44e231cfe321922e171856d5c2df6bcf446","modified":1488339467458},{"_id":"public/tags/https/index.html","hash":"2a8fb2ef16aa196ba2cad044e4ccac3de2f062fa","modified":1488339467458},{"_id":"public/tags/科学上网/index.html","hash":"c4b4eb6af5dae67c7deebcfa0b776fab8c83cd4c","modified":1488339467458},{"_id":"public/tags/yum/index.html","hash":"e556f0362d726c87eb281d4022e2e37370638d19","modified":1488339467458},{"_id":"public/tags/libiconv/index.html","hash":"ba07e836edbce0f3d49a18250c51ccec3bded2ec","modified":1488339467458},{"_id":"public/2016/09/21/docker初探/index.html","hash":"0b0d1bb43bc1f0b4a9908123f81476f37d58ec5d","modified":1488339467459},{"_id":"public/2016/09/20/Homebrew-Mac下的包管理工具/index.html","hash":"4df5c28e118e23435855fa0616d38f3993863ecb","modified":1488339467459},{"_id":"public/2016/09/12/优雅的终端/index.html","hash":"6a5c59007de859b92dd7784a65557f07b8d0ff38","modified":1488339467459},{"_id":"public/2016/09/06/php设计模式-装饰器/index.html","hash":"e09dbeb1c8f2e241adaa4ec24673c8470f5f918a","modified":1488339467459},{"_id":"public/2016/09/06/php设计模式-数据访问对象模式/index.html","hash":"733f482934623412cde2ae7a9e5bb100c60cd50e","modified":1488339467459},{"_id":"public/2016/09/06/php设计模式-建造者/index.html","hash":"171f4355dcfe3e0b622d1ebc8c282382ed8b0454","modified":1488339467459},{"_id":"public/2016/09/06/php设计模式-适配器/index.html","hash":"54c1ba3b5285717daab90e38b027802f62af15c0","modified":1488339467459},{"_id":"public/2016/08/31/CocoaPods-IOS的类库管理工具/index.html","hash":"9bb543e13ad285236a1514bdfa2eafb4eafb76b9","modified":1488339467459},{"_id":"public/2016/08/15/字符编码总结/index.html","hash":"1fa98e4ce453419a9736b22053f0cfa99ddeea46","modified":1488339467459},{"_id":"public/2016/08/05/php杂记-弱类型总结/index.html","hash":"ac2217986bb0fe5348017d96f69f8c3b87f2361f","modified":1488339467459},{"_id":"public/2016/08/04/owncloud安装在openwrt路由器上/index.html","hash":"452e66c2b51ed0ebb57fde909f357661fea5fb51","modified":1488339467459},{"_id":"public/2016/07/29/路由宝刷机pandorabox后利用自带存储卡/index.html","hash":"4d632c2ae1063ef535256399607bf4401df667fd","modified":1488339467459},{"_id":"public/2016/07/27/使用ownCloud搭建云盘/index.html","hash":"985c95906dcd7beb5b1ef3dc76938233b4b3dfeb","modified":1488339467459},{"_id":"public/2016/07/27/编译安装libiconv库/index.html","hash":"1b8a3d4015a6717b110184ab8ff845b5bcf7952e","modified":1488339467459},{"_id":"public/2016/07/06/nginx安装分析/index.html","hash":"06bb135456d3fd21b40f49eff7c5144c479cf898","modified":1488339467460},{"_id":"public/2016/07/17/nginx的使用与配置/index.html","hash":"411d511e9906aa4e721bab431fac0706006199d9","modified":1488339467460},{"_id":"public/2016/07/03/redis基本命令/index.html","hash":"d4e138957b55eb81050027b1416a47bb845890fa","modified":1488339467460},{"_id":"public/2016/07/03/redis配置/index.html","hash":"019518243574834635dc7b3131d0dea3937baf98","modified":1488339467460},{"_id":"public/2016/07/03/redis安装/index.html","hash":"b9c99e068e795a0bdeb70af7463728878ef670cb","modified":1488339467460},{"_id":"public/2016/07/03/composer-json架构/index.html","hash":"d8105fee76ad4c6cd5e7ae18c2e2ea92c470ca2a","modified":1488339467460},{"_id":"public/2016/07/03/composer命令行/index.html","hash":"54066b05896b2deb113fc7018348acfd3bc5a1d7","modified":1488339467460},{"_id":"public/2016/07/03/composer使用/index.html","hash":"e26bf85392adb19353f9770bad5a31cfd63119d2","modified":1488339467461},{"_id":"public/2016/07/03/路由器刷Pandorabox及SS配置-科学上网/index.html","hash":"61cd44b69dffdce1e6d0a1d5a157eb93e924014e","modified":1488339467463},{"_id":"public/2016/02/23/shadowsocks安装/index.html","hash":"fd1da79df27d5aab9348c101eac21bcbfbef1e1e","modified":1488339467463},{"_id":"public/2016/02/22/yum源的配置和使用/index.html","hash":"046caae6a6babd8d432eebbbe2b3f90b2cf804a5","modified":1488339467464},{"_id":"public/2016/02/19/ssh秘钥登陆/index.html","hash":"5782ebc5b560cb8fb7999bb89cf30acdd9a44772","modified":1488339467464},{"_id":"public/2016/02/19/配置SSL证书-搭建HTTPS/index.html","hash":"0036c2e725ff6115e1c83eefdb784f2f6dfa998d","modified":1488339467464},{"_id":"public/2016/02/18/hexo博客搭建/index.html","hash":"bdd037c24c026156cb5a0e0668a4c46d48c9f719","modified":1488339467464},{"_id":"public/index.html","hash":"92945c1f1befa9d399bd063713e0524a49ba9c71","modified":1488340026333},{"_id":"public/page/2/index.html","hash":"8c53780b0febead62a2e628284f62ff8bedb5650","modified":1488339467464},{"_id":"public/page/3/index.html","hash":"a063fdaaf7dc7ee80ddb6724a62e1a31c91b6433","modified":1488339467464},{"_id":"public/page/4/index.html","hash":"dcfad2c31b0961e27199e02e53a7adc8b03799e7","modified":1488339467464},{"_id":"public/images/breed.png","hash":"08edf184a01e6773ad824cbc8f9038c3eb5a4b50","modified":1488339467477},{"_id":"public/images/cfdisk01.png","hash":"4ca8185312befd59ab775d11ed5f277f35576735","modified":1488339467478},{"_id":"public/images/pandorabox_login.png","hash":"2de3c28113043ff1a12d8da5dd3190f1712fccc8","modified":1488339467478},{"_id":"public/images/pandorabox_2.png","hash":"0421811cb937d8fd1408b9221eeee018f50a121f","modified":1488339467478},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488339467478},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488339467478},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488339467478},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488339467478},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488339467478},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488339467478},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488339467478},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1488339467478},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1488339467478},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1488339467478},{"_id":"public/images/pandorabox_1.png","hash":"51fc25d182251960c4561835bdc16f07e3d7a4ed","modified":1488339469228},{"_id":"public/images/pandorabox_3.png","hash":"0c63a39aadfeff3aeb8f49a8fbcd17504c608f2c","modified":1488339469228},{"_id":"public/images/pandorabox_5.png","hash":"d80a6a8523c633a60d34b7ae2de9d97be3dd50f1","modified":1488339469234},{"_id":"public/images/rz-sz02.png","hash":"12737159c5db82ce37cb4e5323dc10548b26daaf","modified":1488339469234},{"_id":"public/images/solarized1.png","hash":"2282d7842532150f8f97891c709c02c457cba85c","modified":1488339469234},{"_id":"public/images/rz-sz01.png","hash":"fa613ae0576aa964bf317dd1de914b85c6076e26","modified":1488339469234},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1488339469235},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1488339469247},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1488339469247},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1488339469247},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1488339469247},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488339469247},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488339469247},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1488339469248},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1488339469248},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1488339469248},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1488339469248},{"_id":"public/images/pandorabox_4.png","hash":"a91325b7190d325c0efd6d51f6a0ce019a2d7732","modified":1488339469248},{"_id":"public/images/pandorabox_6.png","hash":"7556874622bbc7060cb9732f4acbffcbb4b40840","modified":1488339469248},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1488339469255},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1488339469256},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1488337045000},{"_id":"themes/maupassant/README.md","hash":"64d9bb25eb91a81fcbd28f066abb7c6de4fef92d","modified":1488337045000},{"_id":"themes/maupassant/_config.yml","hash":"8c21341a2876c2a1c9807be5e2c724a4e39166e3","modified":1488337045000},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1488337045000},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1488337045000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"ebacfa5d0c14d603e0d505757adb24c0bbe5dd13","modified":1488337045000},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1488337045000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1488337045000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1488337045000},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1488337045000},{"_id":"themes/maupassant/layout/base-without-sidebar.jade","hash":"1ad721de96784bf4253316b796db6200148d4152","modified":1488337045000},{"_id":"themes/maupassant/layout/index.jade","hash":"7466ce52023ed8a413a6b4461354a9e20e62fc14","modified":1488337045000},{"_id":"themes/maupassant/layout/base.jade","hash":"852c610ac392ef2fa130dbe73bcf4f96f423c869","modified":1488337045000},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1488337045000},{"_id":"themes/maupassant/layout/single-column.jade","hash":"c35fff4d9b331a41af5bc10f4278ec3d9da503db","modified":1488337045000},{"_id":"themes/maupassant/layout/timeline.jade","hash":"f03d8df63a188543cfe4e85e76194abe081411a1","modified":1488337045000},{"_id":"themes/maupassant/layout/post.jade","hash":"9cf29fb0daed95935154ce0fa2b154df5a9b11b1","modified":1488337045000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1488337045000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1488337045000},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1488337045000},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"3dbcc9a9f0d6e55da191d3393c18bbfcfe99fa69","modified":1488337045000},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"aa020b794e697e8e9612530c97c6295efde469fe","modified":1488337045000},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1488337045000},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1488337045000},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1488337045000},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1488337045000},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1488337045000},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1488337045000},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1488337045000},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1488337045000},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1488337045000},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1488337045000},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1488337045000},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1488337045000},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1488337045000},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1488337045000},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488337045000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488337045000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488337045000},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1488337045000},{"_id":"themes/maupassant/source/css/style.scss","hash":"158f1ebecf7b994ffae5332a627465f6bf38113b","modified":1488337045000},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488337045000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488337045000},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1488337045000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488337045000},{"_id":"themes/maupassant/source/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1488337045000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1488337045000},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1488337045000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1488337045000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1488337045000}],"Category":[{"name":"php","_id":"cizqeield0005znz473gjt88k"},{"name":"nodejs","_id":"cizqeiem6000mznz4wykap1r7"},{"name":"liunx","_id":"cizqeiemw000sznz4k2c9idzt"},{"name":"redis","_id":"cizqeiens001nznz462gqcndi"}],"Data":[],"Page":[],"Post":[{"title":"CocoaPods->IOS的类库管理工具","date":"2016-08-31T13:50:10.000Z","_content":"CocoaPods是什么？\nCocoaPods应该是iOS的类库管理工具了，通过cocoaPods，只需要一行命令就可以完全解决包依赖问题，而且绝大部分有名的开源类库，都支持CocoaPods。\n\n官方网址:https://cocoapods.org/\n\n安装:\nMac 下都自带 ruby，使用 ruby 的 gem 命令即可下载安装：\n\ngem命令:\n\n{% codeblock %}\n\nappledeMac-mini:~ apple$ gem --help\nRubyGems is a sophisticated package manager for Ruby.  This is a\nbasic help message containing pointers to more information.\n\n  Usage:\n    gem -h/--help\n    gem -v/--version\n    gem command [arguments...] [options...]\n\n  Examples:\n    gem install rake\n    gem list --local\n    gem build package.gemspec\n    gem help install\n\n  Further help:\n    gem help commands            list all 'gem' commands\n    gem help examples            show some examples of usage\n    gem help platforms           show information about platforms\n    gem help <COMMAND>           show help on COMMAND\n                                   (e.g. 'gem help install')\n    gem server                   present a web page at\n                                 http://localhost:8808/\n                                 with info about installed gems\n  Further information:\n    http://guides.rubygems.org\n\n{% endcodeblock %}   \n\n安装命令\n{% codeblock %}\nappledeMac-mini:~ apple$ sudo gem install cocoapods\nPassword:\nFetching: i18n-0.7.0.gem (100%)\nSuccessfully installed i18n-0.7.0\nFetching: thread_safe-0.3.5.gem (100%)\nSuccessfully installed thread_safe-0.3.5\nFetching: tzinfo-1.2.2.gem (100%)\nSuccessfully installed tzinfo-1.2.2\nFetching: minitest-5.8.4.gem (100%)\nSuccessfully installed minitest-5.8.4\nFetching: activesupport-4.2.6.gem (100%)\nSuccessfully installed activesupport-4.2.6\nFetching: nap-1.1.0.gem (100%)\nSuccessfully installed nap-1.1.0\nFetching: fuzzy_match-2.0.4.gem (100%)\nSuccessfully installed fuzzy_match-2.0.4\nFetching: cocoapods-core-0.39.0.gem (100%)\nSuccessfully installed cocoapods-core-0.39.0\nFetching: claide-0.9.1.gem (100%)\nSuccessfully installed claide-0.9.1\nFetching: colored-1.2.gem (100%)\nSuccessfully installed colored-1.2\nFetching: xcodeproj-0.28.2.gem (100%)\nSuccessfully installed xcodeproj-0.28.2\nFetching: cocoapods-downloader-0.9.3.gem (100%)\nSuccessfully installed cocoapods-downloader-0.9.3\nFetching: cocoapods-plugins-0.4.2.gem (100%)\nSuccessfully installed cocoapods-plugins-0.4.2\nFetching: cocoapods-search-0.1.0.gem (100%)\nSuccessfully installed cocoapods-search-0.1.0\nFetching: cocoapods-stats-0.6.2.gem (100%)\nSuccessfully installed cocoapods-stats-0.6.2\nFetching: cocoapods-try-0.5.1.gem (100%)\nSuccessfully installed cocoapods-try-0.5.1\nFetching: netrc-0.7.8.gem (100%)\nSuccessfully installed netrc-0.7.8\nFetching: cocoapods-trunk-0.6.4.gem (100%)\nSuccessfully installed cocoapods-trunk-0.6.4\nFetching: molinillo-0.4.4.gem (100%)\nSuccessfully installed molinillo-0.4.4\nFetching: escape-0.0.4.gem (100%)\nSuccessfully installed escape-0.0.4\nFetching: cocoapods-0.39.0.gem (100%)\nSuccessfully installed cocoapods-0.39.0\nParsing documentation for i18n-0.7.0\nInstalling ri documentation for i18n-0.7.0\nParsing documentation for thread_safe-0.3.5\nInstalling ri documentation for thread_safe-0.3.5\nParsing documentation for tzinfo-1.2.2\nInstalling ri documentation for tzinfo-1.2.2\nParsing documentation for minitest-5.8.4\nInstalling ri documentation for minitest-5.8.4\nParsing documentation for activesupport-4.2.6\nunable to convert \"\\x84\" from ASCII-8BIT to UTF-8 for lib/active_support/values/unicode_tables.dat, skipping\nInstalling ri documentation for activesupport-4.2.6\nParsing documentation for nap-1.1.0\nInstalling ri documentation for nap-1.1.0\nParsing documentation for fuzzy_match-2.0.4\nInstalling ri documentation for fuzzy_match-2.0.4\nParsing documentation for cocoapods-core-0.39.0\nInstalling ri documentation for cocoapods-core-0.39.0\nParsing documentation for claide-0.9.1\nInstalling ri documentation for claide-0.9.1\nParsing documentation for colored-1.2\nInstalling ri documentation for colored-1.2\nParsing documentation for xcodeproj-0.28.2\nInstalling ri documentation for xcodeproj-0.28.2\nParsing documentation for cocoapods-downloader-0.9.3\nInstalling ri documentation for cocoapods-downloader-0.9.3\nParsing documentation for cocoapods-plugins-0.4.2\nInstalling ri documentation for cocoapods-plugins-0.4.2\nParsing documentation for cocoapods-search-0.1.0\nInstalling ri documentation for cocoapods-search-0.1.0\nParsing documentation for cocoapods-stats-0.6.2\nInstalling ri documentation for cocoapods-stats-0.6.2\nParsing documentation for cocoapods-try-0.5.1\nInstalling ri documentation for cocoapods-try-0.5.1\nParsing documentation for netrc-0.7.8\nInstalling ri documentation for netrc-0.7.8\nParsing documentation for cocoapods-trunk-0.6.4\nInstalling ri documentation for cocoapods-trunk-0.6.4\nParsing documentation for molinillo-0.4.4\nInstalling ri documentation for molinillo-0.4.4\nParsing documentation for escape-0.0.4\nInstalling ri documentation for escape-0.0.4\nParsing documentation for cocoapods-0.39.0\nInstalling ri documentation for cocoapods-0.39.0\n21 gems installed\n\n{% endcodeblock %}\n\n$ pod setup\n\n但是如果gem太老,可以使用命令升级 gem:\n{% codeblock %}\nsudo gem update --system\n{% endcodeblock %}\n\n另外，ruby 的软件源 https://rubygems.org 使用的是亚马逊的云服务，所以被墙了，\n需要更新一下 ruby 的源，使用如下代码将官方的 ruby 源替换成国内淘宝的源：\n\n先移除现有https://rubygems.org源\n{% codeblock %}\nappledeMac-mini:my-v2ex apple$ gem sources --remove https://rubygems.org/\nhttps://rubygems.org/ removed from sources\n{% endcodeblock %}\n\n添加淘宝源\n\n{% codeblock %}\nappledeMac-mini:my-v2ex apple$ gem sources -a https://ruby.taobao.org/\n{% endcodeblock %}\n\n查看所有源\n{% codeblock %}\nhttps://ruby.taobao.org/ added to sources\nappledeMac-mini:my-v2ex apple$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org/\n{% endcodeblock %}\n\n使用 CocoaPods\n\n使用时需要新建一个名为 Podfile 的文件，将依赖的库名字依次列在文件中即可\n\n{% codeblock %}\nappledeMac-mini:my-v2ex apple$ vim Podfile \n\nplatform:ios,'8.0'\ninhibit_all_warnings!\nuse_frameworks!\n\ndef pods\n    pod 'SnapKit', '~> 0.18.0'\n    pod 'Alamofire', '~> 3.1.4'\n    pod 'ObjectMapper', '~> 1.1.1'\n    pod 'AlamofireObjectMapper', '~> 2.1.0'\n    pod 'Ji', '~> 1.2.0'\n    pod 'DrawerController', '~> 1.1.0'\n    pod 'Kingfisher', '~> 1.9.1'\n    pod 'KVOController', '~> 1.0.3'\n    pod 'YYText', '~> 0.9.18'\n    pod 'FXBlurView', '~> 1.6.4'\n    pod 'SVProgressHUD', '~> 1.1.3'\n    pod 'MJRefresh', '~> 3.1.0'\n    pod 'KeychainSwift', '~> 3.0.11'\n    pod 'INSImageView', '~> 0.1.5'\n    pod 'CXSwipeGestureRecognizer', '~> 1.0.2'\n    pod '1PasswordExtension', '~> 1.8'\n    pod 'Shimmer', '~> 1.0.2'\n    pod 'Fabric'\n    pod 'Crashlytics'\nend\n\ntarget 'my-v2ex' do\n    pods\nend\n{% endcodeblock %}\n\n然后将编辑好的 Podfile 文件放到项目根目录中，执行如下命令即可：\n{% codeblock %}\ncd \"your project home\"\npod install\n{% endcodeblock %}\n\n现在，你的所有第三方库都已经下载完成并且设置好了编译参数和依赖，你只需要记住如下 2 点即可：\n使用 CocoaPods 生成的 .xcworkspace 文件来打开工程，而不是以前的 .xcodeproj 文件。\n每次更改了 Podfile 文件，你需要重新执行一次pod update命令。\n\n具体使用命令如下:\n{% codeblock %}\nUsage:\n\n    $ pod COMMAND\n\n      CocoaPods, the Cocoa library package manager.\n\nCommands:\n\n    + cache      Manipulate the CocoaPods cache\n    + init       Generate a Podfile for the current directory.\n    + install    Install project dependencies to Podfile.lock versions\n    + ipc        Inter-process communication\n    + lib        Develop pods\n    + list       List pods\n    + outdated   Show outdated project dependencies\n    + plugins    Show available CocoaPods plugins\n    + repo       Manage spec-repositories\n    + search     Search for pods.\n    + setup      Setup the CocoaPods environment\n    + spec       Manage pod specs\n    + trunk      Interact with the CocoaPods API (e.g. publishing new specs)\n    + try        Try a Pod!\n    + update     Update outdated project dependencies and create new\n                 Podfile.lock\n\nOptions:\n\n    --silent     Show nothing\n    --version    Show the version of the tool\n    --verbose    Show more debugging information\n    --no-ansi    Show output without ANSI codes\n    --help       Show help banner of specified command\n\n\nappledeMac-mini:my-v2ex apple$ pod install\nUpdating local specs repositories\n\nCocoaPods 1.0.0.beta.6 is available.\nTo update use: `gem install cocoapods --pre`\n[!] This is a test version we'd love you to try.\n\nFor more information see http://blog.cocoapods.org\nand the CHANGELOG for this version http://git.io/BaH8pQ.\n\nAnalyzing dependencies\nDownloading dependencies\nInstalling 1PasswordExtension (1.8)\nInstalling Alamofire (3.1.5)\nInstalling AlamofireObjectMapper (2.1.0)\nInstalling CXSwipeGestureRecognizer (1.0.2)\nInstalling Crashlytics (3.7.0)\nInstalling DrawerController (1.1.0)\nInstalling FXBlurView (1.6.4)\nInstalling Fabric (1.6.7)\nInstalling INSImageView (0.1.6)\n\nInstalling Ji (1.2.0)\nInstalling KVOController (1.0.3)\nInstalling KeychainSwift (3.0.11)\nInstalling Kingfisher (1.9.3)\nInstalling MJRefresh (3.1.0)\nInstalling ObjectMapper (1.1.5)\nInstalling SVProgressHUD (1.1.3)\nInstalling Shimmer (1.0.2)\n^[[21~Installing SnapKit (0.18.0)\nInstalling YYText (0.9.19)\nGenerating Pods project\nIntegrating client project\n\n[!] Please close any current Xcode sessions and use `my-v2ex.xcworkspace` for this project from now on.\nSending stats\nPod installation complete! There are 19 dependencies from the Podfile and 19\ntotal pods installed.\n{% endcodeblock %}\n\n关于 Podfile.lock\n执行pod install之后，除了 Podfile 外，CocoaPods 还会生成一个名为Podfile.lock的文件，Podfile.lock 应该加入到版本控制里面，不应该把这个文件加入到.gitignore中。因为Podfile.lock会锁定当前各依赖库的版本，之后如果多次执行pod install 不会更改版本，要pod update才会改Podfile.lock了。这样多人协作的时候，可以防止第三方库升级时造成大家各自的第三方库版本不一致。\n\n那些踩过的坑\n1)\nappledeMac-mini:my-v2ex apple$ pod install\nUpdating local specs repositories\n\nCocoaPods 1.0.0.beta.6 is available.\nTo update use: `gem install cocoapods --pre`\n[!] This is a test version we'd love you to try.\n\nFor more information see http://blog.cocoapods.org\nand the CHANGELOG for this version http://git.io/BaH8pQ.\n\nAnalyzing dependencies\n[!] Could not automatically select an Xcode project. Specify one in your Podfile like so:\n\n    xcodeproj 'path/to/Project.xcodeproj'\n当把CocoaPods生成的workspace移动到上层目录时，需要改下Pods.xcconfig和工程里的一些设置\n解决方法:\n在Podfile文件里指定下工程目录\n......  \nxcodeproj 'my-v2ex/my-v2ex.xcodeproj'   \n......  \n\n\n","source":"_posts/CocoaPods-IOS的类库管理工具.md","raw":"---\ntitle: 'CocoaPods->IOS的类库管理工具'\ndate: 2016-08-31 21:50:10\ntags:\n---\nCocoaPods是什么？\nCocoaPods应该是iOS的类库管理工具了，通过cocoaPods，只需要一行命令就可以完全解决包依赖问题，而且绝大部分有名的开源类库，都支持CocoaPods。\n\n官方网址:https://cocoapods.org/\n\n安装:\nMac 下都自带 ruby，使用 ruby 的 gem 命令即可下载安装：\n\ngem命令:\n\n{% codeblock %}\n\nappledeMac-mini:~ apple$ gem --help\nRubyGems is a sophisticated package manager for Ruby.  This is a\nbasic help message containing pointers to more information.\n\n  Usage:\n    gem -h/--help\n    gem -v/--version\n    gem command [arguments...] [options...]\n\n  Examples:\n    gem install rake\n    gem list --local\n    gem build package.gemspec\n    gem help install\n\n  Further help:\n    gem help commands            list all 'gem' commands\n    gem help examples            show some examples of usage\n    gem help platforms           show information about platforms\n    gem help <COMMAND>           show help on COMMAND\n                                   (e.g. 'gem help install')\n    gem server                   present a web page at\n                                 http://localhost:8808/\n                                 with info about installed gems\n  Further information:\n    http://guides.rubygems.org\n\n{% endcodeblock %}   \n\n安装命令\n{% codeblock %}\nappledeMac-mini:~ apple$ sudo gem install cocoapods\nPassword:\nFetching: i18n-0.7.0.gem (100%)\nSuccessfully installed i18n-0.7.0\nFetching: thread_safe-0.3.5.gem (100%)\nSuccessfully installed thread_safe-0.3.5\nFetching: tzinfo-1.2.2.gem (100%)\nSuccessfully installed tzinfo-1.2.2\nFetching: minitest-5.8.4.gem (100%)\nSuccessfully installed minitest-5.8.4\nFetching: activesupport-4.2.6.gem (100%)\nSuccessfully installed activesupport-4.2.6\nFetching: nap-1.1.0.gem (100%)\nSuccessfully installed nap-1.1.0\nFetching: fuzzy_match-2.0.4.gem (100%)\nSuccessfully installed fuzzy_match-2.0.4\nFetching: cocoapods-core-0.39.0.gem (100%)\nSuccessfully installed cocoapods-core-0.39.0\nFetching: claide-0.9.1.gem (100%)\nSuccessfully installed claide-0.9.1\nFetching: colored-1.2.gem (100%)\nSuccessfully installed colored-1.2\nFetching: xcodeproj-0.28.2.gem (100%)\nSuccessfully installed xcodeproj-0.28.2\nFetching: cocoapods-downloader-0.9.3.gem (100%)\nSuccessfully installed cocoapods-downloader-0.9.3\nFetching: cocoapods-plugins-0.4.2.gem (100%)\nSuccessfully installed cocoapods-plugins-0.4.2\nFetching: cocoapods-search-0.1.0.gem (100%)\nSuccessfully installed cocoapods-search-0.1.0\nFetching: cocoapods-stats-0.6.2.gem (100%)\nSuccessfully installed cocoapods-stats-0.6.2\nFetching: cocoapods-try-0.5.1.gem (100%)\nSuccessfully installed cocoapods-try-0.5.1\nFetching: netrc-0.7.8.gem (100%)\nSuccessfully installed netrc-0.7.8\nFetching: cocoapods-trunk-0.6.4.gem (100%)\nSuccessfully installed cocoapods-trunk-0.6.4\nFetching: molinillo-0.4.4.gem (100%)\nSuccessfully installed molinillo-0.4.4\nFetching: escape-0.0.4.gem (100%)\nSuccessfully installed escape-0.0.4\nFetching: cocoapods-0.39.0.gem (100%)\nSuccessfully installed cocoapods-0.39.0\nParsing documentation for i18n-0.7.0\nInstalling ri documentation for i18n-0.7.0\nParsing documentation for thread_safe-0.3.5\nInstalling ri documentation for thread_safe-0.3.5\nParsing documentation for tzinfo-1.2.2\nInstalling ri documentation for tzinfo-1.2.2\nParsing documentation for minitest-5.8.4\nInstalling ri documentation for minitest-5.8.4\nParsing documentation for activesupport-4.2.6\nunable to convert \"\\x84\" from ASCII-8BIT to UTF-8 for lib/active_support/values/unicode_tables.dat, skipping\nInstalling ri documentation for activesupport-4.2.6\nParsing documentation for nap-1.1.0\nInstalling ri documentation for nap-1.1.0\nParsing documentation for fuzzy_match-2.0.4\nInstalling ri documentation for fuzzy_match-2.0.4\nParsing documentation for cocoapods-core-0.39.0\nInstalling ri documentation for cocoapods-core-0.39.0\nParsing documentation for claide-0.9.1\nInstalling ri documentation for claide-0.9.1\nParsing documentation for colored-1.2\nInstalling ri documentation for colored-1.2\nParsing documentation for xcodeproj-0.28.2\nInstalling ri documentation for xcodeproj-0.28.2\nParsing documentation for cocoapods-downloader-0.9.3\nInstalling ri documentation for cocoapods-downloader-0.9.3\nParsing documentation for cocoapods-plugins-0.4.2\nInstalling ri documentation for cocoapods-plugins-0.4.2\nParsing documentation for cocoapods-search-0.1.0\nInstalling ri documentation for cocoapods-search-0.1.0\nParsing documentation for cocoapods-stats-0.6.2\nInstalling ri documentation for cocoapods-stats-0.6.2\nParsing documentation for cocoapods-try-0.5.1\nInstalling ri documentation for cocoapods-try-0.5.1\nParsing documentation for netrc-0.7.8\nInstalling ri documentation for netrc-0.7.8\nParsing documentation for cocoapods-trunk-0.6.4\nInstalling ri documentation for cocoapods-trunk-0.6.4\nParsing documentation for molinillo-0.4.4\nInstalling ri documentation for molinillo-0.4.4\nParsing documentation for escape-0.0.4\nInstalling ri documentation for escape-0.0.4\nParsing documentation for cocoapods-0.39.0\nInstalling ri documentation for cocoapods-0.39.0\n21 gems installed\n\n{% endcodeblock %}\n\n$ pod setup\n\n但是如果gem太老,可以使用命令升级 gem:\n{% codeblock %}\nsudo gem update --system\n{% endcodeblock %}\n\n另外，ruby 的软件源 https://rubygems.org 使用的是亚马逊的云服务，所以被墙了，\n需要更新一下 ruby 的源，使用如下代码将官方的 ruby 源替换成国内淘宝的源：\n\n先移除现有https://rubygems.org源\n{% codeblock %}\nappledeMac-mini:my-v2ex apple$ gem sources --remove https://rubygems.org/\nhttps://rubygems.org/ removed from sources\n{% endcodeblock %}\n\n添加淘宝源\n\n{% codeblock %}\nappledeMac-mini:my-v2ex apple$ gem sources -a https://ruby.taobao.org/\n{% endcodeblock %}\n\n查看所有源\n{% codeblock %}\nhttps://ruby.taobao.org/ added to sources\nappledeMac-mini:my-v2ex apple$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org/\n{% endcodeblock %}\n\n使用 CocoaPods\n\n使用时需要新建一个名为 Podfile 的文件，将依赖的库名字依次列在文件中即可\n\n{% codeblock %}\nappledeMac-mini:my-v2ex apple$ vim Podfile \n\nplatform:ios,'8.0'\ninhibit_all_warnings!\nuse_frameworks!\n\ndef pods\n    pod 'SnapKit', '~> 0.18.0'\n    pod 'Alamofire', '~> 3.1.4'\n    pod 'ObjectMapper', '~> 1.1.1'\n    pod 'AlamofireObjectMapper', '~> 2.1.0'\n    pod 'Ji', '~> 1.2.0'\n    pod 'DrawerController', '~> 1.1.0'\n    pod 'Kingfisher', '~> 1.9.1'\n    pod 'KVOController', '~> 1.0.3'\n    pod 'YYText', '~> 0.9.18'\n    pod 'FXBlurView', '~> 1.6.4'\n    pod 'SVProgressHUD', '~> 1.1.3'\n    pod 'MJRefresh', '~> 3.1.0'\n    pod 'KeychainSwift', '~> 3.0.11'\n    pod 'INSImageView', '~> 0.1.5'\n    pod 'CXSwipeGestureRecognizer', '~> 1.0.2'\n    pod '1PasswordExtension', '~> 1.8'\n    pod 'Shimmer', '~> 1.0.2'\n    pod 'Fabric'\n    pod 'Crashlytics'\nend\n\ntarget 'my-v2ex' do\n    pods\nend\n{% endcodeblock %}\n\n然后将编辑好的 Podfile 文件放到项目根目录中，执行如下命令即可：\n{% codeblock %}\ncd \"your project home\"\npod install\n{% endcodeblock %}\n\n现在，你的所有第三方库都已经下载完成并且设置好了编译参数和依赖，你只需要记住如下 2 点即可：\n使用 CocoaPods 生成的 .xcworkspace 文件来打开工程，而不是以前的 .xcodeproj 文件。\n每次更改了 Podfile 文件，你需要重新执行一次pod update命令。\n\n具体使用命令如下:\n{% codeblock %}\nUsage:\n\n    $ pod COMMAND\n\n      CocoaPods, the Cocoa library package manager.\n\nCommands:\n\n    + cache      Manipulate the CocoaPods cache\n    + init       Generate a Podfile for the current directory.\n    + install    Install project dependencies to Podfile.lock versions\n    + ipc        Inter-process communication\n    + lib        Develop pods\n    + list       List pods\n    + outdated   Show outdated project dependencies\n    + plugins    Show available CocoaPods plugins\n    + repo       Manage spec-repositories\n    + search     Search for pods.\n    + setup      Setup the CocoaPods environment\n    + spec       Manage pod specs\n    + trunk      Interact with the CocoaPods API (e.g. publishing new specs)\n    + try        Try a Pod!\n    + update     Update outdated project dependencies and create new\n                 Podfile.lock\n\nOptions:\n\n    --silent     Show nothing\n    --version    Show the version of the tool\n    --verbose    Show more debugging information\n    --no-ansi    Show output without ANSI codes\n    --help       Show help banner of specified command\n\n\nappledeMac-mini:my-v2ex apple$ pod install\nUpdating local specs repositories\n\nCocoaPods 1.0.0.beta.6 is available.\nTo update use: `gem install cocoapods --pre`\n[!] This is a test version we'd love you to try.\n\nFor more information see http://blog.cocoapods.org\nand the CHANGELOG for this version http://git.io/BaH8pQ.\n\nAnalyzing dependencies\nDownloading dependencies\nInstalling 1PasswordExtension (1.8)\nInstalling Alamofire (3.1.5)\nInstalling AlamofireObjectMapper (2.1.0)\nInstalling CXSwipeGestureRecognizer (1.0.2)\nInstalling Crashlytics (3.7.0)\nInstalling DrawerController (1.1.0)\nInstalling FXBlurView (1.6.4)\nInstalling Fabric (1.6.7)\nInstalling INSImageView (0.1.6)\n\nInstalling Ji (1.2.0)\nInstalling KVOController (1.0.3)\nInstalling KeychainSwift (3.0.11)\nInstalling Kingfisher (1.9.3)\nInstalling MJRefresh (3.1.0)\nInstalling ObjectMapper (1.1.5)\nInstalling SVProgressHUD (1.1.3)\nInstalling Shimmer (1.0.2)\n^[[21~Installing SnapKit (0.18.0)\nInstalling YYText (0.9.19)\nGenerating Pods project\nIntegrating client project\n\n[!] Please close any current Xcode sessions and use `my-v2ex.xcworkspace` for this project from now on.\nSending stats\nPod installation complete! There are 19 dependencies from the Podfile and 19\ntotal pods installed.\n{% endcodeblock %}\n\n关于 Podfile.lock\n执行pod install之后，除了 Podfile 外，CocoaPods 还会生成一个名为Podfile.lock的文件，Podfile.lock 应该加入到版本控制里面，不应该把这个文件加入到.gitignore中。因为Podfile.lock会锁定当前各依赖库的版本，之后如果多次执行pod install 不会更改版本，要pod update才会改Podfile.lock了。这样多人协作的时候，可以防止第三方库升级时造成大家各自的第三方库版本不一致。\n\n那些踩过的坑\n1)\nappledeMac-mini:my-v2ex apple$ pod install\nUpdating local specs repositories\n\nCocoaPods 1.0.0.beta.6 is available.\nTo update use: `gem install cocoapods --pre`\n[!] This is a test version we'd love you to try.\n\nFor more information see http://blog.cocoapods.org\nand the CHANGELOG for this version http://git.io/BaH8pQ.\n\nAnalyzing dependencies\n[!] Could not automatically select an Xcode project. Specify one in your Podfile like so:\n\n    xcodeproj 'path/to/Project.xcodeproj'\n当把CocoaPods生成的workspace移动到上层目录时，需要改下Pods.xcconfig和工程里的一些设置\n解决方法:\n在Podfile文件里指定下工程目录\n......  \nxcodeproj 'my-v2ex/my-v2ex.xcodeproj'   \n......  \n\n\n","slug":"CocoaPods-IOS的类库管理工具","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeieko0000znz4wfsqcj5l","content":"<p>CocoaPods是什么？<br>CocoaPods应该是iOS的类库管理工具了，通过cocoaPods，只需要一行命令就可以完全解决包依赖问题，而且绝大部分有名的开源类库，都支持CocoaPods。</p>\n<p>官方网址:<a href=\"https://cocoapods.org/\" target=\"_blank\" rel=\"external\">https://cocoapods.org/</a></p>\n<p>安装:<br>Mac 下都自带 ruby，使用 ruby 的 gem 命令即可下载安装：</p>\n<p>gem命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">appledeMac-mini:~ apple$ gem --help</div><div class=\"line\">RubyGems is a sophisticated package manager for Ruby.  This is a</div><div class=\"line\">basic help message containing pointers to more information.</div><div class=\"line\"></div><div class=\"line\">  Usage:</div><div class=\"line\">    gem -h/--help</div><div class=\"line\">    gem -v/--version</div><div class=\"line\">    gem command [arguments...] [options...]</div><div class=\"line\"></div><div class=\"line\">  Examples:</div><div class=\"line\">    gem install rake</div><div class=\"line\">    gem list --local</div><div class=\"line\">    gem build package.gemspec</div><div class=\"line\">    gem help install</div><div class=\"line\"></div><div class=\"line\">  Further help:</div><div class=\"line\">    gem help commands            list all &apos;gem&apos; commands</div><div class=\"line\">    gem help examples            show some examples of usage</div><div class=\"line\">    gem help platforms           show information about platforms</div><div class=\"line\">    gem help &lt;COMMAND&gt;           show help on COMMAND</div><div class=\"line\">                                   (e.g. &apos;gem help install&apos;)</div><div class=\"line\">    gem server                   present a web page at</div><div class=\"line\">                                 http://localhost:8808/</div><div class=\"line\">                                 with info about installed gems</div><div class=\"line\">  Further information:</div><div class=\"line\">    http://guides.rubygems.org</div><div class=\"line\"></div></pre></td></tr></table></figure>   \n<p>安装命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\">appledeMac-mini:~ apple$ sudo gem install cocoapods</div><div class=\"line\">Password:</div><div class=\"line\">Fetching: i18n-0.7.0.gem (100%)</div><div class=\"line\">Successfully installed i18n-0.7.0</div><div class=\"line\">Fetching: thread_safe-0.3.5.gem (100%)</div><div class=\"line\">Successfully installed thread_safe-0.3.5</div><div class=\"line\">Fetching: tzinfo-1.2.2.gem (100%)</div><div class=\"line\">Successfully installed tzinfo-1.2.2</div><div class=\"line\">Fetching: minitest-5.8.4.gem (100%)</div><div class=\"line\">Successfully installed minitest-5.8.4</div><div class=\"line\">Fetching: activesupport-4.2.6.gem (100%)</div><div class=\"line\">Successfully installed activesupport-4.2.6</div><div class=\"line\">Fetching: nap-1.1.0.gem (100%)</div><div class=\"line\">Successfully installed nap-1.1.0</div><div class=\"line\">Fetching: fuzzy_match-2.0.4.gem (100%)</div><div class=\"line\">Successfully installed fuzzy_match-2.0.4</div><div class=\"line\">Fetching: cocoapods-core-0.39.0.gem (100%)</div><div class=\"line\">Successfully installed cocoapods-core-0.39.0</div><div class=\"line\">Fetching: claide-0.9.1.gem (100%)</div><div class=\"line\">Successfully installed claide-0.9.1</div><div class=\"line\">Fetching: colored-1.2.gem (100%)</div><div class=\"line\">Successfully installed colored-1.2</div><div class=\"line\">Fetching: xcodeproj-0.28.2.gem (100%)</div><div class=\"line\">Successfully installed xcodeproj-0.28.2</div><div class=\"line\">Fetching: cocoapods-downloader-0.9.3.gem (100%)</div><div class=\"line\">Successfully installed cocoapods-downloader-0.9.3</div><div class=\"line\">Fetching: cocoapods-plugins-0.4.2.gem (100%)</div><div class=\"line\">Successfully installed cocoapods-plugins-0.4.2</div><div class=\"line\">Fetching: cocoapods-search-0.1.0.gem (100%)</div><div class=\"line\">Successfully installed cocoapods-search-0.1.0</div><div class=\"line\">Fetching: cocoapods-stats-0.6.2.gem (100%)</div><div class=\"line\">Successfully installed cocoapods-stats-0.6.2</div><div class=\"line\">Fetching: cocoapods-try-0.5.1.gem (100%)</div><div class=\"line\">Successfully installed cocoapods-try-0.5.1</div><div class=\"line\">Fetching: netrc-0.7.8.gem (100%)</div><div class=\"line\">Successfully installed netrc-0.7.8</div><div class=\"line\">Fetching: cocoapods-trunk-0.6.4.gem (100%)</div><div class=\"line\">Successfully installed cocoapods-trunk-0.6.4</div><div class=\"line\">Fetching: molinillo-0.4.4.gem (100%)</div><div class=\"line\">Successfully installed molinillo-0.4.4</div><div class=\"line\">Fetching: escape-0.0.4.gem (100%)</div><div class=\"line\">Successfully installed escape-0.0.4</div><div class=\"line\">Fetching: cocoapods-0.39.0.gem (100%)</div><div class=\"line\">Successfully installed cocoapods-0.39.0</div><div class=\"line\">Parsing documentation for i18n-0.7.0</div><div class=\"line\">Installing ri documentation for i18n-0.7.0</div><div class=\"line\">Parsing documentation for thread_safe-0.3.5</div><div class=\"line\">Installing ri documentation for thread_safe-0.3.5</div><div class=\"line\">Parsing documentation for tzinfo-1.2.2</div><div class=\"line\">Installing ri documentation for tzinfo-1.2.2</div><div class=\"line\">Parsing documentation for minitest-5.8.4</div><div class=\"line\">Installing ri documentation for minitest-5.8.4</div><div class=\"line\">Parsing documentation for activesupport-4.2.6</div><div class=\"line\">unable to convert &quot;\\x84&quot; from ASCII-8BIT to UTF-8 for lib/active_support/values/unicode_tables.dat, skipping</div><div class=\"line\">Installing ri documentation for activesupport-4.2.6</div><div class=\"line\">Parsing documentation for nap-1.1.0</div><div class=\"line\">Installing ri documentation for nap-1.1.0</div><div class=\"line\">Parsing documentation for fuzzy_match-2.0.4</div><div class=\"line\">Installing ri documentation for fuzzy_match-2.0.4</div><div class=\"line\">Parsing documentation for cocoapods-core-0.39.0</div><div class=\"line\">Installing ri documentation for cocoapods-core-0.39.0</div><div class=\"line\">Parsing documentation for claide-0.9.1</div><div class=\"line\">Installing ri documentation for claide-0.9.1</div><div class=\"line\">Parsing documentation for colored-1.2</div><div class=\"line\">Installing ri documentation for colored-1.2</div><div class=\"line\">Parsing documentation for xcodeproj-0.28.2</div><div class=\"line\">Installing ri documentation for xcodeproj-0.28.2</div><div class=\"line\">Parsing documentation for cocoapods-downloader-0.9.3</div><div class=\"line\">Installing ri documentation for cocoapods-downloader-0.9.3</div><div class=\"line\">Parsing documentation for cocoapods-plugins-0.4.2</div><div class=\"line\">Installing ri documentation for cocoapods-plugins-0.4.2</div><div class=\"line\">Parsing documentation for cocoapods-search-0.1.0</div><div class=\"line\">Installing ri documentation for cocoapods-search-0.1.0</div><div class=\"line\">Parsing documentation for cocoapods-stats-0.6.2</div><div class=\"line\">Installing ri documentation for cocoapods-stats-0.6.2</div><div class=\"line\">Parsing documentation for cocoapods-try-0.5.1</div><div class=\"line\">Installing ri documentation for cocoapods-try-0.5.1</div><div class=\"line\">Parsing documentation for netrc-0.7.8</div><div class=\"line\">Installing ri documentation for netrc-0.7.8</div><div class=\"line\">Parsing documentation for cocoapods-trunk-0.6.4</div><div class=\"line\">Installing ri documentation for cocoapods-trunk-0.6.4</div><div class=\"line\">Parsing documentation for molinillo-0.4.4</div><div class=\"line\">Installing ri documentation for molinillo-0.4.4</div><div class=\"line\">Parsing documentation for escape-0.0.4</div><div class=\"line\">Installing ri documentation for escape-0.0.4</div><div class=\"line\">Parsing documentation for cocoapods-0.39.0</div><div class=\"line\">Installing ri documentation for cocoapods-0.39.0</div><div class=\"line\">21 gems installed</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>$ pod setup</p>\n<p>但是如果gem太老,可以使用命令升级 gem:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem update --system</div></pre></td></tr></table></figure></p>\n<p>另外，ruby 的软件源 <a href=\"https://rubygems.org\" target=\"_blank\" rel=\"external\">https://rubygems.org</a> 使用的是亚马逊的云服务，所以被墙了，<br>需要更新一下 ruby 的源，使用如下代码将官方的 ruby 源替换成国内淘宝的源：</p>\n<p>先移除现有<a href=\"https://rubygems.org源\" target=\"_blank\" rel=\"external\">https://rubygems.org源</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">appledeMac-mini:my-v2ex apple$ gem sources --remove https://rubygems.org/</div><div class=\"line\">https://rubygems.org/ removed from sources</div></pre></td></tr></table></figure></p>\n<p>添加淘宝源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">appledeMac-mini:my-v2ex apple$ gem sources -a https://ruby.taobao.org/</div></pre></td></tr></table></figure>\n<p>查看所有源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://ruby.taobao.org/ added to sources</div><div class=\"line\">appledeMac-mini:my-v2ex apple$ gem sources -l</div><div class=\"line\">*** CURRENT SOURCES ***</div><div class=\"line\"></div><div class=\"line\">https://ruby.taobao.org/</div></pre></td></tr></table></figure></p>\n<p>使用 CocoaPods</p>\n<p>使用时需要新建一个名为 Podfile 的文件，将依赖的库名字依次列在文件中即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">appledeMac-mini:my-v2ex apple$ vim Podfile </div><div class=\"line\"></div><div class=\"line\">platform:ios,&apos;8.0&apos;</div><div class=\"line\">inhibit_all_warnings!</div><div class=\"line\">use_frameworks!</div><div class=\"line\"></div><div class=\"line\">def pods</div><div class=\"line\">    pod &apos;SnapKit&apos;, &apos;~&gt; 0.18.0&apos;</div><div class=\"line\">    pod &apos;Alamofire&apos;, &apos;~&gt; 3.1.4&apos;</div><div class=\"line\">    pod &apos;ObjectMapper&apos;, &apos;~&gt; 1.1.1&apos;</div><div class=\"line\">    pod &apos;AlamofireObjectMapper&apos;, &apos;~&gt; 2.1.0&apos;</div><div class=\"line\">    pod &apos;Ji&apos;, &apos;~&gt; 1.2.0&apos;</div><div class=\"line\">    pod &apos;DrawerController&apos;, &apos;~&gt; 1.1.0&apos;</div><div class=\"line\">    pod &apos;Kingfisher&apos;, &apos;~&gt; 1.9.1&apos;</div><div class=\"line\">    pod &apos;KVOController&apos;, &apos;~&gt; 1.0.3&apos;</div><div class=\"line\">    pod &apos;YYText&apos;, &apos;~&gt; 0.9.18&apos;</div><div class=\"line\">    pod &apos;FXBlurView&apos;, &apos;~&gt; 1.6.4&apos;</div><div class=\"line\">    pod &apos;SVProgressHUD&apos;, &apos;~&gt; 1.1.3&apos;</div><div class=\"line\">    pod &apos;MJRefresh&apos;, &apos;~&gt; 3.1.0&apos;</div><div class=\"line\">    pod &apos;KeychainSwift&apos;, &apos;~&gt; 3.0.11&apos;</div><div class=\"line\">    pod &apos;INSImageView&apos;, &apos;~&gt; 0.1.5&apos;</div><div class=\"line\">    pod &apos;CXSwipeGestureRecognizer&apos;, &apos;~&gt; 1.0.2&apos;</div><div class=\"line\">    pod &apos;1PasswordExtension&apos;, &apos;~&gt; 1.8&apos;</div><div class=\"line\">    pod &apos;Shimmer&apos;, &apos;~&gt; 1.0.2&apos;</div><div class=\"line\">    pod &apos;Fabric&apos;</div><div class=\"line\">    pod &apos;Crashlytics&apos;</div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\">target &apos;my-v2ex&apos; do</div><div class=\"line\">    pods</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>然后将编辑好的 Podfile 文件放到项目根目录中，执行如下命令即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd &quot;your project home&quot;</div><div class=\"line\">pod install</div></pre></td></tr></table></figure></p>\n<p>现在，你的所有第三方库都已经下载完成并且设置好了编译参数和依赖，你只需要记住如下 2 点即可：<br>使用 CocoaPods 生成的 .xcworkspace 文件来打开工程，而不是以前的 .xcodeproj 文件。<br>每次更改了 Podfile 文件，你需要重新执行一次pod update命令。</p>\n<p>具体使用命令如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">Usage:</div><div class=\"line\"></div><div class=\"line\">    $ pod COMMAND</div><div class=\"line\"></div><div class=\"line\">      CocoaPods, the Cocoa library package manager.</div><div class=\"line\"></div><div class=\"line\">Commands:</div><div class=\"line\"></div><div class=\"line\">    + cache      Manipulate the CocoaPods cache</div><div class=\"line\">    + init       Generate a Podfile for the current directory.</div><div class=\"line\">    + install    Install project dependencies to Podfile.lock versions</div><div class=\"line\">    + ipc        Inter-process communication</div><div class=\"line\">    + lib        Develop pods</div><div class=\"line\">    + list       List pods</div><div class=\"line\">    + outdated   Show outdated project dependencies</div><div class=\"line\">    + plugins    Show available CocoaPods plugins</div><div class=\"line\">    + repo       Manage spec-repositories</div><div class=\"line\">    + search     Search for pods.</div><div class=\"line\">    + setup      Setup the CocoaPods environment</div><div class=\"line\">    + spec       Manage pod specs</div><div class=\"line\">    + trunk      Interact with the CocoaPods API (e.g. publishing new specs)</div><div class=\"line\">    + try        Try a Pod!</div><div class=\"line\">    + update     Update outdated project dependencies and create new</div><div class=\"line\">                 Podfile.lock</div><div class=\"line\"></div><div class=\"line\">Options:</div><div class=\"line\"></div><div class=\"line\">    --silent     Show nothing</div><div class=\"line\">    --version    Show the version of the tool</div><div class=\"line\">    --verbose    Show more debugging information</div><div class=\"line\">    --no-ansi    Show output without ANSI codes</div><div class=\"line\">    --help       Show help banner of specified command</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">appledeMac-mini:my-v2ex apple$ pod install</div><div class=\"line\">Updating local specs repositories</div><div class=\"line\"></div><div class=\"line\">CocoaPods 1.0.0.beta.6 is available.</div><div class=\"line\">To update use: `gem install cocoapods --pre`</div><div class=\"line\">[!] This is a test version we&apos;d love you to try.</div><div class=\"line\"></div><div class=\"line\">For more information see http://blog.cocoapods.org</div><div class=\"line\">and the CHANGELOG for this version http://git.io/BaH8pQ.</div><div class=\"line\"></div><div class=\"line\">Analyzing dependencies</div><div class=\"line\">Downloading dependencies</div><div class=\"line\">Installing 1PasswordExtension (1.8)</div><div class=\"line\">Installing Alamofire (3.1.5)</div><div class=\"line\">Installing AlamofireObjectMapper (2.1.0)</div><div class=\"line\">Installing CXSwipeGestureRecognizer (1.0.2)</div><div class=\"line\">Installing Crashlytics (3.7.0)</div><div class=\"line\">Installing DrawerController (1.1.0)</div><div class=\"line\">Installing FXBlurView (1.6.4)</div><div class=\"line\">Installing Fabric (1.6.7)</div><div class=\"line\">Installing INSImageView (0.1.6)</div><div class=\"line\"></div><div class=\"line\">Installing Ji (1.2.0)</div><div class=\"line\">Installing KVOController (1.0.3)</div><div class=\"line\">Installing KeychainSwift (3.0.11)</div><div class=\"line\">Installing Kingfisher (1.9.3)</div><div class=\"line\">Installing MJRefresh (3.1.0)</div><div class=\"line\">Installing ObjectMapper (1.1.5)</div><div class=\"line\">Installing SVProgressHUD (1.1.3)</div><div class=\"line\">Installing Shimmer (1.0.2)</div><div class=\"line\">^[[21~Installing SnapKit (0.18.0)</div><div class=\"line\">Installing YYText (0.9.19)</div><div class=\"line\">Generating Pods project</div><div class=\"line\">Integrating client project</div><div class=\"line\"></div><div class=\"line\">[!] Please close any current Xcode sessions and use `my-v2ex.xcworkspace` for this project from now on.</div><div class=\"line\">Sending stats</div><div class=\"line\">Pod installation complete! There are 19 dependencies from the Podfile and 19</div><div class=\"line\">total pods installed.</div></pre></td></tr></table></figure></p>\n<p>关于 Podfile.lock<br>执行pod install之后，除了 Podfile 外，CocoaPods 还会生成一个名为Podfile.lock的文件，Podfile.lock 应该加入到版本控制里面，不应该把这个文件加入到.gitignore中。因为Podfile.lock会锁定当前各依赖库的版本，之后如果多次执行pod install 不会更改版本，要pod update才会改Podfile.lock了。这样多人协作的时候，可以防止第三方库升级时造成大家各自的第三方库版本不一致。</p>\n<p>那些踩过的坑<br>1)<br>appledeMac-mini:my-v2ex apple$ pod install<br>Updating local specs repositories</p>\n<p>CocoaPods 1.0.0.beta.6 is available.<br>To update use: <code>gem install cocoapods --pre</code><br>[!] This is a test version we’d love you to try.</p>\n<p>For more information see <a href=\"http://blog.cocoapods.org\" target=\"_blank\" rel=\"external\">http://blog.cocoapods.org</a><br>and the CHANGELOG for this version <a href=\"http://git.io/BaH8pQ\" target=\"_blank\" rel=\"external\">http://git.io/BaH8pQ</a>.</p>\n<p>Analyzing dependencies<br>[!] Could not automatically select an Xcode project. Specify one in your Podfile like so:</p>\n<pre><code>xcodeproj &apos;path/to/Project.xcodeproj&apos;\n</code></pre><p>当把CocoaPods生成的workspace移动到上层目录时，需要改下Pods.xcconfig和工程里的一些设置<br>解决方法:<br>在Podfile文件里指定下工程目录<br>……<br>xcodeproj ‘my-v2ex/my-v2ex.xcodeproj’<br>……  </p>\n","excerpt":"","more":"<p>CocoaPods是什么？<br>CocoaPods应该是iOS的类库管理工具了，通过cocoaPods，只需要一行命令就可以完全解决包依赖问题，而且绝大部分有名的开源类库，都支持CocoaPods。</p>\n<p>官方网址:<a href=\"https://cocoapods.org/\">https://cocoapods.org/</a></p>\n<p>安装:<br>Mac 下都自带 ruby，使用 ruby 的 gem 命令即可下载安装：</p>\n<p>gem命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">appledeMac-mini:~ apple$ gem --help</div><div class=\"line\">RubyGems is a sophisticated package manager for Ruby.  This is a</div><div class=\"line\">basic help message containing pointers to more information.</div><div class=\"line\"></div><div class=\"line\">  Usage:</div><div class=\"line\">    gem -h/--help</div><div class=\"line\">    gem -v/--version</div><div class=\"line\">    gem command [arguments...] [options...]</div><div class=\"line\"></div><div class=\"line\">  Examples:</div><div class=\"line\">    gem install rake</div><div class=\"line\">    gem list --local</div><div class=\"line\">    gem build package.gemspec</div><div class=\"line\">    gem help install</div><div class=\"line\"></div><div class=\"line\">  Further help:</div><div class=\"line\">    gem help commands            list all &apos;gem&apos; commands</div><div class=\"line\">    gem help examples            show some examples of usage</div><div class=\"line\">    gem help platforms           show information about platforms</div><div class=\"line\">    gem help &lt;COMMAND&gt;           show help on COMMAND</div><div class=\"line\">                                   (e.g. &apos;gem help install&apos;)</div><div class=\"line\">    gem server                   present a web page at</div><div class=\"line\">                                 http://localhost:8808/</div><div class=\"line\">                                 with info about installed gems</div><div class=\"line\">  Further information:</div><div class=\"line\">    http://guides.rubygems.org</div><div class=\"line\"></div></pre></td></tr></table></figure>   \n<p>安装命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\">appledeMac-mini:~ apple$ sudo gem install cocoapods</div><div class=\"line\">Password:</div><div class=\"line\">Fetching: i18n-0.7.0.gem (100%)</div><div class=\"line\">Successfully installed i18n-0.7.0</div><div class=\"line\">Fetching: thread_safe-0.3.5.gem (100%)</div><div class=\"line\">Successfully installed thread_safe-0.3.5</div><div class=\"line\">Fetching: tzinfo-1.2.2.gem (100%)</div><div class=\"line\">Successfully installed tzinfo-1.2.2</div><div class=\"line\">Fetching: minitest-5.8.4.gem (100%)</div><div class=\"line\">Successfully installed minitest-5.8.4</div><div class=\"line\">Fetching: activesupport-4.2.6.gem (100%)</div><div class=\"line\">Successfully installed activesupport-4.2.6</div><div class=\"line\">Fetching: nap-1.1.0.gem (100%)</div><div class=\"line\">Successfully installed nap-1.1.0</div><div class=\"line\">Fetching: fuzzy_match-2.0.4.gem (100%)</div><div class=\"line\">Successfully installed fuzzy_match-2.0.4</div><div class=\"line\">Fetching: cocoapods-core-0.39.0.gem (100%)</div><div class=\"line\">Successfully installed cocoapods-core-0.39.0</div><div class=\"line\">Fetching: claide-0.9.1.gem (100%)</div><div class=\"line\">Successfully installed claide-0.9.1</div><div class=\"line\">Fetching: colored-1.2.gem (100%)</div><div class=\"line\">Successfully installed colored-1.2</div><div class=\"line\">Fetching: xcodeproj-0.28.2.gem (100%)</div><div class=\"line\">Successfully installed xcodeproj-0.28.2</div><div class=\"line\">Fetching: cocoapods-downloader-0.9.3.gem (100%)</div><div class=\"line\">Successfully installed cocoapods-downloader-0.9.3</div><div class=\"line\">Fetching: cocoapods-plugins-0.4.2.gem (100%)</div><div class=\"line\">Successfully installed cocoapods-plugins-0.4.2</div><div class=\"line\">Fetching: cocoapods-search-0.1.0.gem (100%)</div><div class=\"line\">Successfully installed cocoapods-search-0.1.0</div><div class=\"line\">Fetching: cocoapods-stats-0.6.2.gem (100%)</div><div class=\"line\">Successfully installed cocoapods-stats-0.6.2</div><div class=\"line\">Fetching: cocoapods-try-0.5.1.gem (100%)</div><div class=\"line\">Successfully installed cocoapods-try-0.5.1</div><div class=\"line\">Fetching: netrc-0.7.8.gem (100%)</div><div class=\"line\">Successfully installed netrc-0.7.8</div><div class=\"line\">Fetching: cocoapods-trunk-0.6.4.gem (100%)</div><div class=\"line\">Successfully installed cocoapods-trunk-0.6.4</div><div class=\"line\">Fetching: molinillo-0.4.4.gem (100%)</div><div class=\"line\">Successfully installed molinillo-0.4.4</div><div class=\"line\">Fetching: escape-0.0.4.gem (100%)</div><div class=\"line\">Successfully installed escape-0.0.4</div><div class=\"line\">Fetching: cocoapods-0.39.0.gem (100%)</div><div class=\"line\">Successfully installed cocoapods-0.39.0</div><div class=\"line\">Parsing documentation for i18n-0.7.0</div><div class=\"line\">Installing ri documentation for i18n-0.7.0</div><div class=\"line\">Parsing documentation for thread_safe-0.3.5</div><div class=\"line\">Installing ri documentation for thread_safe-0.3.5</div><div class=\"line\">Parsing documentation for tzinfo-1.2.2</div><div class=\"line\">Installing ri documentation for tzinfo-1.2.2</div><div class=\"line\">Parsing documentation for minitest-5.8.4</div><div class=\"line\">Installing ri documentation for minitest-5.8.4</div><div class=\"line\">Parsing documentation for activesupport-4.2.6</div><div class=\"line\">unable to convert &quot;\\x84&quot; from ASCII-8BIT to UTF-8 for lib/active_support/values/unicode_tables.dat, skipping</div><div class=\"line\">Installing ri documentation for activesupport-4.2.6</div><div class=\"line\">Parsing documentation for nap-1.1.0</div><div class=\"line\">Installing ri documentation for nap-1.1.0</div><div class=\"line\">Parsing documentation for fuzzy_match-2.0.4</div><div class=\"line\">Installing ri documentation for fuzzy_match-2.0.4</div><div class=\"line\">Parsing documentation for cocoapods-core-0.39.0</div><div class=\"line\">Installing ri documentation for cocoapods-core-0.39.0</div><div class=\"line\">Parsing documentation for claide-0.9.1</div><div class=\"line\">Installing ri documentation for claide-0.9.1</div><div class=\"line\">Parsing documentation for colored-1.2</div><div class=\"line\">Installing ri documentation for colored-1.2</div><div class=\"line\">Parsing documentation for xcodeproj-0.28.2</div><div class=\"line\">Installing ri documentation for xcodeproj-0.28.2</div><div class=\"line\">Parsing documentation for cocoapods-downloader-0.9.3</div><div class=\"line\">Installing ri documentation for cocoapods-downloader-0.9.3</div><div class=\"line\">Parsing documentation for cocoapods-plugins-0.4.2</div><div class=\"line\">Installing ri documentation for cocoapods-plugins-0.4.2</div><div class=\"line\">Parsing documentation for cocoapods-search-0.1.0</div><div class=\"line\">Installing ri documentation for cocoapods-search-0.1.0</div><div class=\"line\">Parsing documentation for cocoapods-stats-0.6.2</div><div class=\"line\">Installing ri documentation for cocoapods-stats-0.6.2</div><div class=\"line\">Parsing documentation for cocoapods-try-0.5.1</div><div class=\"line\">Installing ri documentation for cocoapods-try-0.5.1</div><div class=\"line\">Parsing documentation for netrc-0.7.8</div><div class=\"line\">Installing ri documentation for netrc-0.7.8</div><div class=\"line\">Parsing documentation for cocoapods-trunk-0.6.4</div><div class=\"line\">Installing ri documentation for cocoapods-trunk-0.6.4</div><div class=\"line\">Parsing documentation for molinillo-0.4.4</div><div class=\"line\">Installing ri documentation for molinillo-0.4.4</div><div class=\"line\">Parsing documentation for escape-0.0.4</div><div class=\"line\">Installing ri documentation for escape-0.0.4</div><div class=\"line\">Parsing documentation for cocoapods-0.39.0</div><div class=\"line\">Installing ri documentation for cocoapods-0.39.0</div><div class=\"line\">21 gems installed</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>$ pod setup</p>\n<p>但是如果gem太老,可以使用命令升级 gem:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem update --system</div></pre></td></tr></table></figure></p>\n<p>另外，ruby 的软件源 <a href=\"https://rubygems.org\">https://rubygems.org</a> 使用的是亚马逊的云服务，所以被墙了，<br>需要更新一下 ruby 的源，使用如下代码将官方的 ruby 源替换成国内淘宝的源：</p>\n<p>先移除现有<a href=\"https://rubygems.org源\">https://rubygems.org源</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">appledeMac-mini:my-v2ex apple$ gem sources --remove https://rubygems.org/</div><div class=\"line\">https://rubygems.org/ removed from sources</div></pre></td></tr></table></figure></p>\n<p>添加淘宝源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">appledeMac-mini:my-v2ex apple$ gem sources -a https://ruby.taobao.org/</div></pre></td></tr></table></figure>\n<p>查看所有源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://ruby.taobao.org/ added to sources</div><div class=\"line\">appledeMac-mini:my-v2ex apple$ gem sources -l</div><div class=\"line\">*** CURRENT SOURCES ***</div><div class=\"line\"></div><div class=\"line\">https://ruby.taobao.org/</div></pre></td></tr></table></figure></p>\n<p>使用 CocoaPods</p>\n<p>使用时需要新建一个名为 Podfile 的文件，将依赖的库名字依次列在文件中即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">appledeMac-mini:my-v2ex apple$ vim Podfile </div><div class=\"line\"></div><div class=\"line\">platform:ios,&apos;8.0&apos;</div><div class=\"line\">inhibit_all_warnings!</div><div class=\"line\">use_frameworks!</div><div class=\"line\"></div><div class=\"line\">def pods</div><div class=\"line\">    pod &apos;SnapKit&apos;, &apos;~&gt; 0.18.0&apos;</div><div class=\"line\">    pod &apos;Alamofire&apos;, &apos;~&gt; 3.1.4&apos;</div><div class=\"line\">    pod &apos;ObjectMapper&apos;, &apos;~&gt; 1.1.1&apos;</div><div class=\"line\">    pod &apos;AlamofireObjectMapper&apos;, &apos;~&gt; 2.1.0&apos;</div><div class=\"line\">    pod &apos;Ji&apos;, &apos;~&gt; 1.2.0&apos;</div><div class=\"line\">    pod &apos;DrawerController&apos;, &apos;~&gt; 1.1.0&apos;</div><div class=\"line\">    pod &apos;Kingfisher&apos;, &apos;~&gt; 1.9.1&apos;</div><div class=\"line\">    pod &apos;KVOController&apos;, &apos;~&gt; 1.0.3&apos;</div><div class=\"line\">    pod &apos;YYText&apos;, &apos;~&gt; 0.9.18&apos;</div><div class=\"line\">    pod &apos;FXBlurView&apos;, &apos;~&gt; 1.6.4&apos;</div><div class=\"line\">    pod &apos;SVProgressHUD&apos;, &apos;~&gt; 1.1.3&apos;</div><div class=\"line\">    pod &apos;MJRefresh&apos;, &apos;~&gt; 3.1.0&apos;</div><div class=\"line\">    pod &apos;KeychainSwift&apos;, &apos;~&gt; 3.0.11&apos;</div><div class=\"line\">    pod &apos;INSImageView&apos;, &apos;~&gt; 0.1.5&apos;</div><div class=\"line\">    pod &apos;CXSwipeGestureRecognizer&apos;, &apos;~&gt; 1.0.2&apos;</div><div class=\"line\">    pod &apos;1PasswordExtension&apos;, &apos;~&gt; 1.8&apos;</div><div class=\"line\">    pod &apos;Shimmer&apos;, &apos;~&gt; 1.0.2&apos;</div><div class=\"line\">    pod &apos;Fabric&apos;</div><div class=\"line\">    pod &apos;Crashlytics&apos;</div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\">target &apos;my-v2ex&apos; do</div><div class=\"line\">    pods</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>然后将编辑好的 Podfile 文件放到项目根目录中，执行如下命令即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd &quot;your project home&quot;</div><div class=\"line\">pod install</div></pre></td></tr></table></figure></p>\n<p>现在，你的所有第三方库都已经下载完成并且设置好了编译参数和依赖，你只需要记住如下 2 点即可：<br>使用 CocoaPods 生成的 .xcworkspace 文件来打开工程，而不是以前的 .xcodeproj 文件。<br>每次更改了 Podfile 文件，你需要重新执行一次pod update命令。</p>\n<p>具体使用命令如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">Usage:</div><div class=\"line\"></div><div class=\"line\">    $ pod COMMAND</div><div class=\"line\"></div><div class=\"line\">      CocoaPods, the Cocoa library package manager.</div><div class=\"line\"></div><div class=\"line\">Commands:</div><div class=\"line\"></div><div class=\"line\">    + cache      Manipulate the CocoaPods cache</div><div class=\"line\">    + init       Generate a Podfile for the current directory.</div><div class=\"line\">    + install    Install project dependencies to Podfile.lock versions</div><div class=\"line\">    + ipc        Inter-process communication</div><div class=\"line\">    + lib        Develop pods</div><div class=\"line\">    + list       List pods</div><div class=\"line\">    + outdated   Show outdated project dependencies</div><div class=\"line\">    + plugins    Show available CocoaPods plugins</div><div class=\"line\">    + repo       Manage spec-repositories</div><div class=\"line\">    + search     Search for pods.</div><div class=\"line\">    + setup      Setup the CocoaPods environment</div><div class=\"line\">    + spec       Manage pod specs</div><div class=\"line\">    + trunk      Interact with the CocoaPods API (e.g. publishing new specs)</div><div class=\"line\">    + try        Try a Pod!</div><div class=\"line\">    + update     Update outdated project dependencies and create new</div><div class=\"line\">                 Podfile.lock</div><div class=\"line\"></div><div class=\"line\">Options:</div><div class=\"line\"></div><div class=\"line\">    --silent     Show nothing</div><div class=\"line\">    --version    Show the version of the tool</div><div class=\"line\">    --verbose    Show more debugging information</div><div class=\"line\">    --no-ansi    Show output without ANSI codes</div><div class=\"line\">    --help       Show help banner of specified command</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">appledeMac-mini:my-v2ex apple$ pod install</div><div class=\"line\">Updating local specs repositories</div><div class=\"line\"></div><div class=\"line\">CocoaPods 1.0.0.beta.6 is available.</div><div class=\"line\">To update use: `gem install cocoapods --pre`</div><div class=\"line\">[!] This is a test version we&apos;d love you to try.</div><div class=\"line\"></div><div class=\"line\">For more information see http://blog.cocoapods.org</div><div class=\"line\">and the CHANGELOG for this version http://git.io/BaH8pQ.</div><div class=\"line\"></div><div class=\"line\">Analyzing dependencies</div><div class=\"line\">Downloading dependencies</div><div class=\"line\">Installing 1PasswordExtension (1.8)</div><div class=\"line\">Installing Alamofire (3.1.5)</div><div class=\"line\">Installing AlamofireObjectMapper (2.1.0)</div><div class=\"line\">Installing CXSwipeGestureRecognizer (1.0.2)</div><div class=\"line\">Installing Crashlytics (3.7.0)</div><div class=\"line\">Installing DrawerController (1.1.0)</div><div class=\"line\">Installing FXBlurView (1.6.4)</div><div class=\"line\">Installing Fabric (1.6.7)</div><div class=\"line\">Installing INSImageView (0.1.6)</div><div class=\"line\"></div><div class=\"line\">Installing Ji (1.2.0)</div><div class=\"line\">Installing KVOController (1.0.3)</div><div class=\"line\">Installing KeychainSwift (3.0.11)</div><div class=\"line\">Installing Kingfisher (1.9.3)</div><div class=\"line\">Installing MJRefresh (3.1.0)</div><div class=\"line\">Installing ObjectMapper (1.1.5)</div><div class=\"line\">Installing SVProgressHUD (1.1.3)</div><div class=\"line\">Installing Shimmer (1.0.2)</div><div class=\"line\">^[[21~Installing SnapKit (0.18.0)</div><div class=\"line\">Installing YYText (0.9.19)</div><div class=\"line\">Generating Pods project</div><div class=\"line\">Integrating client project</div><div class=\"line\"></div><div class=\"line\">[!] Please close any current Xcode sessions and use `my-v2ex.xcworkspace` for this project from now on.</div><div class=\"line\">Sending stats</div><div class=\"line\">Pod installation complete! There are 19 dependencies from the Podfile and 19</div><div class=\"line\">total pods installed.</div></pre></td></tr></table></figure></p>\n<p>关于 Podfile.lock<br>执行pod install之后，除了 Podfile 外，CocoaPods 还会生成一个名为Podfile.lock的文件，Podfile.lock 应该加入到版本控制里面，不应该把这个文件加入到.gitignore中。因为Podfile.lock会锁定当前各依赖库的版本，之后如果多次执行pod install 不会更改版本，要pod update才会改Podfile.lock了。这样多人协作的时候，可以防止第三方库升级时造成大家各自的第三方库版本不一致。</p>\n<p>那些踩过的坑<br>1)<br>appledeMac-mini:my-v2ex apple$ pod install<br>Updating local specs repositories</p>\n<p>CocoaPods 1.0.0.beta.6 is available.<br>To update use: <code>gem install cocoapods --pre</code><br>[!] This is a test version we’d love you to try.</p>\n<p>For more information see <a href=\"http://blog.cocoapods.org\">http://blog.cocoapods.org</a><br>and the CHANGELOG for this version <a href=\"http://git.io/BaH8pQ\">http://git.io/BaH8pQ</a>.</p>\n<p>Analyzing dependencies<br>[!] Could not automatically select an Xcode project. Specify one in your Podfile like so:</p>\n<pre><code>xcodeproj &apos;path/to/Project.xcodeproj&apos;\n</code></pre><p>当把CocoaPods生成的workspace移动到上层目录时，需要改下Pods.xcconfig和工程里的一些设置<br>解决方法:<br>在Podfile文件里指定下工程目录<br>……<br>xcodeproj ‘my-v2ex/my-v2ex.xcodeproj’<br>……  </p>\n"},{"title":"Homebrew-Mac下的包管理工具","date":"2016-09-20T09:28:13.000Z","_content":"Homebrew是一款自由及开放源代码的软件包管理系统，用以简化Mac OS X系统上的软件安装过程,使用GitHub仓库的用户贡献扩大对软件包的支持。\nHomebrew以Ruby语言写成，针对于Mac OS X操作系统自带Ruby的版本。默认安装在/usr/local，由一个核心git版本库构成，以使用户能更新Homebrew。包管理器使用一种称为“公式”（formula）的DSL脚本来管理依赖、下载源代码及配置和编译软件，从源代码中构建软件。称为“瓶”（bottle）的二进制包是用默认选项预编译好的公式\n\n安装：\n安装非常简单，用系统自带ruby就可以了。\n项目地址：https://github.com/Homebrew/brew\n{% codeblock %}\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n{% endcodeblock %}\n\n默认安装的路径为：\nHOMEBREW_REPOSITORY: /usr/local/Homebrew\n\n默认的安装的软件包路径为：\nHOMEBREW_CELLAR: /usr/local/Cellar\n\n可以改变这环境变量\n\nexport HOMEBREW_CELLAR= /usr/local/Cellar\n\n\n使用：\n\n  brew search [TEXT|/REGEX/]  搜索软件包\n  brew (info|home|options) [FORMULA...] 查看软件包内容信息\n  brew install FORMULA...\t安装软件包\n  brew update\t更新Homebrew\n  brew upgrade [FORMULA...]\t 升级软件包，第三个参数可以指定升级的软件包，默认升级所有\n  brew uninstall FORMULA...\t卸载软件包\n  brew list [FORMULA...]\t查看已安装的软件包\n\nTroubleshooting:\n  brew config\t\t配置信息\n  brew doctor\t\t诊断\n  brew install -vd FORMULA\n\nDevelopers:\n  brew create [URL [--no-fetch]]\n  brew edit [FORMULA...]\n  https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Formula-Cookbook.md\n\nFurther help:\n  man brew\n  brew help [COMMAND]\n  brew home\n\nTap:\nrew tap:\n    List all installed taps.\n\nbrew tap [--full] user/repo [URL]:\n    Tap a formula repository.\n\n    With URL unspecified, taps a formula repository from GitHub using HTTPS.\n    Since so many taps are hosted on GitHub, this command is a shortcut for\n    tap user/repo https://github.com/user/homebrew-repo.\n\n    With URL specified, taps a formula repository from anywhere, using\n    any transport protocol that git handles. The one-argument form of tap\n    simplifies but also limits. This two-argument command makes no\n    assumptions, so taps can be cloned from places other than GitHub and\n    using protocols other than HTTPS, e.g., SSH, GIT, HTTP, FTP(S), RSYNC.\n\n    By default, the repository is cloned as a shallow copy (--depth=1), but\n    if --full is passed, a full clone will be used. To convert a shallow copy\n    to a full copy, you can retap passing --full without first untapping.\n\n    tap is re-runnable and exits successfully if there's nothing to do.\n    However, retapping with a different URL will cause an exception, so first\n    untap if you need to modify the URL.\n\nbrew tap --repair:\n    Migrate tapped formulae from symlink-based to directory-based structure.\n\nbrew tap --list-official:\n    List all official taps.\n\nbrew tap --list-pinned:\n    List all pinned taps.\n\n\nHomebrew Cask:\n\n它是对已经编译好了的应用包 （.dmg/.pkg），仅仅是下载解压，放在统一的目录中，并链接到appliction目录，省掉了自己去下载、解压、拖拽（安装）等步骤，同样，卸载相当容易与干净。\n\n项目地址：https://github.com/caskroom/homebrew-cask\n\n通过 homebrew cask 来安装 app，首先是安装\n\nbrew tap caskroom/cask && brew install brew-cask\n\n使用：\n\nCommands:\n\n    audit                  verifies installability of Casks\n    cat                    dump raw source of the given Cask to the standard output\n    cleanup                清除下载的缓存文件\n    create                 creates the given Cask and opens it in an editor\n    doctor                 诊断\n    edit                   edits the given Cask\n    fetch                  下载软件包到本地，但不安装\n    home                   打开官方网站\n    info                   显示软件包信息\n    install                安装软件包\n    list                   查看已安装的如阿年包\n    search                 搜索软件包\n    style                  checks Cask style using RuboCop(代码风格检查器),首次使用会先安装 rubocop-cask\n    uninstall              卸载软件包\n    update                 更新，等同于brew update\n    zap                    zaps all files associated with the given Cask\n\nSee also \"man brew-cask\"\n\n默认配置信息为：\n==> Homebrew-Cask Staging Location:\n/usr/local/Homebrew/Caskroom\n==> Homebrew-Cask Cached Downloads:\n/Users/cayley/Library/Caches/Homebrew/Cask\n3 files, 119.2M (warning: run \"brew cask cleanup\")\n==> Homebrew-Cask Default Tap Path:\n/usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask\n==> Homebrew-Cask Alternate Cask Taps:\n/usr/local/Homebrew/Library/Taps/caskroom/homebrew-versions\n\n也可以对这些配置进行修改：\n例如：\n\nexport HOMEBREW_CASK_OPTS=\"--appdir=/Applications --caskroom=/usr/local/Homebrew/Caskroom\"\n\n#将这个配置加入到.zchrc或者.bash_profile中\n \n #生效\n source ~/.zchrc\n\n\nCaskbrew：\n如果你不熟悉终端命令，可以下载cakebrew，它是homebrew的客户端，可以实现常用的搜索、安装、卸载操作\n官网下载安装\n\nhttps://www.cakebrew.com\n\n安装：\n{% codeblock %}\nbrew cask install cakebrew\n{% endcodeblock %}\n\n问题：\n\n看官方https://github.com/Homebrew/brew/blob/master/docs/Common-Issues.md  \n\n常用安装包历史记录下：\n                            \nbrew cask install google-chrome \n\nbrew cask install iterm2\n\nbrew cask install navicat-for-mysql\n\nbrew cask install  shadowsocksx\n\nbrew cask install phpstorm (ps:http://idea.qinxi1992.cn/)\n\nbrew cask install docker\n\nbrew cask install sublime-text\n\nbrew cask install virtualbox\n\n","source":"_posts/Homebrew-Mac下的包管理工具.md","raw":"---\ntitle: Homebrew-Mac下的包管理工具\ndate: 2016-09-20 17:28:13\ntags:\n---\nHomebrew是一款自由及开放源代码的软件包管理系统，用以简化Mac OS X系统上的软件安装过程,使用GitHub仓库的用户贡献扩大对软件包的支持。\nHomebrew以Ruby语言写成，针对于Mac OS X操作系统自带Ruby的版本。默认安装在/usr/local，由一个核心git版本库构成，以使用户能更新Homebrew。包管理器使用一种称为“公式”（formula）的DSL脚本来管理依赖、下载源代码及配置和编译软件，从源代码中构建软件。称为“瓶”（bottle）的二进制包是用默认选项预编译好的公式\n\n安装：\n安装非常简单，用系统自带ruby就可以了。\n项目地址：https://github.com/Homebrew/brew\n{% codeblock %}\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n{% endcodeblock %}\n\n默认安装的路径为：\nHOMEBREW_REPOSITORY: /usr/local/Homebrew\n\n默认的安装的软件包路径为：\nHOMEBREW_CELLAR: /usr/local/Cellar\n\n可以改变这环境变量\n\nexport HOMEBREW_CELLAR= /usr/local/Cellar\n\n\n使用：\n\n  brew search [TEXT|/REGEX/]  搜索软件包\n  brew (info|home|options) [FORMULA...] 查看软件包内容信息\n  brew install FORMULA...\t安装软件包\n  brew update\t更新Homebrew\n  brew upgrade [FORMULA...]\t 升级软件包，第三个参数可以指定升级的软件包，默认升级所有\n  brew uninstall FORMULA...\t卸载软件包\n  brew list [FORMULA...]\t查看已安装的软件包\n\nTroubleshooting:\n  brew config\t\t配置信息\n  brew doctor\t\t诊断\n  brew install -vd FORMULA\n\nDevelopers:\n  brew create [URL [--no-fetch]]\n  brew edit [FORMULA...]\n  https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Formula-Cookbook.md\n\nFurther help:\n  man brew\n  brew help [COMMAND]\n  brew home\n\nTap:\nrew tap:\n    List all installed taps.\n\nbrew tap [--full] user/repo [URL]:\n    Tap a formula repository.\n\n    With URL unspecified, taps a formula repository from GitHub using HTTPS.\n    Since so many taps are hosted on GitHub, this command is a shortcut for\n    tap user/repo https://github.com/user/homebrew-repo.\n\n    With URL specified, taps a formula repository from anywhere, using\n    any transport protocol that git handles. The one-argument form of tap\n    simplifies but also limits. This two-argument command makes no\n    assumptions, so taps can be cloned from places other than GitHub and\n    using protocols other than HTTPS, e.g., SSH, GIT, HTTP, FTP(S), RSYNC.\n\n    By default, the repository is cloned as a shallow copy (--depth=1), but\n    if --full is passed, a full clone will be used. To convert a shallow copy\n    to a full copy, you can retap passing --full without first untapping.\n\n    tap is re-runnable and exits successfully if there's nothing to do.\n    However, retapping with a different URL will cause an exception, so first\n    untap if you need to modify the URL.\n\nbrew tap --repair:\n    Migrate tapped formulae from symlink-based to directory-based structure.\n\nbrew tap --list-official:\n    List all official taps.\n\nbrew tap --list-pinned:\n    List all pinned taps.\n\n\nHomebrew Cask:\n\n它是对已经编译好了的应用包 （.dmg/.pkg），仅仅是下载解压，放在统一的目录中，并链接到appliction目录，省掉了自己去下载、解压、拖拽（安装）等步骤，同样，卸载相当容易与干净。\n\n项目地址：https://github.com/caskroom/homebrew-cask\n\n通过 homebrew cask 来安装 app，首先是安装\n\nbrew tap caskroom/cask && brew install brew-cask\n\n使用：\n\nCommands:\n\n    audit                  verifies installability of Casks\n    cat                    dump raw source of the given Cask to the standard output\n    cleanup                清除下载的缓存文件\n    create                 creates the given Cask and opens it in an editor\n    doctor                 诊断\n    edit                   edits the given Cask\n    fetch                  下载软件包到本地，但不安装\n    home                   打开官方网站\n    info                   显示软件包信息\n    install                安装软件包\n    list                   查看已安装的如阿年包\n    search                 搜索软件包\n    style                  checks Cask style using RuboCop(代码风格检查器),首次使用会先安装 rubocop-cask\n    uninstall              卸载软件包\n    update                 更新，等同于brew update\n    zap                    zaps all files associated with the given Cask\n\nSee also \"man brew-cask\"\n\n默认配置信息为：\n==> Homebrew-Cask Staging Location:\n/usr/local/Homebrew/Caskroom\n==> Homebrew-Cask Cached Downloads:\n/Users/cayley/Library/Caches/Homebrew/Cask\n3 files, 119.2M (warning: run \"brew cask cleanup\")\n==> Homebrew-Cask Default Tap Path:\n/usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask\n==> Homebrew-Cask Alternate Cask Taps:\n/usr/local/Homebrew/Library/Taps/caskroom/homebrew-versions\n\n也可以对这些配置进行修改：\n例如：\n\nexport HOMEBREW_CASK_OPTS=\"--appdir=/Applications --caskroom=/usr/local/Homebrew/Caskroom\"\n\n#将这个配置加入到.zchrc或者.bash_profile中\n \n #生效\n source ~/.zchrc\n\n\nCaskbrew：\n如果你不熟悉终端命令，可以下载cakebrew，它是homebrew的客户端，可以实现常用的搜索、安装、卸载操作\n官网下载安装\n\nhttps://www.cakebrew.com\n\n安装：\n{% codeblock %}\nbrew cask install cakebrew\n{% endcodeblock %}\n\n问题：\n\n看官方https://github.com/Homebrew/brew/blob/master/docs/Common-Issues.md  \n\n常用安装包历史记录下：\n                            \nbrew cask install google-chrome \n\nbrew cask install iterm2\n\nbrew cask install navicat-for-mysql\n\nbrew cask install  shadowsocksx\n\nbrew cask install phpstorm (ps:http://idea.qinxi1992.cn/)\n\nbrew cask install docker\n\nbrew cask install sublime-text\n\nbrew cask install virtualbox\n\n","slug":"Homebrew-Mac下的包管理工具","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeieku0001znz4vzknk2n4","content":"<p>Homebrew是一款自由及开放源代码的软件包管理系统，用以简化Mac OS X系统上的软件安装过程,使用GitHub仓库的用户贡献扩大对软件包的支持。<br>Homebrew以Ruby语言写成，针对于Mac OS X操作系统自带Ruby的版本。默认安装在/usr/local，由一个核心git版本库构成，以使用户能更新Homebrew。包管理器使用一种称为“公式”（formula）的DSL脚本来管理依赖、下载源代码及配置和编译软件，从源代码中构建软件。称为“瓶”（bottle）的二进制包是用默认选项预编译好的公式</p>\n<p>安装：<br>安装非常简单，用系统自带ruby就可以了。<br>项目地址：<a href=\"https://github.com/Homebrew/brew\" target=\"_blank\" rel=\"external\">https://github.com/Homebrew/brew</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure></p>\n<p>默认安装的路径为：<br>HOMEBREW_REPOSITORY: /usr/local/Homebrew</p>\n<p>默认的安装的软件包路径为：<br>HOMEBREW_CELLAR: /usr/local/Cellar</p>\n<p>可以改变这环境变量</p>\n<p>export HOMEBREW_CELLAR= /usr/local/Cellar</p>\n<p>使用：</p>\n<p>  brew search [TEXT|/REGEX/]  搜索软件包<br>  brew (info|home|options) [FORMULA…] 查看软件包内容信息<br>  brew install FORMULA…    安装软件包<br>  brew update    更新Homebrew<br>  brew upgrade [FORMULA…]     升级软件包，第三个参数可以指定升级的软件包，默认升级所有<br>  brew uninstall FORMULA…    卸载软件包<br>  brew list [FORMULA…]    查看已安装的软件包</p>\n<p>Troubleshooting:<br>  brew config        配置信息<br>  brew doctor        诊断<br>  brew install -vd FORMULA</p>\n<p>Developers:<br>  brew create [URL [–no-fetch]]<br>  brew edit [FORMULA…]<br>  <a href=\"https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Formula-Cookbook.md\" target=\"_blank\" rel=\"external\">https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Formula-Cookbook.md</a></p>\n<p>Further help:<br>  man brew<br>  brew help [COMMAND]<br>  brew home</p>\n<p>Tap:<br>rew tap:<br>    List all installed taps.</p>\n<p>brew tap [–full] user/repo [URL]:<br>    Tap a formula repository.</p>\n<pre><code>With URL unspecified, taps a formula repository from GitHub using HTTPS.\nSince so many taps are hosted on GitHub, this command is a shortcut for\ntap user/repo https://github.com/user/homebrew-repo.\n\nWith URL specified, taps a formula repository from anywhere, using\nany transport protocol that git handles. The one-argument form of tap\nsimplifies but also limits. This two-argument command makes no\nassumptions, so taps can be cloned from places other than GitHub and\nusing protocols other than HTTPS, e.g., SSH, GIT, HTTP, FTP(S), RSYNC.\n\nBy default, the repository is cloned as a shallow copy (--depth=1), but\nif --full is passed, a full clone will be used. To convert a shallow copy\nto a full copy, you can retap passing --full without first untapping.\n\ntap is re-runnable and exits successfully if there&apos;s nothing to do.\nHowever, retapping with a different URL will cause an exception, so first\nuntap if you need to modify the URL.\n</code></pre><p>brew tap –repair:<br>    Migrate tapped formulae from symlink-based to directory-based structure.</p>\n<p>brew tap –list-official:<br>    List all official taps.</p>\n<p>brew tap –list-pinned:<br>    List all pinned taps.</p>\n<p>Homebrew Cask:</p>\n<p>它是对已经编译好了的应用包 （.dmg/.pkg），仅仅是下载解压，放在统一的目录中，并链接到appliction目录，省掉了自己去下载、解压、拖拽（安装）等步骤，同样，卸载相当容易与干净。</p>\n<p>项目地址：<a href=\"https://github.com/caskroom/homebrew-cask\" target=\"_blank\" rel=\"external\">https://github.com/caskroom/homebrew-cask</a></p>\n<p>通过 homebrew cask 来安装 app，首先是安装</p>\n<p>brew tap caskroom/cask &amp;&amp; brew install brew-cask</p>\n<p>使用：</p>\n<p>Commands:</p>\n<pre><code>audit                  verifies installability of Casks\ncat                    dump raw source of the given Cask to the standard output\ncleanup                清除下载的缓存文件\ncreate                 creates the given Cask and opens it in an editor\ndoctor                 诊断\nedit                   edits the given Cask\nfetch                  下载软件包到本地，但不安装\nhome                   打开官方网站\ninfo                   显示软件包信息\ninstall                安装软件包\nlist                   查看已安装的如阿年包\nsearch                 搜索软件包\nstyle                  checks Cask style using RuboCop(代码风格检查器),首次使用会先安装 rubocop-cask\nuninstall              卸载软件包\nupdate                 更新，等同于brew update\nzap                    zaps all files associated with the given Cask\n</code></pre><p>See also “man brew-cask”</p>\n<p>默认配置信息为：<br>==&gt; Homebrew-Cask Staging Location:<br>/usr/local/Homebrew/Caskroom<br>==&gt; Homebrew-Cask Cached Downloads:<br>/Users/cayley/Library/Caches/Homebrew/Cask<br>3 files, 119.2M (warning: run “brew cask cleanup”)<br>==&gt; Homebrew-Cask Default Tap Path:<br>/usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask<br>==&gt; Homebrew-Cask Alternate Cask Taps:<br>/usr/local/Homebrew/Library/Taps/caskroom/homebrew-versions</p>\n<p>也可以对这些配置进行修改：<br>例如：</p>\n<p>export HOMEBREW_CASK_OPTS=”–appdir=/Applications –caskroom=/usr/local/Homebrew/Caskroom”</p>\n<p>#将这个配置加入到.zchrc或者.bash_profile中</p>\n<p> #生效<br> source ~/.zchrc</p>\n<p>Caskbrew：<br>如果你不熟悉终端命令，可以下载cakebrew，它是homebrew的客户端，可以实现常用的搜索、安装、卸载操作<br>官网下载安装</p>\n<p><a href=\"https://www.cakebrew.com\" target=\"_blank\" rel=\"external\">https://www.cakebrew.com</a></p>\n<p>安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install cakebrew</div></pre></td></tr></table></figure></p>\n<p>问题：</p>\n<p>看官方<a href=\"https://github.com/Homebrew/brew/blob/master/docs/Common-Issues.md\" target=\"_blank\" rel=\"external\">https://github.com/Homebrew/brew/blob/master/docs/Common-Issues.md</a>  </p>\n<p>常用安装包历史记录下：</p>\n<p>brew cask install google-chrome </p>\n<p>brew cask install iterm2</p>\n<p>brew cask install navicat-for-mysql</p>\n<p>brew cask install  shadowsocksx</p>\n<p>brew cask install phpstorm (ps:<a href=\"http://idea.qinxi1992.cn/\" target=\"_blank\" rel=\"external\">http://idea.qinxi1992.cn/</a>)</p>\n<p>brew cask install docker</p>\n<p>brew cask install sublime-text</p>\n<p>brew cask install virtualbox</p>\n","excerpt":"","more":"<p>Homebrew是一款自由及开放源代码的软件包管理系统，用以简化Mac OS X系统上的软件安装过程,使用GitHub仓库的用户贡献扩大对软件包的支持。<br>Homebrew以Ruby语言写成，针对于Mac OS X操作系统自带Ruby的版本。默认安装在/usr/local，由一个核心git版本库构成，以使用户能更新Homebrew。包管理器使用一种称为“公式”（formula）的DSL脚本来管理依赖、下载源代码及配置和编译软件，从源代码中构建软件。称为“瓶”（bottle）的二进制包是用默认选项预编译好的公式</p>\n<p>安装：<br>安装非常简单，用系统自带ruby就可以了。<br>项目地址：<a href=\"https://github.com/Homebrew/brew\">https://github.com/Homebrew/brew</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure></p>\n<p>默认安装的路径为：<br>HOMEBREW_REPOSITORY: /usr/local/Homebrew</p>\n<p>默认的安装的软件包路径为：<br>HOMEBREW_CELLAR: /usr/local/Cellar</p>\n<p>可以改变这环境变量</p>\n<p>export HOMEBREW_CELLAR= /usr/local/Cellar</p>\n<p>使用：</p>\n<p>  brew search [TEXT|/REGEX/]  搜索软件包<br>  brew (info|home|options) [FORMULA…] 查看软件包内容信息<br>  brew install FORMULA…    安装软件包<br>  brew update    更新Homebrew<br>  brew upgrade [FORMULA…]     升级软件包，第三个参数可以指定升级的软件包，默认升级所有<br>  brew uninstall FORMULA…    卸载软件包<br>  brew list [FORMULA…]    查看已安装的软件包</p>\n<p>Troubleshooting:<br>  brew config        配置信息<br>  brew doctor        诊断<br>  brew install -vd FORMULA</p>\n<p>Developers:<br>  brew create [URL [–no-fetch]]<br>  brew edit [FORMULA…]<br>  <a href=\"https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Formula-Cookbook.md\">https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Formula-Cookbook.md</a></p>\n<p>Further help:<br>  man brew<br>  brew help [COMMAND]<br>  brew home</p>\n<p>Tap:<br>rew tap:<br>    List all installed taps.</p>\n<p>brew tap [–full] user/repo [URL]:<br>    Tap a formula repository.</p>\n<pre><code>With URL unspecified, taps a formula repository from GitHub using HTTPS.\nSince so many taps are hosted on GitHub, this command is a shortcut for\ntap user/repo https://github.com/user/homebrew-repo.\n\nWith URL specified, taps a formula repository from anywhere, using\nany transport protocol that git handles. The one-argument form of tap\nsimplifies but also limits. This two-argument command makes no\nassumptions, so taps can be cloned from places other than GitHub and\nusing protocols other than HTTPS, e.g., SSH, GIT, HTTP, FTP(S), RSYNC.\n\nBy default, the repository is cloned as a shallow copy (--depth=1), but\nif --full is passed, a full clone will be used. To convert a shallow copy\nto a full copy, you can retap passing --full without first untapping.\n\ntap is re-runnable and exits successfully if there&apos;s nothing to do.\nHowever, retapping with a different URL will cause an exception, so first\nuntap if you need to modify the URL.\n</code></pre><p>brew tap –repair:<br>    Migrate tapped formulae from symlink-based to directory-based structure.</p>\n<p>brew tap –list-official:<br>    List all official taps.</p>\n<p>brew tap –list-pinned:<br>    List all pinned taps.</p>\n<p>Homebrew Cask:</p>\n<p>它是对已经编译好了的应用包 （.dmg/.pkg），仅仅是下载解压，放在统一的目录中，并链接到appliction目录，省掉了自己去下载、解压、拖拽（安装）等步骤，同样，卸载相当容易与干净。</p>\n<p>项目地址：<a href=\"https://github.com/caskroom/homebrew-cask\">https://github.com/caskroom/homebrew-cask</a></p>\n<p>通过 homebrew cask 来安装 app，首先是安装</p>\n<p>brew tap caskroom/cask &amp;&amp; brew install brew-cask</p>\n<p>使用：</p>\n<p>Commands:</p>\n<pre><code>audit                  verifies installability of Casks\ncat                    dump raw source of the given Cask to the standard output\ncleanup                清除下载的缓存文件\ncreate                 creates the given Cask and opens it in an editor\ndoctor                 诊断\nedit                   edits the given Cask\nfetch                  下载软件包到本地，但不安装\nhome                   打开官方网站\ninfo                   显示软件包信息\ninstall                安装软件包\nlist                   查看已安装的如阿年包\nsearch                 搜索软件包\nstyle                  checks Cask style using RuboCop(代码风格检查器),首次使用会先安装 rubocop-cask\nuninstall              卸载软件包\nupdate                 更新，等同于brew update\nzap                    zaps all files associated with the given Cask\n</code></pre><p>See also “man brew-cask”</p>\n<p>默认配置信息为：<br>==&gt; Homebrew-Cask Staging Location:<br>/usr/local/Homebrew/Caskroom<br>==&gt; Homebrew-Cask Cached Downloads:<br>/Users/cayley/Library/Caches/Homebrew/Cask<br>3 files, 119.2M (warning: run “brew cask cleanup”)<br>==&gt; Homebrew-Cask Default Tap Path:<br>/usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask<br>==&gt; Homebrew-Cask Alternate Cask Taps:<br>/usr/local/Homebrew/Library/Taps/caskroom/homebrew-versions</p>\n<p>也可以对这些配置进行修改：<br>例如：</p>\n<p>export HOMEBREW_CASK_OPTS=”–appdir=/Applications –caskroom=/usr/local/Homebrew/Caskroom”</p>\n<p>#将这个配置加入到.zchrc或者.bash_profile中</p>\n<p> #生效<br> source ~/.zchrc</p>\n<p>Caskbrew：<br>如果你不熟悉终端命令，可以下载cakebrew，它是homebrew的客户端，可以实现常用的搜索、安装、卸载操作<br>官网下载安装</p>\n<p><a href=\"https://www.cakebrew.com\">https://www.cakebrew.com</a></p>\n<p>安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install cakebrew</div></pre></td></tr></table></figure></p>\n<p>问题：</p>\n<p>看官方<a href=\"https://github.com/Homebrew/brew/blob/master/docs/Common-Issues.md\">https://github.com/Homebrew/brew/blob/master/docs/Common-Issues.md</a>  </p>\n<p>常用安装包历史记录下：</p>\n<p>brew cask install google-chrome </p>\n<p>brew cask install iterm2</p>\n<p>brew cask install navicat-for-mysql</p>\n<p>brew cask install  shadowsocksx</p>\n<p>brew cask install phpstorm (ps:<a href=\"http://idea.qinxi1992.cn/\">http://idea.qinxi1992.cn/</a>)</p>\n<p>brew cask install docker</p>\n<p>brew cask install sublime-text</p>\n<p>brew cask install virtualbox</p>\n"},{"title":"PhantomJS总结","date":"2016-09-12T14:17:44.000Z","_content":"PhantomJS是一个无界面的,可脚本编程的WebKit浏览器引擎。它原生支持多种web标准：DOM 操作，CSS选择器，JSON，Canvas 以及SVG。\n使用phantomjs可以\n无UI界面的网站测试\n屏幕快照(png ,jpeg,gif,pdf)\n页面操作自动化\n网络监控\n\n安装:\n\nliunx :\n{% codeblock %}\n#下载\n[root@niaoyun49026 ~]# wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2\n#解压\n[root@niaoyun49026 ~]# tar -xvf php-7.0.9.tar.bz2 \n#执行bin/phantomjs即可运行\n\n{% endcodeblock %}\n\nmac:\n\n下载phantomjs-1.9.8-macosx.zip并解压，bin/phantomjs直接可用。\n或者通过Homebrew安装\n{% codeblock %}\nbrew update && brew install phantomjs huangchengkaideMacBook-Air:~ kai$ brew install phantomjs ==> Downloading https://homebrew.bintray.com/bottles/phantomjs-2.1.1.el_capitan. ######################################################################## 100.0%\n==> Pouring phantomjs-2.1.1.el_capitan.bottle.tar.gz\n🍺  /usr/local/Cellar/phantomjs/2.1.1: 49 files, 50.5M\n{% endcodeblock %}\n\n\n命令行使用:\nphantomjs [options] somescript.js [arg1 [arg2 [...]]]\n\nOptions:\n  --cookies-file=<val>                 设置保存cookies的文件路径 \n  --config=<val>                       设置json格式配置文件的路径(这些options项以json格式保存)\n  --debug=<val>                        debug模式,显示debug信息和警告级别的信息: 'true' or 'false' (default)\n  --disk-cache=<val>                   是否启用磁盘缓存: 'true' or 'false' (default)\n  --disk-cache-path=<val>              指定缓存文件路径 \n  --ignore-ssl-errors=<val>            是否忽略 SSL证书错误 : 'true' or 'false' (default)\n  --load-images=<val>                  Loads all inlined images: 'true' (default) or 'false'\n  --local-url-access=<val>             是否允许使用 'file:///' URLs: 'true' (default) or 'false'\n  --local-storage-path=<val>           指定本地保存 local storage的路径\n  --local-storage-quota=<val>          设置最大保存local storage 的大小 (in KB)\n  --offline-storage-path=<val>         指定最大保存 offline storage 的路径\n  --offline-storage-quota=<val>        设置最大保存离线 offline storage 的大小(in KB)\n  --local-to-remote-url-access=<val>   Allows local content to access remote URL: 'true' or 'false' (default)\n  --max-disk-cache-size=<val>          Limits the size of the disk cache (in KB)\n  --output-encoding=<val>              设置输出编码(cmd) default is 'utf8'\n  --remote-debugger-port=<val>         Starts the script in a debug harness and listens on the specified port\n  --remote-debugger-autorun=<val>      Runs the script in the debugger immediately: 'true' or 'false' (default)\n  --proxy=<val>                        设置 proxy server, e.g. '--proxy=http://proxy.company.com:8080'\n  --proxy-auth=<val>                   Provides authentication information for the proxy, e.g. ''-proxy-auth=username:password'\n  --proxy-type=<val>                   设置代理类型, 'http' (default), 'none' (disable completely), or 'socks5'\n  --script-encoding=<val>              Sets the encoding used for the starting script, default is 'utf8'\n  --script-language=<val>              设置脚本语言: 'javascript'\n  --web-security=<val>                 是否启用 web 安全模式, 'true' (default) or 'false'\n  --ssl-protocol=<val>                 Selects a specific SSL protocol version to offer. Values (case insensitive): TLSv1.2, TLSv1.1, TLSv1.0, TLSv1 (same as v1.0), SSLv3, or ANY. Default is to offer all that Qt thinks are secure (SSLv3 and up). Not all values may be supported, depending on the system OpenSSL library.\n  --ssl-ciphers=<val>                  Sets supported TLS/SSL ciphers. Argument is a colon-separated list of OpenSSL cipher names (macros like ALL, kRSA, etc. may not be used). Default matches modern browsers.\n  --ssl-certificates-path=<val>        Sets the location for custom CA certificates (if none set, uses environment variable SSL_CERT_DIR. If none set too, uses system default)\n  --ssl-client-certificate-file=<val>  设置本地ssl证书文件路径\n --ssl-client-key-file=<val>          设置客户端ssl私钥 --ssl-client-key-passphrase=<val>    设置客户ssl私钥密码\n  --webdriver=<val>                    Starts in 'Remote WebDriver mode' (embedded GhostDriver): '[[<IP>:]<PORT>]' (default '127.0.0.1:8910') \n  --webdriver-logfile=<val>            File where to write the WebDriver's Log (default 'none') (NOTE: needs '--webdriver') \n  --webdriver-loglevel=<val>           WebDriver Logging Level: (supported: 'ERROR', 'WARN', 'INFO', 'DEBUG') (default 'INFO') (NOTE: needs '--webdriver') \n  --webdriver-selenium-grid-hub=<val>  URL to the Selenium Grid HUB: 'URL_TO_HUB' (default 'none') (NOTE: needs '--webdriver') \n  -w,--wd                              相当于 前面的'--webdriver' 选项\n  -h,--help                            显示帮助文档&&退出 \n  -v,--version                         输出该版本 \n\n\n配置:\n\njson格式配置文件格式如下:\n\n{\n  /* Same as: --ignore-ssl-errors=true */\n  \"ignoreSslErrors\": true,\n\n  /* Same as: --max-disk-cache-size=1000 */\n  \"maxDiskCacheSize\": 1000,\n\n  /* Same as: --output-encoding=utf8 */\n  \"outputEncoding\": \"utf8\"\n\n  /* etc. */\n}\n\n注意:配置项需要转换为驼峰命名法的格式哦\n\n//todo ,有空在写\n\n\n","source":"_posts/PhantomJS总结.md","raw":"---\ntitle: PhantomJS总结\ndate: 2016-09-12 22:17:44\ntags:\n---\nPhantomJS是一个无界面的,可脚本编程的WebKit浏览器引擎。它原生支持多种web标准：DOM 操作，CSS选择器，JSON，Canvas 以及SVG。\n使用phantomjs可以\n无UI界面的网站测试\n屏幕快照(png ,jpeg,gif,pdf)\n页面操作自动化\n网络监控\n\n安装:\n\nliunx :\n{% codeblock %}\n#下载\n[root@niaoyun49026 ~]# wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2\n#解压\n[root@niaoyun49026 ~]# tar -xvf php-7.0.9.tar.bz2 \n#执行bin/phantomjs即可运行\n\n{% endcodeblock %}\n\nmac:\n\n下载phantomjs-1.9.8-macosx.zip并解压，bin/phantomjs直接可用。\n或者通过Homebrew安装\n{% codeblock %}\nbrew update && brew install phantomjs huangchengkaideMacBook-Air:~ kai$ brew install phantomjs ==> Downloading https://homebrew.bintray.com/bottles/phantomjs-2.1.1.el_capitan. ######################################################################## 100.0%\n==> Pouring phantomjs-2.1.1.el_capitan.bottle.tar.gz\n🍺  /usr/local/Cellar/phantomjs/2.1.1: 49 files, 50.5M\n{% endcodeblock %}\n\n\n命令行使用:\nphantomjs [options] somescript.js [arg1 [arg2 [...]]]\n\nOptions:\n  --cookies-file=<val>                 设置保存cookies的文件路径 \n  --config=<val>                       设置json格式配置文件的路径(这些options项以json格式保存)\n  --debug=<val>                        debug模式,显示debug信息和警告级别的信息: 'true' or 'false' (default)\n  --disk-cache=<val>                   是否启用磁盘缓存: 'true' or 'false' (default)\n  --disk-cache-path=<val>              指定缓存文件路径 \n  --ignore-ssl-errors=<val>            是否忽略 SSL证书错误 : 'true' or 'false' (default)\n  --load-images=<val>                  Loads all inlined images: 'true' (default) or 'false'\n  --local-url-access=<val>             是否允许使用 'file:///' URLs: 'true' (default) or 'false'\n  --local-storage-path=<val>           指定本地保存 local storage的路径\n  --local-storage-quota=<val>          设置最大保存local storage 的大小 (in KB)\n  --offline-storage-path=<val>         指定最大保存 offline storage 的路径\n  --offline-storage-quota=<val>        设置最大保存离线 offline storage 的大小(in KB)\n  --local-to-remote-url-access=<val>   Allows local content to access remote URL: 'true' or 'false' (default)\n  --max-disk-cache-size=<val>          Limits the size of the disk cache (in KB)\n  --output-encoding=<val>              设置输出编码(cmd) default is 'utf8'\n  --remote-debugger-port=<val>         Starts the script in a debug harness and listens on the specified port\n  --remote-debugger-autorun=<val>      Runs the script in the debugger immediately: 'true' or 'false' (default)\n  --proxy=<val>                        设置 proxy server, e.g. '--proxy=http://proxy.company.com:8080'\n  --proxy-auth=<val>                   Provides authentication information for the proxy, e.g. ''-proxy-auth=username:password'\n  --proxy-type=<val>                   设置代理类型, 'http' (default), 'none' (disable completely), or 'socks5'\n  --script-encoding=<val>              Sets the encoding used for the starting script, default is 'utf8'\n  --script-language=<val>              设置脚本语言: 'javascript'\n  --web-security=<val>                 是否启用 web 安全模式, 'true' (default) or 'false'\n  --ssl-protocol=<val>                 Selects a specific SSL protocol version to offer. Values (case insensitive): TLSv1.2, TLSv1.1, TLSv1.0, TLSv1 (same as v1.0), SSLv3, or ANY. Default is to offer all that Qt thinks are secure (SSLv3 and up). Not all values may be supported, depending on the system OpenSSL library.\n  --ssl-ciphers=<val>                  Sets supported TLS/SSL ciphers. Argument is a colon-separated list of OpenSSL cipher names (macros like ALL, kRSA, etc. may not be used). Default matches modern browsers.\n  --ssl-certificates-path=<val>        Sets the location for custom CA certificates (if none set, uses environment variable SSL_CERT_DIR. If none set too, uses system default)\n  --ssl-client-certificate-file=<val>  设置本地ssl证书文件路径\n --ssl-client-key-file=<val>          设置客户端ssl私钥 --ssl-client-key-passphrase=<val>    设置客户ssl私钥密码\n  --webdriver=<val>                    Starts in 'Remote WebDriver mode' (embedded GhostDriver): '[[<IP>:]<PORT>]' (default '127.0.0.1:8910') \n  --webdriver-logfile=<val>            File where to write the WebDriver's Log (default 'none') (NOTE: needs '--webdriver') \n  --webdriver-loglevel=<val>           WebDriver Logging Level: (supported: 'ERROR', 'WARN', 'INFO', 'DEBUG') (default 'INFO') (NOTE: needs '--webdriver') \n  --webdriver-selenium-grid-hub=<val>  URL to the Selenium Grid HUB: 'URL_TO_HUB' (default 'none') (NOTE: needs '--webdriver') \n  -w,--wd                              相当于 前面的'--webdriver' 选项\n  -h,--help                            显示帮助文档&&退出 \n  -v,--version                         输出该版本 \n\n\n配置:\n\njson格式配置文件格式如下:\n\n{\n  /* Same as: --ignore-ssl-errors=true */\n  \"ignoreSslErrors\": true,\n\n  /* Same as: --max-disk-cache-size=1000 */\n  \"maxDiskCacheSize\": 1000,\n\n  /* Same as: --output-encoding=utf8 */\n  \"outputEncoding\": \"utf8\"\n\n  /* etc. */\n}\n\n注意:配置项需要转换为驼峰命名法的格式哦\n\n//todo ,有空在写\n\n\n","slug":"PhantomJS总结","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeiel10002znz4fk0n8f5k","content":"<p>PhantomJS是一个无界面的,可脚本编程的WebKit浏览器引擎。它原生支持多种web标准：DOM 操作，CSS选择器，JSON，Canvas 以及SVG。<br>使用phantomjs可以<br>无UI界面的网站测试<br>屏幕快照(png ,jpeg,gif,pdf)<br>页面操作自动化<br>网络监控</p>\n<p>安装:</p>\n<p>liunx :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#下载</div><div class=\"line\">[root@niaoyun49026 ~]# wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2</div><div class=\"line\">#解压</div><div class=\"line\">[root@niaoyun49026 ~]# tar -xvf php-7.0.9.tar.bz2 </div><div class=\"line\">#执行bin/phantomjs即可运行</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>mac:</p>\n<p>下载phantomjs-1.9.8-macosx.zip并解压，bin/phantomjs直接可用。<br>或者通过Homebrew安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew update &amp;&amp; brew install phantomjs huangchengkaideMacBook-Air:~ kai$ brew install phantomjs ==&gt; Downloading https://homebrew.bintray.com/bottles/phantomjs-2.1.1.el_capitan. ######################################################################## 100.0%</div><div class=\"line\">==&gt; Pouring phantomjs-2.1.1.el_capitan.bottle.tar.gz</div><div class=\"line\">🍺  /usr/local/Cellar/phantomjs/2.1.1: 49 files, 50.5M</div></pre></td></tr></table></figure></p>\n<p>命令行使用:<br>phantomjs [options] somescript.js [arg1 [arg2 […]]]</p>\n<p>Options:<br>  –cookies-file=<val>                 设置保存cookies的文件路径<br>  –config=<val>                       设置json格式配置文件的路径(这些options项以json格式保存)<br>  –debug=<val>                        debug模式,显示debug信息和警告级别的信息: ‘true’ or ‘false’ (default)<br>  –disk-cache=<val>                   是否启用磁盘缓存: ‘true’ or ‘false’ (default)<br>  –disk-cache-path=<val>              指定缓存文件路径<br>  –ignore-ssl-errors=<val>            是否忽略 SSL证书错误 : ‘true’ or ‘false’ (default)<br>  –load-images=<val>                  Loads all inlined images: ‘true’ (default) or ‘false’<br>  –local-url-access=<val>             是否允许使用 ‘file:///‘ URLs: ‘true’ (default) or ‘false’<br>  –local-storage-path=<val>           指定本地保存 local storage的路径<br>  –local-storage-quota=<val>          设置最大保存local storage 的大小 (in KB)<br>  –offline-storage-path=<val>         指定最大保存 offline storage 的路径<br>  –offline-storage-quota=<val>        设置最大保存离线 offline storage 的大小(in KB)<br>  –local-to-remote-url-access=<val>   Allows local content to access remote URL: ‘true’ or ‘false’ (default)<br>  –max-disk-cache-size=<val>          Limits the size of the disk cache (in KB)<br>  –output-encoding=<val>              设置输出编码(cmd) default is ‘utf8’<br>  –remote-debugger-port=<val>         Starts the script in a debug harness and listens on the specified port<br>  –remote-debugger-autorun=<val>      Runs the script in the debugger immediately: ‘true’ or ‘false’ (default)<br>  –proxy=<val>                        设置 proxy server, e.g. ‘–proxy=<a href=\"http://proxy.company.com:8080\" target=\"_blank\" rel=\"external\">http://proxy.company.com:8080</a>‘<br>  –proxy-auth=<val>                   Provides authentication information for the proxy, e.g. ‘’-proxy-auth=username:password’<br>  –proxy-type=<val>                   设置代理类型, ‘http’ (default), ‘none’ (disable completely), or ‘socks5’<br>  –script-encoding=<val>              Sets the encoding used for the starting script, default is ‘utf8’<br>  –script-language=<val>              设置脚本语言: ‘javascript’<br>  –web-security=<val>                 是否启用 web 安全模式, ‘true’ (default) or ‘false’<br>  –ssl-protocol=<val>                 Selects a specific SSL protocol version to offer. Values (case insensitive): TLSv1.2, TLSv1.1, TLSv1.0, TLSv1 (same as v1.0), SSLv3, or ANY. Default is to offer all that Qt thinks are secure (SSLv3 and up). Not all values may be supported, depending on the system OpenSSL library.<br>  –ssl-ciphers=<val>                  Sets supported TLS/SSL ciphers. Argument is a colon-separated list of OpenSSL cipher names (macros like ALL, kRSA, etc. may not be used). Default matches modern browsers.<br>  –ssl-certificates-path=<val>        Sets the location for custom CA certificates (if none set, uses environment variable SSL_CERT_DIR. If none set too, uses system default)<br>  –ssl-client-certificate-file=<val>  设置本地ssl证书文件路径<br> –ssl-client-key-file=<val>          设置客户端ssl私钥 –ssl-client-key-passphrase=<val>    设置客户ssl私钥密码<br>  –webdriver=<val>                    Starts in ‘Remote WebDriver mode’ (embedded GhostDriver): ‘[[<ip>:]<port>]’ (default ‘127.0.0.1:8910’)<br>  –webdriver-logfile=<val>            File where to write the WebDriver’s Log (default ‘none’) (NOTE: needs ‘–webdriver’)<br>  –webdriver-loglevel=<val>           WebDriver Logging Level: (supported: ‘ERROR’, ‘WARN’, ‘INFO’, ‘DEBUG’) (default ‘INFO’) (NOTE: needs ‘–webdriver’)<br>  –webdriver-selenium-grid-hub=<val>  URL to the Selenium Grid HUB: ‘URL_TO_HUB’ (default ‘none’) (NOTE: needs ‘–webdriver’)<br>  -w,–wd                              相当于 前面的’–webdriver’ 选项<br>  -h,–help                            显示帮助文档&amp;&amp;退出<br>  -v,–version                         输出该版本 </val></val></val></port></ip></val></val></val></val></val></val></val></val></val></val></val></val></val></val></val></val></val></val></val></val></val></val></val></val></val></val></val></val></val></val></p>\n<p>配置:</p>\n<p>json格式配置文件格式如下:</p>\n<p>{<br>  /<em> Same as: –ignore-ssl-errors=true </em>/<br>  “ignoreSslErrors”: true,</p>\n<p>  /<em> Same as: –max-disk-cache-size=1000 </em>/<br>  “maxDiskCacheSize”: 1000,</p>\n<p>  /<em> Same as: –output-encoding=utf8 </em>/<br>  “outputEncoding”: “utf8”</p>\n<p>  /<em> etc. </em>/<br>}</p>\n<p>注意:配置项需要转换为驼峰命名法的格式哦</p>\n<p>//todo ,有空在写</p>\n","excerpt":"","more":"<p>PhantomJS是一个无界面的,可脚本编程的WebKit浏览器引擎。它原生支持多种web标准：DOM 操作，CSS选择器，JSON，Canvas 以及SVG。<br>使用phantomjs可以<br>无UI界面的网站测试<br>屏幕快照(png ,jpeg,gif,pdf)<br>页面操作自动化<br>网络监控</p>\n<p>安装:</p>\n<p>liunx :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#下载</div><div class=\"line\">[root@niaoyun49026 ~]# wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2</div><div class=\"line\">#解压</div><div class=\"line\">[root@niaoyun49026 ~]# tar -xvf php-7.0.9.tar.bz2 </div><div class=\"line\">#执行bin/phantomjs即可运行</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>mac:</p>\n<p>下载phantomjs-1.9.8-macosx.zip并解压，bin/phantomjs直接可用。<br>或者通过Homebrew安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew update &amp;&amp; brew install phantomjs huangchengkaideMacBook-Air:~ kai$ brew install phantomjs ==&gt; Downloading https://homebrew.bintray.com/bottles/phantomjs-2.1.1.el_capitan. ######################################################################## 100.0%</div><div class=\"line\">==&gt; Pouring phantomjs-2.1.1.el_capitan.bottle.tar.gz</div><div class=\"line\">🍺  /usr/local/Cellar/phantomjs/2.1.1: 49 files, 50.5M</div></pre></td></tr></table></figure></p>\n<p>命令行使用:<br>phantomjs [options] somescript.js [arg1 [arg2 […]]]</p>\n<p>Options:<br>  –cookies-file=<val>                 设置保存cookies的文件路径<br>  –config=<val>                       设置json格式配置文件的路径(这些options项以json格式保存)<br>  –debug=<val>                        debug模式,显示debug信息和警告级别的信息: ‘true’ or ‘false’ (default)<br>  –disk-cache=<val>                   是否启用磁盘缓存: ‘true’ or ‘false’ (default)<br>  –disk-cache-path=<val>              指定缓存文件路径<br>  –ignore-ssl-errors=<val>            是否忽略 SSL证书错误 : ‘true’ or ‘false’ (default)<br>  –load-images=<val>                  Loads all inlined images: ‘true’ (default) or ‘false’<br>  –local-url-access=<val>             是否允许使用 ‘file:///‘ URLs: ‘true’ (default) or ‘false’<br>  –local-storage-path=<val>           指定本地保存 local storage的路径<br>  –local-storage-quota=<val>          设置最大保存local storage 的大小 (in KB)<br>  –offline-storage-path=<val>         指定最大保存 offline storage 的路径<br>  –offline-storage-quota=<val>        设置最大保存离线 offline storage 的大小(in KB)<br>  –local-to-remote-url-access=<val>   Allows local content to access remote URL: ‘true’ or ‘false’ (default)<br>  –max-disk-cache-size=<val>          Limits the size of the disk cache (in KB)<br>  –output-encoding=<val>              设置输出编码(cmd) default is ‘utf8’<br>  –remote-debugger-port=<val>         Starts the script in a debug harness and listens on the specified port<br>  –remote-debugger-autorun=<val>      Runs the script in the debugger immediately: ‘true’ or ‘false’ (default)<br>  –proxy=<val>                        设置 proxy server, e.g. ‘–proxy=<a href=\"http://proxy.company.com:8080\">http://proxy.company.com:8080</a>‘<br>  –proxy-auth=<val>                   Provides authentication information for the proxy, e.g. ‘’-proxy-auth=username:password’<br>  –proxy-type=<val>                   设置代理类型, ‘http’ (default), ‘none’ (disable completely), or ‘socks5’<br>  –script-encoding=<val>              Sets the encoding used for the starting script, default is ‘utf8’<br>  –script-language=<val>              设置脚本语言: ‘javascript’<br>  –web-security=<val>                 是否启用 web 安全模式, ‘true’ (default) or ‘false’<br>  –ssl-protocol=<val>                 Selects a specific SSL protocol version to offer. Values (case insensitive): TLSv1.2, TLSv1.1, TLSv1.0, TLSv1 (same as v1.0), SSLv3, or ANY. Default is to offer all that Qt thinks are secure (SSLv3 and up). Not all values may be supported, depending on the system OpenSSL library.<br>  –ssl-ciphers=<val>                  Sets supported TLS/SSL ciphers. Argument is a colon-separated list of OpenSSL cipher names (macros like ALL, kRSA, etc. may not be used). Default matches modern browsers.<br>  –ssl-certificates-path=<val>        Sets the location for custom CA certificates (if none set, uses environment variable SSL_CERT_DIR. If none set too, uses system default)<br>  –ssl-client-certificate-file=<val>  设置本地ssl证书文件路径<br> –ssl-client-key-file=<val>          设置客户端ssl私钥 –ssl-client-key-passphrase=<val>    设置客户ssl私钥密码<br>  –webdriver=<val>                    Starts in ‘Remote WebDriver mode’ (embedded GhostDriver): ‘[[<IP>:]<PORT>]’ (default ‘127.0.0.1:8910’)<br>  –webdriver-logfile=<val>            File where to write the WebDriver’s Log (default ‘none’) (NOTE: needs ‘–webdriver’)<br>  –webdriver-loglevel=<val>           WebDriver Logging Level: (supported: ‘ERROR’, ‘WARN’, ‘INFO’, ‘DEBUG’) (default ‘INFO’) (NOTE: needs ‘–webdriver’)<br>  –webdriver-selenium-grid-hub=<val>  URL to the Selenium Grid HUB: ‘URL_TO_HUB’ (default ‘none’) (NOTE: needs ‘–webdriver’)<br>  -w,–wd                              相当于 前面的’–webdriver’ 选项<br>  -h,–help                            显示帮助文档&amp;&amp;退出<br>  -v,–version                         输出该版本 </p>\n<p>配置:</p>\n<p>json格式配置文件格式如下:</p>\n<p>{<br>  /<em> Same as: –ignore-ssl-errors=true </em>/<br>  “ignoreSslErrors”: true,</p>\n<p>  /<em> Same as: –max-disk-cache-size=1000 </em>/<br>  “maxDiskCacheSize”: 1000,</p>\n<p>  /<em> Same as: –output-encoding=utf8 </em>/<br>  “outputEncoding”: “utf8”</p>\n<p>  /<em> etc. </em>/<br>}</p>\n<p>注意:配置项需要转换为驼峰命名法的格式哦</p>\n<p>//todo ,有空在写</p>\n"},{"title":"composer.json架构","date":"2016-07-03T09:56:15.000Z","_content":"composer.json 架构:\n\nRoot 包:\n\n“root 包”是指由 composer.json 定义的在你项目根目录的包。这是 composer.json 定义你项目所需的主要条件。（简单的说，你自己的项目就是一个 root 包）\n\n某些字段仅适用于“root 包”上下文。 config 字段就是其中一个例子。只有“root 包”可以定义。在依赖包中定义的 config 字段将被忽略，这使得 config 字段只有“root 包”可用（root-only）。\n\n如果你克隆了其中的一个依赖包，直接在其上开始工作，那么它就变成了“root 包”。与作为他人的依赖包时使用相同的 composer.json 文件，但上下文发生了变化。\n\n注意： 一个资源包是不是“root 包”，取决于它的上下文。 例：如果你的项目依赖 monolog 库，那么你的项目就是“root 包”。 但是，如果你从 GitHub 上克隆了 monolog 为它修复 bug， 那么此时 monolog 就是“root 包”。\n<!-- more -->\n\n\n属性:\n\n包名 name\n\n包的名称，它包括供应商名称和项目名称，使用 / 分隔。\n\n例：\n\nmonolog/monolog\nigorw/event-source\n对于需要发布的包（库），这是必须填写的。\n\n\n描述 description\n\n一个包的简短描述。通常这个最长只有一行。\n\n对于需要发布的包（库），这是必须填写的。\n\n\n版本 version\n\nversion 不是必须的，并且建议忽略（见下文）。\n\n它应该符合 'X.Y.Z' 或者 'vX.Y.Z' 的形式， -dev、-patch、-alpha、-beta 或 -RC 这些后缀是可选的。在后缀之后也可以再跟上一个数字。\n\n例：\n\n1.0.0\n1.0.2\n1.1.0\n0.2.5\n1.0.0-dev\n1.0.0-alpha3\n1.0.0-beta2\n1.0.0-RC5\n通常，我们能够从 VCS (git, svn, hg) 的信息推断出包的版本号，在这种情况下，我们建议忽略 version。\n\n注意： Packagist 使用 VCS 仓库， 因此 version 定义的版本号必须是真实准确的。 自己手动指定的 version，最终有可能在某个时候因为人为错误造成问题。\n\n\n安装类型 type\n\n包的安装类型，默认为 library。\n\n包的安装类型，用来定义安装逻辑。如果你有一个包需要一个特殊的逻辑，你可以设定一个自定义的类型。这可以是一个 symfony-bundle，一个 wordpress-plugin 或者一个 typo3-module。这些类型都将是具体到某一个项目，而对应的项目将要提供一种能够安装该类型包的安装程序。\n\ncomposer 原生支持以下4种类型：\n\nlibrary: 这是默认类型，它会简单的将文件复制到 vendor 目录。\nproject: 这表示当前包是一个项目，而不是一个库。例：框架应用程序 Symfony standard edition，内容管理系统 SilverStripe installer 或者完全成熟的分布式应用程序。使用 IDE 创建一个新的工作区时，这可以为其提供项目列表的初始化。\nmetapackage: 当一个空的包，包含依赖并且需要触发依赖的安装，这将不会对系统写入额外的文件。因此这种安装类型并不需要一个 dist 或 source。\ncomposer-plugin: 一个安装类型为 composer-plugin 的包，它有一个自定义安装类型，可以为其它包提供一个 installler。详细请查看 自定义安装类型。\n仅在你需要一个自定义的安装逻辑时才使用它。建议忽略这个属性，采用默认的 library。\n\n\n关键字 keywords\n\n该包相关的关键词的数组。这些可用于搜索和过滤。\n\n实例：\n\nlogging\nevents\ndatabase\nredis\ntemplating\n可选。\n\n\n项目主页 homepage\n\n该项目网站的 URL 地址。\n\n可选。\n\n\n版本发布时间 time\n\n版本发布时间。\n\n必须符合 YYYY-MM-DD 或 YYYY-MM-DD HH:MM:SS 格式。\n\n可选。\n\n\n许可协议 license\n\n包的许可协议，它可以是一个字符串或者字符串数组。\n\n最常见的许可协议的推荐写法（按字母排序）：\n\nApache-2.0\nBSD-2-Clause\nBSD-3-Clause\nBSD-4-Clause\nGPL-2.0\nGPL-2.0+\nGPL-3.0\nGPL-3.0+\nLGPL-2.1\nLGPL-2.1+\nLGPL-3.0\nLGPL-3.0+\nMIT\n可选，但强烈建议提供此内容。更多许可协议的标识符请参见 SPDX Open Source License Registry。\n\n对于闭源软件，你必须使用 \"proprietary\" 协议标识符。\n\n一个例：\n\n{\n    \"license\": \"MIT\"\n}\n对于一个包，当允许在多个许可协议间进行选择时（\"disjunctive license\"），这些协议标识符可以被指定为数组。\n\n多协议的一个例：\n\n{\n    \"license\": [\n       \"LGPL-2.1\",\n       \"GPL-3.0+\"\n    ]\n}\n另外它们也可以由 \"or\" 分隔，并写在括号中：\n\n{\n    \"license\": \"(LGPL-2.1 or GPL-3.0+)\"\n}\n同样，当有多个许可协议需要结合使用时（\"conjunctive license\"），它们应该被 \"and\" 分隔，并写在括号中。\n\n\n作者 authors\n\n包的作者。这是一个对象数组。\n\n这个对象必须包含以下属性：\n\nname: 作者的姓名，通常使用真名。\nemail: 作者的 email 地址。\nhomepage: 作者主页的 URL 地址。\nrole: 该作者在此项目中担任的角色（例：开发人员 或 翻译）。\n一个实例：\n{% codeblock %}\n\n{\n    \"authors\": [\n        {\n            \"name\": \"Nils Adermann\",\n            \"email\": \"naderman@naderman.de\",\n            \"homepage\": \"http://www.naderman.de\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"Jordi Boggiano\",\n            \"email\": \"j.boggiano@seld.be\",\n            \"homepage\": \"http://seld.be\",\n            \"role\": \"Developer\"\n        }\n    ]\n}\n{% endcodeblock %}\n可选，但强烈建议提供此内容。\n\n\n支持 support\n\n获取项目支持的向相关信息对象。\n\n这个对象必须包含以下属性：\n\nemail: 项目支持 email 地址。\nissues: 跟踪问题的 URL 地址。\nforum: 论坛地址。\nwiki: Wiki 地址。\nirc: IRC 聊天频道地址，类似于 irc://server/channel。\nsource: 网址浏览或下载源。\n一个实例：\n{% codeblock %}\n{\n    \"support\": {\n        \"email\": \"support@example.org\",\n        \"irc\": \"irc://irc.freenode.org/composer\"\n    }\n}\n{% endcodeblock %}\n可选。\n\n\nPackage links\n\n下面提到的所有对象，都应该是 包名 到 版本 的映射对象。\n\n实例：\n{% codeblock %}\n{\n    \"require\": {\n        \"monolog/monolog\": \"1.0.*\"\n    }\n}\n{% endcodeblock %}\n所有的这些都是可选的。\n\nrequire 和 require-dev 还支持稳定性标签（@，仅针对“root 包”）。这允许你在 minimum-stability 设定的范围外做进一步的限制或扩展。例：如果你想允许依赖一个不稳定的包，你可以在一个包的版本约束后使用它，或者是一个空的版本约束内使用它。\n\n实例：\n{% codeblock %}\n{\n    \"require\": {\n        \"monolog/monolog\": \"1.0.*@beta\",\n        \"acme/foo\": \"@dev\"\n    }\n}\n{% endcodeblock %}\n如果你的依赖之一，有对另一个不稳定包的依赖，你最好在 require 中显示的定义它，并带上足够详细的稳定性标识。\n\n实例：\n{% codeblock %}\n{\n    \"require\": {\n        \"doctrine/doctrine-fixtures-bundle\": \"dev-master\",\n        \"doctrine/data-fixtures\": \"@dev\"\n    }\n}\n{% endcodeblock %}\nrequire 和 require-dev 还支持对 dev（开发）版本的明确引用（即：版本控制系统中的提交编号 commit），以确保它们被锁定到一个给定的状态，即使你运行了更新命令。你只需要明确一个开发版本号，并带上诸如 #<ref> 的标识。\n\n实例：\n{% codeblock %}\n\n{\n    \"require\": {\n        \"monolog/monolog\": \"dev-master#2eb0c0978d290a1c45346a1955188929cb4e5db7\",\n        \"acme/foo\": \"1.0.x-dev#abc123\"\n    }\n}\n{% endcodeblock %}\n\n注意： 虽然这有时很方便，但不应该长期在你的包中使用，因为它有一个技术上的限制。 composer.json 将仍然在哈希值之前指定的分支名称读取元数据， 正因为如此，在某些情况下，它不会是一个实用的解决方法， 如果可能，你应该总是尝试切换到拥有标签的版本。\n\n它也可以应用于行内别名，这样它将匹配一个约束，否则不会。更多信息请参考 别名。\n\n\nrequire\n\n必须的软件包列表，除非这些依赖被满足，否则不会完成安装。\n\n\nrequire-dev (root-only)\n\n这个列表是为开发或测试等目的，额外列出的依赖。“root 包”的 require-dev 默认是会被安装的。然而 install 或 update 支持使用 --no-dev 参数来跳过 require-dev 字段中列出的包。\n\n\nconflict\n\n此列表中的包与当前包的这个版本冲突。它们将不允许同时被安装。\n\n请注意，在 conflict 中指定类似于 <1.0, >= 1.1 的版本范围时，这表示它与小于1.0 并且 同时大等于1.1的版本冲突，这很可能不是你想要的。在这种情况下你可能想要表达的是 <1.0 | >= 1.1 。\n\n\nreplace\n\n这个列表中的包将被当前包取代。这使你可以 fork 一个包，以不同的名称和版本号发布，同时要求依赖于原包的其它包，在这之后依赖于你 fork 的这个包，因为它取代了原来的包。\n\n这对于创建一个内部包含子包的主包也非常的有用。例如 symfony/symfony 这个主包，包含了所有 Symfony 的组件，而这些组件又可以作为单独的包进行发布。如果你 require 了主包，那么它就会自动完成其下各个组件的任务，因为主包取代了子包。\n\n注意，在使用上述方法取代子包时，通常你应该只对子包使用 self.version 这一个版本约束，以确保主包仅替换掉子包的准确版本，而不是任何其他版本。\n\n\nprovide\n\nList of other packages that are provided by this package. This is mostly useful for common interfaces. A package could depend on some virtual logger package, any library that implements this logger interface would simply list it in provide.\n\n\nsuggest\n\n建议安装的包，它们增强或能够与当前包良好的工作。这些只是信息，并显示在依赖包安装完成之后，给你的用户一个建议，他们可以添加更多的包。\n\n格式如下，版本约束变成了描述信息。\n\n实例：\n{% codeblock %}\n\n{\n    \"suggest\": {\n        \"monolog/monolog\": \"Allows more advanced logging of the application flow\"\n    }\n}\n{% endcodeblock %}\n\nautoload\n\nPHP autoloader 的自动加载映射。\n\nCurrently PSR-0 autoloading, PSR-4 autoloading, classmap generation and files includes are supported. PSR-4 is the recommended way though since it offers greater ease of use (no need to regenerate the autoloader when you add classes).\n\nPSR-4\n\nUnder the psr-4 key you define a mapping from namespaces to paths, relative to the package root. When autoloading a class like Foo\\\\Bar\\\\Baz a namespace prefix Foo\\\\ pointing to a directory src/ means that the autoloader will look for a file named src/Bar/Baz.php and include it if present. Note that as opposed to the older PSR-0 style, the prefix (Foo\\\\) is not present in the file path.\n\nNamespace prefixes must end in \\\\ to avoid conflicts between similar prefixes. For example Foo would match classes in the FooBar namespace so the trailing backslashes solve the problem: Foo\\\\ and FooBar\\\\ are distinct.\n\nThe PSR-4 references are all combined, during install/update, into a single key => value array which may be found in the generated file vendor/composer/autoload_psr4.php.\n\nExample:\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"psr-4\": {\n            \"Monolog\\\\\": \"src/\",\n            \"Vendor\\\\Namespace\\\\\": \"\"\n        }\n    }\n}\nIf you need to search for a same prefix in multiple directories, you can specify them as an array as such:\n\n{\n    \"autoload\": {\n        \"psr-4\": { \"Monolog\\\\\": [\"src/\", \"lib/\"] }\n    }\n}\n{% endcodeblock %}\n\nIf you want to have a fallback directory where any namespace will be looked for, you can use an empty prefix like:\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"psr-4\": { \"\": \"src/\" }\n    }\n}\n{% endcodeblock %}\n\nPSR-0\n\n在 psr-0 key 下你定义了一个命名空间到实际路径的映射（相对于包的根目录）。注意，这里同样支持 PEAR-style 方式的约定（与命名空间不同，PEAR 类库在类名上采用了下划线分隔）。\n\n请注意，命名空间的申明应该以 \\\\ 结束，以确保 autoloader 能够准确响应。例： Foo 将会与 FooBar 匹配，然而以反斜杠结束就可以解决这样的问题， Foo\\\\ 和 FooBar\\\\ 将会被区分开来。\n\n在 install/update 过程中，PSR-0 引用都将被结合为一个单一的键值对数组，存储至 vendor/composer/autoload_namespaces.php 文件中。\n\n实例：\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"psr-0\": {\n            \"Monolog\\\\\": \"src/\",\n            \"Vendor\\\\Namespace\\\\\": \"src/\",\n            \"Vendor_Namespace_\": \"src/\"\n        }\n    }\n}\n{% endcodeblock %}\n\n如果你需要搜索多个目录中一个相同的前缀，你可以将它们指定为一个数组，例：\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"psr-0\": { \"Monolog\\\\\": [\"src/\", \"lib/\"] }\n    }\n}\n{% endcodeblock %}\n\nPSR-0 方式并不仅限于申明命名空间，也可以是精确到类级别的指定。这对于只有一个类在全局命名空间的类库是非常有用的（如果 php 源文件也位于包的根目录）。例如，可以这样申明：\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"psr-0\": { \"UniqueGlobalClass\": \"\" }\n    }\n}\n{% endcodeblock %}\n\n如果你想设置一个目录作为任何命名空间的备用目录，你可以使用空的前缀，像这样：\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"psr-0\": { \"\": \"src/\" }\n    }\n}\n{% endcodeblock %}\n\nClassmap\n\nclassmap 引用的所有组合，都会在 install/update 过程中生成，并存储到 vendor/composer/autoload_classmap.php 文件中。这个 map 是经过扫描指定目录（同样支持直接精确到文件）中所有的 .php 和 .inc 文件里内置的类而得到的。\n\n你可以用 classmap 生成支持支持自定义加载的不遵循 PSR-0/4 规范的类库。要配置它指向需要的目录，以便能够准确搜索到类文件。\n\n实例：\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"classmap\": [\"src/\", \"lib/\", \"Something.php\"]\n    }\n}\n{% endcodeblock %}\n\n\nFiles\n\n如果你想要明确的指定，在每次请求时都要载入某些文件，那么你可以使用 'files' autoloading。通常作为函数库的载入方式（而非类库）。\n\n实例：\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"files\": [\"src/MyLibrary/functions.php\"]\n    }\n}\n{% endcodeblock %}\n\nautoload-dev (root-only)\n\nThis section allows to define autoload rules for development purposes.\n\nClasses needed to run the test suite should not be included in the main autoload rules to avoid polluting the autoloader in production and when other people use your package as a dependency.\n\nTherefore, it is a good idea to rely on a dedicated path for your unit tests and to add it within the autoload-dev section.\n\nExample:\n\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"psr-4\": { \"MyLibrary\\\\\": \"src/\" }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": { \"MyLibrary\\\\Tests\\\\\": \"tests/\" }\n    }\n}\n\n{% endcodeblock %}\n\ninclude-path\n\n不建议：这是目前唯一支持传统项目的做法，所有新的代码都建议使用自动加载。 这是一个过时的做法，但 Composer 将仍然保留这个功能。\n\n一个追加到 PHP include_path 中的列表。\n\n实例：\n{% codeblock %}\n\n{\n    \"include-path\": [\"lib/\"]\n}\n{% endcodeblock %}\n\n可选。\n\n\ntarget-dir\n\nDEPRECATED: This is only present to support legacy PSR-0 style autoloading, and all new code should preferably use PSR-4 without target-dir and projects using PSR-0 with PHP namespaces are encouraged to migrate to PSR-4 instead.\n\n定义当前包安装的目标文件夹。\n\n若某个包的根目录，在它申明的命名空间之下，将不能正确的使用自动加载。而 target-dir 解决了这个问题。\n\nSymfony 就是一个例子。它有一些独立的包作为组件。Yaml 组件就放在 Symfony\\Component\\Yaml 目录下，然而这个包的根目录实际上是 Yaml。为了使自动加载成为可能，我们需要确保它不会被安装到 vendor/symfony/yaml，而是安装到 vendor/symfony/yaml/Symfony/Component/Yaml，从而使 Symfony 定义的 autoloader 可以从 vendor/symfony/yaml 加载它。\n\n要做到这一点 autoload 和 target-dir 应该定义如下：\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"psr-0\": { \"Symfony\\\\Component\\\\Yaml\\\\\": \"\" }\n    },\n    \"target-dir\": \"Symfony/Component/Yaml\"\n}\n{% endcodeblock %}\n\n可选。\n\n\nminimum-stability (root-only)\n\n这定义了通过稳定性过滤包的默认行为。默认为 stable（稳定）。因此如果你依赖于一个 dev（开发）包，你应该明确的进行定义。\n\n对每个包的所有版本都会进行稳定性检查，而低于 minimum-stability 所设定的最低稳定性的版本，将在解决依赖关系时被忽略。对于个别包的特殊稳定性要求，可以在 require 或 require-dev 中设定（请参考 Package links）。\n\n可用的稳定性标识（按字母排序）：dev、alpha、beta、RC、stable。\n\n\nprefer-stable (root-only)\n\n当此选项被激活时，Composer 将优先使用更稳定的包版本。\n\n使用 \"prefer-stable\": true 来激活它。\n\n\nrepositories (root-only)\n\n使用自定义的包资源库。\n\n默认情况下 composer 只使用 packagist 作为包的资源库。通过指定资源库，你可以从其他地方获取资源包。\n\nRepositories 并不是递归调用的，只能在“Root包”的 composer.json 中定义。附属包中的 composer.json 将被忽略。\n\n支持以下类型的包资源库：\n\ncomposer: 一个 composer 类型的资源库，是一个简单的网络服务器（HTTP、FTP、SSH）上的 packages.json 文件，它包含一个 composer.json 对象的列表，有额外的 dist 和/或 source 信息。这个 packages.json 文件是用一个 PHP 流加载的。你可以使用 options 参数来设定额外的流信息。\nvcs: 从 git、svn 和 hg 取得资源。\npear: 从 pear 获取资源。\npackage: 如果你依赖于一个项目，它不提供任何对 composer 的支持，你就可以使用这种类型。你基本上就只需要内联一个 composer.json 对象。\n更多相关内容，请查看 资源库。\n\n实例：\n{% codeblock %}\n\n\n{\n    \"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": \"http://packages.example.com\"\n        },\n        {\n            \"type\": \"composer\",\n            \"url\": \"https://packages.example.com\",\n            \"options\": {\n                \"ssl\": {\n                    \"verify_peer\": \"true\"\n                }\n            }\n        },\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/Seldaek/monolog\"\n        },\n        {\n            \"type\": \"pear\",\n            \"url\": \"http://pear2.php.net\"\n        },\n        {\n            \"type\": \"package\",\n            \"package\": {\n                \"name\": \"smarty/smarty\",\n                \"version\": \"3.1.7\",\n                \"dist\": {\n                    \"url\": \"http://www.smarty.net/files/Smarty-3.1.7.zip\",\n                    \"type\": \"zip\"\n                },\n                \"source\": {\n                    \"url\": \"http://smarty-php.googlecode.com/svn/\",\n                    \"type\": \"svn\",\n                    \"reference\": \"tags/Smarty_3_1_7/distribution/\"\n                }\n            }\n        }\n    ]\n}\n{% endcodeblock %}\n\n注意： 顺序是非常重要的，当 Composer 查找资源包时，它会按照顺序进行。默认情况下 Packagist 是最后加入的，因此自定义设置将可以覆盖 Packagist 上的包。\n\n\nconfig (root-only)\n\n下面的这一组选项，仅用于项目。\n\n支持以下选项：\n\nprocess-timeout: 默认为 300。处理进程结束时间，例如：git 克隆的时间。Composer 将放弃超时的任务。如果你的网络缓慢或者正在使用一个巨大的包，你可能要将这个值设置的更高一些。\nuse-include-path: 默认为 false。如果为 true，Composer autoloader 还将在 PHP include path 中继续查找类文件。\npreferred-install: 默认为 auto。它的值可以是 source、dist 或 auto。这个选项允许你设置 Composer 的默认安装方法。\ngithub-protocols: 默认为 [\"git\", \"https\", \"ssh\"]。从 github.com 克隆时使用的协议优先级清单，因此默认情况下将优先使用 git 协议进行克隆。你可以重新排列它们的次序，例如，如果你的网络有代理服务器或 git 协议的效率很低，你就可以提升 https 协议的优先级。\ngithub-oauth: 一个域名和 oauth keys 的列表。 例如：使用 {\"github.com\": \"oauthtoken\"} 作为此选项的值， 将使用 oauthtoken 来访问 github 上的私人仓库，并绕过 low IP-based rate 的 API 限制。 关联知识 关于如何获取 GitHub 的 OAuth token。\nvendor-dir: 默认为 vendor。通过设置你可以安装依赖到不同的目录。\nbin-dir: 默认为 vendor/bin。如果一个项目包含二进制文件，它们将被连接到这个目录。\ncache-dir: unix 下默认为 $home/cache，Windows 下默认为 C:\\Users\\<user>\\AppData\\Local\\Composer。用于存储 composer 所有的缓存文件。相关信息请查看 COMPOSER_HOME。\ncache-files-dir: 默认为 $cache-dir/files。存储包 zip 存档的目录。\ncache-repo-dir: 默认为 $cache-dir/repo。存储 composer 类型的 VCS（svn、github、bitbucket） repos 目录。\ncache-vcs-dir: 默认为 $cache-dir/vcs。此目录用于存储 VCS 克隆的 git/hg 类型的元数据，并加快安装速度。\ncache-files-ttl: 默认为 15552000（6个月）。默认情况下 Composer 缓存的所有数据都将在闲置6个月后被删除，这个选项允许你来调整这个时间，你可以将其设置为0以禁用缓存。\ncache-files-maxsize: 默认为 300MiB。Composer 缓存的最大容量，超出后将优先清除旧的缓存数据，直到缓存量低于这个数值。\nprepend-autoloader: 默认为 true。如果设置为 false，composer autoloader 将不会附加到现有的自动加载机制中。这有时候用来解决与其它自动加载机制产生的冲突。\nautoloader-suffix: 默认为 null。Composer autoloader 的后缀，当设置为空时将会产生一个随机的字符串。\noptimize-autoloader Defaults to false. Always optimize when dumping the autoloader.\ngithub-domains: 默认为 [\"github.com\"]。一个 github mode 下的域名列表。这是用于GitHub的企业设置。\nnotify-on-install: 默认为 true。Composer 允许资源仓库定义一个用于通知的 URL，以便有人从其上安装资源包时能够得到一个反馈通知。此选项允许你禁用该行为。\ndiscard-changes: 默认为 false，它的值可以是 true、false 或 stash。这个选项允许你设置在非交互模式下，当处理失败的更新时采用的处理方式。true 表示永远放弃更改。\"stash\" 表示继续尝试。Use this for CI servers or deploy scripts if you tend to have modified vendors.\n实例：\n\n{% codeblock %}\n\n\n{\n    \"config\": {\n        \"bin-dir\": \"bin\"\n    }\n}\n{% endcodeblock %}\n\nscripts (root-only)\n\nComposer 允许你在安装过程中的各个阶段挂接脚本。\n\n更多细节和案例请查看 脚本。\n\n\nextra\n\n任意的，供 scripts 使用的额外数据。.\n\n这可以是几乎任何东西。若要从脚本事件访问处理程序，你可以这样做：\n\n$extra = $event->getComposer()->getPackage()->getExtra();\n可选。\n\n\nbin\n\n该属性用于标注一组应被视为二进制脚本的文件，他们会被软链接到（config 对象中的）bin-dir 属性所标注的目录，以供其他依赖包调用。\n\n详细请查看 Vendor Binaries。\n\n可选。\n\n\narchive\n\n这些选项在创建包存档时使用。\n\n支持以下选项：\n\nexclude: 允许设置一个需要被排除的路径的列表。使用与 .gitignore 文件相同的语法。一个前导的（!）将会使其变成白名单而无视之前相同目录的排除设定。前导斜杠只会在项目的相对路径的开头匹配。星号为通配符。\n实例：\n{% codeblock %}\n{\n    \"archive\": {\n        \"exclude\": [\"/foo/bar\", \"baz\", \"/*.test\", \"!/foo/bar/baz\"]\n    }\n}\n{% endcodeblock %}\n\n在这个例子中我们 include /dir/foo/bar/file、/foo/bar/baz、/file.php、/foo/my.test 但排除了 /foo/bar/any、/foo/baz、/my.test。\n\n","source":"_posts/composer-json架构.md","raw":"---\ntitle: composer.json架构\ndate: 2016-07-03 17:56:15\ntags: composer\ncategories: php\n---\ncomposer.json 架构:\n\nRoot 包:\n\n“root 包”是指由 composer.json 定义的在你项目根目录的包。这是 composer.json 定义你项目所需的主要条件。（简单的说，你自己的项目就是一个 root 包）\n\n某些字段仅适用于“root 包”上下文。 config 字段就是其中一个例子。只有“root 包”可以定义。在依赖包中定义的 config 字段将被忽略，这使得 config 字段只有“root 包”可用（root-only）。\n\n如果你克隆了其中的一个依赖包，直接在其上开始工作，那么它就变成了“root 包”。与作为他人的依赖包时使用相同的 composer.json 文件，但上下文发生了变化。\n\n注意： 一个资源包是不是“root 包”，取决于它的上下文。 例：如果你的项目依赖 monolog 库，那么你的项目就是“root 包”。 但是，如果你从 GitHub 上克隆了 monolog 为它修复 bug， 那么此时 monolog 就是“root 包”。\n<!-- more -->\n\n\n属性:\n\n包名 name\n\n包的名称，它包括供应商名称和项目名称，使用 / 分隔。\n\n例：\n\nmonolog/monolog\nigorw/event-source\n对于需要发布的包（库），这是必须填写的。\n\n\n描述 description\n\n一个包的简短描述。通常这个最长只有一行。\n\n对于需要发布的包（库），这是必须填写的。\n\n\n版本 version\n\nversion 不是必须的，并且建议忽略（见下文）。\n\n它应该符合 'X.Y.Z' 或者 'vX.Y.Z' 的形式， -dev、-patch、-alpha、-beta 或 -RC 这些后缀是可选的。在后缀之后也可以再跟上一个数字。\n\n例：\n\n1.0.0\n1.0.2\n1.1.0\n0.2.5\n1.0.0-dev\n1.0.0-alpha3\n1.0.0-beta2\n1.0.0-RC5\n通常，我们能够从 VCS (git, svn, hg) 的信息推断出包的版本号，在这种情况下，我们建议忽略 version。\n\n注意： Packagist 使用 VCS 仓库， 因此 version 定义的版本号必须是真实准确的。 自己手动指定的 version，最终有可能在某个时候因为人为错误造成问题。\n\n\n安装类型 type\n\n包的安装类型，默认为 library。\n\n包的安装类型，用来定义安装逻辑。如果你有一个包需要一个特殊的逻辑，你可以设定一个自定义的类型。这可以是一个 symfony-bundle，一个 wordpress-plugin 或者一个 typo3-module。这些类型都将是具体到某一个项目，而对应的项目将要提供一种能够安装该类型包的安装程序。\n\ncomposer 原生支持以下4种类型：\n\nlibrary: 这是默认类型，它会简单的将文件复制到 vendor 目录。\nproject: 这表示当前包是一个项目，而不是一个库。例：框架应用程序 Symfony standard edition，内容管理系统 SilverStripe installer 或者完全成熟的分布式应用程序。使用 IDE 创建一个新的工作区时，这可以为其提供项目列表的初始化。\nmetapackage: 当一个空的包，包含依赖并且需要触发依赖的安装，这将不会对系统写入额外的文件。因此这种安装类型并不需要一个 dist 或 source。\ncomposer-plugin: 一个安装类型为 composer-plugin 的包，它有一个自定义安装类型，可以为其它包提供一个 installler。详细请查看 自定义安装类型。\n仅在你需要一个自定义的安装逻辑时才使用它。建议忽略这个属性，采用默认的 library。\n\n\n关键字 keywords\n\n该包相关的关键词的数组。这些可用于搜索和过滤。\n\n实例：\n\nlogging\nevents\ndatabase\nredis\ntemplating\n可选。\n\n\n项目主页 homepage\n\n该项目网站的 URL 地址。\n\n可选。\n\n\n版本发布时间 time\n\n版本发布时间。\n\n必须符合 YYYY-MM-DD 或 YYYY-MM-DD HH:MM:SS 格式。\n\n可选。\n\n\n许可协议 license\n\n包的许可协议，它可以是一个字符串或者字符串数组。\n\n最常见的许可协议的推荐写法（按字母排序）：\n\nApache-2.0\nBSD-2-Clause\nBSD-3-Clause\nBSD-4-Clause\nGPL-2.0\nGPL-2.0+\nGPL-3.0\nGPL-3.0+\nLGPL-2.1\nLGPL-2.1+\nLGPL-3.0\nLGPL-3.0+\nMIT\n可选，但强烈建议提供此内容。更多许可协议的标识符请参见 SPDX Open Source License Registry。\n\n对于闭源软件，你必须使用 \"proprietary\" 协议标识符。\n\n一个例：\n\n{\n    \"license\": \"MIT\"\n}\n对于一个包，当允许在多个许可协议间进行选择时（\"disjunctive license\"），这些协议标识符可以被指定为数组。\n\n多协议的一个例：\n\n{\n    \"license\": [\n       \"LGPL-2.1\",\n       \"GPL-3.0+\"\n    ]\n}\n另外它们也可以由 \"or\" 分隔，并写在括号中：\n\n{\n    \"license\": \"(LGPL-2.1 or GPL-3.0+)\"\n}\n同样，当有多个许可协议需要结合使用时（\"conjunctive license\"），它们应该被 \"and\" 分隔，并写在括号中。\n\n\n作者 authors\n\n包的作者。这是一个对象数组。\n\n这个对象必须包含以下属性：\n\nname: 作者的姓名，通常使用真名。\nemail: 作者的 email 地址。\nhomepage: 作者主页的 URL 地址。\nrole: 该作者在此项目中担任的角色（例：开发人员 或 翻译）。\n一个实例：\n{% codeblock %}\n\n{\n    \"authors\": [\n        {\n            \"name\": \"Nils Adermann\",\n            \"email\": \"naderman@naderman.de\",\n            \"homepage\": \"http://www.naderman.de\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"Jordi Boggiano\",\n            \"email\": \"j.boggiano@seld.be\",\n            \"homepage\": \"http://seld.be\",\n            \"role\": \"Developer\"\n        }\n    ]\n}\n{% endcodeblock %}\n可选，但强烈建议提供此内容。\n\n\n支持 support\n\n获取项目支持的向相关信息对象。\n\n这个对象必须包含以下属性：\n\nemail: 项目支持 email 地址。\nissues: 跟踪问题的 URL 地址。\nforum: 论坛地址。\nwiki: Wiki 地址。\nirc: IRC 聊天频道地址，类似于 irc://server/channel。\nsource: 网址浏览或下载源。\n一个实例：\n{% codeblock %}\n{\n    \"support\": {\n        \"email\": \"support@example.org\",\n        \"irc\": \"irc://irc.freenode.org/composer\"\n    }\n}\n{% endcodeblock %}\n可选。\n\n\nPackage links\n\n下面提到的所有对象，都应该是 包名 到 版本 的映射对象。\n\n实例：\n{% codeblock %}\n{\n    \"require\": {\n        \"monolog/monolog\": \"1.0.*\"\n    }\n}\n{% endcodeblock %}\n所有的这些都是可选的。\n\nrequire 和 require-dev 还支持稳定性标签（@，仅针对“root 包”）。这允许你在 minimum-stability 设定的范围外做进一步的限制或扩展。例：如果你想允许依赖一个不稳定的包，你可以在一个包的版本约束后使用它，或者是一个空的版本约束内使用它。\n\n实例：\n{% codeblock %}\n{\n    \"require\": {\n        \"monolog/monolog\": \"1.0.*@beta\",\n        \"acme/foo\": \"@dev\"\n    }\n}\n{% endcodeblock %}\n如果你的依赖之一，有对另一个不稳定包的依赖，你最好在 require 中显示的定义它，并带上足够详细的稳定性标识。\n\n实例：\n{% codeblock %}\n{\n    \"require\": {\n        \"doctrine/doctrine-fixtures-bundle\": \"dev-master\",\n        \"doctrine/data-fixtures\": \"@dev\"\n    }\n}\n{% endcodeblock %}\nrequire 和 require-dev 还支持对 dev（开发）版本的明确引用（即：版本控制系统中的提交编号 commit），以确保它们被锁定到一个给定的状态，即使你运行了更新命令。你只需要明确一个开发版本号，并带上诸如 #<ref> 的标识。\n\n实例：\n{% codeblock %}\n\n{\n    \"require\": {\n        \"monolog/monolog\": \"dev-master#2eb0c0978d290a1c45346a1955188929cb4e5db7\",\n        \"acme/foo\": \"1.0.x-dev#abc123\"\n    }\n}\n{% endcodeblock %}\n\n注意： 虽然这有时很方便，但不应该长期在你的包中使用，因为它有一个技术上的限制。 composer.json 将仍然在哈希值之前指定的分支名称读取元数据， 正因为如此，在某些情况下，它不会是一个实用的解决方法， 如果可能，你应该总是尝试切换到拥有标签的版本。\n\n它也可以应用于行内别名，这样它将匹配一个约束，否则不会。更多信息请参考 别名。\n\n\nrequire\n\n必须的软件包列表，除非这些依赖被满足，否则不会完成安装。\n\n\nrequire-dev (root-only)\n\n这个列表是为开发或测试等目的，额外列出的依赖。“root 包”的 require-dev 默认是会被安装的。然而 install 或 update 支持使用 --no-dev 参数来跳过 require-dev 字段中列出的包。\n\n\nconflict\n\n此列表中的包与当前包的这个版本冲突。它们将不允许同时被安装。\n\n请注意，在 conflict 中指定类似于 <1.0, >= 1.1 的版本范围时，这表示它与小于1.0 并且 同时大等于1.1的版本冲突，这很可能不是你想要的。在这种情况下你可能想要表达的是 <1.0 | >= 1.1 。\n\n\nreplace\n\n这个列表中的包将被当前包取代。这使你可以 fork 一个包，以不同的名称和版本号发布，同时要求依赖于原包的其它包，在这之后依赖于你 fork 的这个包，因为它取代了原来的包。\n\n这对于创建一个内部包含子包的主包也非常的有用。例如 symfony/symfony 这个主包，包含了所有 Symfony 的组件，而这些组件又可以作为单独的包进行发布。如果你 require 了主包，那么它就会自动完成其下各个组件的任务，因为主包取代了子包。\n\n注意，在使用上述方法取代子包时，通常你应该只对子包使用 self.version 这一个版本约束，以确保主包仅替换掉子包的准确版本，而不是任何其他版本。\n\n\nprovide\n\nList of other packages that are provided by this package. This is mostly useful for common interfaces. A package could depend on some virtual logger package, any library that implements this logger interface would simply list it in provide.\n\n\nsuggest\n\n建议安装的包，它们增强或能够与当前包良好的工作。这些只是信息，并显示在依赖包安装完成之后，给你的用户一个建议，他们可以添加更多的包。\n\n格式如下，版本约束变成了描述信息。\n\n实例：\n{% codeblock %}\n\n{\n    \"suggest\": {\n        \"monolog/monolog\": \"Allows more advanced logging of the application flow\"\n    }\n}\n{% endcodeblock %}\n\nautoload\n\nPHP autoloader 的自动加载映射。\n\nCurrently PSR-0 autoloading, PSR-4 autoloading, classmap generation and files includes are supported. PSR-4 is the recommended way though since it offers greater ease of use (no need to regenerate the autoloader when you add classes).\n\nPSR-4\n\nUnder the psr-4 key you define a mapping from namespaces to paths, relative to the package root. When autoloading a class like Foo\\\\Bar\\\\Baz a namespace prefix Foo\\\\ pointing to a directory src/ means that the autoloader will look for a file named src/Bar/Baz.php and include it if present. Note that as opposed to the older PSR-0 style, the prefix (Foo\\\\) is not present in the file path.\n\nNamespace prefixes must end in \\\\ to avoid conflicts between similar prefixes. For example Foo would match classes in the FooBar namespace so the trailing backslashes solve the problem: Foo\\\\ and FooBar\\\\ are distinct.\n\nThe PSR-4 references are all combined, during install/update, into a single key => value array which may be found in the generated file vendor/composer/autoload_psr4.php.\n\nExample:\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"psr-4\": {\n            \"Monolog\\\\\": \"src/\",\n            \"Vendor\\\\Namespace\\\\\": \"\"\n        }\n    }\n}\nIf you need to search for a same prefix in multiple directories, you can specify them as an array as such:\n\n{\n    \"autoload\": {\n        \"psr-4\": { \"Monolog\\\\\": [\"src/\", \"lib/\"] }\n    }\n}\n{% endcodeblock %}\n\nIf you want to have a fallback directory where any namespace will be looked for, you can use an empty prefix like:\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"psr-4\": { \"\": \"src/\" }\n    }\n}\n{% endcodeblock %}\n\nPSR-0\n\n在 psr-0 key 下你定义了一个命名空间到实际路径的映射（相对于包的根目录）。注意，这里同样支持 PEAR-style 方式的约定（与命名空间不同，PEAR 类库在类名上采用了下划线分隔）。\n\n请注意，命名空间的申明应该以 \\\\ 结束，以确保 autoloader 能够准确响应。例： Foo 将会与 FooBar 匹配，然而以反斜杠结束就可以解决这样的问题， Foo\\\\ 和 FooBar\\\\ 将会被区分开来。\n\n在 install/update 过程中，PSR-0 引用都将被结合为一个单一的键值对数组，存储至 vendor/composer/autoload_namespaces.php 文件中。\n\n实例：\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"psr-0\": {\n            \"Monolog\\\\\": \"src/\",\n            \"Vendor\\\\Namespace\\\\\": \"src/\",\n            \"Vendor_Namespace_\": \"src/\"\n        }\n    }\n}\n{% endcodeblock %}\n\n如果你需要搜索多个目录中一个相同的前缀，你可以将它们指定为一个数组，例：\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"psr-0\": { \"Monolog\\\\\": [\"src/\", \"lib/\"] }\n    }\n}\n{% endcodeblock %}\n\nPSR-0 方式并不仅限于申明命名空间，也可以是精确到类级别的指定。这对于只有一个类在全局命名空间的类库是非常有用的（如果 php 源文件也位于包的根目录）。例如，可以这样申明：\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"psr-0\": { \"UniqueGlobalClass\": \"\" }\n    }\n}\n{% endcodeblock %}\n\n如果你想设置一个目录作为任何命名空间的备用目录，你可以使用空的前缀，像这样：\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"psr-0\": { \"\": \"src/\" }\n    }\n}\n{% endcodeblock %}\n\nClassmap\n\nclassmap 引用的所有组合，都会在 install/update 过程中生成，并存储到 vendor/composer/autoload_classmap.php 文件中。这个 map 是经过扫描指定目录（同样支持直接精确到文件）中所有的 .php 和 .inc 文件里内置的类而得到的。\n\n你可以用 classmap 生成支持支持自定义加载的不遵循 PSR-0/4 规范的类库。要配置它指向需要的目录，以便能够准确搜索到类文件。\n\n实例：\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"classmap\": [\"src/\", \"lib/\", \"Something.php\"]\n    }\n}\n{% endcodeblock %}\n\n\nFiles\n\n如果你想要明确的指定，在每次请求时都要载入某些文件，那么你可以使用 'files' autoloading。通常作为函数库的载入方式（而非类库）。\n\n实例：\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"files\": [\"src/MyLibrary/functions.php\"]\n    }\n}\n{% endcodeblock %}\n\nautoload-dev (root-only)\n\nThis section allows to define autoload rules for development purposes.\n\nClasses needed to run the test suite should not be included in the main autoload rules to avoid polluting the autoloader in production and when other people use your package as a dependency.\n\nTherefore, it is a good idea to rely on a dedicated path for your unit tests and to add it within the autoload-dev section.\n\nExample:\n\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"psr-4\": { \"MyLibrary\\\\\": \"src/\" }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": { \"MyLibrary\\\\Tests\\\\\": \"tests/\" }\n    }\n}\n\n{% endcodeblock %}\n\ninclude-path\n\n不建议：这是目前唯一支持传统项目的做法，所有新的代码都建议使用自动加载。 这是一个过时的做法，但 Composer 将仍然保留这个功能。\n\n一个追加到 PHP include_path 中的列表。\n\n实例：\n{% codeblock %}\n\n{\n    \"include-path\": [\"lib/\"]\n}\n{% endcodeblock %}\n\n可选。\n\n\ntarget-dir\n\nDEPRECATED: This is only present to support legacy PSR-0 style autoloading, and all new code should preferably use PSR-4 without target-dir and projects using PSR-0 with PHP namespaces are encouraged to migrate to PSR-4 instead.\n\n定义当前包安装的目标文件夹。\n\n若某个包的根目录，在它申明的命名空间之下，将不能正确的使用自动加载。而 target-dir 解决了这个问题。\n\nSymfony 就是一个例子。它有一些独立的包作为组件。Yaml 组件就放在 Symfony\\Component\\Yaml 目录下，然而这个包的根目录实际上是 Yaml。为了使自动加载成为可能，我们需要确保它不会被安装到 vendor/symfony/yaml，而是安装到 vendor/symfony/yaml/Symfony/Component/Yaml，从而使 Symfony 定义的 autoloader 可以从 vendor/symfony/yaml 加载它。\n\n要做到这一点 autoload 和 target-dir 应该定义如下：\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"psr-0\": { \"Symfony\\\\Component\\\\Yaml\\\\\": \"\" }\n    },\n    \"target-dir\": \"Symfony/Component/Yaml\"\n}\n{% endcodeblock %}\n\n可选。\n\n\nminimum-stability (root-only)\n\n这定义了通过稳定性过滤包的默认行为。默认为 stable（稳定）。因此如果你依赖于一个 dev（开发）包，你应该明确的进行定义。\n\n对每个包的所有版本都会进行稳定性检查，而低于 minimum-stability 所设定的最低稳定性的版本，将在解决依赖关系时被忽略。对于个别包的特殊稳定性要求，可以在 require 或 require-dev 中设定（请参考 Package links）。\n\n可用的稳定性标识（按字母排序）：dev、alpha、beta、RC、stable。\n\n\nprefer-stable (root-only)\n\n当此选项被激活时，Composer 将优先使用更稳定的包版本。\n\n使用 \"prefer-stable\": true 来激活它。\n\n\nrepositories (root-only)\n\n使用自定义的包资源库。\n\n默认情况下 composer 只使用 packagist 作为包的资源库。通过指定资源库，你可以从其他地方获取资源包。\n\nRepositories 并不是递归调用的，只能在“Root包”的 composer.json 中定义。附属包中的 composer.json 将被忽略。\n\n支持以下类型的包资源库：\n\ncomposer: 一个 composer 类型的资源库，是一个简单的网络服务器（HTTP、FTP、SSH）上的 packages.json 文件，它包含一个 composer.json 对象的列表，有额外的 dist 和/或 source 信息。这个 packages.json 文件是用一个 PHP 流加载的。你可以使用 options 参数来设定额外的流信息。\nvcs: 从 git、svn 和 hg 取得资源。\npear: 从 pear 获取资源。\npackage: 如果你依赖于一个项目，它不提供任何对 composer 的支持，你就可以使用这种类型。你基本上就只需要内联一个 composer.json 对象。\n更多相关内容，请查看 资源库。\n\n实例：\n{% codeblock %}\n\n\n{\n    \"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": \"http://packages.example.com\"\n        },\n        {\n            \"type\": \"composer\",\n            \"url\": \"https://packages.example.com\",\n            \"options\": {\n                \"ssl\": {\n                    \"verify_peer\": \"true\"\n                }\n            }\n        },\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/Seldaek/monolog\"\n        },\n        {\n            \"type\": \"pear\",\n            \"url\": \"http://pear2.php.net\"\n        },\n        {\n            \"type\": \"package\",\n            \"package\": {\n                \"name\": \"smarty/smarty\",\n                \"version\": \"3.1.7\",\n                \"dist\": {\n                    \"url\": \"http://www.smarty.net/files/Smarty-3.1.7.zip\",\n                    \"type\": \"zip\"\n                },\n                \"source\": {\n                    \"url\": \"http://smarty-php.googlecode.com/svn/\",\n                    \"type\": \"svn\",\n                    \"reference\": \"tags/Smarty_3_1_7/distribution/\"\n                }\n            }\n        }\n    ]\n}\n{% endcodeblock %}\n\n注意： 顺序是非常重要的，当 Composer 查找资源包时，它会按照顺序进行。默认情况下 Packagist 是最后加入的，因此自定义设置将可以覆盖 Packagist 上的包。\n\n\nconfig (root-only)\n\n下面的这一组选项，仅用于项目。\n\n支持以下选项：\n\nprocess-timeout: 默认为 300。处理进程结束时间，例如：git 克隆的时间。Composer 将放弃超时的任务。如果你的网络缓慢或者正在使用一个巨大的包，你可能要将这个值设置的更高一些。\nuse-include-path: 默认为 false。如果为 true，Composer autoloader 还将在 PHP include path 中继续查找类文件。\npreferred-install: 默认为 auto。它的值可以是 source、dist 或 auto。这个选项允许你设置 Composer 的默认安装方法。\ngithub-protocols: 默认为 [\"git\", \"https\", \"ssh\"]。从 github.com 克隆时使用的协议优先级清单，因此默认情况下将优先使用 git 协议进行克隆。你可以重新排列它们的次序，例如，如果你的网络有代理服务器或 git 协议的效率很低，你就可以提升 https 协议的优先级。\ngithub-oauth: 一个域名和 oauth keys 的列表。 例如：使用 {\"github.com\": \"oauthtoken\"} 作为此选项的值， 将使用 oauthtoken 来访问 github 上的私人仓库，并绕过 low IP-based rate 的 API 限制。 关联知识 关于如何获取 GitHub 的 OAuth token。\nvendor-dir: 默认为 vendor。通过设置你可以安装依赖到不同的目录。\nbin-dir: 默认为 vendor/bin。如果一个项目包含二进制文件，它们将被连接到这个目录。\ncache-dir: unix 下默认为 $home/cache，Windows 下默认为 C:\\Users\\<user>\\AppData\\Local\\Composer。用于存储 composer 所有的缓存文件。相关信息请查看 COMPOSER_HOME。\ncache-files-dir: 默认为 $cache-dir/files。存储包 zip 存档的目录。\ncache-repo-dir: 默认为 $cache-dir/repo。存储 composer 类型的 VCS（svn、github、bitbucket） repos 目录。\ncache-vcs-dir: 默认为 $cache-dir/vcs。此目录用于存储 VCS 克隆的 git/hg 类型的元数据，并加快安装速度。\ncache-files-ttl: 默认为 15552000（6个月）。默认情况下 Composer 缓存的所有数据都将在闲置6个月后被删除，这个选项允许你来调整这个时间，你可以将其设置为0以禁用缓存。\ncache-files-maxsize: 默认为 300MiB。Composer 缓存的最大容量，超出后将优先清除旧的缓存数据，直到缓存量低于这个数值。\nprepend-autoloader: 默认为 true。如果设置为 false，composer autoloader 将不会附加到现有的自动加载机制中。这有时候用来解决与其它自动加载机制产生的冲突。\nautoloader-suffix: 默认为 null。Composer autoloader 的后缀，当设置为空时将会产生一个随机的字符串。\noptimize-autoloader Defaults to false. Always optimize when dumping the autoloader.\ngithub-domains: 默认为 [\"github.com\"]。一个 github mode 下的域名列表。这是用于GitHub的企业设置。\nnotify-on-install: 默认为 true。Composer 允许资源仓库定义一个用于通知的 URL，以便有人从其上安装资源包时能够得到一个反馈通知。此选项允许你禁用该行为。\ndiscard-changes: 默认为 false，它的值可以是 true、false 或 stash。这个选项允许你设置在非交互模式下，当处理失败的更新时采用的处理方式。true 表示永远放弃更改。\"stash\" 表示继续尝试。Use this for CI servers or deploy scripts if you tend to have modified vendors.\n实例：\n\n{% codeblock %}\n\n\n{\n    \"config\": {\n        \"bin-dir\": \"bin\"\n    }\n}\n{% endcodeblock %}\n\nscripts (root-only)\n\nComposer 允许你在安装过程中的各个阶段挂接脚本。\n\n更多细节和案例请查看 脚本。\n\n\nextra\n\n任意的，供 scripts 使用的额外数据。.\n\n这可以是几乎任何东西。若要从脚本事件访问处理程序，你可以这样做：\n\n$extra = $event->getComposer()->getPackage()->getExtra();\n可选。\n\n\nbin\n\n该属性用于标注一组应被视为二进制脚本的文件，他们会被软链接到（config 对象中的）bin-dir 属性所标注的目录，以供其他依赖包调用。\n\n详细请查看 Vendor Binaries。\n\n可选。\n\n\narchive\n\n这些选项在创建包存档时使用。\n\n支持以下选项：\n\nexclude: 允许设置一个需要被排除的路径的列表。使用与 .gitignore 文件相同的语法。一个前导的（!）将会使其变成白名单而无视之前相同目录的排除设定。前导斜杠只会在项目的相对路径的开头匹配。星号为通配符。\n实例：\n{% codeblock %}\n{\n    \"archive\": {\n        \"exclude\": [\"/foo/bar\", \"baz\", \"/*.test\", \"!/foo/bar/baz\"]\n    }\n}\n{% endcodeblock %}\n\n在这个例子中我们 include /dir/foo/bar/file、/foo/bar/baz、/file.php、/foo/my.test 但排除了 /foo/bar/any、/foo/baz、/my.test。\n\n","slug":"composer-json架构","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeiel30003znz4o2kh3p4u","content":"<p>composer.json 架构:</p>\n<p>Root 包:</p>\n<p>“root 包”是指由 composer.json 定义的在你项目根目录的包。这是 composer.json 定义你项目所需的主要条件。（简单的说，你自己的项目就是一个 root 包）</p>\n<p>某些字段仅适用于“root 包”上下文。 config 字段就是其中一个例子。只有“root 包”可以定义。在依赖包中定义的 config 字段将被忽略，这使得 config 字段只有“root 包”可用（root-only）。</p>\n<p>如果你克隆了其中的一个依赖包，直接在其上开始工作，那么它就变成了“root 包”。与作为他人的依赖包时使用相同的 composer.json 文件，但上下文发生了变化。</p>\n<p>注意： 一个资源包是不是“root 包”，取决于它的上下文。 例：如果你的项目依赖 monolog 库，那么你的项目就是“root 包”。 但是，如果你从 GitHub 上克隆了 monolog 为它修复 bug， 那么此时 monolog 就是“root 包”。<br><a id=\"more\"></a></p>\n<p>属性:</p>\n<p>包名 name</p>\n<p>包的名称，它包括供应商名称和项目名称，使用 / 分隔。</p>\n<p>例：</p>\n<p>monolog/monolog<br>igorw/event-source<br>对于需要发布的包（库），这是必须填写的。</p>\n<p>描述 description</p>\n<p>一个包的简短描述。通常这个最长只有一行。</p>\n<p>对于需要发布的包（库），这是必须填写的。</p>\n<p>版本 version</p>\n<p>version 不是必须的，并且建议忽略（见下文）。</p>\n<p>它应该符合 ‘X.Y.Z’ 或者 ‘vX.Y.Z’ 的形式， -dev、-patch、-alpha、-beta 或 -RC 这些后缀是可选的。在后缀之后也可以再跟上一个数字。</p>\n<p>例：</p>\n<p>1.0.0<br>1.0.2<br>1.1.0<br>0.2.5<br>1.0.0-dev<br>1.0.0-alpha3<br>1.0.0-beta2<br>1.0.0-RC5<br>通常，我们能够从 VCS (git, svn, hg) 的信息推断出包的版本号，在这种情况下，我们建议忽略 version。</p>\n<p>注意： Packagist 使用 VCS 仓库， 因此 version 定义的版本号必须是真实准确的。 自己手动指定的 version，最终有可能在某个时候因为人为错误造成问题。</p>\n<p>安装类型 type</p>\n<p>包的安装类型，默认为 library。</p>\n<p>包的安装类型，用来定义安装逻辑。如果你有一个包需要一个特殊的逻辑，你可以设定一个自定义的类型。这可以是一个 symfony-bundle，一个 wordpress-plugin 或者一个 typo3-module。这些类型都将是具体到某一个项目，而对应的项目将要提供一种能够安装该类型包的安装程序。</p>\n<p>composer 原生支持以下4种类型：</p>\n<p>library: 这是默认类型，它会简单的将文件复制到 vendor 目录。<br>project: 这表示当前包是一个项目，而不是一个库。例：框架应用程序 Symfony standard edition，内容管理系统 SilverStripe installer 或者完全成熟的分布式应用程序。使用 IDE 创建一个新的工作区时，这可以为其提供项目列表的初始化。<br>metapackage: 当一个空的包，包含依赖并且需要触发依赖的安装，这将不会对系统写入额外的文件。因此这种安装类型并不需要一个 dist 或 source。<br>composer-plugin: 一个安装类型为 composer-plugin 的包，它有一个自定义安装类型，可以为其它包提供一个 installler。详细请查看 自定义安装类型。<br>仅在你需要一个自定义的安装逻辑时才使用它。建议忽略这个属性，采用默认的 library。</p>\n<p>关键字 keywords</p>\n<p>该包相关的关键词的数组。这些可用于搜索和过滤。</p>\n<p>实例：</p>\n<p>logging<br>events<br>database<br>redis<br>templating<br>可选。</p>\n<p>项目主页 homepage</p>\n<p>该项目网站的 URL 地址。</p>\n<p>可选。</p>\n<p>版本发布时间 time</p>\n<p>版本发布时间。</p>\n<p>必须符合 YYYY-MM-DD 或 YYYY-MM-DD HH:MM:SS 格式。</p>\n<p>可选。</p>\n<p>许可协议 license</p>\n<p>包的许可协议，它可以是一个字符串或者字符串数组。</p>\n<p>最常见的许可协议的推荐写法（按字母排序）：</p>\n<p>Apache-2.0<br>BSD-2-Clause<br>BSD-3-Clause<br>BSD-4-Clause<br>GPL-2.0<br>GPL-2.0+<br>GPL-3.0<br>GPL-3.0+<br>LGPL-2.1<br>LGPL-2.1+<br>LGPL-3.0<br>LGPL-3.0+<br>MIT<br>可选，但强烈建议提供此内容。更多许可协议的标识符请参见 SPDX Open Source License Registry。</p>\n<p>对于闭源软件，你必须使用 “proprietary” 协议标识符。</p>\n<p>一个例：</p>\n<p>{<br>    “license”: “MIT”<br>}<br>对于一个包，当允许在多个许可协议间进行选择时（”disjunctive license”），这些协议标识符可以被指定为数组。</p>\n<p>多协议的一个例：</p>\n<p>{<br>    “license”: [<br>       “LGPL-2.1”,<br>       “GPL-3.0+”<br>    ]<br>}<br>另外它们也可以由 “or” 分隔，并写在括号中：</p>\n<p>{<br>    “license”: “(LGPL-2.1 or GPL-3.0+)”<br>}<br>同样，当有多个许可协议需要结合使用时（”conjunctive license”），它们应该被 “and” 分隔，并写在括号中。</p>\n<p>作者 authors</p>\n<p>包的作者。这是一个对象数组。</p>\n<p>这个对象必须包含以下属性：</p>\n<p>name: 作者的姓名，通常使用真名。<br>email: 作者的 email 地址。<br>homepage: 作者主页的 URL 地址。<br>role: 该作者在此项目中担任的角色（例：开发人员 或 翻译）。<br>一个实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;authors&quot;: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;name&quot;: &quot;Nils Adermann&quot;,</div><div class=\"line\">            &quot;email&quot;: &quot;naderman@naderman.de&quot;,</div><div class=\"line\">            &quot;homepage&quot;: &quot;http://www.naderman.de&quot;,</div><div class=\"line\">            &quot;role&quot;: &quot;Developer&quot;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;name&quot;: &quot;Jordi Boggiano&quot;,</div><div class=\"line\">            &quot;email&quot;: &quot;j.boggiano@seld.be&quot;,</div><div class=\"line\">            &quot;homepage&quot;: &quot;http://seld.be&quot;,</div><div class=\"line\">            &quot;role&quot;: &quot;Developer&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>可选，但强烈建议提供此内容。</p>\n<p>支持 support</p>\n<p>获取项目支持的向相关信息对象。</p>\n<p>这个对象必须包含以下属性：</p>\n<p>email: 项目支持 email 地址。<br>issues: 跟踪问题的 URL 地址。<br>forum: 论坛地址。<br>wiki: Wiki 地址。<br>irc: IRC 聊天频道地址，类似于 irc://server/channel。<br>source: 网址浏览或下载源。<br>一个实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;support&quot;: &#123;</div><div class=\"line\">        &quot;email&quot;: &quot;support@example.org&quot;,</div><div class=\"line\">        &quot;irc&quot;: &quot;irc://irc.freenode.org/composer&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>可选。</p>\n<p>Package links</p>\n<p>下面提到的所有对象，都应该是 包名 到 版本 的映射对象。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;require&quot;: &#123;</div><div class=\"line\">        &quot;monolog/monolog&quot;: &quot;1.0.*&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>所有的这些都是可选的。</p>\n<p>require 和 require-dev 还支持稳定性标签（@，仅针对“root 包”）。这允许你在 minimum-stability 设定的范围外做进一步的限制或扩展。例：如果你想允许依赖一个不稳定的包，你可以在一个包的版本约束后使用它，或者是一个空的版本约束内使用它。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;require&quot;: &#123;</div><div class=\"line\">        &quot;monolog/monolog&quot;: &quot;1.0.*@beta&quot;,</div><div class=\"line\">        &quot;acme/foo&quot;: &quot;@dev&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>如果你的依赖之一，有对另一个不稳定包的依赖，你最好在 require 中显示的定义它，并带上足够详细的稳定性标识。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;require&quot;: &#123;</div><div class=\"line\">        &quot;doctrine/doctrine-fixtures-bundle&quot;: &quot;dev-master&quot;,</div><div class=\"line\">        &quot;doctrine/data-fixtures&quot;: &quot;@dev&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>require 和 require-dev 还支持对 dev（开发）版本的明确引用（即：版本控制系统中的提交编号 commit），以确保它们被锁定到一个给定的状态，即使你运行了更新命令。你只需要明确一个开发版本号，并带上诸如 #<ref> 的标识。</ref></p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;require&quot;: &#123;</div><div class=\"line\">        &quot;monolog/monolog&quot;: &quot;dev-master#2eb0c0978d290a1c45346a1955188929cb4e5db7&quot;,</div><div class=\"line\">        &quot;acme/foo&quot;: &quot;1.0.x-dev#abc123&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意： 虽然这有时很方便，但不应该长期在你的包中使用，因为它有一个技术上的限制。 composer.json 将仍然在哈希值之前指定的分支名称读取元数据， 正因为如此，在某些情况下，它不会是一个实用的解决方法， 如果可能，你应该总是尝试切换到拥有标签的版本。</p>\n<p>它也可以应用于行内别名，这样它将匹配一个约束，否则不会。更多信息请参考 别名。</p>\n<p>require</p>\n<p>必须的软件包列表，除非这些依赖被满足，否则不会完成安装。</p>\n<p>require-dev (root-only)</p>\n<p>这个列表是为开发或测试等目的，额外列出的依赖。“root 包”的 require-dev 默认是会被安装的。然而 install 或 update 支持使用 –no-dev 参数来跳过 require-dev 字段中列出的包。</p>\n<p>conflict</p>\n<p>此列表中的包与当前包的这个版本冲突。它们将不允许同时被安装。</p>\n<p>请注意，在 conflict 中指定类似于 <1.0,>= 1.1 的版本范围时，这表示它与小于1.0 并且 同时大等于1.1的版本冲突，这很可能不是你想要的。在这种情况下你可能想要表达的是 <1.0 |=\"\">= 1.1 。</1.0></1.0,></p>\n<p>replace</p>\n<p>这个列表中的包将被当前包取代。这使你可以 fork 一个包，以不同的名称和版本号发布，同时要求依赖于原包的其它包，在这之后依赖于你 fork 的这个包，因为它取代了原来的包。</p>\n<p>这对于创建一个内部包含子包的主包也非常的有用。例如 symfony/symfony 这个主包，包含了所有 Symfony 的组件，而这些组件又可以作为单独的包进行发布。如果你 require 了主包，那么它就会自动完成其下各个组件的任务，因为主包取代了子包。</p>\n<p>注意，在使用上述方法取代子包时，通常你应该只对子包使用 self.version 这一个版本约束，以确保主包仅替换掉子包的准确版本，而不是任何其他版本。</p>\n<p>provide</p>\n<p>List of other packages that are provided by this package. This is mostly useful for common interfaces. A package could depend on some virtual logger package, any library that implements this logger interface would simply list it in provide.</p>\n<p>suggest</p>\n<p>建议安装的包，它们增强或能够与当前包良好的工作。这些只是信息，并显示在依赖包安装完成之后，给你的用户一个建议，他们可以添加更多的包。</p>\n<p>格式如下，版本约束变成了描述信息。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;suggest&quot;: &#123;</div><div class=\"line\">        &quot;monolog/monolog&quot;: &quot;Allows more advanced logging of the application flow&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>autoload</p>\n<p>PHP autoloader 的自动加载映射。</p>\n<p>Currently PSR-0 autoloading, PSR-4 autoloading, classmap generation and files includes are supported. PSR-4 is the recommended way though since it offers greater ease of use (no need to regenerate the autoloader when you add classes).</p>\n<p>PSR-4</p>\n<p>Under the psr-4 key you define a mapping from namespaces to paths, relative to the package root. When autoloading a class like Foo\\Bar\\Baz a namespace prefix Foo\\ pointing to a directory src/ means that the autoloader will look for a file named src/Bar/Baz.php and include it if present. Note that as opposed to the older PSR-0 style, the prefix (Foo\\) is not present in the file path.</p>\n<p>Namespace prefixes must end in \\ to avoid conflicts between similar prefixes. For example Foo would match classes in the FooBar namespace so the trailing backslashes solve the problem: Foo\\ and FooBar\\ are distinct.</p>\n<p>The PSR-4 references are all combined, during install/update, into a single key =&gt; value array which may be found in the generated file vendor/composer/autoload_psr4.php.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-4&quot;: &#123;</div><div class=\"line\">            &quot;Monolog\\\\&quot;: &quot;src/&quot;,</div><div class=\"line\">            &quot;Vendor\\\\Namespace\\\\&quot;: &quot;&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">If you need to search for a same prefix in multiple directories, you can specify them as an array as such:</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-4&quot;: &#123; &quot;Monolog\\\\&quot;: [&quot;src/&quot;, &quot;lib/&quot;] &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>If you want to have a fallback directory where any namespace will be looked for, you can use an empty prefix like:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-4&quot;: &#123; &quot;&quot;: &quot;src/&quot; &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>PSR-0</p>\n<p>在 psr-0 key 下你定义了一个命名空间到实际路径的映射（相对于包的根目录）。注意，这里同样支持 PEAR-style 方式的约定（与命名空间不同，PEAR 类库在类名上采用了下划线分隔）。</p>\n<p>请注意，命名空间的申明应该以 \\ 结束，以确保 autoloader 能够准确响应。例： Foo 将会与 FooBar 匹配，然而以反斜杠结束就可以解决这样的问题， Foo\\ 和 FooBar\\ 将会被区分开来。</p>\n<p>在 install/update 过程中，PSR-0 引用都将被结合为一个单一的键值对数组，存储至 vendor/composer/autoload_namespaces.php 文件中。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-0&quot;: &#123;</div><div class=\"line\">            &quot;Monolog\\\\&quot;: &quot;src/&quot;,</div><div class=\"line\">            &quot;Vendor\\\\Namespace\\\\&quot;: &quot;src/&quot;,</div><div class=\"line\">            &quot;Vendor_Namespace_&quot;: &quot;src/&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果你需要搜索多个目录中一个相同的前缀，你可以将它们指定为一个数组，例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-0&quot;: &#123; &quot;Monolog\\\\&quot;: [&quot;src/&quot;, &quot;lib/&quot;] &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>PSR-0 方式并不仅限于申明命名空间，也可以是精确到类级别的指定。这对于只有一个类在全局命名空间的类库是非常有用的（如果 php 源文件也位于包的根目录）。例如，可以这样申明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-0&quot;: &#123; &quot;UniqueGlobalClass&quot;: &quot;&quot; &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果你想设置一个目录作为任何命名空间的备用目录，你可以使用空的前缀，像这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-0&quot;: &#123; &quot;&quot;: &quot;src/&quot; &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Classmap</p>\n<p>classmap 引用的所有组合，都会在 install/update 过程中生成，并存储到 vendor/composer/autoload_classmap.php 文件中。这个 map 是经过扫描指定目录（同样支持直接精确到文件）中所有的 .php 和 .inc 文件里内置的类而得到的。</p>\n<p>你可以用 classmap 生成支持支持自定义加载的不遵循 PSR-0/4 规范的类库。要配置它指向需要的目录，以便能够准确搜索到类文件。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;classmap&quot;: [&quot;src/&quot;, &quot;lib/&quot;, &quot;Something.php&quot;]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Files</p>\n<p>如果你想要明确的指定，在每次请求时都要载入某些文件，那么你可以使用 ‘files’ autoloading。通常作为函数库的载入方式（而非类库）。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;files&quot;: [&quot;src/MyLibrary/functions.php&quot;]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>autoload-dev (root-only)</p>\n<p>This section allows to define autoload rules for development purposes.</p>\n<p>Classes needed to run the test suite should not be included in the main autoload rules to avoid polluting the autoloader in production and when other people use your package as a dependency.</p>\n<p>Therefore, it is a good idea to rely on a dedicated path for your unit tests and to add it within the autoload-dev section.</p>\n<p>Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-4&quot;: &#123; &quot;MyLibrary\\\\&quot;: &quot;src/&quot; &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;autoload-dev&quot;: &#123;</div><div class=\"line\">        &quot;psr-4&quot;: &#123; &quot;MyLibrary\\\\Tests\\\\&quot;: &quot;tests/&quot; &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>include-path</p>\n<p>不建议：这是目前唯一支持传统项目的做法，所有新的代码都建议使用自动加载。 这是一个过时的做法，但 Composer 将仍然保留这个功能。</p>\n<p>一个追加到 PHP include_path 中的列表。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;include-path&quot;: [&quot;lib/&quot;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可选。</p>\n<p>target-dir</p>\n<p>DEPRECATED: This is only present to support legacy PSR-0 style autoloading, and all new code should preferably use PSR-4 without target-dir and projects using PSR-0 with PHP namespaces are encouraged to migrate to PSR-4 instead.</p>\n<p>定义当前包安装的目标文件夹。</p>\n<p>若某个包的根目录，在它申明的命名空间之下，将不能正确的使用自动加载。而 target-dir 解决了这个问题。</p>\n<p>Symfony 就是一个例子。它有一些独立的包作为组件。Yaml 组件就放在 Symfony\\Component\\Yaml 目录下，然而这个包的根目录实际上是 Yaml。为了使自动加载成为可能，我们需要确保它不会被安装到 vendor/symfony/yaml，而是安装到 vendor/symfony/yaml/Symfony/Component/Yaml，从而使 Symfony 定义的 autoloader 可以从 vendor/symfony/yaml 加载它。</p>\n<p>要做到这一点 autoload 和 target-dir 应该定义如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-0&quot;: &#123; &quot;Symfony\\\\Component\\\\Yaml\\\\&quot;: &quot;&quot; &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;target-dir&quot;: &quot;Symfony/Component/Yaml&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可选。</p>\n<p>minimum-stability (root-only)</p>\n<p>这定义了通过稳定性过滤包的默认行为。默认为 stable（稳定）。因此如果你依赖于一个 dev（开发）包，你应该明确的进行定义。</p>\n<p>对每个包的所有版本都会进行稳定性检查，而低于 minimum-stability 所设定的最低稳定性的版本，将在解决依赖关系时被忽略。对于个别包的特殊稳定性要求，可以在 require 或 require-dev 中设定（请参考 Package links）。</p>\n<p>可用的稳定性标识（按字母排序）：dev、alpha、beta、RC、stable。</p>\n<p>prefer-stable (root-only)</p>\n<p>当此选项被激活时，Composer 将优先使用更稳定的包版本。</p>\n<p>使用 “prefer-stable”: true 来激活它。</p>\n<p>repositories (root-only)</p>\n<p>使用自定义的包资源库。</p>\n<p>默认情况下 composer 只使用 packagist 作为包的资源库。通过指定资源库，你可以从其他地方获取资源包。</p>\n<p>Repositories 并不是递归调用的，只能在“Root包”的 composer.json 中定义。附属包中的 composer.json 将被忽略。</p>\n<p>支持以下类型的包资源库：</p>\n<p>composer: 一个 composer 类型的资源库，是一个简单的网络服务器（HTTP、FTP、SSH）上的 packages.json 文件，它包含一个 composer.json 对象的列表，有额外的 dist 和/或 source 信息。这个 packages.json 文件是用一个 PHP 流加载的。你可以使用 options 参数来设定额外的流信息。<br>vcs: 从 git、svn 和 hg 取得资源。<br>pear: 从 pear 获取资源。<br>package: 如果你依赖于一个项目，它不提供任何对 composer 的支持，你就可以使用这种类型。你基本上就只需要内联一个 composer.json 对象。<br>更多相关内容，请查看 资源库。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;repositories&quot;: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;composer&quot;,</div><div class=\"line\">            &quot;url&quot;: &quot;http://packages.example.com&quot;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;composer&quot;,</div><div class=\"line\">            &quot;url&quot;: &quot;https://packages.example.com&quot;,</div><div class=\"line\">            &quot;options&quot;: &#123;</div><div class=\"line\">                &quot;ssl&quot;: &#123;</div><div class=\"line\">                    &quot;verify_peer&quot;: &quot;true&quot;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;vcs&quot;,</div><div class=\"line\">            &quot;url&quot;: &quot;https://github.com/Seldaek/monolog&quot;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;pear&quot;,</div><div class=\"line\">            &quot;url&quot;: &quot;http://pear2.php.net&quot;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;package&quot;,</div><div class=\"line\">            &quot;package&quot;: &#123;</div><div class=\"line\">                &quot;name&quot;: &quot;smarty/smarty&quot;,</div><div class=\"line\">                &quot;version&quot;: &quot;3.1.7&quot;,</div><div class=\"line\">                &quot;dist&quot;: &#123;</div><div class=\"line\">                    &quot;url&quot;: &quot;http://www.smarty.net/files/Smarty-3.1.7.zip&quot;,</div><div class=\"line\">                    &quot;type&quot;: &quot;zip&quot;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                &quot;source&quot;: &#123;</div><div class=\"line\">                    &quot;url&quot;: &quot;http://smarty-php.googlecode.com/svn/&quot;,</div><div class=\"line\">                    &quot;type&quot;: &quot;svn&quot;,</div><div class=\"line\">                    &quot;reference&quot;: &quot;tags/Smarty_3_1_7/distribution/&quot;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意： 顺序是非常重要的，当 Composer 查找资源包时，它会按照顺序进行。默认情况下 Packagist 是最后加入的，因此自定义设置将可以覆盖 Packagist 上的包。</p>\n<p>config (root-only)</p>\n<p>下面的这一组选项，仅用于项目。</p>\n<p>支持以下选项：</p>\n<p>process-timeout: 默认为 300。处理进程结束时间，例如：git 克隆的时间。Composer 将放弃超时的任务。如果你的网络缓慢或者正在使用一个巨大的包，你可能要将这个值设置的更高一些。<br>use-include-path: 默认为 false。如果为 true，Composer autoloader 还将在 PHP include path 中继续查找类文件。<br>preferred-install: 默认为 auto。它的值可以是 source、dist 或 auto。这个选项允许你设置 Composer 的默认安装方法。<br>github-protocols: 默认为 [“git”, “https”, “ssh”]。从 github.com 克隆时使用的协议优先级清单，因此默认情况下将优先使用 git 协议进行克隆。你可以重新排列它们的次序，例如，如果你的网络有代理服务器或 git 协议的效率很低，你就可以提升 https 协议的优先级。<br>github-oauth: 一个域名和 oauth keys 的列表。 例如：使用 {“github.com”: “oauthtoken”} 作为此选项的值， 将使用 oauthtoken 来访问 github 上的私人仓库，并绕过 low IP-based rate 的 API 限制。 关联知识 关于如何获取 GitHub 的 OAuth token。<br>vendor-dir: 默认为 vendor。通过设置你可以安装依赖到不同的目录。<br>bin-dir: 默认为 vendor/bin。如果一个项目包含二进制文件，它们将被连接到这个目录。<br>cache-dir: unix 下默认为 $home/cache，Windows 下默认为 C:\\Users\\<user>\\AppData\\Local\\Composer。用于存储 composer 所有的缓存文件。相关信息请查看 COMPOSER_HOME。<br>cache-files-dir: 默认为 $cache-dir/files。存储包 zip 存档的目录。<br>cache-repo-dir: 默认为 $cache-dir/repo。存储 composer 类型的 VCS（svn、github、bitbucket） repos 目录。<br>cache-vcs-dir: 默认为 $cache-dir/vcs。此目录用于存储 VCS 克隆的 git/hg 类型的元数据，并加快安装速度。<br>cache-files-ttl: 默认为 15552000（6个月）。默认情况下 Composer 缓存的所有数据都将在闲置6个月后被删除，这个选项允许你来调整这个时间，你可以将其设置为0以禁用缓存。<br>cache-files-maxsize: 默认为 300MiB。Composer 缓存的最大容量，超出后将优先清除旧的缓存数据，直到缓存量低于这个数值。<br>prepend-autoloader: 默认为 true。如果设置为 false，composer autoloader 将不会附加到现有的自动加载机制中。这有时候用来解决与其它自动加载机制产生的冲突。<br>autoloader-suffix: 默认为 null。Composer autoloader 的后缀，当设置为空时将会产生一个随机的字符串。<br>optimize-autoloader Defaults to false. Always optimize when dumping the autoloader.<br>github-domains: 默认为 [“github.com”]。一个 github mode 下的域名列表。这是用于GitHub的企业设置。<br>notify-on-install: 默认为 true。Composer 允许资源仓库定义一个用于通知的 URL，以便有人从其上安装资源包时能够得到一个反馈通知。此选项允许你禁用该行为。<br>discard-changes: 默认为 false，它的值可以是 true、false 或 stash。这个选项允许你设置在非交互模式下，当处理失败的更新时采用的处理方式。true 表示永远放弃更改。”stash” 表示继续尝试。Use this for CI servers or deploy scripts if you tend to have modified vendors.<br>实例：</user></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;config&quot;: &#123;</div><div class=\"line\">        &quot;bin-dir&quot;: &quot;bin&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>scripts (root-only)</p>\n<p>Composer 允许你在安装过程中的各个阶段挂接脚本。</p>\n<p>更多细节和案例请查看 脚本。</p>\n<p>extra</p>\n<p>任意的，供 scripts 使用的额外数据。.</p>\n<p>这可以是几乎任何东西。若要从脚本事件访问处理程序，你可以这样做：</p>\n<p>$extra = $event-&gt;getComposer()-&gt;getPackage()-&gt;getExtra();<br>可选。</p>\n<p>bin</p>\n<p>该属性用于标注一组应被视为二进制脚本的文件，他们会被软链接到（config 对象中的）bin-dir 属性所标注的目录，以供其他依赖包调用。</p>\n<p>详细请查看 Vendor Binaries。</p>\n<p>可选。</p>\n<p>archive</p>\n<p>这些选项在创建包存档时使用。</p>\n<p>支持以下选项：</p>\n<p>exclude: 允许设置一个需要被排除的路径的列表。使用与 .gitignore 文件相同的语法。一个前导的（!）将会使其变成白名单而无视之前相同目录的排除设定。前导斜杠只会在项目的相对路径的开头匹配。星号为通配符。<br>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;archive&quot;: &#123;</div><div class=\"line\">        &quot;exclude&quot;: [&quot;/foo/bar&quot;, &quot;baz&quot;, &quot;/*.test&quot;, &quot;!/foo/bar/baz&quot;]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在这个例子中我们 include /dir/foo/bar/file、/foo/bar/baz、/file.php、/foo/my.test 但排除了 /foo/bar/any、/foo/baz、/my.test。</p>\n","excerpt":"<p>composer.json 架构:</p>\n<p>Root 包:</p>\n<p>“root 包”是指由 composer.json 定义的在你项目根目录的包。这是 composer.json 定义你项目所需的主要条件。（简单的说，你自己的项目就是一个 root 包）</p>\n<p>某些字段仅适用于“root 包”上下文。 config 字段就是其中一个例子。只有“root 包”可以定义。在依赖包中定义的 config 字段将被忽略，这使得 config 字段只有“root 包”可用（root-only）。</p>\n<p>如果你克隆了其中的一个依赖包，直接在其上开始工作，那么它就变成了“root 包”。与作为他人的依赖包时使用相同的 composer.json 文件，但上下文发生了变化。</p>\n<p>注意： 一个资源包是不是“root 包”，取决于它的上下文。 例：如果你的项目依赖 monolog 库，那么你的项目就是“root 包”。 但是，如果你从 GitHub 上克隆了 monolog 为它修复 bug， 那么此时 monolog 就是“root 包”。<br>","more":"</p>\n<p>属性:</p>\n<p>包名 name</p>\n<p>包的名称，它包括供应商名称和项目名称，使用 / 分隔。</p>\n<p>例：</p>\n<p>monolog/monolog<br>igorw/event-source<br>对于需要发布的包（库），这是必须填写的。</p>\n<p>描述 description</p>\n<p>一个包的简短描述。通常这个最长只有一行。</p>\n<p>对于需要发布的包（库），这是必须填写的。</p>\n<p>版本 version</p>\n<p>version 不是必须的，并且建议忽略（见下文）。</p>\n<p>它应该符合 ‘X.Y.Z’ 或者 ‘vX.Y.Z’ 的形式， -dev、-patch、-alpha、-beta 或 -RC 这些后缀是可选的。在后缀之后也可以再跟上一个数字。</p>\n<p>例：</p>\n<p>1.0.0<br>1.0.2<br>1.1.0<br>0.2.5<br>1.0.0-dev<br>1.0.0-alpha3<br>1.0.0-beta2<br>1.0.0-RC5<br>通常，我们能够从 VCS (git, svn, hg) 的信息推断出包的版本号，在这种情况下，我们建议忽略 version。</p>\n<p>注意： Packagist 使用 VCS 仓库， 因此 version 定义的版本号必须是真实准确的。 自己手动指定的 version，最终有可能在某个时候因为人为错误造成问题。</p>\n<p>安装类型 type</p>\n<p>包的安装类型，默认为 library。</p>\n<p>包的安装类型，用来定义安装逻辑。如果你有一个包需要一个特殊的逻辑，你可以设定一个自定义的类型。这可以是一个 symfony-bundle，一个 wordpress-plugin 或者一个 typo3-module。这些类型都将是具体到某一个项目，而对应的项目将要提供一种能够安装该类型包的安装程序。</p>\n<p>composer 原生支持以下4种类型：</p>\n<p>library: 这是默认类型，它会简单的将文件复制到 vendor 目录。<br>project: 这表示当前包是一个项目，而不是一个库。例：框架应用程序 Symfony standard edition，内容管理系统 SilverStripe installer 或者完全成熟的分布式应用程序。使用 IDE 创建一个新的工作区时，这可以为其提供项目列表的初始化。<br>metapackage: 当一个空的包，包含依赖并且需要触发依赖的安装，这将不会对系统写入额外的文件。因此这种安装类型并不需要一个 dist 或 source。<br>composer-plugin: 一个安装类型为 composer-plugin 的包，它有一个自定义安装类型，可以为其它包提供一个 installler。详细请查看 自定义安装类型。<br>仅在你需要一个自定义的安装逻辑时才使用它。建议忽略这个属性，采用默认的 library。</p>\n<p>关键字 keywords</p>\n<p>该包相关的关键词的数组。这些可用于搜索和过滤。</p>\n<p>实例：</p>\n<p>logging<br>events<br>database<br>redis<br>templating<br>可选。</p>\n<p>项目主页 homepage</p>\n<p>该项目网站的 URL 地址。</p>\n<p>可选。</p>\n<p>版本发布时间 time</p>\n<p>版本发布时间。</p>\n<p>必须符合 YYYY-MM-DD 或 YYYY-MM-DD HH:MM:SS 格式。</p>\n<p>可选。</p>\n<p>许可协议 license</p>\n<p>包的许可协议，它可以是一个字符串或者字符串数组。</p>\n<p>最常见的许可协议的推荐写法（按字母排序）：</p>\n<p>Apache-2.0<br>BSD-2-Clause<br>BSD-3-Clause<br>BSD-4-Clause<br>GPL-2.0<br>GPL-2.0+<br>GPL-3.0<br>GPL-3.0+<br>LGPL-2.1<br>LGPL-2.1+<br>LGPL-3.0<br>LGPL-3.0+<br>MIT<br>可选，但强烈建议提供此内容。更多许可协议的标识符请参见 SPDX Open Source License Registry。</p>\n<p>对于闭源软件，你必须使用 “proprietary” 协议标识符。</p>\n<p>一个例：</p>\n<p>{<br>    “license”: “MIT”<br>}<br>对于一个包，当允许在多个许可协议间进行选择时（”disjunctive license”），这些协议标识符可以被指定为数组。</p>\n<p>多协议的一个例：</p>\n<p>{<br>    “license”: [<br>       “LGPL-2.1”,<br>       “GPL-3.0+”<br>    ]<br>}<br>另外它们也可以由 “or” 分隔，并写在括号中：</p>\n<p>{<br>    “license”: “(LGPL-2.1 or GPL-3.0+)”<br>}<br>同样，当有多个许可协议需要结合使用时（”conjunctive license”），它们应该被 “and” 分隔，并写在括号中。</p>\n<p>作者 authors</p>\n<p>包的作者。这是一个对象数组。</p>\n<p>这个对象必须包含以下属性：</p>\n<p>name: 作者的姓名，通常使用真名。<br>email: 作者的 email 地址。<br>homepage: 作者主页的 URL 地址。<br>role: 该作者在此项目中担任的角色（例：开发人员 或 翻译）。<br>一个实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;authors&quot;: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;name&quot;: &quot;Nils Adermann&quot;,</div><div class=\"line\">            &quot;email&quot;: &quot;naderman@naderman.de&quot;,</div><div class=\"line\">            &quot;homepage&quot;: &quot;http://www.naderman.de&quot;,</div><div class=\"line\">            &quot;role&quot;: &quot;Developer&quot;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;name&quot;: &quot;Jordi Boggiano&quot;,</div><div class=\"line\">            &quot;email&quot;: &quot;j.boggiano@seld.be&quot;,</div><div class=\"line\">            &quot;homepage&quot;: &quot;http://seld.be&quot;,</div><div class=\"line\">            &quot;role&quot;: &quot;Developer&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>可选，但强烈建议提供此内容。</p>\n<p>支持 support</p>\n<p>获取项目支持的向相关信息对象。</p>\n<p>这个对象必须包含以下属性：</p>\n<p>email: 项目支持 email 地址。<br>issues: 跟踪问题的 URL 地址。<br>forum: 论坛地址。<br>wiki: Wiki 地址。<br>irc: IRC 聊天频道地址，类似于 irc://server/channel。<br>source: 网址浏览或下载源。<br>一个实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;support&quot;: &#123;</div><div class=\"line\">        &quot;email&quot;: &quot;support@example.org&quot;,</div><div class=\"line\">        &quot;irc&quot;: &quot;irc://irc.freenode.org/composer&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>可选。</p>\n<p>Package links</p>\n<p>下面提到的所有对象，都应该是 包名 到 版本 的映射对象。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;require&quot;: &#123;</div><div class=\"line\">        &quot;monolog/monolog&quot;: &quot;1.0.*&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>所有的这些都是可选的。</p>\n<p>require 和 require-dev 还支持稳定性标签（@，仅针对“root 包”）。这允许你在 minimum-stability 设定的范围外做进一步的限制或扩展。例：如果你想允许依赖一个不稳定的包，你可以在一个包的版本约束后使用它，或者是一个空的版本约束内使用它。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;require&quot;: &#123;</div><div class=\"line\">        &quot;monolog/monolog&quot;: &quot;1.0.*@beta&quot;,</div><div class=\"line\">        &quot;acme/foo&quot;: &quot;@dev&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>如果你的依赖之一，有对另一个不稳定包的依赖，你最好在 require 中显示的定义它，并带上足够详细的稳定性标识。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;require&quot;: &#123;</div><div class=\"line\">        &quot;doctrine/doctrine-fixtures-bundle&quot;: &quot;dev-master&quot;,</div><div class=\"line\">        &quot;doctrine/data-fixtures&quot;: &quot;@dev&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>require 和 require-dev 还支持对 dev（开发）版本的明确引用（即：版本控制系统中的提交编号 commit），以确保它们被锁定到一个给定的状态，即使你运行了更新命令。你只需要明确一个开发版本号，并带上诸如 #<ref> 的标识。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;require&quot;: &#123;</div><div class=\"line\">        &quot;monolog/monolog&quot;: &quot;dev-master#2eb0c0978d290a1c45346a1955188929cb4e5db7&quot;,</div><div class=\"line\">        &quot;acme/foo&quot;: &quot;1.0.x-dev#abc123&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意： 虽然这有时很方便，但不应该长期在你的包中使用，因为它有一个技术上的限制。 composer.json 将仍然在哈希值之前指定的分支名称读取元数据， 正因为如此，在某些情况下，它不会是一个实用的解决方法， 如果可能，你应该总是尝试切换到拥有标签的版本。</p>\n<p>它也可以应用于行内别名，这样它将匹配一个约束，否则不会。更多信息请参考 别名。</p>\n<p>require</p>\n<p>必须的软件包列表，除非这些依赖被满足，否则不会完成安装。</p>\n<p>require-dev (root-only)</p>\n<p>这个列表是为开发或测试等目的，额外列出的依赖。“root 包”的 require-dev 默认是会被安装的。然而 install 或 update 支持使用 –no-dev 参数来跳过 require-dev 字段中列出的包。</p>\n<p>conflict</p>\n<p>此列表中的包与当前包的这个版本冲突。它们将不允许同时被安装。</p>\n<p>请注意，在 conflict 中指定类似于 <1.0, >= 1.1 的版本范围时，这表示它与小于1.0 并且 同时大等于1.1的版本冲突，这很可能不是你想要的。在这种情况下你可能想要表达的是 <1.0 | >= 1.1 。</p>\n<p>replace</p>\n<p>这个列表中的包将被当前包取代。这使你可以 fork 一个包，以不同的名称和版本号发布，同时要求依赖于原包的其它包，在这之后依赖于你 fork 的这个包，因为它取代了原来的包。</p>\n<p>这对于创建一个内部包含子包的主包也非常的有用。例如 symfony/symfony 这个主包，包含了所有 Symfony 的组件，而这些组件又可以作为单独的包进行发布。如果你 require 了主包，那么它就会自动完成其下各个组件的任务，因为主包取代了子包。</p>\n<p>注意，在使用上述方法取代子包时，通常你应该只对子包使用 self.version 这一个版本约束，以确保主包仅替换掉子包的准确版本，而不是任何其他版本。</p>\n<p>provide</p>\n<p>List of other packages that are provided by this package. This is mostly useful for common interfaces. A package could depend on some virtual logger package, any library that implements this logger interface would simply list it in provide.</p>\n<p>suggest</p>\n<p>建议安装的包，它们增强或能够与当前包良好的工作。这些只是信息，并显示在依赖包安装完成之后，给你的用户一个建议，他们可以添加更多的包。</p>\n<p>格式如下，版本约束变成了描述信息。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;suggest&quot;: &#123;</div><div class=\"line\">        &quot;monolog/monolog&quot;: &quot;Allows more advanced logging of the application flow&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>autoload</p>\n<p>PHP autoloader 的自动加载映射。</p>\n<p>Currently PSR-0 autoloading, PSR-4 autoloading, classmap generation and files includes are supported. PSR-4 is the recommended way though since it offers greater ease of use (no need to regenerate the autoloader when you add classes).</p>\n<p>PSR-4</p>\n<p>Under the psr-4 key you define a mapping from namespaces to paths, relative to the package root. When autoloading a class like Foo\\Bar\\Baz a namespace prefix Foo\\ pointing to a directory src/ means that the autoloader will look for a file named src/Bar/Baz.php and include it if present. Note that as opposed to the older PSR-0 style, the prefix (Foo\\) is not present in the file path.</p>\n<p>Namespace prefixes must end in \\ to avoid conflicts between similar prefixes. For example Foo would match classes in the FooBar namespace so the trailing backslashes solve the problem: Foo\\ and FooBar\\ are distinct.</p>\n<p>The PSR-4 references are all combined, during install/update, into a single key =&gt; value array which may be found in the generated file vendor/composer/autoload_psr4.php.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-4&quot;: &#123;</div><div class=\"line\">            &quot;Monolog\\\\&quot;: &quot;src/&quot;,</div><div class=\"line\">            &quot;Vendor\\\\Namespace\\\\&quot;: &quot;&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">If you need to search for a same prefix in multiple directories, you can specify them as an array as such:</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-4&quot;: &#123; &quot;Monolog\\\\&quot;: [&quot;src/&quot;, &quot;lib/&quot;] &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>If you want to have a fallback directory where any namespace will be looked for, you can use an empty prefix like:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-4&quot;: &#123; &quot;&quot;: &quot;src/&quot; &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>PSR-0</p>\n<p>在 psr-0 key 下你定义了一个命名空间到实际路径的映射（相对于包的根目录）。注意，这里同样支持 PEAR-style 方式的约定（与命名空间不同，PEAR 类库在类名上采用了下划线分隔）。</p>\n<p>请注意，命名空间的申明应该以 \\ 结束，以确保 autoloader 能够准确响应。例： Foo 将会与 FooBar 匹配，然而以反斜杠结束就可以解决这样的问题， Foo\\ 和 FooBar\\ 将会被区分开来。</p>\n<p>在 install/update 过程中，PSR-0 引用都将被结合为一个单一的键值对数组，存储至 vendor/composer/autoload_namespaces.php 文件中。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-0&quot;: &#123;</div><div class=\"line\">            &quot;Monolog\\\\&quot;: &quot;src/&quot;,</div><div class=\"line\">            &quot;Vendor\\\\Namespace\\\\&quot;: &quot;src/&quot;,</div><div class=\"line\">            &quot;Vendor_Namespace_&quot;: &quot;src/&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果你需要搜索多个目录中一个相同的前缀，你可以将它们指定为一个数组，例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-0&quot;: &#123; &quot;Monolog\\\\&quot;: [&quot;src/&quot;, &quot;lib/&quot;] &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>PSR-0 方式并不仅限于申明命名空间，也可以是精确到类级别的指定。这对于只有一个类在全局命名空间的类库是非常有用的（如果 php 源文件也位于包的根目录）。例如，可以这样申明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-0&quot;: &#123; &quot;UniqueGlobalClass&quot;: &quot;&quot; &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果你想设置一个目录作为任何命名空间的备用目录，你可以使用空的前缀，像这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-0&quot;: &#123; &quot;&quot;: &quot;src/&quot; &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Classmap</p>\n<p>classmap 引用的所有组合，都会在 install/update 过程中生成，并存储到 vendor/composer/autoload_classmap.php 文件中。这个 map 是经过扫描指定目录（同样支持直接精确到文件）中所有的 .php 和 .inc 文件里内置的类而得到的。</p>\n<p>你可以用 classmap 生成支持支持自定义加载的不遵循 PSR-0/4 规范的类库。要配置它指向需要的目录，以便能够准确搜索到类文件。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;classmap&quot;: [&quot;src/&quot;, &quot;lib/&quot;, &quot;Something.php&quot;]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Files</p>\n<p>如果你想要明确的指定，在每次请求时都要载入某些文件，那么你可以使用 ‘files’ autoloading。通常作为函数库的载入方式（而非类库）。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;files&quot;: [&quot;src/MyLibrary/functions.php&quot;]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>autoload-dev (root-only)</p>\n<p>This section allows to define autoload rules for development purposes.</p>\n<p>Classes needed to run the test suite should not be included in the main autoload rules to avoid polluting the autoloader in production and when other people use your package as a dependency.</p>\n<p>Therefore, it is a good idea to rely on a dedicated path for your unit tests and to add it within the autoload-dev section.</p>\n<p>Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-4&quot;: &#123; &quot;MyLibrary\\\\&quot;: &quot;src/&quot; &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;autoload-dev&quot;: &#123;</div><div class=\"line\">        &quot;psr-4&quot;: &#123; &quot;MyLibrary\\\\Tests\\\\&quot;: &quot;tests/&quot; &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>include-path</p>\n<p>不建议：这是目前唯一支持传统项目的做法，所有新的代码都建议使用自动加载。 这是一个过时的做法，但 Composer 将仍然保留这个功能。</p>\n<p>一个追加到 PHP include_path 中的列表。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;include-path&quot;: [&quot;lib/&quot;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可选。</p>\n<p>target-dir</p>\n<p>DEPRECATED: This is only present to support legacy PSR-0 style autoloading, and all new code should preferably use PSR-4 without target-dir and projects using PSR-0 with PHP namespaces are encouraged to migrate to PSR-4 instead.</p>\n<p>定义当前包安装的目标文件夹。</p>\n<p>若某个包的根目录，在它申明的命名空间之下，将不能正确的使用自动加载。而 target-dir 解决了这个问题。</p>\n<p>Symfony 就是一个例子。它有一些独立的包作为组件。Yaml 组件就放在 Symfony\\Component\\Yaml 目录下，然而这个包的根目录实际上是 Yaml。为了使自动加载成为可能，我们需要确保它不会被安装到 vendor/symfony/yaml，而是安装到 vendor/symfony/yaml/Symfony/Component/Yaml，从而使 Symfony 定义的 autoloader 可以从 vendor/symfony/yaml 加载它。</p>\n<p>要做到这一点 autoload 和 target-dir 应该定义如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-0&quot;: &#123; &quot;Symfony\\\\Component\\\\Yaml\\\\&quot;: &quot;&quot; &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;target-dir&quot;: &quot;Symfony/Component/Yaml&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可选。</p>\n<p>minimum-stability (root-only)</p>\n<p>这定义了通过稳定性过滤包的默认行为。默认为 stable（稳定）。因此如果你依赖于一个 dev（开发）包，你应该明确的进行定义。</p>\n<p>对每个包的所有版本都会进行稳定性检查，而低于 minimum-stability 所设定的最低稳定性的版本，将在解决依赖关系时被忽略。对于个别包的特殊稳定性要求，可以在 require 或 require-dev 中设定（请参考 Package links）。</p>\n<p>可用的稳定性标识（按字母排序）：dev、alpha、beta、RC、stable。</p>\n<p>prefer-stable (root-only)</p>\n<p>当此选项被激活时，Composer 将优先使用更稳定的包版本。</p>\n<p>使用 “prefer-stable”: true 来激活它。</p>\n<p>repositories (root-only)</p>\n<p>使用自定义的包资源库。</p>\n<p>默认情况下 composer 只使用 packagist 作为包的资源库。通过指定资源库，你可以从其他地方获取资源包。</p>\n<p>Repositories 并不是递归调用的，只能在“Root包”的 composer.json 中定义。附属包中的 composer.json 将被忽略。</p>\n<p>支持以下类型的包资源库：</p>\n<p>composer: 一个 composer 类型的资源库，是一个简单的网络服务器（HTTP、FTP、SSH）上的 packages.json 文件，它包含一个 composer.json 对象的列表，有额外的 dist 和/或 source 信息。这个 packages.json 文件是用一个 PHP 流加载的。你可以使用 options 参数来设定额外的流信息。<br>vcs: 从 git、svn 和 hg 取得资源。<br>pear: 从 pear 获取资源。<br>package: 如果你依赖于一个项目，它不提供任何对 composer 的支持，你就可以使用这种类型。你基本上就只需要内联一个 composer.json 对象。<br>更多相关内容，请查看 资源库。</p>\n<p>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;repositories&quot;: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;composer&quot;,</div><div class=\"line\">            &quot;url&quot;: &quot;http://packages.example.com&quot;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;composer&quot;,</div><div class=\"line\">            &quot;url&quot;: &quot;https://packages.example.com&quot;,</div><div class=\"line\">            &quot;options&quot;: &#123;</div><div class=\"line\">                &quot;ssl&quot;: &#123;</div><div class=\"line\">                    &quot;verify_peer&quot;: &quot;true&quot;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;vcs&quot;,</div><div class=\"line\">            &quot;url&quot;: &quot;https://github.com/Seldaek/monolog&quot;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;pear&quot;,</div><div class=\"line\">            &quot;url&quot;: &quot;http://pear2.php.net&quot;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;package&quot;,</div><div class=\"line\">            &quot;package&quot;: &#123;</div><div class=\"line\">                &quot;name&quot;: &quot;smarty/smarty&quot;,</div><div class=\"line\">                &quot;version&quot;: &quot;3.1.7&quot;,</div><div class=\"line\">                &quot;dist&quot;: &#123;</div><div class=\"line\">                    &quot;url&quot;: &quot;http://www.smarty.net/files/Smarty-3.1.7.zip&quot;,</div><div class=\"line\">                    &quot;type&quot;: &quot;zip&quot;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                &quot;source&quot;: &#123;</div><div class=\"line\">                    &quot;url&quot;: &quot;http://smarty-php.googlecode.com/svn/&quot;,</div><div class=\"line\">                    &quot;type&quot;: &quot;svn&quot;,</div><div class=\"line\">                    &quot;reference&quot;: &quot;tags/Smarty_3_1_7/distribution/&quot;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意： 顺序是非常重要的，当 Composer 查找资源包时，它会按照顺序进行。默认情况下 Packagist 是最后加入的，因此自定义设置将可以覆盖 Packagist 上的包。</p>\n<p>config (root-only)</p>\n<p>下面的这一组选项，仅用于项目。</p>\n<p>支持以下选项：</p>\n<p>process-timeout: 默认为 300。处理进程结束时间，例如：git 克隆的时间。Composer 将放弃超时的任务。如果你的网络缓慢或者正在使用一个巨大的包，你可能要将这个值设置的更高一些。<br>use-include-path: 默认为 false。如果为 true，Composer autoloader 还将在 PHP include path 中继续查找类文件。<br>preferred-install: 默认为 auto。它的值可以是 source、dist 或 auto。这个选项允许你设置 Composer 的默认安装方法。<br>github-protocols: 默认为 [“git”, “https”, “ssh”]。从 github.com 克隆时使用的协议优先级清单，因此默认情况下将优先使用 git 协议进行克隆。你可以重新排列它们的次序，例如，如果你的网络有代理服务器或 git 协议的效率很低，你就可以提升 https 协议的优先级。<br>github-oauth: 一个域名和 oauth keys 的列表。 例如：使用 {“github.com”: “oauthtoken”} 作为此选项的值， 将使用 oauthtoken 来访问 github 上的私人仓库，并绕过 low IP-based rate 的 API 限制。 关联知识 关于如何获取 GitHub 的 OAuth token。<br>vendor-dir: 默认为 vendor。通过设置你可以安装依赖到不同的目录。<br>bin-dir: 默认为 vendor/bin。如果一个项目包含二进制文件，它们将被连接到这个目录。<br>cache-dir: unix 下默认为 $home/cache，Windows 下默认为 C:\\Users\\<user>\\AppData\\Local\\Composer。用于存储 composer 所有的缓存文件。相关信息请查看 COMPOSER_HOME。<br>cache-files-dir: 默认为 $cache-dir/files。存储包 zip 存档的目录。<br>cache-repo-dir: 默认为 $cache-dir/repo。存储 composer 类型的 VCS（svn、github、bitbucket） repos 目录。<br>cache-vcs-dir: 默认为 $cache-dir/vcs。此目录用于存储 VCS 克隆的 git/hg 类型的元数据，并加快安装速度。<br>cache-files-ttl: 默认为 15552000（6个月）。默认情况下 Composer 缓存的所有数据都将在闲置6个月后被删除，这个选项允许你来调整这个时间，你可以将其设置为0以禁用缓存。<br>cache-files-maxsize: 默认为 300MiB。Composer 缓存的最大容量，超出后将优先清除旧的缓存数据，直到缓存量低于这个数值。<br>prepend-autoloader: 默认为 true。如果设置为 false，composer autoloader 将不会附加到现有的自动加载机制中。这有时候用来解决与其它自动加载机制产生的冲突。<br>autoloader-suffix: 默认为 null。Composer autoloader 的后缀，当设置为空时将会产生一个随机的字符串。<br>optimize-autoloader Defaults to false. Always optimize when dumping the autoloader.<br>github-domains: 默认为 [“github.com”]。一个 github mode 下的域名列表。这是用于GitHub的企业设置。<br>notify-on-install: 默认为 true。Composer 允许资源仓库定义一个用于通知的 URL，以便有人从其上安装资源包时能够得到一个反馈通知。此选项允许你禁用该行为。<br>discard-changes: 默认为 false，它的值可以是 true、false 或 stash。这个选项允许你设置在非交互模式下，当处理失败的更新时采用的处理方式。true 表示永远放弃更改。”stash” 表示继续尝试。Use this for CI servers or deploy scripts if you tend to have modified vendors.<br>实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;config&quot;: &#123;</div><div class=\"line\">        &quot;bin-dir&quot;: &quot;bin&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>scripts (root-only)</p>\n<p>Composer 允许你在安装过程中的各个阶段挂接脚本。</p>\n<p>更多细节和案例请查看 脚本。</p>\n<p>extra</p>\n<p>任意的，供 scripts 使用的额外数据。.</p>\n<p>这可以是几乎任何东西。若要从脚本事件访问处理程序，你可以这样做：</p>\n<p>$extra = $event-&gt;getComposer()-&gt;getPackage()-&gt;getExtra();<br>可选。</p>\n<p>bin</p>\n<p>该属性用于标注一组应被视为二进制脚本的文件，他们会被软链接到（config 对象中的）bin-dir 属性所标注的目录，以供其他依赖包调用。</p>\n<p>详细请查看 Vendor Binaries。</p>\n<p>可选。</p>\n<p>archive</p>\n<p>这些选项在创建包存档时使用。</p>\n<p>支持以下选项：</p>\n<p>exclude: 允许设置一个需要被排除的路径的列表。使用与 .gitignore 文件相同的语法。一个前导的（!）将会使其变成白名单而无视之前相同目录的排除设定。前导斜杠只会在项目的相对路径的开头匹配。星号为通配符。<br>实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;archive&quot;: &#123;</div><div class=\"line\">        &quot;exclude&quot;: [&quot;/foo/bar&quot;, &quot;baz&quot;, &quot;/*.test&quot;, &quot;!/foo/bar/baz&quot;]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在这个例子中我们 include /dir/foo/bar/file、/foo/bar/baz、/file.php、/foo/my.test 但排除了 /foo/bar/any、/foo/baz、/my.test。</p>"},{"title":"composer使用","date":"2016-07-03T09:09:36.000Z","_content":"composer使用：\n\n1.安装Composer：\nComposer需要PHP 5.3.2+才能运行。\n{% codeblock %}\n$ curl -sS https://getcomposer.org/installer | php\n{% endcodeblock %}\n这个命令会将composer.phar下载到当前目录。PHAR（PHP 压缩包）是一个压缩格式，可以在命令行下直接运行。\n\n也可以使用--install-dir选项将Composer安装到指定的目录，例如：\n{% codeblock %}\n$ curl -sS https://getcomposer.org/installer | php -- --install-dir=bin\n{% endcodeblock %}\n\n当然也可以进行全局安装：\n{% codeblock %}\n$ curl -sS https://getcomposer.org/installer | php\n$ mv composer.phar /usr/local/bin/composer\n{% endcodeblock %}\n\n在Mac OS X下也可以使用homebrew安装(用习惯了)：\n{% codeblock %}\nbrew tap josegonzalez/homebrew-php  \nbrew install josegonzalez/php/composer  \n{% endcodeblock %}\n不过通常情况下只需将composer.phar的位置加入到PATH环境变量就可以，不一定要全局安装。\n<!-- more -->\n\n2.composer.json：项目安装\n\n项目中使用 Composer，需要一个 composer.json 文件。该文件包含了项目的依赖和其它的一些元数据。\n\n这个composer.json文件是采用 JSON format 编写的。它允许你定义嵌套结构。\n\n1）关于 require Key\n\n第一件事情（并且往往只需要做这一件事），需要在 composer.json 文件中指定 require key 的值。告诉 Composer 你的项目需要依赖哪些包。\n{% codeblock %}\n\n{\n    \"require\": {\n        \"monolog/monolog\": \"1.0.*\"\n    }\n}\n{% endcodeblock %}\nrequire 需要一个 包名称 （例如 monolog/monolog） 映射到 包版本 （例如 1.0.*） 的对象。\n\n2）包名称\n\n包名称由供应商名称和其项目名称构成。通常容易产生相同的项目名称，而供应商名称的存在则很好的解决了命名冲突的问题。它允许两个不同的人创建同样名为 json 的库，而之后它们将被命名为 igorw/json 和 seldaek/json。\n\n这里我们需要引入 monolog/monolog，供应商名称与项目的名称相同，对于一个具有唯一名称的项目，我们推荐这么做。它还允许以后在同一个命名空间添加更多的相关项目。如果你维护着一个库，这将使你可以很容易的把它分离成更小的部分。\n\n3）包版本\n\n在前面的例子中，我们引入的 monolog 版本指定为 1.0.*。这表示任何从 1.0 开始的开发分支，它将会匹配 1.0.0、1.0.2 或者 1.0.20。\n\n版本约束可以用几个不同的方法来指定。\n\n名称                      实例                                 描述\na.确切的版本号     \t1.0.2                                可以指定包的确切版本。\nb.范围\t>=1.0 >=1.0,<2.0 >=1.0,<1.1|>=1.2         通过使用比较操作符可以指定有效的版本范围。 \nc.有效的运算符：>、>=、<、<=、!=。 \nd.你可以定义多个范围，用逗号隔开，这将被视为一个逻辑AND处理。一个管道符号|将作为逻辑OR处理。 \nAND 的优先级高于 OR。\ne.通配符\t1.0.*\t你可以使用通配符*来指定一种模式。1.0.*与>=1.0,<1.1是等效的。\n\n下一个重要版本（波浪号运算符）\n\n~ 最好用例子来解释： ~1.2 相当于 >=1.2,<2.0，而 ~1.2.3 相当于 >=1.2.3,<1.3。正如你所看到的这对于遵循 语义化版本号 的项目最有用。一个常见的用法是标记你所依赖的最低版本，像 ~1.2 （允许1.2以上的任何版本，但不包括2.0）。由于理论上直到2.0应该都没有向后兼容性问题，所以效果很好。你还会看到它的另一种用法，使用 ~ 指定最低版本，但允许版本号的最后一位数字上升。\n\n注意： 虽然 2.0-beta.1 严格地说是早于 2.0，但是，根据版本约束条件， 例如 ~1.2 却不会安装这个版本。就像前面所讲的 ~1.2 只意味着 .2 部分可以改变，但是 1. 部分是固定的。\n\n4)稳定性\n\n默认情况下只有稳定的发行版才会被考虑在内。如果你也想获得 RC、beta、alpha 或 dev 版本，你可以使用 稳定标志。你可以对所有的包做 最小稳定性 设置，而不是每个依赖逐一设置。\n\n\n\n安装依赖包:\n\n获取定义的依赖到你的本地项目，只需要调用 composer.phar 运行 install 命令。\n{% codeblock %}\nphp composer.phar install\n{% endcodeblock %}\n接着前面的例子，这将会找到 monolog/monolog 的最新版本，并将它下载到 vendor 目录。 这是一个惯例把第三方的代码到一个指定的目录 vendor。如果是 monolog 将会创建 vendor/monolog/monolog 目录。\n\n小技巧： 如果你正在使用Git来管理你的项目， 你可能要添加 vendor 到你的 .gitignore 文件中。 你不会希望将所有的代码都添加到你的版本库中。\n\n另一件事是 install 命令将创建一个 composer.lock 文件到你项目的根目录中。\n\n\ncomposer.lock - 锁文件:\n\n在安装依赖后，Composer 将把安装时确切的版本号列表写入 composer.lock 文件。这将锁定改项目的特定版本。\n\n请提交你应用程序的 composer.lock （包括 composer.json）到你的版本库中\n\n这是非常重要的，因为 install 命令将会检查锁文件是否存在，如果存在，它将下载指定的版本（忽略 composer.json 文件中的定义）。\n\n这意味着，任何人建立项目都将下载与指定版本完全相同的依赖。你的持续集成服务器、生产环境、你团队中的其他开发人员、每件事、每个人都使用相同的依赖，从而减轻潜在的错误对部署的影响。即使你独自开发项目，在六个月内重新安装项目时，你也可以放心的继续工作，即使从那时起你的依赖已经发布了许多新的版本。\n\n如果不存在 composer.lock 文件，Composer 将读取 composer.json 并创建锁文件。\n\n这意味着如果你的依赖更新了新的版本，你将不会获得任何更新。此时要更新你的依赖版本请使用 update 命令。这将获取最新匹配的版本（根据你的 composer.json 文件）并将新版本更新进锁文件。\n{% codeblock %}\nphp composer.phar update\n{% endcodeblock %}\n如果只想安装或更新一个依赖，你可以白名单它们：\n{% codeblock %}\nphp composer.phar update monolog/monolog [...]\n{% endcodeblock %}\n注意： 对于库，并不一定建议提交锁文件 请参考：库的锁文件.\n\nPackagist:\n\npackagist 是 Composer 的主要资源库。 一个 Composer 的库基本上是一个包的源：记录了可以得到包的地方。Packagist 的目标是成为大家使用库资源的中央存储平台。这意味着你可以 require 那里的任何包。\n\n当你访问 packagist website (packagist.org)，你可以浏览和搜索资源包。\n\n任何支持 Composer 的开源项目应该发布自己的包在 packagist 上。虽然并不一定要发布在 packagist 上来使用 Composer，但它使我们的编程生活更加轻松\n\n\n\n自动加载:\n\n对于库的自动加载信息，Composer 生成了一个 vendor/autoload.php 文件。你可以简单的引入这个文件，你会得到一个免费的自动加载支持。\n\nrequire 'vendor/autoload.php';\n这使得你可以很容易的使用第三方代码。例如：如果你的项目依赖 monolog，你就可以像这样开始使用这个类库，并且他们将被自动加载。\n{% codeblock %}\n$log = new Monolog\\Logger('name');\n$log->pushHandler(new Monolog\\Handler\\StreamHandler('app.log', Monolog\\Logger::WARNING));\n\n$log->addWarning('Foo');\n{% endcodeblock %}\n你可以在 composer.json 的 autoload 字段中增加自己的 autoloader。\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"psr-4\": {\"Acme\\\\\": \"src/\"}\n    }\n}\n{% endcodeblock %}\nComposer 将注册一个 PSR-4 autoloader 到 Acme 命名空间。\n\n你可以定义一个从命名空间到目录的映射。此时 src 会在你项目的根目录，与 vendor 文件夹同级。例如 src/Foo.php 文件应该包含 Acme\\Foo 类。\n\n添加 autoload 字段后，你应该再次运行 install 命令来生成 vendor/autoload.php 文件。\n\n引用这个文件也将返回 autoloader 的实例，你可以将包含调用的返回值存储在变量中，并添加更多的命名空间。这对于在一个测试套件中自动加载类文件是非常有用的，例如。\n{% codeblock %}\n$loader = require 'vendor/autoload.php';\n$loader->add('Acme\\\\Test\\\\', __DIR__);\n{% endcodeblock %}\n除了 PSR-4 自动加载，classmap 也是支持的。这允许类被自动加载，即使不符合 PSR-0 规范。详细请查看 自动加载-参考。\n\n注意： Composer 提供了自己的 autoloader。如果你不想使用它，你可以仅仅引入 vendor/composer/autoload_*.php 文件，它返回一个关联数组，你可以通过这个关联数组配置自己的 autoloader。\n\n参考&转载:\n{% link composer官网 http://docs.phpcomposer.com %}","source":"_posts/composer使用.md","raw":"---\ntitle: composer使用\ndate: 2016-07-03 17:09:36\ntags: composer\ncategories: php\n\n---\ncomposer使用：\n\n1.安装Composer：\nComposer需要PHP 5.3.2+才能运行。\n{% codeblock %}\n$ curl -sS https://getcomposer.org/installer | php\n{% endcodeblock %}\n这个命令会将composer.phar下载到当前目录。PHAR（PHP 压缩包）是一个压缩格式，可以在命令行下直接运行。\n\n也可以使用--install-dir选项将Composer安装到指定的目录，例如：\n{% codeblock %}\n$ curl -sS https://getcomposer.org/installer | php -- --install-dir=bin\n{% endcodeblock %}\n\n当然也可以进行全局安装：\n{% codeblock %}\n$ curl -sS https://getcomposer.org/installer | php\n$ mv composer.phar /usr/local/bin/composer\n{% endcodeblock %}\n\n在Mac OS X下也可以使用homebrew安装(用习惯了)：\n{% codeblock %}\nbrew tap josegonzalez/homebrew-php  \nbrew install josegonzalez/php/composer  \n{% endcodeblock %}\n不过通常情况下只需将composer.phar的位置加入到PATH环境变量就可以，不一定要全局安装。\n<!-- more -->\n\n2.composer.json：项目安装\n\n项目中使用 Composer，需要一个 composer.json 文件。该文件包含了项目的依赖和其它的一些元数据。\n\n这个composer.json文件是采用 JSON format 编写的。它允许你定义嵌套结构。\n\n1）关于 require Key\n\n第一件事情（并且往往只需要做这一件事），需要在 composer.json 文件中指定 require key 的值。告诉 Composer 你的项目需要依赖哪些包。\n{% codeblock %}\n\n{\n    \"require\": {\n        \"monolog/monolog\": \"1.0.*\"\n    }\n}\n{% endcodeblock %}\nrequire 需要一个 包名称 （例如 monolog/monolog） 映射到 包版本 （例如 1.0.*） 的对象。\n\n2）包名称\n\n包名称由供应商名称和其项目名称构成。通常容易产生相同的项目名称，而供应商名称的存在则很好的解决了命名冲突的问题。它允许两个不同的人创建同样名为 json 的库，而之后它们将被命名为 igorw/json 和 seldaek/json。\n\n这里我们需要引入 monolog/monolog，供应商名称与项目的名称相同，对于一个具有唯一名称的项目，我们推荐这么做。它还允许以后在同一个命名空间添加更多的相关项目。如果你维护着一个库，这将使你可以很容易的把它分离成更小的部分。\n\n3）包版本\n\n在前面的例子中，我们引入的 monolog 版本指定为 1.0.*。这表示任何从 1.0 开始的开发分支，它将会匹配 1.0.0、1.0.2 或者 1.0.20。\n\n版本约束可以用几个不同的方法来指定。\n\n名称                      实例                                 描述\na.确切的版本号     \t1.0.2                                可以指定包的确切版本。\nb.范围\t>=1.0 >=1.0,<2.0 >=1.0,<1.1|>=1.2         通过使用比较操作符可以指定有效的版本范围。 \nc.有效的运算符：>、>=、<、<=、!=。 \nd.你可以定义多个范围，用逗号隔开，这将被视为一个逻辑AND处理。一个管道符号|将作为逻辑OR处理。 \nAND 的优先级高于 OR。\ne.通配符\t1.0.*\t你可以使用通配符*来指定一种模式。1.0.*与>=1.0,<1.1是等效的。\n\n下一个重要版本（波浪号运算符）\n\n~ 最好用例子来解释： ~1.2 相当于 >=1.2,<2.0，而 ~1.2.3 相当于 >=1.2.3,<1.3。正如你所看到的这对于遵循 语义化版本号 的项目最有用。一个常见的用法是标记你所依赖的最低版本，像 ~1.2 （允许1.2以上的任何版本，但不包括2.0）。由于理论上直到2.0应该都没有向后兼容性问题，所以效果很好。你还会看到它的另一种用法，使用 ~ 指定最低版本，但允许版本号的最后一位数字上升。\n\n注意： 虽然 2.0-beta.1 严格地说是早于 2.0，但是，根据版本约束条件， 例如 ~1.2 却不会安装这个版本。就像前面所讲的 ~1.2 只意味着 .2 部分可以改变，但是 1. 部分是固定的。\n\n4)稳定性\n\n默认情况下只有稳定的发行版才会被考虑在内。如果你也想获得 RC、beta、alpha 或 dev 版本，你可以使用 稳定标志。你可以对所有的包做 最小稳定性 设置，而不是每个依赖逐一设置。\n\n\n\n安装依赖包:\n\n获取定义的依赖到你的本地项目，只需要调用 composer.phar 运行 install 命令。\n{% codeblock %}\nphp composer.phar install\n{% endcodeblock %}\n接着前面的例子，这将会找到 monolog/monolog 的最新版本，并将它下载到 vendor 目录。 这是一个惯例把第三方的代码到一个指定的目录 vendor。如果是 monolog 将会创建 vendor/monolog/monolog 目录。\n\n小技巧： 如果你正在使用Git来管理你的项目， 你可能要添加 vendor 到你的 .gitignore 文件中。 你不会希望将所有的代码都添加到你的版本库中。\n\n另一件事是 install 命令将创建一个 composer.lock 文件到你项目的根目录中。\n\n\ncomposer.lock - 锁文件:\n\n在安装依赖后，Composer 将把安装时确切的版本号列表写入 composer.lock 文件。这将锁定改项目的特定版本。\n\n请提交你应用程序的 composer.lock （包括 composer.json）到你的版本库中\n\n这是非常重要的，因为 install 命令将会检查锁文件是否存在，如果存在，它将下载指定的版本（忽略 composer.json 文件中的定义）。\n\n这意味着，任何人建立项目都将下载与指定版本完全相同的依赖。你的持续集成服务器、生产环境、你团队中的其他开发人员、每件事、每个人都使用相同的依赖，从而减轻潜在的错误对部署的影响。即使你独自开发项目，在六个月内重新安装项目时，你也可以放心的继续工作，即使从那时起你的依赖已经发布了许多新的版本。\n\n如果不存在 composer.lock 文件，Composer 将读取 composer.json 并创建锁文件。\n\n这意味着如果你的依赖更新了新的版本，你将不会获得任何更新。此时要更新你的依赖版本请使用 update 命令。这将获取最新匹配的版本（根据你的 composer.json 文件）并将新版本更新进锁文件。\n{% codeblock %}\nphp composer.phar update\n{% endcodeblock %}\n如果只想安装或更新一个依赖，你可以白名单它们：\n{% codeblock %}\nphp composer.phar update monolog/monolog [...]\n{% endcodeblock %}\n注意： 对于库，并不一定建议提交锁文件 请参考：库的锁文件.\n\nPackagist:\n\npackagist 是 Composer 的主要资源库。 一个 Composer 的库基本上是一个包的源：记录了可以得到包的地方。Packagist 的目标是成为大家使用库资源的中央存储平台。这意味着你可以 require 那里的任何包。\n\n当你访问 packagist website (packagist.org)，你可以浏览和搜索资源包。\n\n任何支持 Composer 的开源项目应该发布自己的包在 packagist 上。虽然并不一定要发布在 packagist 上来使用 Composer，但它使我们的编程生活更加轻松\n\n\n\n自动加载:\n\n对于库的自动加载信息，Composer 生成了一个 vendor/autoload.php 文件。你可以简单的引入这个文件，你会得到一个免费的自动加载支持。\n\nrequire 'vendor/autoload.php';\n这使得你可以很容易的使用第三方代码。例如：如果你的项目依赖 monolog，你就可以像这样开始使用这个类库，并且他们将被自动加载。\n{% codeblock %}\n$log = new Monolog\\Logger('name');\n$log->pushHandler(new Monolog\\Handler\\StreamHandler('app.log', Monolog\\Logger::WARNING));\n\n$log->addWarning('Foo');\n{% endcodeblock %}\n你可以在 composer.json 的 autoload 字段中增加自己的 autoloader。\n{% codeblock %}\n\n{\n    \"autoload\": {\n        \"psr-4\": {\"Acme\\\\\": \"src/\"}\n    }\n}\n{% endcodeblock %}\nComposer 将注册一个 PSR-4 autoloader 到 Acme 命名空间。\n\n你可以定义一个从命名空间到目录的映射。此时 src 会在你项目的根目录，与 vendor 文件夹同级。例如 src/Foo.php 文件应该包含 Acme\\Foo 类。\n\n添加 autoload 字段后，你应该再次运行 install 命令来生成 vendor/autoload.php 文件。\n\n引用这个文件也将返回 autoloader 的实例，你可以将包含调用的返回值存储在变量中，并添加更多的命名空间。这对于在一个测试套件中自动加载类文件是非常有用的，例如。\n{% codeblock %}\n$loader = require 'vendor/autoload.php';\n$loader->add('Acme\\\\Test\\\\', __DIR__);\n{% endcodeblock %}\n除了 PSR-4 自动加载，classmap 也是支持的。这允许类被自动加载，即使不符合 PSR-0 规范。详细请查看 自动加载-参考。\n\n注意： Composer 提供了自己的 autoloader。如果你不想使用它，你可以仅仅引入 vendor/composer/autoload_*.php 文件，它返回一个关联数组，你可以通过这个关联数组配置自己的 autoloader。\n\n参考&转载:\n{% link composer官网 http://docs.phpcomposer.com %}","slug":"composer使用","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeiel60004znz4ala8mdnv","content":"<p>composer使用：</p>\n<p>1.安装Composer：<br>Composer需要PHP 5.3.2+才能运行。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -sS https://getcomposer.org/installer | php</div></pre></td></tr></table></figure><br>这个命令会将composer.phar下载到当前目录。PHAR（PHP 压缩包）是一个压缩格式，可以在命令行下直接运行。</p>\n<p>也可以使用–install-dir选项将Composer安装到指定的目录，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -sS https://getcomposer.org/installer | php -- --install-dir=bin</div></pre></td></tr></table></figure></p>\n<p>当然也可以进行全局安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -sS https://getcomposer.org/installer | php</div><div class=\"line\">$ mv composer.phar /usr/local/bin/composer</div></pre></td></tr></table></figure></p>\n<p>在Mac OS X下也可以使用homebrew安装(用习惯了)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew tap josegonzalez/homebrew-php  </div><div class=\"line\">brew install josegonzalez/php/composer  </div></pre></td></tr></table></figure><br>不过通常情况下只需将composer.phar的位置加入到PATH环境变量就可以，不一定要全局安装。<br><a id=\"more\"></a></p>\n<p>2.composer.json：项目安装</p>\n<p>项目中使用 Composer，需要一个 composer.json 文件。该文件包含了项目的依赖和其它的一些元数据。</p>\n<p>这个composer.json文件是采用 JSON format 编写的。它允许你定义嵌套结构。</p>\n<p>1）关于 require Key</p>\n<p>第一件事情（并且往往只需要做这一件事），需要在 composer.json 文件中指定 require key 的值。告诉 Composer 你的项目需要依赖哪些包。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;require&quot;: &#123;</div><div class=\"line\">        &quot;monolog/monolog&quot;: &quot;1.0.*&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>require 需要一个 包名称 （例如 monolog/monolog） 映射到 包版本 （例如 1.0.*） 的对象。</p>\n<p>2）包名称</p>\n<p>包名称由供应商名称和其项目名称构成。通常容易产生相同的项目名称，而供应商名称的存在则很好的解决了命名冲突的问题。它允许两个不同的人创建同样名为 json 的库，而之后它们将被命名为 igorw/json 和 seldaek/json。</p>\n<p>这里我们需要引入 monolog/monolog，供应商名称与项目的名称相同，对于一个具有唯一名称的项目，我们推荐这么做。它还允许以后在同一个命名空间添加更多的相关项目。如果你维护着一个库，这将使你可以很容易的把它分离成更小的部分。</p>\n<p>3）包版本</p>\n<p>在前面的例子中，我们引入的 monolog 版本指定为 1.0.*。这表示任何从 1.0 开始的开发分支，它将会匹配 1.0.0、1.0.2 或者 1.0.20。</p>\n<p>版本约束可以用几个不同的方法来指定。</p>\n<p>名称                      实例                                 描述<br>a.确切的版本号         1.0.2                                可以指定包的确切版本。<br>b.范围    &gt;=1.0 &gt;=1.0,<2.0>=1.0,<1.1|>=1.2         通过使用比较操作符可以指定有效的版本范围。<br>c.有效的运算符：&gt;、&gt;=、&lt;、&lt;=、!=。<br>d.你可以定义多个范围，用逗号隔开，这将被视为一个逻辑AND处理。一个管道符号|将作为逻辑OR处理。<br>AND 的优先级高于 OR。<br>e.通配符    1.0.<em>    你可以使用通配符</em>来指定一种模式。1.0.*与&gt;=1.0,&lt;1.1是等效的。</1.1|></2.0></p>\n<p>下一个重要版本（波浪号运算符）</p>\n<p>~ 最好用例子来解释： ~1.2 相当于 &gt;=1.2,<2.0，而 ~1.2.3=\"\" 相当于=\"\">=1.2.3,&lt;1.3。正如你所看到的这对于遵循 语义化版本号 的项目最有用。一个常见的用法是标记你所依赖的最低版本，像 ~1.2 （允许1.2以上的任何版本，但不包括2.0）。由于理论上直到2.0应该都没有向后兼容性问题，所以效果很好。你还会看到它的另一种用法，使用 ~ 指定最低版本，但允许版本号的最后一位数字上升。</2.0，而></p>\n<p>注意： 虽然 2.0-beta.1 严格地说是早于 2.0，但是，根据版本约束条件， 例如 ~1.2 却不会安装这个版本。就像前面所讲的 ~1.2 只意味着 .2 部分可以改变，但是 1. 部分是固定的。</p>\n<p>4)稳定性</p>\n<p>默认情况下只有稳定的发行版才会被考虑在内。如果你也想获得 RC、beta、alpha 或 dev 版本，你可以使用 稳定标志。你可以对所有的包做 最小稳定性 设置，而不是每个依赖逐一设置。</p>\n<p>安装依赖包:</p>\n<p>获取定义的依赖到你的本地项目，只需要调用 composer.phar 运行 install 命令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar install</div></pre></td></tr></table></figure><br>接着前面的例子，这将会找到 monolog/monolog 的最新版本，并将它下载到 vendor 目录。 这是一个惯例把第三方的代码到一个指定的目录 vendor。如果是 monolog 将会创建 vendor/monolog/monolog 目录。</p>\n<p>小技巧： 如果你正在使用Git来管理你的项目， 你可能要添加 vendor 到你的 .gitignore 文件中。 你不会希望将所有的代码都添加到你的版本库中。</p>\n<p>另一件事是 install 命令将创建一个 composer.lock 文件到你项目的根目录中。</p>\n<p>composer.lock - 锁文件:</p>\n<p>在安装依赖后，Composer 将把安装时确切的版本号列表写入 composer.lock 文件。这将锁定改项目的特定版本。</p>\n<p>请提交你应用程序的 composer.lock （包括 composer.json）到你的版本库中</p>\n<p>这是非常重要的，因为 install 命令将会检查锁文件是否存在，如果存在，它将下载指定的版本（忽略 composer.json 文件中的定义）。</p>\n<p>这意味着，任何人建立项目都将下载与指定版本完全相同的依赖。你的持续集成服务器、生产环境、你团队中的其他开发人员、每件事、每个人都使用相同的依赖，从而减轻潜在的错误对部署的影响。即使你独自开发项目，在六个月内重新安装项目时，你也可以放心的继续工作，即使从那时起你的依赖已经发布了许多新的版本。</p>\n<p>如果不存在 composer.lock 文件，Composer 将读取 composer.json 并创建锁文件。</p>\n<p>这意味着如果你的依赖更新了新的版本，你将不会获得任何更新。此时要更新你的依赖版本请使用 update 命令。这将获取最新匹配的版本（根据你的 composer.json 文件）并将新版本更新进锁文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar update</div></pre></td></tr></table></figure><br>如果只想安装或更新一个依赖，你可以白名单它们：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar update monolog/monolog [...]</div></pre></td></tr></table></figure><br>注意： 对于库，并不一定建议提交锁文件 请参考：库的锁文件.</p>\n<p>Packagist:</p>\n<p>packagist 是 Composer 的主要资源库。 一个 Composer 的库基本上是一个包的源：记录了可以得到包的地方。Packagist 的目标是成为大家使用库资源的中央存储平台。这意味着你可以 require 那里的任何包。</p>\n<p>当你访问 packagist website (packagist.org)，你可以浏览和搜索资源包。</p>\n<p>任何支持 Composer 的开源项目应该发布自己的包在 packagist 上。虽然并不一定要发布在 packagist 上来使用 Composer，但它使我们的编程生活更加轻松</p>\n<p>自动加载:</p>\n<p>对于库的自动加载信息，Composer 生成了一个 vendor/autoload.php 文件。你可以简单的引入这个文件，你会得到一个免费的自动加载支持。</p>\n<p>require ‘vendor/autoload.php’;<br>这使得你可以很容易的使用第三方代码。例如：如果你的项目依赖 monolog，你就可以像这样开始使用这个类库，并且他们将被自动加载。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$log = new Monolog\\Logger(&apos;name&apos;);</div><div class=\"line\">$log-&gt;pushHandler(new Monolog\\Handler\\StreamHandler(&apos;app.log&apos;, Monolog\\Logger::WARNING));</div><div class=\"line\"></div><div class=\"line\">$log-&gt;addWarning(&apos;Foo&apos;);</div></pre></td></tr></table></figure><br>你可以在 composer.json 的 autoload 字段中增加自己的 autoloader。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-4&quot;: &#123;&quot;Acme\\\\&quot;: &quot;src/&quot;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>Composer 将注册一个 PSR-4 autoloader 到 Acme 命名空间。</p>\n<p>你可以定义一个从命名空间到目录的映射。此时 src 会在你项目的根目录，与 vendor 文件夹同级。例如 src/Foo.php 文件应该包含 Acme\\Foo 类。</p>\n<p>添加 autoload 字段后，你应该再次运行 install 命令来生成 vendor/autoload.php 文件。</p>\n<p>引用这个文件也将返回 autoloader 的实例，你可以将包含调用的返回值存储在变量中，并添加更多的命名空间。这对于在一个测试套件中自动加载类文件是非常有用的，例如。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$loader = require &apos;vendor/autoload.php&apos;;</div><div class=\"line\">$loader-&gt;add(&apos;Acme\\\\Test\\\\&apos;, __DIR__);</div></pre></td></tr></table></figure><br>除了 PSR-4 自动加载，classmap 也是支持的。这允许类被自动加载，即使不符合 PSR-0 规范。详细请查看 自动加载-参考。</p>\n<p>注意： Composer 提供了自己的 autoloader。如果你不想使用它，你可以仅仅引入 vendor/composer/autoload_*.php 文件，它返回一个关联数组，你可以通过这个关联数组配置自己的 autoloader。</p>\n<p>参考&amp;转载:<br><a href=\"http://docs.phpcomposer.com\" target=\"_blank\" rel=\"external\">composer官网</a></p>\n","excerpt":"<p>composer使用：</p>\n<p>1.安装Composer：<br>Composer需要PHP 5.3.2+才能运行。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -sS https://getcomposer.org/installer | php</div></pre></td></tr></table></figure><br>这个命令会将composer.phar下载到当前目录。PHAR（PHP 压缩包）是一个压缩格式，可以在命令行下直接运行。</p>\n<p>也可以使用–install-dir选项将Composer安装到指定的目录，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -sS https://getcomposer.org/installer | php -- --install-dir=bin</div></pre></td></tr></table></figure></p>\n<p>当然也可以进行全局安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -sS https://getcomposer.org/installer | php</div><div class=\"line\">$ mv composer.phar /usr/local/bin/composer</div></pre></td></tr></table></figure></p>\n<p>在Mac OS X下也可以使用homebrew安装(用习惯了)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew tap josegonzalez/homebrew-php  </div><div class=\"line\">brew install josegonzalez/php/composer  </div></pre></td></tr></table></figure><br>不过通常情况下只需将composer.phar的位置加入到PATH环境变量就可以，不一定要全局安装。<br>","more":"</p>\n<p>2.composer.json：项目安装</p>\n<p>项目中使用 Composer，需要一个 composer.json 文件。该文件包含了项目的依赖和其它的一些元数据。</p>\n<p>这个composer.json文件是采用 JSON format 编写的。它允许你定义嵌套结构。</p>\n<p>1）关于 require Key</p>\n<p>第一件事情（并且往往只需要做这一件事），需要在 composer.json 文件中指定 require key 的值。告诉 Composer 你的项目需要依赖哪些包。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;require&quot;: &#123;</div><div class=\"line\">        &quot;monolog/monolog&quot;: &quot;1.0.*&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>require 需要一个 包名称 （例如 monolog/monolog） 映射到 包版本 （例如 1.0.*） 的对象。</p>\n<p>2）包名称</p>\n<p>包名称由供应商名称和其项目名称构成。通常容易产生相同的项目名称，而供应商名称的存在则很好的解决了命名冲突的问题。它允许两个不同的人创建同样名为 json 的库，而之后它们将被命名为 igorw/json 和 seldaek/json。</p>\n<p>这里我们需要引入 monolog/monolog，供应商名称与项目的名称相同，对于一个具有唯一名称的项目，我们推荐这么做。它还允许以后在同一个命名空间添加更多的相关项目。如果你维护着一个库，这将使你可以很容易的把它分离成更小的部分。</p>\n<p>3）包版本</p>\n<p>在前面的例子中，我们引入的 monolog 版本指定为 1.0.*。这表示任何从 1.0 开始的开发分支，它将会匹配 1.0.0、1.0.2 或者 1.0.20。</p>\n<p>版本约束可以用几个不同的方法来指定。</p>\n<p>名称                      实例                                 描述<br>a.确切的版本号         1.0.2                                可以指定包的确切版本。<br>b.范围    &gt;=1.0 &gt;=1.0,<2.0 >=1.0,<1.1|>=1.2         通过使用比较操作符可以指定有效的版本范围。<br>c.有效的运算符：&gt;、&gt;=、&lt;、&lt;=、!=。<br>d.你可以定义多个范围，用逗号隔开，这将被视为一个逻辑AND处理。一个管道符号|将作为逻辑OR处理。<br>AND 的优先级高于 OR。<br>e.通配符    1.0.<em>    你可以使用通配符</em>来指定一种模式。1.0.*与&gt;=1.0,&lt;1.1是等效的。</p>\n<p>下一个重要版本（波浪号运算符）</p>\n<p>~ 最好用例子来解释： ~1.2 相当于 &gt;=1.2,<2.0，而 ~1.2.3 相当于 >=1.2.3,&lt;1.3。正如你所看到的这对于遵循 语义化版本号 的项目最有用。一个常见的用法是标记你所依赖的最低版本，像 ~1.2 （允许1.2以上的任何版本，但不包括2.0）。由于理论上直到2.0应该都没有向后兼容性问题，所以效果很好。你还会看到它的另一种用法，使用 ~ 指定最低版本，但允许版本号的最后一位数字上升。</p>\n<p>注意： 虽然 2.0-beta.1 严格地说是早于 2.0，但是，根据版本约束条件， 例如 ~1.2 却不会安装这个版本。就像前面所讲的 ~1.2 只意味着 .2 部分可以改变，但是 1. 部分是固定的。</p>\n<p>4)稳定性</p>\n<p>默认情况下只有稳定的发行版才会被考虑在内。如果你也想获得 RC、beta、alpha 或 dev 版本，你可以使用 稳定标志。你可以对所有的包做 最小稳定性 设置，而不是每个依赖逐一设置。</p>\n<p>安装依赖包:</p>\n<p>获取定义的依赖到你的本地项目，只需要调用 composer.phar 运行 install 命令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar install</div></pre></td></tr></table></figure><br>接着前面的例子，这将会找到 monolog/monolog 的最新版本，并将它下载到 vendor 目录。 这是一个惯例把第三方的代码到一个指定的目录 vendor。如果是 monolog 将会创建 vendor/monolog/monolog 目录。</p>\n<p>小技巧： 如果你正在使用Git来管理你的项目， 你可能要添加 vendor 到你的 .gitignore 文件中。 你不会希望将所有的代码都添加到你的版本库中。</p>\n<p>另一件事是 install 命令将创建一个 composer.lock 文件到你项目的根目录中。</p>\n<p>composer.lock - 锁文件:</p>\n<p>在安装依赖后，Composer 将把安装时确切的版本号列表写入 composer.lock 文件。这将锁定改项目的特定版本。</p>\n<p>请提交你应用程序的 composer.lock （包括 composer.json）到你的版本库中</p>\n<p>这是非常重要的，因为 install 命令将会检查锁文件是否存在，如果存在，它将下载指定的版本（忽略 composer.json 文件中的定义）。</p>\n<p>这意味着，任何人建立项目都将下载与指定版本完全相同的依赖。你的持续集成服务器、生产环境、你团队中的其他开发人员、每件事、每个人都使用相同的依赖，从而减轻潜在的错误对部署的影响。即使你独自开发项目，在六个月内重新安装项目时，你也可以放心的继续工作，即使从那时起你的依赖已经发布了许多新的版本。</p>\n<p>如果不存在 composer.lock 文件，Composer 将读取 composer.json 并创建锁文件。</p>\n<p>这意味着如果你的依赖更新了新的版本，你将不会获得任何更新。此时要更新你的依赖版本请使用 update 命令。这将获取最新匹配的版本（根据你的 composer.json 文件）并将新版本更新进锁文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar update</div></pre></td></tr></table></figure><br>如果只想安装或更新一个依赖，你可以白名单它们：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar update monolog/monolog [...]</div></pre></td></tr></table></figure><br>注意： 对于库，并不一定建议提交锁文件 请参考：库的锁文件.</p>\n<p>Packagist:</p>\n<p>packagist 是 Composer 的主要资源库。 一个 Composer 的库基本上是一个包的源：记录了可以得到包的地方。Packagist 的目标是成为大家使用库资源的中央存储平台。这意味着你可以 require 那里的任何包。</p>\n<p>当你访问 packagist website (packagist.org)，你可以浏览和搜索资源包。</p>\n<p>任何支持 Composer 的开源项目应该发布自己的包在 packagist 上。虽然并不一定要发布在 packagist 上来使用 Composer，但它使我们的编程生活更加轻松</p>\n<p>自动加载:</p>\n<p>对于库的自动加载信息，Composer 生成了一个 vendor/autoload.php 文件。你可以简单的引入这个文件，你会得到一个免费的自动加载支持。</p>\n<p>require ‘vendor/autoload.php’;<br>这使得你可以很容易的使用第三方代码。例如：如果你的项目依赖 monolog，你就可以像这样开始使用这个类库，并且他们将被自动加载。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$log = new Monolog\\Logger(&apos;name&apos;);</div><div class=\"line\">$log-&gt;pushHandler(new Monolog\\Handler\\StreamHandler(&apos;app.log&apos;, Monolog\\Logger::WARNING));</div><div class=\"line\"></div><div class=\"line\">$log-&gt;addWarning(&apos;Foo&apos;);</div></pre></td></tr></table></figure><br>你可以在 composer.json 的 autoload 字段中增加自己的 autoloader。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-4&quot;: &#123;&quot;Acme\\\\&quot;: &quot;src/&quot;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>Composer 将注册一个 PSR-4 autoloader 到 Acme 命名空间。</p>\n<p>你可以定义一个从命名空间到目录的映射。此时 src 会在你项目的根目录，与 vendor 文件夹同级。例如 src/Foo.php 文件应该包含 Acme\\Foo 类。</p>\n<p>添加 autoload 字段后，你应该再次运行 install 命令来生成 vendor/autoload.php 文件。</p>\n<p>引用这个文件也将返回 autoloader 的实例，你可以将包含调用的返回值存储在变量中，并添加更多的命名空间。这对于在一个测试套件中自动加载类文件是非常有用的，例如。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$loader = require &apos;vendor/autoload.php&apos;;</div><div class=\"line\">$loader-&gt;add(&apos;Acme\\\\Test\\\\&apos;, __DIR__);</div></pre></td></tr></table></figure><br>除了 PSR-4 自动加载，classmap 也是支持的。这允许类被自动加载，即使不符合 PSR-0 规范。详细请查看 自动加载-参考。</p>\n<p>注意： Composer 提供了自己的 autoloader。如果你不想使用它，你可以仅仅引入 vendor/composer/autoload_*.php 文件，它返回一个关联数组，你可以通过这个关联数组配置自己的 autoloader。</p>\n<p>参考&amp;转载:<br><a href=\"http://docs.phpcomposer.com\">composer官网</a></p>"},{"title":"composer命令行","date":"2016-07-03T09:48:47.000Z","_content":"\n全局参数\n\n下列参数可与每一个命令结合使用：\n\n--verbose (-v): 增加反馈信息的详细度。\n-v 表示正常输出。\n-vv 表示更详细的输出。\n-vvv 则是为了 debug。\n--help (-h): 显示帮助信息。\n--quiet (-q): 禁止输出任何信息。\n--no-interaction (-n): 不要询问任何交互问题。\n--working-dir (-d): 如果指定的话，使用给定的目录作为工作目录。\n--profile: 显示时间和内存使用信息。\n--ansi: 强制 ANSI 输出。\n--no-ansi: 关闭 ANSI 输出。\n--version (-V): 显示当前应用程序的版本信息。\n\n进程退出代码\n\n0: 正常\n1: 通用/未知错误\n2: 依赖关系处理错误\n\n<!-- more -->\n\n初始化 init\n\n在 “库” 那一章我们看到了如何手动创建 composer.json 文件。实际上还有一个 init 命令可以更容易的做到这一点。\n\n当您运行该命令，它会以交互方式要求您填写一些信息，同时聪明的使用一些默认值。\n\n{% codeblock %}\nphp composer.phar init\n{% endcodeblock %}\n初始化-参数\n\n--name: 包的名称。\n--description: 包的描述。\n--author: 包的作者。\n--homepage: 包的主页。\n--require: 需要依赖的其它包，必须要有一个版本约束。并且应该遵循 foo/bar:1.0.0 这样的格式。\n--require-dev: 开发版的依赖包，内容格式与 --require 相同。\n--stability (-s): minimum-stability 字段的值。\n\n安装 install\n\ninstall 命令从当前目录读取 composer.json 文件，处理了依赖关系，并把其安装到 vendor 目录下。\n{% codeblock %}\nphp composer.phar install\n{% endcodeblock %}\n如果当前目录下存在 composer.lock 文件，它会从此文件读取依赖版本，而不是根据 composer.json 文件去获取依赖。这确保了该库的每个使用者都能得到相同的依赖版本。\n\n如果没有 composer.lock 文件，composer 将在处理完依赖关系后创建它。\n\n\n安装-参数\n\n--prefer-source: 下载包的方式有两种： source 和 dist。对于稳定版本 composer 将默认使用 dist 方式。而 source 表示版本控制源 。如果 --prefer-source 是被启用的，composer 将从 source 安装（如果有的话）。如果想要使用一个 bugfix 到你的项目，这是非常有用的。并且可以直接从本地的版本库直接获取依赖关系。\n--prefer-dist: 与 --prefer-source 相反，composer 将尽可能的从 dist 获取，这将大幅度的加快在 build servers 上的安装。这也是一个回避 git 问题的途径，如果你不清楚如何正确的设置。\n--dry-run: 如果你只是想演示而并非实际安装一个包，你可以运行 --dry-run 命令，它将模拟安装并显示将会发生什么。\n--dev: 安装 require-dev 字段中列出的包（这是一个默认值）。\n--no-dev: 跳过 require-dev 字段中列出的包。\n--no-scripts: 跳过 composer.json 文件中定义的脚本。\n--no-plugins: 关闭 plugins。\n--no-progress: 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。\n--optimize-autoloader (-o): 转换 PSR-0/4 autoloading 到 classmap 可以获得更快的加载支持。特别是在生产环境下建议这么做，但由于运行需要一些时间，因此并没有作为默认值。\n\n更新 update\n\n为了获取依赖的最新版本，并且升级 composer.lock 文件，你应该使用 update 命令。\n{% codeblock %}\nphp composer.phar update\n{% endcodeblock %}\n\n这将解决项目的所有依赖，并将确切的版本号写入 composer.lock。\n\n如果你只是想更新几个包，你可以像这样分别列出它们：\n{% codeblock %}\nphp composer.phar update vendor/package vendor/package2\n{% endcodeblock %}\n你还可以使用通配符进行批量更新：\n{% codeblock %}\nphp composer.phar update vendor/*\n{% endcodeblock %}\n\n更新-参数\n\n--prefer-source: 当有可用的包时，从 source 安装。\n--prefer-dist: 当有可用的包时，从 dist 安装。\n--dry-run: 模拟命令，并没有做实际的操作。\n--dev: 安装 require-dev 字段中列出的包（这是一个默认值）。\n--no-dev: 跳过 require-dev 字段中列出的包。\n--no-scripts: 跳过 composer.json 文件中定义的脚本。\n--no-plugins: 关闭 plugins。\n--no-progress: 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。\n--optimize-autoloader (-o): 转换 PSR-0/4 autoloading 到 classmap 可以获得更快的加载支持。特别是在生产环境下建议这么做，但由于运行需要一些时间，因此并没有作为默认值。\n--lock: 仅更新 lock 文件的 hash，取消有关 lock 文件过时的警告。\n--with-dependencies 同时更新白名单内包的依赖关系，这将进行递归更新。\n\n申明依赖 require\n\nrequire 命令增加新的依赖包到当前目录的 composer.json 文件中。\n{% codeblock %}\nphp composer.phar require\n{% endcodeblock %}\n在添加或改变依赖时， 修改后的依赖关系将被安装或者更新。\n\n如果你不希望通过交互来指定依赖包，你可以在这条令中直接指明依赖包。\n{% codeblock %}\nphp composer.phar require vendor/package:2.* vendor/package2:dev-master\n{% endcodeblock %}\n\n申明依赖-参数\n\n--prefer-source: 当有可用的包时，从 source 安装。\n--prefer-dist: 当有可用的包时，从 dist 安装。\n--dev: 安装 require-dev 字段中列出的包。\n--no-update: 禁用依赖关系的自动更新。\n--no-progress: 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。\n--update-with-dependencies 一并更新新装包的依赖。\n\n全局执行 global\n\nglobal 命令允许你在 COMPOSER_HOME 目录下执行其它命令，像 install、require 或 update。\n\n并且如果你将 $COMPOSER_HOME/vendor/bin 加入到了 $PATH 环境变量中，你就可以用它在命令行中安装全局应用，下面是一个例子：\n{% codeblock %}\nphp composer.phar global require fabpot/php-cs-fixer:dev-master\n{% endcodeblock %}\n现在 php-cs-fixer 就可以在全局范围使用了（假设你已经设置了你的 PATH）。如果稍后你想更新它，你只需要运行 global update：\n\n{% codeblock %}\nphp composer.phar global update\n{% endcodeblock %}\n\n搜索 search\n\nsearch 命令允许你为当前项目搜索依赖包，通常它只搜索 packagist.org 上的包，你可以简单的输入你的搜索条件。\n{% codeblock %}\nphp composer.phar search monolog\n{% endcodeblock %}\n您也可以通过传递多个参数来进行多条件搜索。\n\n\n搜索-参数\n\n--only-name (-N): 仅针对指定的名称搜索（完全匹配）。\n\n展示 show\n\n列出所有可用的软件包，你可以使用 show 命令。\n{% codeblock %}\nphp composer.phar show\n{% endcodeblock %}\n如果你想看到一个包的详细信息，你可以输入一个包名称。\n{% codeblock %}\nphp composer.phar show monolog/monolog\n\nname     : monolog/monolog\nversions : master-dev, 1.0.2, 1.0.1, 1.0.0, 1.0.0-RC1\ntype     : library\nnames    : monolog/monolog\nsource   : [git] http://github.com/Seldaek/monolog.git 3d4e60d0cbc4b888fe5ad223d77964428b1978da\ndist     : [zip] http://github.com/Seldaek/monolog/zipball/3d4e60d0cbc4b888fe5ad223d77964428b1978da 3d4e60d0cbc4b888fe5ad223d77964428b1978da\nlicense  : MIT\n\nautoload\npsr-0\nMonolog : src/\n\nrequires\nphp >=5.3.0\n{% endcodeblock %}\n你甚至可以输入一个软件包的版本号，来显示该版本的详细信息。\n\nphp composer.phar show monolog/monolog 1.0.2\n\n展示-参数\n\n--installed (-i): 列出已安装的依赖包。\n--platform (-p): 仅列出平台软件包（PHP 与它的扩展）。\n--self (-s): 仅列出当前项目信息。\n\n依赖性检测 depends\n\ndepends 命令可以查出已安装在你项目中的某个包，是否正在被其它的包所依赖，并列出他们。\n{% codeblock %}\nphp composer.phar depends --link-type=require monolog/monolog\n\nnrk/monolog-fluent\npoc/poc\npropel/propel\nsymfony/monolog-bridge\nsymfony/symfony\n\n{% endcodeblock %}\n\n依赖性检测-参数\n\n--link-type: 检测的类型，默认为 require 也可以是 require-dev。\n\n有效性检测 validate\n\n在提交 composer.json 文件，和创建 tag 前，你应该始终运行 validate 命令。它将检测你的 composer.json 文件是否是有效的\n{% codeblock %}\nphp composer.phar validate\n{% endcodeblock %}\n有效性检测参数\n\n--no-check-all: Composer 是否进行完整的校验。\n\n依赖包状态检测 status\n\n如果你经常修改依赖包里的代码，并且它们是从 source（自定义源）进行安装的，那么 status 命令允许你进行检查，如果你有任何本地的更改它将会给予提示。\n\nphp composer.phar status\n你可以使用 --verbose 系列参数（-v|vv|vvv）来获取更详细的详细：\n\nphp composer.phar status -v\n\nYou have changes in the following dependencies:\nvendor/seld/jsonlint:\n    M README.mdown\n\n自我更新 self-update\n\n将 Composer 自身升级到最新版本，只需要运行 self-update 命令。它将替换你的 composer.phar 文件到最新版本。\n\nphp composer.phar self-update\n如果你想要升级到一个特定的版本，可以这样简单的指定它：\n\nphp composer.phar self-update 1.0.0-alpha7\n如果你已经为整个系统安装 Composer（参见 全局安装），你可能需要在 root 权限下运行它：\n\nsudo composer self-update\n\n自我更新-参数\n\n--rollback (-r): 回滚到你已经安装的最后一个版本。\n--clean-backups: 在更新过程中删除旧的备份，这使得更新过后的当前版本是唯一可用的备份。\n\n更改配置 config\n\nconfig 命令允许你编辑 Composer 的一些基本设置，无论是本地的 composer.json 或者全局的 config.json 文件。\n{% codeblock %}\nphp composer.phar config --list\n{% endcodeblock %}\n更改配置-使用方法\n{% codeblock %}\nconfig [options] [setting-key] [setting-value1] ... [setting-valueN]\n{% endcodeblock %}\n\nsetting-key 是一个配置选项的名称，setting-value1 是一个配置的值。可以使用数组作为配置的值（像 github-protocols），多个 setting-value 是允许的。\n\n有效的配置选项，请查看“架构”章节的 config 。\n\n\n更改配置-参数\n\n--global (-g): 操作位于 $COMPOSER_HOME/config.json 的全局配置文件。如果不指定该参数，此命令将影响当前项目的 composer.json 文件，或 --file 参数所指向的文件。\n--editor (-e): 使用文本编辑器打开 composer.json 文件。默认情况下始终是打开当前项目的文件。当存在 --global 参数时，将会打开全局 composer.json 文件。\n--unset: 移除由 setting-key 指定名称的配置选项。\n--list (-l): 显示当前配置选项的列表。当存在 --global 参数时，将会显示全局配置选项的列表。\n--file=\"...\" (-f): 在一个指定的文件上操作，而不是 composer.json。注意：不能与 --global 参数一起使用。\n\n修改包来源\n\n除了修改配置选项， config 命令还支持通过以下方法修改来源信息：\n\nphp composer.phar config repositories.foo vcs http://github.com/foo/bar\n\n创建项目 create-project\n\n你可以使用 Composer 从现有的包中创建一个新的项目。这相当于执行了一个 git clone 或 svn checkout 命令后将这个包的依赖安装到它自己的 vendor 目录。\n\n此命令有几个常见的用途：\n\n你可以快速的部署你的应用。\n你可以检出任何资源包，并开发它的补丁。\n多人开发项目，可以用它来加快应用的初始化。\n要创建基于 Composer 的新项目，你可以使用 \"create-project\" 命令。传递一个包名，它会为你创建项目的目录。你也可以在第三个参数中指定版本号，否则将获取最新的版本。\n\n如果该目录目前不存在，则会在安装过程中自动创建。\n\nphp composer.phar create-project doctrine/orm path 2.2.*\n此外，你也可以无需使用这个命令，而是通过现有的 composer.json 文件来启动这个项目。\n\n默认情况下，这个命令会在 packagist.org 上查找你指定的包。\n\n\n创建项目-参数\n\n--repository-url: 提供一个自定义的储存库来搜索包，这将被用来代替 packagist.org。可以是一个指向 composer 资源库的 HTTP URL，或者是指向某个 packages.json 文件的本地路径。\n--stability (-s): 资源包的最低稳定版本，默认为 stable。\n--prefer-source: 当有可用的包时，从 source 安装。\n--prefer-dist: 当有可用的包时，从 dist 安装。\n--dev: 安装 require-dev 字段中列出的包。\n--no-install: 禁止安装包的依赖。\n--no-plugins: 禁用 plugins。\n--no-scripts: 禁止在根资源包中定义的脚本执行。\n--no-progress: 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。\n--keep-vcs: 创建时跳过缺失的 VCS 。如果你在非交互模式下运行创建命令，这将是非常有用的。\n\n打印自动加载索引 dump-autoload\n\n某些情况下你需要更新 autoloader，例如在你的包中加入了一个新的类。你可以使用 dump-autoload 来完成，而不必执行 install 或 update 命令。\n\n此外，它可以打印一个优化过的，符合 PSR-0/4 规范的类的索引，这也是出于对性能的可考虑。在大型的应用中会有许多类文件，而 autoloader 会占用每个请求的很大一部分时间，使用 classmaps 或许在开发时不太方便，但它在保证性能的前提下，仍然可以获得 PSR-0/4 规范带来的便利。\n\n\n打印自动加载索引-参数\n\n--optimize (-o): 转换 PSR-0/4 autoloading 到 classmap 获得更快的载入速度。这特别适用于生产环境，但可能需要一些时间来运行，因此它目前不是默认设置。\n--no-dev: 禁用 autoload-dev 规则。\n\n查看许可协议 licenses\n\n列出已安装的每个包的名称、版本、许可协议。可以使用 --format=json 参数来获取 JSON 格式的输出。\n\n\n执行脚本 run-script\n\n你可以运行此命令来手动执行 脚本，只需要指定脚本的名称，可选的 --no-dev 参数允许你禁用开发者模式。\n\n\n诊断 diagnose\n\n如果你觉得发现了一个 bug 或是程序行为变得怪异，你可能需要运行 diagnose 命令，来帮助你检测一些常见的问题。\n{% codeblock %}\nphp composer.phar diagnose\n{% endcodeblock %}\n\n归档 archive\n\n此命令用来对指定包的指定版本进行 zip/tar 归档。它也可以用来归档你的整个项目，不包括 excluded/ignored（排除/忽略）的文件。\n{% codeblock %}\nphp composer.phar archive vendor/package 2.0.21 --format=zip\n{% endcodeblock %}\n\n归档-参数\n\n--format (-f): 指定归档格式：tar 或 zip（默认为 tar）。\n--dir: 指定归档存放的目录（默认为当前目录）。\n\n获取帮助信息 help\n\n使用 help 可以获取指定命令的帮助信息。\n\nphp composer.phar help install\n\n环境变量\n\n你可以设置一些环境变量来覆盖默认的配置。建议尽可能的在 composer.json 的 config 字段中设置这些值，而不是通过命令行设置环境变量。值得注意的是环境变量中的值，将始终优先于 composer.json 中所指定的值。\n\n\nCOMPOSER\n\n环境变量 COMPOSER 可以为 composer.json 文件指定其它的文件名。\n\n例如：\n\nCOMPOSER=composer-other.json php composer.phar install\n\nCOMPOSER_ROOT_VERSION\n\n通过设置这个环境变量，你可以指定 root 包的版本，如果程序不能从 VCS 上猜测出版本号，并且未在 composer.json 文件中申明。\n\n\nCOMPOSER_VENDOR_DIR\n\n通过设置这个环境变量，你可以指定 composer 将依赖安装在 vendor 以外的其它目录中。\n\n\nCOMPOSER_BIN_DIR\n\n通过设置这个环境变量，你可以指定 bin（Vendor Binaries）目录到 vendor/bin 以外的其它目录。\n\n\nhttp_proxy or HTTP_PROXY\n\n如果你是通过 HTTP 代理来使用 Composer，你可以使用 http_proxy 或 HTTP_PROXY 环境变量。只要简单的将它设置为代理服务器的 URL。许多操作系统已经为你的服务设置了此变量。\n\n建议使用 http_proxy（小写）或者两者都进行定义。因为某些工具，像 git 或 curl 将使用 http_proxy 小写的版本。另外，你还可以使用 git config --global http.proxy <proxy url> 来单独设置 git 的代理。\n\n\nno_proxy\n\n如果你是使用代理服务器，并且想要对某些域名禁用代理，就可以使用 no_proxy 环境变量。只需要输入一个逗号相隔的域名 排除 列表。\n\n此环境变量接受域名、IP 以及 CIDR地址块。你可以将它限制到一个端口（例如：:80）。你还可以把它设置为 * 来忽略所有的 HTTP 代理请求。\n\n\nHTTP_PROXY_REQUEST_FULLURI\n\n如果你使用了 HTTP 代理，但它不支持 request_fulluri 标签，那么你应该设置这个环境变量为 false 或 0 ，来防止 composer 从 request_fulluri 读取配置。\n\n\nHTTPS_PROXY_REQUEST_FULLURI\n\n如果你使用了 HTTPS 代理，但它不支持 request_fulluri 标签，那么你应该设置这个环境变量为 false 或 0 ，来防止 composer 从 request_fulluri 读取配置。\n\n\nCOMPOSER_HOME\n\nCOMPOSER_HOME 环境变量允许你改变 Composer 的主目录。这是一个隐藏的、所有项目共享的全局目录（对本机的所有用户都可用）。\n\n它在各个系统上的默认值分别为：\n{% codeblock %}\n*nix /home/<user>/.composer。\nOSX /Users/<user>/.composer。\nWindows C:\\Users\\<user>\\AppData\\Roaming\\Composer。\n{% endcodeblock %}\n\nCOMPOSER_HOME/config.json\n\n你可以在 COMPOSER_HOME 目录中放置一个 config.json 文件。在你执行 install 和 update 命令时，Composer 会将它与你项目中的 composer.json 文件进行合并。\n\n该文件允许你为用户的项目设置 配置信息 和 资源库。\n\n若 全局 和 项目 存在相同配置项，那么项目中的 composer.json 文件拥有更高的优先级。\n\n\nCOMPOSER_CACHE_DIR\n\nCOMPOSER_CACHE_DIR 环境变量允许你设置 Composer 的缓存目录，这也可以通过 cache-dir 进行配置。\n\n它在各个系统上的默认值分别为：\n\n*nix and OSX $COMPOSER_HOME/cache。\nWindows C:\\Users\\<user>\\AppData\\Local\\Composer 或 %LOCALAPPDATA%/Composer。\n\nCOMPOSER_PROCESS_TIMEOUT\n\n这个环境变量控制着 Composer 执行命令的等待时间（例如：git 命令）。默认值为300秒（5分钟）。\n\n\nCOMPOSER_DISCARD_CHANGES\n\n这个环境变量控制着 discard-changes config option。\n\n\nCOMPOSER_NO_INTERACTION\n\n如果设置为1，这个环境变量将使 Composer 在执行每一个命令时都放弃交互，相当于对所有命令都使用了 --no-interaction。可以在搭建 虚拟机/持续集成服务器 时这样设置。\n\n参考&转载:\n{% link composer官网 http://docs.phpcomposer.com %}\n","source":"_posts/composer命令行.md","raw":"---\ntitle: composer命令行\ndate: 2016-07-03 17:48:47\ntags: composer\ncategories: php\n---\n\n全局参数\n\n下列参数可与每一个命令结合使用：\n\n--verbose (-v): 增加反馈信息的详细度。\n-v 表示正常输出。\n-vv 表示更详细的输出。\n-vvv 则是为了 debug。\n--help (-h): 显示帮助信息。\n--quiet (-q): 禁止输出任何信息。\n--no-interaction (-n): 不要询问任何交互问题。\n--working-dir (-d): 如果指定的话，使用给定的目录作为工作目录。\n--profile: 显示时间和内存使用信息。\n--ansi: 强制 ANSI 输出。\n--no-ansi: 关闭 ANSI 输出。\n--version (-V): 显示当前应用程序的版本信息。\n\n进程退出代码\n\n0: 正常\n1: 通用/未知错误\n2: 依赖关系处理错误\n\n<!-- more -->\n\n初始化 init\n\n在 “库” 那一章我们看到了如何手动创建 composer.json 文件。实际上还有一个 init 命令可以更容易的做到这一点。\n\n当您运行该命令，它会以交互方式要求您填写一些信息，同时聪明的使用一些默认值。\n\n{% codeblock %}\nphp composer.phar init\n{% endcodeblock %}\n初始化-参数\n\n--name: 包的名称。\n--description: 包的描述。\n--author: 包的作者。\n--homepage: 包的主页。\n--require: 需要依赖的其它包，必须要有一个版本约束。并且应该遵循 foo/bar:1.0.0 这样的格式。\n--require-dev: 开发版的依赖包，内容格式与 --require 相同。\n--stability (-s): minimum-stability 字段的值。\n\n安装 install\n\ninstall 命令从当前目录读取 composer.json 文件，处理了依赖关系，并把其安装到 vendor 目录下。\n{% codeblock %}\nphp composer.phar install\n{% endcodeblock %}\n如果当前目录下存在 composer.lock 文件，它会从此文件读取依赖版本，而不是根据 composer.json 文件去获取依赖。这确保了该库的每个使用者都能得到相同的依赖版本。\n\n如果没有 composer.lock 文件，composer 将在处理完依赖关系后创建它。\n\n\n安装-参数\n\n--prefer-source: 下载包的方式有两种： source 和 dist。对于稳定版本 composer 将默认使用 dist 方式。而 source 表示版本控制源 。如果 --prefer-source 是被启用的，composer 将从 source 安装（如果有的话）。如果想要使用一个 bugfix 到你的项目，这是非常有用的。并且可以直接从本地的版本库直接获取依赖关系。\n--prefer-dist: 与 --prefer-source 相反，composer 将尽可能的从 dist 获取，这将大幅度的加快在 build servers 上的安装。这也是一个回避 git 问题的途径，如果你不清楚如何正确的设置。\n--dry-run: 如果你只是想演示而并非实际安装一个包，你可以运行 --dry-run 命令，它将模拟安装并显示将会发生什么。\n--dev: 安装 require-dev 字段中列出的包（这是一个默认值）。\n--no-dev: 跳过 require-dev 字段中列出的包。\n--no-scripts: 跳过 composer.json 文件中定义的脚本。\n--no-plugins: 关闭 plugins。\n--no-progress: 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。\n--optimize-autoloader (-o): 转换 PSR-0/4 autoloading 到 classmap 可以获得更快的加载支持。特别是在生产环境下建议这么做，但由于运行需要一些时间，因此并没有作为默认值。\n\n更新 update\n\n为了获取依赖的最新版本，并且升级 composer.lock 文件，你应该使用 update 命令。\n{% codeblock %}\nphp composer.phar update\n{% endcodeblock %}\n\n这将解决项目的所有依赖，并将确切的版本号写入 composer.lock。\n\n如果你只是想更新几个包，你可以像这样分别列出它们：\n{% codeblock %}\nphp composer.phar update vendor/package vendor/package2\n{% endcodeblock %}\n你还可以使用通配符进行批量更新：\n{% codeblock %}\nphp composer.phar update vendor/*\n{% endcodeblock %}\n\n更新-参数\n\n--prefer-source: 当有可用的包时，从 source 安装。\n--prefer-dist: 当有可用的包时，从 dist 安装。\n--dry-run: 模拟命令，并没有做实际的操作。\n--dev: 安装 require-dev 字段中列出的包（这是一个默认值）。\n--no-dev: 跳过 require-dev 字段中列出的包。\n--no-scripts: 跳过 composer.json 文件中定义的脚本。\n--no-plugins: 关闭 plugins。\n--no-progress: 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。\n--optimize-autoloader (-o): 转换 PSR-0/4 autoloading 到 classmap 可以获得更快的加载支持。特别是在生产环境下建议这么做，但由于运行需要一些时间，因此并没有作为默认值。\n--lock: 仅更新 lock 文件的 hash，取消有关 lock 文件过时的警告。\n--with-dependencies 同时更新白名单内包的依赖关系，这将进行递归更新。\n\n申明依赖 require\n\nrequire 命令增加新的依赖包到当前目录的 composer.json 文件中。\n{% codeblock %}\nphp composer.phar require\n{% endcodeblock %}\n在添加或改变依赖时， 修改后的依赖关系将被安装或者更新。\n\n如果你不希望通过交互来指定依赖包，你可以在这条令中直接指明依赖包。\n{% codeblock %}\nphp composer.phar require vendor/package:2.* vendor/package2:dev-master\n{% endcodeblock %}\n\n申明依赖-参数\n\n--prefer-source: 当有可用的包时，从 source 安装。\n--prefer-dist: 当有可用的包时，从 dist 安装。\n--dev: 安装 require-dev 字段中列出的包。\n--no-update: 禁用依赖关系的自动更新。\n--no-progress: 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。\n--update-with-dependencies 一并更新新装包的依赖。\n\n全局执行 global\n\nglobal 命令允许你在 COMPOSER_HOME 目录下执行其它命令，像 install、require 或 update。\n\n并且如果你将 $COMPOSER_HOME/vendor/bin 加入到了 $PATH 环境变量中，你就可以用它在命令行中安装全局应用，下面是一个例子：\n{% codeblock %}\nphp composer.phar global require fabpot/php-cs-fixer:dev-master\n{% endcodeblock %}\n现在 php-cs-fixer 就可以在全局范围使用了（假设你已经设置了你的 PATH）。如果稍后你想更新它，你只需要运行 global update：\n\n{% codeblock %}\nphp composer.phar global update\n{% endcodeblock %}\n\n搜索 search\n\nsearch 命令允许你为当前项目搜索依赖包，通常它只搜索 packagist.org 上的包，你可以简单的输入你的搜索条件。\n{% codeblock %}\nphp composer.phar search monolog\n{% endcodeblock %}\n您也可以通过传递多个参数来进行多条件搜索。\n\n\n搜索-参数\n\n--only-name (-N): 仅针对指定的名称搜索（完全匹配）。\n\n展示 show\n\n列出所有可用的软件包，你可以使用 show 命令。\n{% codeblock %}\nphp composer.phar show\n{% endcodeblock %}\n如果你想看到一个包的详细信息，你可以输入一个包名称。\n{% codeblock %}\nphp composer.phar show monolog/monolog\n\nname     : monolog/monolog\nversions : master-dev, 1.0.2, 1.0.1, 1.0.0, 1.0.0-RC1\ntype     : library\nnames    : monolog/monolog\nsource   : [git] http://github.com/Seldaek/monolog.git 3d4e60d0cbc4b888fe5ad223d77964428b1978da\ndist     : [zip] http://github.com/Seldaek/monolog/zipball/3d4e60d0cbc4b888fe5ad223d77964428b1978da 3d4e60d0cbc4b888fe5ad223d77964428b1978da\nlicense  : MIT\n\nautoload\npsr-0\nMonolog : src/\n\nrequires\nphp >=5.3.0\n{% endcodeblock %}\n你甚至可以输入一个软件包的版本号，来显示该版本的详细信息。\n\nphp composer.phar show monolog/monolog 1.0.2\n\n展示-参数\n\n--installed (-i): 列出已安装的依赖包。\n--platform (-p): 仅列出平台软件包（PHP 与它的扩展）。\n--self (-s): 仅列出当前项目信息。\n\n依赖性检测 depends\n\ndepends 命令可以查出已安装在你项目中的某个包，是否正在被其它的包所依赖，并列出他们。\n{% codeblock %}\nphp composer.phar depends --link-type=require monolog/monolog\n\nnrk/monolog-fluent\npoc/poc\npropel/propel\nsymfony/monolog-bridge\nsymfony/symfony\n\n{% endcodeblock %}\n\n依赖性检测-参数\n\n--link-type: 检测的类型，默认为 require 也可以是 require-dev。\n\n有效性检测 validate\n\n在提交 composer.json 文件，和创建 tag 前，你应该始终运行 validate 命令。它将检测你的 composer.json 文件是否是有效的\n{% codeblock %}\nphp composer.phar validate\n{% endcodeblock %}\n有效性检测参数\n\n--no-check-all: Composer 是否进行完整的校验。\n\n依赖包状态检测 status\n\n如果你经常修改依赖包里的代码，并且它们是从 source（自定义源）进行安装的，那么 status 命令允许你进行检查，如果你有任何本地的更改它将会给予提示。\n\nphp composer.phar status\n你可以使用 --verbose 系列参数（-v|vv|vvv）来获取更详细的详细：\n\nphp composer.phar status -v\n\nYou have changes in the following dependencies:\nvendor/seld/jsonlint:\n    M README.mdown\n\n自我更新 self-update\n\n将 Composer 自身升级到最新版本，只需要运行 self-update 命令。它将替换你的 composer.phar 文件到最新版本。\n\nphp composer.phar self-update\n如果你想要升级到一个特定的版本，可以这样简单的指定它：\n\nphp composer.phar self-update 1.0.0-alpha7\n如果你已经为整个系统安装 Composer（参见 全局安装），你可能需要在 root 权限下运行它：\n\nsudo composer self-update\n\n自我更新-参数\n\n--rollback (-r): 回滚到你已经安装的最后一个版本。\n--clean-backups: 在更新过程中删除旧的备份，这使得更新过后的当前版本是唯一可用的备份。\n\n更改配置 config\n\nconfig 命令允许你编辑 Composer 的一些基本设置，无论是本地的 composer.json 或者全局的 config.json 文件。\n{% codeblock %}\nphp composer.phar config --list\n{% endcodeblock %}\n更改配置-使用方法\n{% codeblock %}\nconfig [options] [setting-key] [setting-value1] ... [setting-valueN]\n{% endcodeblock %}\n\nsetting-key 是一个配置选项的名称，setting-value1 是一个配置的值。可以使用数组作为配置的值（像 github-protocols），多个 setting-value 是允许的。\n\n有效的配置选项，请查看“架构”章节的 config 。\n\n\n更改配置-参数\n\n--global (-g): 操作位于 $COMPOSER_HOME/config.json 的全局配置文件。如果不指定该参数，此命令将影响当前项目的 composer.json 文件，或 --file 参数所指向的文件。\n--editor (-e): 使用文本编辑器打开 composer.json 文件。默认情况下始终是打开当前项目的文件。当存在 --global 参数时，将会打开全局 composer.json 文件。\n--unset: 移除由 setting-key 指定名称的配置选项。\n--list (-l): 显示当前配置选项的列表。当存在 --global 参数时，将会显示全局配置选项的列表。\n--file=\"...\" (-f): 在一个指定的文件上操作，而不是 composer.json。注意：不能与 --global 参数一起使用。\n\n修改包来源\n\n除了修改配置选项， config 命令还支持通过以下方法修改来源信息：\n\nphp composer.phar config repositories.foo vcs http://github.com/foo/bar\n\n创建项目 create-project\n\n你可以使用 Composer 从现有的包中创建一个新的项目。这相当于执行了一个 git clone 或 svn checkout 命令后将这个包的依赖安装到它自己的 vendor 目录。\n\n此命令有几个常见的用途：\n\n你可以快速的部署你的应用。\n你可以检出任何资源包，并开发它的补丁。\n多人开发项目，可以用它来加快应用的初始化。\n要创建基于 Composer 的新项目，你可以使用 \"create-project\" 命令。传递一个包名，它会为你创建项目的目录。你也可以在第三个参数中指定版本号，否则将获取最新的版本。\n\n如果该目录目前不存在，则会在安装过程中自动创建。\n\nphp composer.phar create-project doctrine/orm path 2.2.*\n此外，你也可以无需使用这个命令，而是通过现有的 composer.json 文件来启动这个项目。\n\n默认情况下，这个命令会在 packagist.org 上查找你指定的包。\n\n\n创建项目-参数\n\n--repository-url: 提供一个自定义的储存库来搜索包，这将被用来代替 packagist.org。可以是一个指向 composer 资源库的 HTTP URL，或者是指向某个 packages.json 文件的本地路径。\n--stability (-s): 资源包的最低稳定版本，默认为 stable。\n--prefer-source: 当有可用的包时，从 source 安装。\n--prefer-dist: 当有可用的包时，从 dist 安装。\n--dev: 安装 require-dev 字段中列出的包。\n--no-install: 禁止安装包的依赖。\n--no-plugins: 禁用 plugins。\n--no-scripts: 禁止在根资源包中定义的脚本执行。\n--no-progress: 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。\n--keep-vcs: 创建时跳过缺失的 VCS 。如果你在非交互模式下运行创建命令，这将是非常有用的。\n\n打印自动加载索引 dump-autoload\n\n某些情况下你需要更新 autoloader，例如在你的包中加入了一个新的类。你可以使用 dump-autoload 来完成，而不必执行 install 或 update 命令。\n\n此外，它可以打印一个优化过的，符合 PSR-0/4 规范的类的索引，这也是出于对性能的可考虑。在大型的应用中会有许多类文件，而 autoloader 会占用每个请求的很大一部分时间，使用 classmaps 或许在开发时不太方便，但它在保证性能的前提下，仍然可以获得 PSR-0/4 规范带来的便利。\n\n\n打印自动加载索引-参数\n\n--optimize (-o): 转换 PSR-0/4 autoloading 到 classmap 获得更快的载入速度。这特别适用于生产环境，但可能需要一些时间来运行，因此它目前不是默认设置。\n--no-dev: 禁用 autoload-dev 规则。\n\n查看许可协议 licenses\n\n列出已安装的每个包的名称、版本、许可协议。可以使用 --format=json 参数来获取 JSON 格式的输出。\n\n\n执行脚本 run-script\n\n你可以运行此命令来手动执行 脚本，只需要指定脚本的名称，可选的 --no-dev 参数允许你禁用开发者模式。\n\n\n诊断 diagnose\n\n如果你觉得发现了一个 bug 或是程序行为变得怪异，你可能需要运行 diagnose 命令，来帮助你检测一些常见的问题。\n{% codeblock %}\nphp composer.phar diagnose\n{% endcodeblock %}\n\n归档 archive\n\n此命令用来对指定包的指定版本进行 zip/tar 归档。它也可以用来归档你的整个项目，不包括 excluded/ignored（排除/忽略）的文件。\n{% codeblock %}\nphp composer.phar archive vendor/package 2.0.21 --format=zip\n{% endcodeblock %}\n\n归档-参数\n\n--format (-f): 指定归档格式：tar 或 zip（默认为 tar）。\n--dir: 指定归档存放的目录（默认为当前目录）。\n\n获取帮助信息 help\n\n使用 help 可以获取指定命令的帮助信息。\n\nphp composer.phar help install\n\n环境变量\n\n你可以设置一些环境变量来覆盖默认的配置。建议尽可能的在 composer.json 的 config 字段中设置这些值，而不是通过命令行设置环境变量。值得注意的是环境变量中的值，将始终优先于 composer.json 中所指定的值。\n\n\nCOMPOSER\n\n环境变量 COMPOSER 可以为 composer.json 文件指定其它的文件名。\n\n例如：\n\nCOMPOSER=composer-other.json php composer.phar install\n\nCOMPOSER_ROOT_VERSION\n\n通过设置这个环境变量，你可以指定 root 包的版本，如果程序不能从 VCS 上猜测出版本号，并且未在 composer.json 文件中申明。\n\n\nCOMPOSER_VENDOR_DIR\n\n通过设置这个环境变量，你可以指定 composer 将依赖安装在 vendor 以外的其它目录中。\n\n\nCOMPOSER_BIN_DIR\n\n通过设置这个环境变量，你可以指定 bin（Vendor Binaries）目录到 vendor/bin 以外的其它目录。\n\n\nhttp_proxy or HTTP_PROXY\n\n如果你是通过 HTTP 代理来使用 Composer，你可以使用 http_proxy 或 HTTP_PROXY 环境变量。只要简单的将它设置为代理服务器的 URL。许多操作系统已经为你的服务设置了此变量。\n\n建议使用 http_proxy（小写）或者两者都进行定义。因为某些工具，像 git 或 curl 将使用 http_proxy 小写的版本。另外，你还可以使用 git config --global http.proxy <proxy url> 来单独设置 git 的代理。\n\n\nno_proxy\n\n如果你是使用代理服务器，并且想要对某些域名禁用代理，就可以使用 no_proxy 环境变量。只需要输入一个逗号相隔的域名 排除 列表。\n\n此环境变量接受域名、IP 以及 CIDR地址块。你可以将它限制到一个端口（例如：:80）。你还可以把它设置为 * 来忽略所有的 HTTP 代理请求。\n\n\nHTTP_PROXY_REQUEST_FULLURI\n\n如果你使用了 HTTP 代理，但它不支持 request_fulluri 标签，那么你应该设置这个环境变量为 false 或 0 ，来防止 composer 从 request_fulluri 读取配置。\n\n\nHTTPS_PROXY_REQUEST_FULLURI\n\n如果你使用了 HTTPS 代理，但它不支持 request_fulluri 标签，那么你应该设置这个环境变量为 false 或 0 ，来防止 composer 从 request_fulluri 读取配置。\n\n\nCOMPOSER_HOME\n\nCOMPOSER_HOME 环境变量允许你改变 Composer 的主目录。这是一个隐藏的、所有项目共享的全局目录（对本机的所有用户都可用）。\n\n它在各个系统上的默认值分别为：\n{% codeblock %}\n*nix /home/<user>/.composer。\nOSX /Users/<user>/.composer。\nWindows C:\\Users\\<user>\\AppData\\Roaming\\Composer。\n{% endcodeblock %}\n\nCOMPOSER_HOME/config.json\n\n你可以在 COMPOSER_HOME 目录中放置一个 config.json 文件。在你执行 install 和 update 命令时，Composer 会将它与你项目中的 composer.json 文件进行合并。\n\n该文件允许你为用户的项目设置 配置信息 和 资源库。\n\n若 全局 和 项目 存在相同配置项，那么项目中的 composer.json 文件拥有更高的优先级。\n\n\nCOMPOSER_CACHE_DIR\n\nCOMPOSER_CACHE_DIR 环境变量允许你设置 Composer 的缓存目录，这也可以通过 cache-dir 进行配置。\n\n它在各个系统上的默认值分别为：\n\n*nix and OSX $COMPOSER_HOME/cache。\nWindows C:\\Users\\<user>\\AppData\\Local\\Composer 或 %LOCALAPPDATA%/Composer。\n\nCOMPOSER_PROCESS_TIMEOUT\n\n这个环境变量控制着 Composer 执行命令的等待时间（例如：git 命令）。默认值为300秒（5分钟）。\n\n\nCOMPOSER_DISCARD_CHANGES\n\n这个环境变量控制着 discard-changes config option。\n\n\nCOMPOSER_NO_INTERACTION\n\n如果设置为1，这个环境变量将使 Composer 在执行每一个命令时都放弃交互，相当于对所有命令都使用了 --no-interaction。可以在搭建 虚拟机/持续集成服务器 时这样设置。\n\n参考&转载:\n{% link composer官网 http://docs.phpcomposer.com %}\n","slug":"composer命令行","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeiell0007znz4ee2tzw7q","content":"<p>全局参数</p>\n<p>下列参数可与每一个命令结合使用：</p>\n<p>–verbose (-v): 增加反馈信息的详细度。<br>-v 表示正常输出。<br>-vv 表示更详细的输出。<br>-vvv 则是为了 debug。<br>–help (-h): 显示帮助信息。<br>–quiet (-q): 禁止输出任何信息。<br>–no-interaction (-n): 不要询问任何交互问题。<br>–working-dir (-d): 如果指定的话，使用给定的目录作为工作目录。<br>–profile: 显示时间和内存使用信息。<br>–ansi: 强制 ANSI 输出。<br>–no-ansi: 关闭 ANSI 输出。<br>–version (-V): 显示当前应用程序的版本信息。</p>\n<p>进程退出代码</p>\n<p>0: 正常<br>1: 通用/未知错误<br>2: 依赖关系处理错误</p>\n<a id=\"more\"></a>\n<p>初始化 init</p>\n<p>在 “库” 那一章我们看到了如何手动创建 composer.json 文件。实际上还有一个 init 命令可以更容易的做到这一点。</p>\n<p>当您运行该命令，它会以交互方式要求您填写一些信息，同时聪明的使用一些默认值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar init</div></pre></td></tr></table></figure>\n<p>初始化-参数</p>\n<p>–name: 包的名称。<br>–description: 包的描述。<br>–author: 包的作者。<br>–homepage: 包的主页。<br>–require: 需要依赖的其它包，必须要有一个版本约束。并且应该遵循 foo/bar:1.0.0 这样的格式。<br>–require-dev: 开发版的依赖包，内容格式与 –require 相同。<br>–stability (-s): minimum-stability 字段的值。</p>\n<p>安装 install</p>\n<p>install 命令从当前目录读取 composer.json 文件，处理了依赖关系，并把其安装到 vendor 目录下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar install</div></pre></td></tr></table></figure><br>如果当前目录下存在 composer.lock 文件，它会从此文件读取依赖版本，而不是根据 composer.json 文件去获取依赖。这确保了该库的每个使用者都能得到相同的依赖版本。</p>\n<p>如果没有 composer.lock 文件，composer 将在处理完依赖关系后创建它。</p>\n<p>安装-参数</p>\n<p>–prefer-source: 下载包的方式有两种： source 和 dist。对于稳定版本 composer 将默认使用 dist 方式。而 source 表示版本控制源 。如果 –prefer-source 是被启用的，composer 将从 source 安装（如果有的话）。如果想要使用一个 bugfix 到你的项目，这是非常有用的。并且可以直接从本地的版本库直接获取依赖关系。<br>–prefer-dist: 与 –prefer-source 相反，composer 将尽可能的从 dist 获取，这将大幅度的加快在 build servers 上的安装。这也是一个回避 git 问题的途径，如果你不清楚如何正确的设置。<br>–dry-run: 如果你只是想演示而并非实际安装一个包，你可以运行 –dry-run 命令，它将模拟安装并显示将会发生什么。<br>–dev: 安装 require-dev 字段中列出的包（这是一个默认值）。<br>–no-dev: 跳过 require-dev 字段中列出的包。<br>–no-scripts: 跳过 composer.json 文件中定义的脚本。<br>–no-plugins: 关闭 plugins。<br>–no-progress: 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。<br>–optimize-autoloader (-o): 转换 PSR-0/4 autoloading 到 classmap 可以获得更快的加载支持。特别是在生产环境下建议这么做，但由于运行需要一些时间，因此并没有作为默认值。</p>\n<p>更新 update</p>\n<p>为了获取依赖的最新版本，并且升级 composer.lock 文件，你应该使用 update 命令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar update</div></pre></td></tr></table></figure></p>\n<p>这将解决项目的所有依赖，并将确切的版本号写入 composer.lock。</p>\n<p>如果你只是想更新几个包，你可以像这样分别列出它们：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar update vendor/package vendor/package2</div></pre></td></tr></table></figure><br>你还可以使用通配符进行批量更新：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar update vendor/*</div></pre></td></tr></table></figure></p>\n<p>更新-参数</p>\n<p>–prefer-source: 当有可用的包时，从 source 安装。<br>–prefer-dist: 当有可用的包时，从 dist 安装。<br>–dry-run: 模拟命令，并没有做实际的操作。<br>–dev: 安装 require-dev 字段中列出的包（这是一个默认值）。<br>–no-dev: 跳过 require-dev 字段中列出的包。<br>–no-scripts: 跳过 composer.json 文件中定义的脚本。<br>–no-plugins: 关闭 plugins。<br>–no-progress: 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。<br>–optimize-autoloader (-o): 转换 PSR-0/4 autoloading 到 classmap 可以获得更快的加载支持。特别是在生产环境下建议这么做，但由于运行需要一些时间，因此并没有作为默认值。<br>–lock: 仅更新 lock 文件的 hash，取消有关 lock 文件过时的警告。<br>–with-dependencies 同时更新白名单内包的依赖关系，这将进行递归更新。</p>\n<p>申明依赖 require</p>\n<p>require 命令增加新的依赖包到当前目录的 composer.json 文件中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar require</div></pre></td></tr></table></figure><br>在添加或改变依赖时， 修改后的依赖关系将被安装或者更新。</p>\n<p>如果你不希望通过交互来指定依赖包，你可以在这条令中直接指明依赖包。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar require vendor/package:2.* vendor/package2:dev-master</div></pre></td></tr></table></figure></p>\n<p>申明依赖-参数</p>\n<p>–prefer-source: 当有可用的包时，从 source 安装。<br>–prefer-dist: 当有可用的包时，从 dist 安装。<br>–dev: 安装 require-dev 字段中列出的包。<br>–no-update: 禁用依赖关系的自动更新。<br>–no-progress: 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。<br>–update-with-dependencies 一并更新新装包的依赖。</p>\n<p>全局执行 global</p>\n<p>global 命令允许你在 COMPOSER_HOME 目录下执行其它命令，像 install、require 或 update。</p>\n<p>并且如果你将 $COMPOSER_HOME/vendor/bin 加入到了 $PATH 环境变量中，你就可以用它在命令行中安装全局应用，下面是一个例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar global require fabpot/php-cs-fixer:dev-master</div></pre></td></tr></table></figure><br>现在 php-cs-fixer 就可以在全局范围使用了（假设你已经设置了你的 PATH）。如果稍后你想更新它，你只需要运行 global update：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar global update</div></pre></td></tr></table></figure>\n<p>搜索 search</p>\n<p>search 命令允许你为当前项目搜索依赖包，通常它只搜索 packagist.org 上的包，你可以简单的输入你的搜索条件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar search monolog</div></pre></td></tr></table></figure><br>您也可以通过传递多个参数来进行多条件搜索。</p>\n<p>搜索-参数</p>\n<p>–only-name (-N): 仅针对指定的名称搜索（完全匹配）。</p>\n<p>展示 show</p>\n<p>列出所有可用的软件包，你可以使用 show 命令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar show</div></pre></td></tr></table></figure><br>如果你想看到一个包的详细信息，你可以输入一个包名称。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar show monolog/monolog</div><div class=\"line\"></div><div class=\"line\">name     : monolog/monolog</div><div class=\"line\">versions : master-dev, 1.0.2, 1.0.1, 1.0.0, 1.0.0-RC1</div><div class=\"line\">type     : library</div><div class=\"line\">names    : monolog/monolog</div><div class=\"line\">source   : [git] http://github.com/Seldaek/monolog.git 3d4e60d0cbc4b888fe5ad223d77964428b1978da</div><div class=\"line\">dist     : [zip] http://github.com/Seldaek/monolog/zipball/3d4e60d0cbc4b888fe5ad223d77964428b1978da 3d4e60d0cbc4b888fe5ad223d77964428b1978da</div><div class=\"line\">license  : MIT</div><div class=\"line\"></div><div class=\"line\">autoload</div><div class=\"line\">psr-0</div><div class=\"line\">Monolog : src/</div><div class=\"line\"></div><div class=\"line\">requires</div><div class=\"line\">php &gt;=5.3.0</div></pre></td></tr></table></figure><br>你甚至可以输入一个软件包的版本号，来显示该版本的详细信息。</p>\n<p>php composer.phar show monolog/monolog 1.0.2</p>\n<p>展示-参数</p>\n<p>–installed (-i): 列出已安装的依赖包。<br>–platform (-p): 仅列出平台软件包（PHP 与它的扩展）。<br>–self (-s): 仅列出当前项目信息。</p>\n<p>依赖性检测 depends</p>\n<p>depends 命令可以查出已安装在你项目中的某个包，是否正在被其它的包所依赖，并列出他们。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar depends --link-type=require monolog/monolog</div><div class=\"line\"></div><div class=\"line\">nrk/monolog-fluent</div><div class=\"line\">poc/poc</div><div class=\"line\">propel/propel</div><div class=\"line\">symfony/monolog-bridge</div><div class=\"line\">symfony/symfony</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>依赖性检测-参数</p>\n<p>–link-type: 检测的类型，默认为 require 也可以是 require-dev。</p>\n<p>有效性检测 validate</p>\n<p>在提交 composer.json 文件，和创建 tag 前，你应该始终运行 validate 命令。它将检测你的 composer.json 文件是否是有效的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar validate</div></pre></td></tr></table></figure><br>有效性检测参数</p>\n<p>–no-check-all: Composer 是否进行完整的校验。</p>\n<p>依赖包状态检测 status</p>\n<p>如果你经常修改依赖包里的代码，并且它们是从 source（自定义源）进行安装的，那么 status 命令允许你进行检查，如果你有任何本地的更改它将会给予提示。</p>\n<p>php composer.phar status<br>你可以使用 –verbose 系列参数（-v|vv|vvv）来获取更详细的详细：</p>\n<p>php composer.phar status -v</p>\n<p>You have changes in the following dependencies:<br>vendor/seld/jsonlint:<br>    M README.mdown</p>\n<p>自我更新 self-update</p>\n<p>将 Composer 自身升级到最新版本，只需要运行 self-update 命令。它将替换你的 composer.phar 文件到最新版本。</p>\n<p>php composer.phar self-update<br>如果你想要升级到一个特定的版本，可以这样简单的指定它：</p>\n<p>php composer.phar self-update 1.0.0-alpha7<br>如果你已经为整个系统安装 Composer（参见 全局安装），你可能需要在 root 权限下运行它：</p>\n<p>sudo composer self-update</p>\n<p>自我更新-参数</p>\n<p>–rollback (-r): 回滚到你已经安装的最后一个版本。<br>–clean-backups: 在更新过程中删除旧的备份，这使得更新过后的当前版本是唯一可用的备份。</p>\n<p>更改配置 config</p>\n<p>config 命令允许你编辑 Composer 的一些基本设置，无论是本地的 composer.json 或者全局的 config.json 文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar config --list</div></pre></td></tr></table></figure><br>更改配置-使用方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">config [options] [setting-key] [setting-value1] ... [setting-valueN]</div></pre></td></tr></table></figure></p>\n<p>setting-key 是一个配置选项的名称，setting-value1 是一个配置的值。可以使用数组作为配置的值（像 github-protocols），多个 setting-value 是允许的。</p>\n<p>有效的配置选项，请查看“架构”章节的 config 。</p>\n<p>更改配置-参数</p>\n<p>–global (-g): 操作位于 $COMPOSER_HOME/config.json 的全局配置文件。如果不指定该参数，此命令将影响当前项目的 composer.json 文件，或 –file 参数所指向的文件。<br>–editor (-e): 使用文本编辑器打开 composer.json 文件。默认情况下始终是打开当前项目的文件。当存在 –global 参数时，将会打开全局 composer.json 文件。<br>–unset: 移除由 setting-key 指定名称的配置选项。<br>–list (-l): 显示当前配置选项的列表。当存在 –global 参数时，将会显示全局配置选项的列表。<br>–file=”…” (-f): 在一个指定的文件上操作，而不是 composer.json。注意：不能与 –global 参数一起使用。</p>\n<p>修改包来源</p>\n<p>除了修改配置选项， config 命令还支持通过以下方法修改来源信息：</p>\n<p>php composer.phar config repositories.foo vcs <a href=\"http://github.com/foo/bar\" target=\"_blank\" rel=\"external\">http://github.com/foo/bar</a></p>\n<p>创建项目 create-project</p>\n<p>你可以使用 Composer 从现有的包中创建一个新的项目。这相当于执行了一个 git clone 或 svn checkout 命令后将这个包的依赖安装到它自己的 vendor 目录。</p>\n<p>此命令有几个常见的用途：</p>\n<p>你可以快速的部署你的应用。<br>你可以检出任何资源包，并开发它的补丁。<br>多人开发项目，可以用它来加快应用的初始化。<br>要创建基于 Composer 的新项目，你可以使用 “create-project” 命令。传递一个包名，它会为你创建项目的目录。你也可以在第三个参数中指定版本号，否则将获取最新的版本。</p>\n<p>如果该目录目前不存在，则会在安装过程中自动创建。</p>\n<p>php composer.phar create-project doctrine/orm path 2.2.*<br>此外，你也可以无需使用这个命令，而是通过现有的 composer.json 文件来启动这个项目。</p>\n<p>默认情况下，这个命令会在 packagist.org 上查找你指定的包。</p>\n<p>创建项目-参数</p>\n<p>–repository-url: 提供一个自定义的储存库来搜索包，这将被用来代替 packagist.org。可以是一个指向 composer 资源库的 HTTP URL，或者是指向某个 packages.json 文件的本地路径。<br>–stability (-s): 资源包的最低稳定版本，默认为 stable。<br>–prefer-source: 当有可用的包时，从 source 安装。<br>–prefer-dist: 当有可用的包时，从 dist 安装。<br>–dev: 安装 require-dev 字段中列出的包。<br>–no-install: 禁止安装包的依赖。<br>–no-plugins: 禁用 plugins。<br>–no-scripts: 禁止在根资源包中定义的脚本执行。<br>–no-progress: 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。<br>–keep-vcs: 创建时跳过缺失的 VCS 。如果你在非交互模式下运行创建命令，这将是非常有用的。</p>\n<p>打印自动加载索引 dump-autoload</p>\n<p>某些情况下你需要更新 autoloader，例如在你的包中加入了一个新的类。你可以使用 dump-autoload 来完成，而不必执行 install 或 update 命令。</p>\n<p>此外，它可以打印一个优化过的，符合 PSR-0/4 规范的类的索引，这也是出于对性能的可考虑。在大型的应用中会有许多类文件，而 autoloader 会占用每个请求的很大一部分时间，使用 classmaps 或许在开发时不太方便，但它在保证性能的前提下，仍然可以获得 PSR-0/4 规范带来的便利。</p>\n<p>打印自动加载索引-参数</p>\n<p>–optimize (-o): 转换 PSR-0/4 autoloading 到 classmap 获得更快的载入速度。这特别适用于生产环境，但可能需要一些时间来运行，因此它目前不是默认设置。<br>–no-dev: 禁用 autoload-dev 规则。</p>\n<p>查看许可协议 licenses</p>\n<p>列出已安装的每个包的名称、版本、许可协议。可以使用 –format=json 参数来获取 JSON 格式的输出。</p>\n<p>执行脚本 run-script</p>\n<p>你可以运行此命令来手动执行 脚本，只需要指定脚本的名称，可选的 –no-dev 参数允许你禁用开发者模式。</p>\n<p>诊断 diagnose</p>\n<p>如果你觉得发现了一个 bug 或是程序行为变得怪异，你可能需要运行 diagnose 命令，来帮助你检测一些常见的问题。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar diagnose</div></pre></td></tr></table></figure></p>\n<p>归档 archive</p>\n<p>此命令用来对指定包的指定版本进行 zip/tar 归档。它也可以用来归档你的整个项目，不包括 excluded/ignored（排除/忽略）的文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar archive vendor/package 2.0.21 --format=zip</div></pre></td></tr></table></figure></p>\n<p>归档-参数</p>\n<p>–format (-f): 指定归档格式：tar 或 zip（默认为 tar）。<br>–dir: 指定归档存放的目录（默认为当前目录）。</p>\n<p>获取帮助信息 help</p>\n<p>使用 help 可以获取指定命令的帮助信息。</p>\n<p>php composer.phar help install</p>\n<p>环境变量</p>\n<p>你可以设置一些环境变量来覆盖默认的配置。建议尽可能的在 composer.json 的 config 字段中设置这些值，而不是通过命令行设置环境变量。值得注意的是环境变量中的值，将始终优先于 composer.json 中所指定的值。</p>\n<p>COMPOSER</p>\n<p>环境变量 COMPOSER 可以为 composer.json 文件指定其它的文件名。</p>\n<p>例如：</p>\n<p>COMPOSER=composer-other.json php composer.phar install</p>\n<p>COMPOSER_ROOT_VERSION</p>\n<p>通过设置这个环境变量，你可以指定 root 包的版本，如果程序不能从 VCS 上猜测出版本号，并且未在 composer.json 文件中申明。</p>\n<p>COMPOSER_VENDOR_DIR</p>\n<p>通过设置这个环境变量，你可以指定 composer 将依赖安装在 vendor 以外的其它目录中。</p>\n<p>COMPOSER_BIN_DIR</p>\n<p>通过设置这个环境变量，你可以指定 bin（Vendor Binaries）目录到 vendor/bin 以外的其它目录。</p>\n<p>http_proxy or HTTP_PROXY</p>\n<p>如果你是通过 HTTP 代理来使用 Composer，你可以使用 http_proxy 或 HTTP_PROXY 环境变量。只要简单的将它设置为代理服务器的 URL。许多操作系统已经为你的服务设置了此变量。</p>\n<p>建议使用 http_proxy（小写）或者两者都进行定义。因为某些工具，像 git 或 curl 将使用 http_proxy 小写的版本。另外，你还可以使用 git config –global http.proxy <proxy url=\"\"> 来单独设置 git 的代理。</proxy></p>\n<p>no_proxy</p>\n<p>如果你是使用代理服务器，并且想要对某些域名禁用代理，就可以使用 no_proxy 环境变量。只需要输入一个逗号相隔的域名 排除 列表。</p>\n<p>此环境变量接受域名、IP 以及 CIDR地址块。你可以将它限制到一个端口（例如：:80）。你还可以把它设置为 * 来忽略所有的 HTTP 代理请求。</p>\n<p>HTTP_PROXY_REQUEST_FULLURI</p>\n<p>如果你使用了 HTTP 代理，但它不支持 request_fulluri 标签，那么你应该设置这个环境变量为 false 或 0 ，来防止 composer 从 request_fulluri 读取配置。</p>\n<p>HTTPS_PROXY_REQUEST_FULLURI</p>\n<p>如果你使用了 HTTPS 代理，但它不支持 request_fulluri 标签，那么你应该设置这个环境变量为 false 或 0 ，来防止 composer 从 request_fulluri 读取配置。</p>\n<p>COMPOSER_HOME</p>\n<p>COMPOSER_HOME 环境变量允许你改变 Composer 的主目录。这是一个隐藏的、所有项目共享的全局目录（对本机的所有用户都可用）。</p>\n<p>它在各个系统上的默认值分别为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*nix /home/&lt;user&gt;/.composer。</div><div class=\"line\">OSX /Users/&lt;user&gt;/.composer。</div><div class=\"line\">Windows C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Composer。</div></pre></td></tr></table></figure></p>\n<p>COMPOSER_HOME/config.json</p>\n<p>你可以在 COMPOSER_HOME 目录中放置一个 config.json 文件。在你执行 install 和 update 命令时，Composer 会将它与你项目中的 composer.json 文件进行合并。</p>\n<p>该文件允许你为用户的项目设置 配置信息 和 资源库。</p>\n<p>若 全局 和 项目 存在相同配置项，那么项目中的 composer.json 文件拥有更高的优先级。</p>\n<p>COMPOSER_CACHE_DIR</p>\n<p>COMPOSER_CACHE_DIR 环境变量允许你设置 Composer 的缓存目录，这也可以通过 cache-dir 进行配置。</p>\n<p>它在各个系统上的默认值分别为：</p>\n<p>*nix and OSX $COMPOSER_HOME/cache。<br>Windows C:\\Users\\<user>\\AppData\\Local\\Composer 或 %LOCALAPPDATA%/Composer。</user></p>\n<p>COMPOSER_PROCESS_TIMEOUT</p>\n<p>这个环境变量控制着 Composer 执行命令的等待时间（例如：git 命令）。默认值为300秒（5分钟）。</p>\n<p>COMPOSER_DISCARD_CHANGES</p>\n<p>这个环境变量控制着 discard-changes config option。</p>\n<p>COMPOSER_NO_INTERACTION</p>\n<p>如果设置为1，这个环境变量将使 Composer 在执行每一个命令时都放弃交互，相当于对所有命令都使用了 –no-interaction。可以在搭建 虚拟机/持续集成服务器 时这样设置。</p>\n<p>参考&amp;转载:<br><a href=\"http://docs.phpcomposer.com\" target=\"_blank\" rel=\"external\">composer官网</a></p>\n","excerpt":"<p>全局参数</p>\n<p>下列参数可与每一个命令结合使用：</p>\n<p>–verbose (-v): 增加反馈信息的详细度。<br>-v 表示正常输出。<br>-vv 表示更详细的输出。<br>-vvv 则是为了 debug。<br>–help (-h): 显示帮助信息。<br>–quiet (-q): 禁止输出任何信息。<br>–no-interaction (-n): 不要询问任何交互问题。<br>–working-dir (-d): 如果指定的话，使用给定的目录作为工作目录。<br>–profile: 显示时间和内存使用信息。<br>–ansi: 强制 ANSI 输出。<br>–no-ansi: 关闭 ANSI 输出。<br>–version (-V): 显示当前应用程序的版本信息。</p>\n<p>进程退出代码</p>\n<p>0: 正常<br>1: 通用/未知错误<br>2: 依赖关系处理错误</p>","more":"<p>初始化 init</p>\n<p>在 “库” 那一章我们看到了如何手动创建 composer.json 文件。实际上还有一个 init 命令可以更容易的做到这一点。</p>\n<p>当您运行该命令，它会以交互方式要求您填写一些信息，同时聪明的使用一些默认值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar init</div></pre></td></tr></table></figure>\n<p>初始化-参数</p>\n<p>–name: 包的名称。<br>–description: 包的描述。<br>–author: 包的作者。<br>–homepage: 包的主页。<br>–require: 需要依赖的其它包，必须要有一个版本约束。并且应该遵循 foo/bar:1.0.0 这样的格式。<br>–require-dev: 开发版的依赖包，内容格式与 –require 相同。<br>–stability (-s): minimum-stability 字段的值。</p>\n<p>安装 install</p>\n<p>install 命令从当前目录读取 composer.json 文件，处理了依赖关系，并把其安装到 vendor 目录下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar install</div></pre></td></tr></table></figure><br>如果当前目录下存在 composer.lock 文件，它会从此文件读取依赖版本，而不是根据 composer.json 文件去获取依赖。这确保了该库的每个使用者都能得到相同的依赖版本。</p>\n<p>如果没有 composer.lock 文件，composer 将在处理完依赖关系后创建它。</p>\n<p>安装-参数</p>\n<p>–prefer-source: 下载包的方式有两种： source 和 dist。对于稳定版本 composer 将默认使用 dist 方式。而 source 表示版本控制源 。如果 –prefer-source 是被启用的，composer 将从 source 安装（如果有的话）。如果想要使用一个 bugfix 到你的项目，这是非常有用的。并且可以直接从本地的版本库直接获取依赖关系。<br>–prefer-dist: 与 –prefer-source 相反，composer 将尽可能的从 dist 获取，这将大幅度的加快在 build servers 上的安装。这也是一个回避 git 问题的途径，如果你不清楚如何正确的设置。<br>–dry-run: 如果你只是想演示而并非实际安装一个包，你可以运行 –dry-run 命令，它将模拟安装并显示将会发生什么。<br>–dev: 安装 require-dev 字段中列出的包（这是一个默认值）。<br>–no-dev: 跳过 require-dev 字段中列出的包。<br>–no-scripts: 跳过 composer.json 文件中定义的脚本。<br>–no-plugins: 关闭 plugins。<br>–no-progress: 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。<br>–optimize-autoloader (-o): 转换 PSR-0/4 autoloading 到 classmap 可以获得更快的加载支持。特别是在生产环境下建议这么做，但由于运行需要一些时间，因此并没有作为默认值。</p>\n<p>更新 update</p>\n<p>为了获取依赖的最新版本，并且升级 composer.lock 文件，你应该使用 update 命令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar update</div></pre></td></tr></table></figure></p>\n<p>这将解决项目的所有依赖，并将确切的版本号写入 composer.lock。</p>\n<p>如果你只是想更新几个包，你可以像这样分别列出它们：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar update vendor/package vendor/package2</div></pre></td></tr></table></figure><br>你还可以使用通配符进行批量更新：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar update vendor/*</div></pre></td></tr></table></figure></p>\n<p>更新-参数</p>\n<p>–prefer-source: 当有可用的包时，从 source 安装。<br>–prefer-dist: 当有可用的包时，从 dist 安装。<br>–dry-run: 模拟命令，并没有做实际的操作。<br>–dev: 安装 require-dev 字段中列出的包（这是一个默认值）。<br>–no-dev: 跳过 require-dev 字段中列出的包。<br>–no-scripts: 跳过 composer.json 文件中定义的脚本。<br>–no-plugins: 关闭 plugins。<br>–no-progress: 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。<br>–optimize-autoloader (-o): 转换 PSR-0/4 autoloading 到 classmap 可以获得更快的加载支持。特别是在生产环境下建议这么做，但由于运行需要一些时间，因此并没有作为默认值。<br>–lock: 仅更新 lock 文件的 hash，取消有关 lock 文件过时的警告。<br>–with-dependencies 同时更新白名单内包的依赖关系，这将进行递归更新。</p>\n<p>申明依赖 require</p>\n<p>require 命令增加新的依赖包到当前目录的 composer.json 文件中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar require</div></pre></td></tr></table></figure><br>在添加或改变依赖时， 修改后的依赖关系将被安装或者更新。</p>\n<p>如果你不希望通过交互来指定依赖包，你可以在这条令中直接指明依赖包。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar require vendor/package:2.* vendor/package2:dev-master</div></pre></td></tr></table></figure></p>\n<p>申明依赖-参数</p>\n<p>–prefer-source: 当有可用的包时，从 source 安装。<br>–prefer-dist: 当有可用的包时，从 dist 安装。<br>–dev: 安装 require-dev 字段中列出的包。<br>–no-update: 禁用依赖关系的自动更新。<br>–no-progress: 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。<br>–update-with-dependencies 一并更新新装包的依赖。</p>\n<p>全局执行 global</p>\n<p>global 命令允许你在 COMPOSER_HOME 目录下执行其它命令，像 install、require 或 update。</p>\n<p>并且如果你将 $COMPOSER_HOME/vendor/bin 加入到了 $PATH 环境变量中，你就可以用它在命令行中安装全局应用，下面是一个例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar global require fabpot/php-cs-fixer:dev-master</div></pre></td></tr></table></figure><br>现在 php-cs-fixer 就可以在全局范围使用了（假设你已经设置了你的 PATH）。如果稍后你想更新它，你只需要运行 global update：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar global update</div></pre></td></tr></table></figure>\n<p>搜索 search</p>\n<p>search 命令允许你为当前项目搜索依赖包，通常它只搜索 packagist.org 上的包，你可以简单的输入你的搜索条件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar search monolog</div></pre></td></tr></table></figure><br>您也可以通过传递多个参数来进行多条件搜索。</p>\n<p>搜索-参数</p>\n<p>–only-name (-N): 仅针对指定的名称搜索（完全匹配）。</p>\n<p>展示 show</p>\n<p>列出所有可用的软件包，你可以使用 show 命令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar show</div></pre></td></tr></table></figure><br>如果你想看到一个包的详细信息，你可以输入一个包名称。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar show monolog/monolog</div><div class=\"line\"></div><div class=\"line\">name     : monolog/monolog</div><div class=\"line\">versions : master-dev, 1.0.2, 1.0.1, 1.0.0, 1.0.0-RC1</div><div class=\"line\">type     : library</div><div class=\"line\">names    : monolog/monolog</div><div class=\"line\">source   : [git] http://github.com/Seldaek/monolog.git 3d4e60d0cbc4b888fe5ad223d77964428b1978da</div><div class=\"line\">dist     : [zip] http://github.com/Seldaek/monolog/zipball/3d4e60d0cbc4b888fe5ad223d77964428b1978da 3d4e60d0cbc4b888fe5ad223d77964428b1978da</div><div class=\"line\">license  : MIT</div><div class=\"line\"></div><div class=\"line\">autoload</div><div class=\"line\">psr-0</div><div class=\"line\">Monolog : src/</div><div class=\"line\"></div><div class=\"line\">requires</div><div class=\"line\">php &gt;=5.3.0</div></pre></td></tr></table></figure><br>你甚至可以输入一个软件包的版本号，来显示该版本的详细信息。</p>\n<p>php composer.phar show monolog/monolog 1.0.2</p>\n<p>展示-参数</p>\n<p>–installed (-i): 列出已安装的依赖包。<br>–platform (-p): 仅列出平台软件包（PHP 与它的扩展）。<br>–self (-s): 仅列出当前项目信息。</p>\n<p>依赖性检测 depends</p>\n<p>depends 命令可以查出已安装在你项目中的某个包，是否正在被其它的包所依赖，并列出他们。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar depends --link-type=require monolog/monolog</div><div class=\"line\"></div><div class=\"line\">nrk/monolog-fluent</div><div class=\"line\">poc/poc</div><div class=\"line\">propel/propel</div><div class=\"line\">symfony/monolog-bridge</div><div class=\"line\">symfony/symfony</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>依赖性检测-参数</p>\n<p>–link-type: 检测的类型，默认为 require 也可以是 require-dev。</p>\n<p>有效性检测 validate</p>\n<p>在提交 composer.json 文件，和创建 tag 前，你应该始终运行 validate 命令。它将检测你的 composer.json 文件是否是有效的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar validate</div></pre></td></tr></table></figure><br>有效性检测参数</p>\n<p>–no-check-all: Composer 是否进行完整的校验。</p>\n<p>依赖包状态检测 status</p>\n<p>如果你经常修改依赖包里的代码，并且它们是从 source（自定义源）进行安装的，那么 status 命令允许你进行检查，如果你有任何本地的更改它将会给予提示。</p>\n<p>php composer.phar status<br>你可以使用 –verbose 系列参数（-v|vv|vvv）来获取更详细的详细：</p>\n<p>php composer.phar status -v</p>\n<p>You have changes in the following dependencies:<br>vendor/seld/jsonlint:<br>    M README.mdown</p>\n<p>自我更新 self-update</p>\n<p>将 Composer 自身升级到最新版本，只需要运行 self-update 命令。它将替换你的 composer.phar 文件到最新版本。</p>\n<p>php composer.phar self-update<br>如果你想要升级到一个特定的版本，可以这样简单的指定它：</p>\n<p>php composer.phar self-update 1.0.0-alpha7<br>如果你已经为整个系统安装 Composer（参见 全局安装），你可能需要在 root 权限下运行它：</p>\n<p>sudo composer self-update</p>\n<p>自我更新-参数</p>\n<p>–rollback (-r): 回滚到你已经安装的最后一个版本。<br>–clean-backups: 在更新过程中删除旧的备份，这使得更新过后的当前版本是唯一可用的备份。</p>\n<p>更改配置 config</p>\n<p>config 命令允许你编辑 Composer 的一些基本设置，无论是本地的 composer.json 或者全局的 config.json 文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar config --list</div></pre></td></tr></table></figure><br>更改配置-使用方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">config [options] [setting-key] [setting-value1] ... [setting-valueN]</div></pre></td></tr></table></figure></p>\n<p>setting-key 是一个配置选项的名称，setting-value1 是一个配置的值。可以使用数组作为配置的值（像 github-protocols），多个 setting-value 是允许的。</p>\n<p>有效的配置选项，请查看“架构”章节的 config 。</p>\n<p>更改配置-参数</p>\n<p>–global (-g): 操作位于 $COMPOSER_HOME/config.json 的全局配置文件。如果不指定该参数，此命令将影响当前项目的 composer.json 文件，或 –file 参数所指向的文件。<br>–editor (-e): 使用文本编辑器打开 composer.json 文件。默认情况下始终是打开当前项目的文件。当存在 –global 参数时，将会打开全局 composer.json 文件。<br>–unset: 移除由 setting-key 指定名称的配置选项。<br>–list (-l): 显示当前配置选项的列表。当存在 –global 参数时，将会显示全局配置选项的列表。<br>–file=”…” (-f): 在一个指定的文件上操作，而不是 composer.json。注意：不能与 –global 参数一起使用。</p>\n<p>修改包来源</p>\n<p>除了修改配置选项， config 命令还支持通过以下方法修改来源信息：</p>\n<p>php composer.phar config repositories.foo vcs <a href=\"http://github.com/foo/bar\">http://github.com/foo/bar</a></p>\n<p>创建项目 create-project</p>\n<p>你可以使用 Composer 从现有的包中创建一个新的项目。这相当于执行了一个 git clone 或 svn checkout 命令后将这个包的依赖安装到它自己的 vendor 目录。</p>\n<p>此命令有几个常见的用途：</p>\n<p>你可以快速的部署你的应用。<br>你可以检出任何资源包，并开发它的补丁。<br>多人开发项目，可以用它来加快应用的初始化。<br>要创建基于 Composer 的新项目，你可以使用 “create-project” 命令。传递一个包名，它会为你创建项目的目录。你也可以在第三个参数中指定版本号，否则将获取最新的版本。</p>\n<p>如果该目录目前不存在，则会在安装过程中自动创建。</p>\n<p>php composer.phar create-project doctrine/orm path 2.2.*<br>此外，你也可以无需使用这个命令，而是通过现有的 composer.json 文件来启动这个项目。</p>\n<p>默认情况下，这个命令会在 packagist.org 上查找你指定的包。</p>\n<p>创建项目-参数</p>\n<p>–repository-url: 提供一个自定义的储存库来搜索包，这将被用来代替 packagist.org。可以是一个指向 composer 资源库的 HTTP URL，或者是指向某个 packages.json 文件的本地路径。<br>–stability (-s): 资源包的最低稳定版本，默认为 stable。<br>–prefer-source: 当有可用的包时，从 source 安装。<br>–prefer-dist: 当有可用的包时，从 dist 安装。<br>–dev: 安装 require-dev 字段中列出的包。<br>–no-install: 禁止安装包的依赖。<br>–no-plugins: 禁用 plugins。<br>–no-scripts: 禁止在根资源包中定义的脚本执行。<br>–no-progress: 移除进度信息，这可以避免一些不处理换行的终端或脚本出现混乱的显示。<br>–keep-vcs: 创建时跳过缺失的 VCS 。如果你在非交互模式下运行创建命令，这将是非常有用的。</p>\n<p>打印自动加载索引 dump-autoload</p>\n<p>某些情况下你需要更新 autoloader，例如在你的包中加入了一个新的类。你可以使用 dump-autoload 来完成，而不必执行 install 或 update 命令。</p>\n<p>此外，它可以打印一个优化过的，符合 PSR-0/4 规范的类的索引，这也是出于对性能的可考虑。在大型的应用中会有许多类文件，而 autoloader 会占用每个请求的很大一部分时间，使用 classmaps 或许在开发时不太方便，但它在保证性能的前提下，仍然可以获得 PSR-0/4 规范带来的便利。</p>\n<p>打印自动加载索引-参数</p>\n<p>–optimize (-o): 转换 PSR-0/4 autoloading 到 classmap 获得更快的载入速度。这特别适用于生产环境，但可能需要一些时间来运行，因此它目前不是默认设置。<br>–no-dev: 禁用 autoload-dev 规则。</p>\n<p>查看许可协议 licenses</p>\n<p>列出已安装的每个包的名称、版本、许可协议。可以使用 –format=json 参数来获取 JSON 格式的输出。</p>\n<p>执行脚本 run-script</p>\n<p>你可以运行此命令来手动执行 脚本，只需要指定脚本的名称，可选的 –no-dev 参数允许你禁用开发者模式。</p>\n<p>诊断 diagnose</p>\n<p>如果你觉得发现了一个 bug 或是程序行为变得怪异，你可能需要运行 diagnose 命令，来帮助你检测一些常见的问题。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar diagnose</div></pre></td></tr></table></figure></p>\n<p>归档 archive</p>\n<p>此命令用来对指定包的指定版本进行 zip/tar 归档。它也可以用来归档你的整个项目，不包括 excluded/ignored（排除/忽略）的文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php composer.phar archive vendor/package 2.0.21 --format=zip</div></pre></td></tr></table></figure></p>\n<p>归档-参数</p>\n<p>–format (-f): 指定归档格式：tar 或 zip（默认为 tar）。<br>–dir: 指定归档存放的目录（默认为当前目录）。</p>\n<p>获取帮助信息 help</p>\n<p>使用 help 可以获取指定命令的帮助信息。</p>\n<p>php composer.phar help install</p>\n<p>环境变量</p>\n<p>你可以设置一些环境变量来覆盖默认的配置。建议尽可能的在 composer.json 的 config 字段中设置这些值，而不是通过命令行设置环境变量。值得注意的是环境变量中的值，将始终优先于 composer.json 中所指定的值。</p>\n<p>COMPOSER</p>\n<p>环境变量 COMPOSER 可以为 composer.json 文件指定其它的文件名。</p>\n<p>例如：</p>\n<p>COMPOSER=composer-other.json php composer.phar install</p>\n<p>COMPOSER_ROOT_VERSION</p>\n<p>通过设置这个环境变量，你可以指定 root 包的版本，如果程序不能从 VCS 上猜测出版本号，并且未在 composer.json 文件中申明。</p>\n<p>COMPOSER_VENDOR_DIR</p>\n<p>通过设置这个环境变量，你可以指定 composer 将依赖安装在 vendor 以外的其它目录中。</p>\n<p>COMPOSER_BIN_DIR</p>\n<p>通过设置这个环境变量，你可以指定 bin（Vendor Binaries）目录到 vendor/bin 以外的其它目录。</p>\n<p>http_proxy or HTTP_PROXY</p>\n<p>如果你是通过 HTTP 代理来使用 Composer，你可以使用 http_proxy 或 HTTP_PROXY 环境变量。只要简单的将它设置为代理服务器的 URL。许多操作系统已经为你的服务设置了此变量。</p>\n<p>建议使用 http_proxy（小写）或者两者都进行定义。因为某些工具，像 git 或 curl 将使用 http_proxy 小写的版本。另外，你还可以使用 git config –global http.proxy <proxy url> 来单独设置 git 的代理。</p>\n<p>no_proxy</p>\n<p>如果你是使用代理服务器，并且想要对某些域名禁用代理，就可以使用 no_proxy 环境变量。只需要输入一个逗号相隔的域名 排除 列表。</p>\n<p>此环境变量接受域名、IP 以及 CIDR地址块。你可以将它限制到一个端口（例如：:80）。你还可以把它设置为 * 来忽略所有的 HTTP 代理请求。</p>\n<p>HTTP_PROXY_REQUEST_FULLURI</p>\n<p>如果你使用了 HTTP 代理，但它不支持 request_fulluri 标签，那么你应该设置这个环境变量为 false 或 0 ，来防止 composer 从 request_fulluri 读取配置。</p>\n<p>HTTPS_PROXY_REQUEST_FULLURI</p>\n<p>如果你使用了 HTTPS 代理，但它不支持 request_fulluri 标签，那么你应该设置这个环境变量为 false 或 0 ，来防止 composer 从 request_fulluri 读取配置。</p>\n<p>COMPOSER_HOME</p>\n<p>COMPOSER_HOME 环境变量允许你改变 Composer 的主目录。这是一个隐藏的、所有项目共享的全局目录（对本机的所有用户都可用）。</p>\n<p>它在各个系统上的默认值分别为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*nix /home/&lt;user&gt;/.composer。</div><div class=\"line\">OSX /Users/&lt;user&gt;/.composer。</div><div class=\"line\">Windows C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Composer。</div></pre></td></tr></table></figure></p>\n<p>COMPOSER_HOME/config.json</p>\n<p>你可以在 COMPOSER_HOME 目录中放置一个 config.json 文件。在你执行 install 和 update 命令时，Composer 会将它与你项目中的 composer.json 文件进行合并。</p>\n<p>该文件允许你为用户的项目设置 配置信息 和 资源库。</p>\n<p>若 全局 和 项目 存在相同配置项，那么项目中的 composer.json 文件拥有更高的优先级。</p>\n<p>COMPOSER_CACHE_DIR</p>\n<p>COMPOSER_CACHE_DIR 环境变量允许你设置 Composer 的缓存目录，这也可以通过 cache-dir 进行配置。</p>\n<p>它在各个系统上的默认值分别为：</p>\n<p>*nix and OSX $COMPOSER_HOME/cache。<br>Windows C:\\Users\\<user>\\AppData\\Local\\Composer 或 %LOCALAPPDATA%/Composer。</p>\n<p>COMPOSER_PROCESS_TIMEOUT</p>\n<p>这个环境变量控制着 Composer 执行命令的等待时间（例如：git 命令）。默认值为300秒（5分钟）。</p>\n<p>COMPOSER_DISCARD_CHANGES</p>\n<p>这个环境变量控制着 discard-changes config option。</p>\n<p>COMPOSER_NO_INTERACTION</p>\n<p>如果设置为1，这个环境变量将使 Composer 在执行每一个命令时都放弃交互，相当于对所有命令都使用了 –no-interaction。可以在搭建 虚拟机/持续集成服务器 时这样设置。</p>\n<p>参考&amp;转载:<br><a href=\"http://docs.phpcomposer.com\">composer官网</a></p>"},{"title":"docker初探","date":"2016-09-21T02:33:55.000Z","_content":"先安装docker for mac ,可以使用homebrew||到官网下载\n{% codeblock %}\nbrew cask install docker\n{% endcodeblock %}\n\n官网地址：\nhttps://docs.docker.com/docker-for-mac/\n\n命令：\n cayley@cayleydeMacBook-Air  ~  docker -h\nUsage: docker [OPTIONS] COMMAND [arg...]\n       docker [ --help | -v | --version ]\n\nA self-sufficient runtime for containers.\n\nOptions:\n\n  --config=~/.docker              Location of client config files\n  -D, --debug                     Enable debug mode\n  -H, --host=[]                   Daemon socket(s) to connect to\n  -h, --help                      Print usage\n  -l, --log-level=info            Set the logging level\n  --tls                           Use TLS; implied by --tlsverify\n  --tlscacert=~/.docker/ca.pem    Trust certs signed only by this CA\n  --tlscert=~/.docker/cert.pem    Path to TLS certificate file\n  --tlskey=~/.docker/key.pem      Path to TLS key file\n  --tlsverify                     Use TLS and verify the remote\n  -v, --version                   Print version information and quit\n\nCommands:\n    attach    连接到正在运行中的容器\n    \t\t  Usage: docker attach [OPTIONS] CONTAINER\n    \t\t  CONTAINER:容器名\n\n\t\t\t  Options:\n      \t\t\t--detach-keys string   Override the key sequence for detaching a container\n      \t\t\t--no-stdin             Do not attach STDIN\n     \t\t\t--sig-proxy            Proxy all received signals to the process (default true)\n\n     \t\t {% codeblock %}\n     \t\t runoob@runoob:~$ docker attach --sig-proxy=false mynginx\n\t\t\t\t192.168.239.1 - - [10/Jul/2016:16:54:26 +0000] \"GET / HTTP/1.1\" 304 0 \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36\" \"-\"\n\t\t\t{% endcodeblock %}\t\n\n    build     可以使用Dockerfile来构建镜像\n    \t\t  使用:docker build [OPTIONS] PATH | URL | -\n\n\t\t\t  Options:\n      \t\t\t--build-arg value         设置创建时的变量参数 (default [])\n      \t\t\t--cgroup-parent string    Optional parent cgroup for the container\n      \t\t\t--cpu-period int          限制 CPU CFS周期\n      \t\t\t--cpu-quota int           限制 CPU CFS配额\n  \t\t\t\t-c, --cpu-shares int       设置 cpu 使用权重；\n  \t\t\t\t--cpuset-cpus string      指定使用的CPU id\n     \t\t    --cpuset-mems string      指定使用的内存 id\n                --disable-content-trust   忽略校验，默认开启\n  \t\t\t\t-f, --file string         指定要使用的Dockerfile路径\n      \t\t\t--force-rm                设置镜像过程中删除中间容器\n      \t\t\t--isolation string        使用容器隔离技术；\n      \t\t\t--label value             设置镜像使用的元数据 (default [])\n  \t\t\t\t-m, --memory string       设置内存最大值\n      \t\t\t--memory-swap string      设置Swap的最大值为内存+swap，\"-1\"表示不限swap\n      \t\t\t--no-cache                表示在构建过程中不使用缓存\n      \t\t\t--pull                    尝试去更新镜像的新版本\n  \t\t\t\t-q, --quiet               安静模式，成功后只输出镜像ID\n     \t\t\t --rm                     表示构建成功后，移除所有中间容器(default true)\n      \t\t\t--shm-size string         设置/dev/shm的大小，默认值是64M；\n  \t\t\t\t-t, --tag value               Name and optionally a tag in the 'name:tag' format (default [])\n      \t\t\t--ulimit value            Ulimit options (default [])\n      \t\t   例子：\t\n      \t\t\t{% codeblock %}\n      \t\t\t #使用当前目录的Dockerfile创建镜像。\n\t\t\t\t docker build -t runoob/ubuntu:v1 . \n\t\t\t\t #使用URL github.com/creack/docker-firefox 的 Dockerfile 创建镜像。\n\t\t\t\t docker build github.com/creack/docker-firefox\n\t\t\t\t{% endcodeblock %}\n\n    commit    将容器的状态保持为镜像\n    \t\t  Usage:\tdocker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n\t\t\t  Options:\n               -a, --author string    提交的镜像作者\n               -c, --change value     使用Dockerfile指令来创建镜像 (default [])\n               -m, --message string   提交时的说明文字\n               -p, --pause            在commit时，将容器暂停 (default true)\n              例子：\n              {% codeblock %}\n              runoob@runoob:~$ docker commit -a \"runoob.com\" -m \"my apache\" a404c6c174a2  mymysql:v1 \n\t\t\t\tsha256:37af1236adef1544e8886be23010b66577647a40bc02c0885a6600b33ee28057\t\n\t\t\t\trunoob@runoob:~$ docker images mymysql:v1\n\t\t\t\tREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\t\t\t\tmymysql             v1                  37af1236adef        15 seconds ago      329 M\n\t\t\t   {% endcodeblock %}\n    cp        用于容器与主机之间的数据拷贝\n    \t\t  Usage:\tdocker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-\n\t\t\t\t\t\tdocker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH\n\n\t\t\t  Options:\n               -L, --follow-link   保持源目标中的链接\n              例子：\n              {% codeblock %}\n               #将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下。\n               docker cp /www/runoob 96f7f14e99ab:/www/\n               #将主机/www/runoob目录拷贝到容器96f7f14e99ab中，目录重命名为www。\n               docker cp /www/runoob 96f7f14e99ab:/www\n               #将容器96f7f14e99ab的/www目录拷贝到主机的/tmp目录中。\n               docker cp  96f7f14e99ab:/www /tmp/\n              {% endcodeblock %} \n\n    create    创建一个新的容器\n    \t\t  \n    \t\t  语法同 docker run\n\n    diff      检查容器里文件结构的更改\n    \t\t  Usage:\tdocker diff CONTAINER\n\n\t\t\t  例子：\n\t\t\t  {% codeblock %}\n\t\t\t  查看容器mymysql的文件结构更改。\n\t\t\t  runoob@runoob:~$ docker diff mymysql\n\t\t\t  A /logs\n\t\t\t  A /mysql_data\n              C /run\n              C /run/mysqld\n              A /run/mysqld/mysqld.pid\n              A /run/mysqld/mysqld.sock\n              C /tmp\n\t\t\t {% endcodeblock %}\n\n    events    从服务器获取实时事件\n\n\t\t\t  Usage:\tdocker events [OPTIONS]\n\t\t\t  Options:\n               -f, --filter value   根据条件过滤事件 (default [])\n               --since string   从指定的时间戳后显示所有事件\n               --until string   流水时间显示到指定的时间为止\n    exec      在运行的容器中执行命令\n    \t\t  Usage:\tdocker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n\n              -d, --detach         分离模式: 在后台运行\n              --detach-keys        Override the key sequence for detaching a container\n              -i, --interactive    即使没有(attch)附加也保持STDIN 打开\n              --privileged         Give extended privileges to the command\n             -t, --tty            分配一个伪终端\n             -u, --user           Username or UID (format: <name|uid>[:<group|gid>])\n\n             例子：\n             {% codeblock %}\n             #在容器mynginx中以交互模式执行容器内/root/runoob.sh脚本\n             runoob@runoob:~$ docker exec -it mynginx /bin/sh /root/runoob.sh\n\t\t\t http://www.runoob.com/\n\t\t\t #在容器mynginx中开启一个交互模式的终端\n\t\t\t runoob@runoob:~$ docker exec -i -t  mynginx /bin/bash\n\t\t\t root@b1a0703e41e7:/#\n\t\t\t {% endcodeblock %}\n\n\n    export    将文件系统作为一个tar归档文件导出到STDOUT\n    \t\t  Usage:\tdocker export [OPTIONS] CONTAINER\n\t\t\t   Options:\n               -o, --output string   将输入内容写到文件\n              例子：\n                {% codeblock %}\n                \n                #为a404c6c174a2的容器按日期保存为tar文件。\n\t\t\t\trunoob@runoob:~$ docker export -o mysql-`date +%Y%m%d`.tar a404c6c174a2\n\t\t\t\trunoob@runoob:~$ ls mysql-`date +%Y%m%d`.tar\n\t\t\t\tmysql-20160711.tar\n\t\t\t\t\n\t\t\t\t{% endcodeblock %}\n\n\n    history   查看看某个镜像的历史版本\n\t\t\t  Usage:\tdocker history [OPTIONS] IMAGE\n\n\t\t\t  Options:\n                -H, --human     以可读的格式打印镜像大小和日期（default true)\n                --no-trunc      显示完整的提交记录\n                -q, --quiet      仅列出提交记录ID\n\n    images    查看本机的镜像列表\n    \t\t  用法:docker images [OPTIONS] [REPOSITORY[:TAG]]\n\n\t\t\t  Options:\n  \t\t\t\t-a, --all             显示所有镜像(默认隐藏中间件镜像)\n      \t\t\t--digests             显示摘要\n  \t\t\t\t-f, --filter value    基于提供的条件过滤输出 (default []) \n     \t\t\t--format string       Pretty-print images using a Go template\n     \t\t\t--no-trunc            Don't truncate output\n  \t\t\t\t-q, --quiet          仅显示id\n  \t\t\t  例子：\n  \t\t\t  {% codeblock %}\n  \t\t\t   docker images  --digests\n\t\t\t\tREPOSITORY（表示镜像的仓库源）          TAG（镜像的标签）                 DIGEST                                                                    IMAGE ID（镜像ID）            CREATED（镜像创建时间）             SIZE（镜像大小）\n\t\t\t\tbusybox             latest              sha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6   2b8fd9751c4c        12 weeks ago        \n \t\t\t\tdocker images  --no-trunc\n\t\t\t\tREPOSITORY          TAG                 IMAGE ID                                                                  CREATED             SIZE\n\t\t\t\tbusybox             latest              sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749   12 weeks ago        1.093 MB\n\t\t\t\tdocker images\n\t\t\t\tREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\t\t\t\tbusybox             latest              2b8fd9751c4c        12 weeks ago        1.093 MB\n\t\t\t  {% endcodeblock %}\t\n\n    import    从归档文件中创建镜像\n    \t\t  usage:\tdocker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]\n\n\t\t\t  Options:\n               -c, --change value     应用docker 指令创建镜像； (default [])\n               -m, --message string   提交时的说明文字\n               例子：\n               {% codeblock %}\n\n\t\t\t\t#从镜像归档文件my_ubuntu_v3.tar创建镜像，命名为runoob/ubuntu:v4\n\t\t\t\trunoob@runoob:~$ docker import  my_ubuntu_v3.tar runoob/ubuntu:v4  \n\t\t\t\tsha256:63ce4a6d6bc3fabb95dbd6c561404a309b7bdfc4e21c1d59fe9fe4299cbfea39\n\t\t\t\trunoob@runoob:~$ docker images runoob/ubuntu:v4\n\t\t\t\tREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\t\t\t\trunoob/ubuntu       v4                  63ce4a6d6bc3        20 seconds ago      142.1 MB\n\t\t\t   {% endcodeblock %}\n\n    info      显示 system-wide信息 \n\n    inspect   获取容器/镜像/task的元数据\n    \t\t  Usage:\tdocker inspect [OPTIONS] CONTAINER|IMAGE|TASK [CONTAINER|IMAGE|TASK...]\n\n    \t\t  OPTIONS:\n               -f, --format       指定返回值的模板文件\n               -s, --size         显示总的文件大小\n               --type             为指定类型返回JSON(e.g image, container or task)\n\n    kill      杀掉一个运行中的容器\n    \t\t  Usage:\tdocker kill [OPTIONS] CONTAINER [CONTAINER...]\n\t\t\t  Options:\n               -s, --signal string   向容器发送一个信号 (default \"KILL\")\n              例子：\n              {% codeblock %}\n              \t#杀掉运行中的容器mynginx\n\t\t\t\trunoob@runoob:~$ docker kill -s KILL mynginx\n\t\t\t\tmynginx\n              {% endocdeblock %} \n    load      Load an image from a tar archive or STDIN\n\n    login     登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub\n    \t\t  Usage:\tdocker login [OPTIONS] [SERVER]\n\n\t\t\t  Options:\n               -p, --password string   Password\n               -u, --username string   Username\n\n\n    logout    登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub\n\n    logs      获取容器的日志\n    \t\t  Usage:\tdocker logs [OPTIONS] CONTAINER\n\n\t\t\t  Options:\n               --details        Show extra details provided to logs\n               -f, --follow         跟踪日志输出\n               --help           Print usage\n               --since string   显示某个开始时间的所有日志\n               --tail string    仅列出最新N条容器日志 (default \"all\")\n               -t, --timestamps     显示时间戳\n\n    network   Manage Docker networks\n\n    node      Manage Docker Swarm nodes\n\n    pause     暂停容器中所有的进程\n    \t\t Usage: docker pause [OPTIONS] CONTAINER [CONTAINER...]\n\n    port      列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口。\n    \t\t  Usage:\tdocker port CONTAINER [PRIVATE_PORT[/PROTO]]\n    \t\t  {% codeblock %}\n    \t\t  #查看容器mynginx的端口映射情况。\n\t\t       runoob@runoob:~$ docker port mymysql\n               3306/tcp -> 0.0.0.0:3306\n    \t\t  {% endcodeblock %}\n    ps        列出容器\n    \t\t  Usage:\tdocker ps [OPTIONS]\n\n\t\t\t Options:\n             -a, --all             显示所有的容器，包括未运行的 (default shows just running)\n             -f, --filter value    根据条件过滤显示的内容 (default [])\n             --format string       指定返回值的模板文件\n             -n, --last int        列出最近创建的n个容器 (includes all states) (default -1)\n             -l, --latest          显示最近创建的容器 (includes all states)\n             --no-trunc            不截断输出\n             -q, --quiet           静默模式，只显示容器id\n             -s, --size            显示总的文件大小\n\n\n    pull      从仓库获取所需要的镜像\n\t\t\t  用法：docker pull [OPTIONS] NAME[:TAG|@DIGEST]\n\t\t\t  TAG: 默认为latest\n\t\t\t  Options:\n  \t\t\t\t-a, --all-tags                下载所有tag镜像\n      \t\t\t--disable-content-trust   忽略校验，默认开启\n      \t\t   例子：\n      \t\t   {% codeblock %}\n      \t\t   \t#获取一个镜像\t\n      \t\t   \tdocker pull busybox\n      \t\t   \t#也可以从每个私人或者第三方仓库获取\n      \t\t   \tdocker pull private/busybox:latest\n      \t\t   \t#可以指定网络\n      \t\t   \tdocker pull xxx.xxx.com:5000/busybox:latest\n      \t\t   {% endcodeblock %} \n    push      提交镜像到仓库\n    \t\t  用法：docker push [OPTIONS] NAME[:TAG]\n    \t\t  Options:\n      \t\t  --disable-content-trust   忽略校验，默认开启\n              例子：\n              {% codeblock %}\n              #提交到窗口\n              docker push cayley/busybox\n              #提交到某个私服\n\t\t\t  docker push xxx.xxx.com:5000/busbox:2016\n\t\t\t  #根据ip提交到私服\n\t\t\t  docker push 111.2.12.11:5000/busbox:2016\n\t\t\t  {% endcodeblock %}\n\n    rename    重命名一个容器\n    restart   重新启动一个容器\n    \t\t  Usage: docker restart [OPTIONS] CONTAINER [CONTAINER...]\n    rm        移除一个或者多个容器\n    \t\t  Usage:\tdocker rm [OPTIONS] CONTAINER [CONTAINER...]\n\t\t\t  Options:\n              -f, --force     通过SIGKILL信号强制删除一个运行中的容器 (uses SIGKILL)\n              -l, --link      移除容器间的网络连接，而非容器本身\n              -v, --volumes   删除与容器关联的卷\n\n    rmi       移除一个或者多个镜像\n\n    run       运行一个新的容器\n    \t\t  Usage:\tdocker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n\n\t\t\t  Options:\n                --add-host value              Add a custom host-to-IP mapping (host:ip) (default [])\n                -a, --attach value                Attach to STDIN, STDOUT or STDERR (default [])\n                --blkio-weight value          Block IO (relative weight), between 10 and 1000\n                --blkio-weight-device value   Block IO weight (relative device weight) (default [])\n                --cap-add value               Add Linux capabilities (default [])\n                --cap-drop value              Drop Linux capabilities (default [])\n                --cgroup-parent string        Optional parent cgroup for the container\n                --cidfile string              Write the container ID to the file\n                --cpu-percent int             CPU percent (Windows only)\n                --cpu-period int              Limit CPU CFS (Completely Fair Scheduler) period\n     \t\t\t--cpu-quota int               Limit CPU CFS (Completely Fair Scheduler) quota\n \t\t\t    -c, --cpu-shares int              CPU shares (relative weight)\n                --cpuset-cpus string          CPUs in which to allow execution (0-3, 0,1)\n                --cpuset-mems string          MEMs in which to allow execution (0-3, 0,1)\n                -d, --detach                   后台运行容器，并返回容器ID\n                --detach-keys string          Override the key sequence for detaching a container\n                --device value                Add a host device to the container (default [])\n                --device-read-bps value       Limit read rate (bytes per second) from a device (default [])\n                --device-read-iops value      Limit read rate (IO per second) from a device (default [])\n                --device-write-bps value      Limit write rate (bytes per second) to a device (default [])\n                --device-write-iops value     Limit write rate (IO per second) to a device (default [])\n                --disable-content-trust       Skip image verification (default true)\n                --dns value                   指定容器使用的DNS服务器，默认和宿主一致 (default [])\n                --dns-opt value               Set DNS options (default [])\n                --dns-search value            指定容器DNS搜索域名，默认和宿主一致 (default [])\n                --entrypoint string           Overwrite the default ENTRYPOINT of the image\n                -e, --env value               设置环境变量 (default [])\n                --env-file value              从指定文件读入环境变量 (default [])\n                --expose value                开放一个端口或一组端口 (default [])\n                --group-add value             Add additional groups to join (default [])\n                --health-cmd string           Command to run to check health\n                --health-interval duration    Time between running the check (default 0s)\n                --health-retries int          Consecutive failures needed to report unhealthy\n                --health-timeout duration     Maximum time to allow one check to run (default 0s)\n                -h, --hostname string         指定容器的hostname\n                -i, --interactive             以交互模式运行容器，通常与 -t 同时使用\n                --io-maxbandwidth string      Maximum IO bandwidth limit for the system drive (Windows only)\n                --io-maxiops uint             Maximum IOps limit for the system drive (Windows only)\n                --ip string                   Container IPv4 address (e.g. 172.30.100.104)\n                --ip6 string                  Container IPv6 address (e.g. 2001:db8::33)\n     \t\t\t--ipc string                  IPC namespace to use\n    \t\t\t--isolation string            Container isolation technology\n\t\t\t    --kernel-memory string        Kernel memory limit\n\t\t\t\t-l, --label value                 Set meta data on a container (default [])\n\t\t\t    --label-file value            Read in a line delimited file of labels (default [])\n\t\t\t    --link value                  添加链接到另一个容器 (default [])\n \t\t\t    --link-local-ip value         Container IPv4/IPv6 link-local addresses (default [])\n\t\t\t    --log-driver string           Logging driver for the container\n  \t\t\t\t--log-opt value               Log driver options (default [])\n \t\t\t\t--mac-address string          Container MAC address (e.g. 92:d0:c6:0a:29:33)\n \t\t\t\t-m, --memory string            设置容器使用内存最大值\n    \t\t    --memory-reservation string   Memory soft limit\n                --memory-swap string          Swap limit equal to memory plus swap: '-1' to enable unlimited swap\n                --memory-swappiness int       Tune container memory swappiness (0 to 100) (default -1)\n                --name string                 为容器指定一个名称\n                --network string              指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型； (default \"default\")\n                --network-alias value         Add network-scoped alias for the container (default [])\n                --no-healthcheck              Disable any container-specified HEALTHCHECK\n                --oom-kill-disable            Disable OOM Killer\n                --oom-score-adj int           Tune host's OOM preferences (-1000 to 1000)\n                --pid string                  PID namespace to use\n                --pids-limit int              Tune container pids limit (set -1 for unlimited)\n                --privileged                  Give extended privileges to this container\n                -p, --publish value               Publish a container's port(s) to the host (default [])\n                -P, --publish-all                 Publish all exposed ports to random ports\n                --read-only                   Mount the container's root filesystem as read only\n                --restart string              Restart policy to apply when a container exits (default \"no\")\n                --rm                          Automatically remove the container when it exits\n                --runtime string              Runtime to use for this container\n                --security-opt value          Security Options (default [])\n                --shm-size string             Size of /dev/shm, default value is 64MB\n                --sig-proxy                   Proxy received signals to the process (default true)\n                --stop-signal string          Signal to stop a container, SIGTERM by default (default \"SIGTERM\")\n                --storage-opt value           Storage driver options for the container (default [])\n                --sysctl value                Sysctl options (default map[])\n                --tmpfs value                 Mount a tmpfs directory (default [])\n                -t, --tty                     为容器重新分配一个伪输入终端，通常与 -i 同时使用\n                --ulimit value                Ulimit options (default [])\n                -u, --user string                 Username or UID (format: <name|uid>[:<group|gid>])\n                --userns string               User namespace to use\n                --uts string                  UTS namespace to use\n                -v, --volume value                Bind mount a volume (default [])\n                --volume-driver string        Optional volume driver for the container\n                --volumes-from value          Mount volumes from the specified container(s) (default [])\n                -w, --workdir string              Working directory inside the container\n\n                例子：\n                {% codeblock %}\n                 #使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。\n\t\t\t\t docker run --name mynginx -d nginx:latest\n\t\t\t\t#使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。\n\t\t\t\tdocker run -P -d nginx:latest\n                #使用镜像nginx:latest以后台模式启动一个容器,将容器的80端口映射到主机的80端口,主机的目录/data映射到容器的/data。\n\t\t\t    docker run -p 80:80 -v /data:/data -d nginx:latest\n\t\t\t\t#使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。\n\t\t\t\trunoob@runoob:~$ docker run -it nginx:latest /bin/bash\n\t\t\t\troot@b8573233d675:/#\n               {% endcodeblock %}\n               好的参数，要好好研究\n\n    save      将指定镜像保存成 tar 归档文件\n    \t\t  Usage: docker save [OPTIONS] IMAGE [IMAGE...]\n\t\t\t  OPTIONS：\n              -o :输出到的文件。\n              例子：\n              {% codeblock %}\n              runoob@runoob:~$ docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3\n\t\t\t  runoob@runoob:~$ ll my_ubuntu_v3.tar\n               -rw------- 1 runoob runoob 142102016 Jul 11 01:37 my_ubuntu_v3.ta\n\t\t\t  {% endcodeblock %}\n\n    search    从Docker Hub中搜索镜像 \n    service   Manage Docker services\n    start     启动一个或多少已经被停止的容器\n    \t\t  Usage: docker start [OPTIONS] CONTAINER [CONTAINER...]\n    stats     Display a live stream of container(s) resource usage statistics\n\n    stop      停止运行一个或者多个容器\n    \t\t  Usage: docker stop [OPTIONS] CONTAINER [CONTAINER...]\n\n    swarm     Manage Docker Swarm\n    tag       Tag an image into a repository\n    top       Display the running processes of a container\n    unpause   恢复容器中所有的进程。\n    \t\t  Usage: docker unpause [OPTIONS] CONTAINER [CONTAINER...]\n\n    update    Update configuration of one or more containers\n\n    version   Show the Docker version information\n\n    volume    阻塞运行直到容器停止，然后打印出它的退出代码\n    \t\t  Useage: docker wait [OPTIONS] CONTAINER [CONTAINER...]\n\nRun 'docker COMMAND --help' for more information on a command.\n\n\nDockerFile文件：\nDockerfile文件可以使我自动化的创建容器。\nDockerfile包含创建镜像所需要的全部指令。基于在Dockerfile中的指令，我们可以使用Docker build命令来创建镜像。通过减少镜像和容器的创建过程来简化部署。\n\nDockerfile 基本的语法是\n\n1）使用#来注释\n\n2）所有Dockerfile都必须以FROM命令开始。\nFROM 指令告诉 Docker 使用哪个镜像作为基础\nUsage: FROM <image name> \n如：\nFROM centos\n\n3）主体命令\n\nMAINTAINER：设置该镜像的作者。语法如下：\nMAINTAINER <author name>\n如：\nMAINTAINER \"cayley\" <cayley@gmail.com>\n\n\nRUN：在shell或者exec的环境下执行的命令。RUN指令会在新创建的镜像上添加新的层面，接下来提交的结果用在Dockerfile的下一条指令中。语法如下：\nRUN 《command》\n如：\nRUN echo \"aaaa\"\n\nADD：复制文件指令。它有两个参数<source>和<destination>。destination是容器内的路径。source可以是URL或者是启动配置上下文中的一个文件。语法如下：\nADD 《src》 《destination》\n如：\nADD mongodb-enterprise.repo /etc/yum.repos.d/mongodb-enterprise.repo \n\nCMD：提供了容器默认的执行命令。 Dockerfile只允许使用一次CMD指令。 使用多个CMD会抵消之前所有的指令，只有最后一个指令生效。 CMD有三种形式：\nCMD [\"executable\",\"param1\",\"param2\"]\nCMD [\"param1\",\"param2\"]\nCMD command param1 param2\n如：\nCMD [\"/usr/sbin/init\"]\n\nEXPOSE：指定容器在运行时监听的端口。语法如下：\nEXPOSE <port>;\n如：\nEXPOSE 27017 15672\n\nENTRYPOINT：配置给容器一个可执行的命令，这意味着在每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次被调用时仅能运行指定的应用。类似于CMD，Docker只允许一个ENTRYPOINT，多个ENTRYPOINT会抵消之前所有的指令，只执行最后的ENTRYPOINT指令。语法如下：\nENTRYPOINT [\"executable\", \"param1\",\"param2\"]\nENTRYPOINT command param1 param2\n\nWORKDIR：指定RUN、CMD与ENTRYPOINT命令的工作目录。语法如下：\nWORKDIR /path/to/workdir\n\nENV：设置环境变量。它们使用键值对，增加运行程序的灵活性。语法如下：\nENV <key> <value>\n如：\nENV C_FORCE_ROOT true\n\n\nUSER：镜像正在运行时设置一个UID。语法如下：\nUSER <uid>\n\nVOLUME：授权访问从容器内到主机上的目录。语法如下：\nVOLUME [\"/data\"]\n如：\nVOLUME [ \"/sys/fs/cgroup\" ]\n\n\n","source":"_posts/docker初探.md","raw":"---\ntitle: docker初探\ndate: 2016-09-21 10:33:55\ntags:\n---\n先安装docker for mac ,可以使用homebrew||到官网下载\n{% codeblock %}\nbrew cask install docker\n{% endcodeblock %}\n\n官网地址：\nhttps://docs.docker.com/docker-for-mac/\n\n命令：\n cayley@cayleydeMacBook-Air  ~  docker -h\nUsage: docker [OPTIONS] COMMAND [arg...]\n       docker [ --help | -v | --version ]\n\nA self-sufficient runtime for containers.\n\nOptions:\n\n  --config=~/.docker              Location of client config files\n  -D, --debug                     Enable debug mode\n  -H, --host=[]                   Daemon socket(s) to connect to\n  -h, --help                      Print usage\n  -l, --log-level=info            Set the logging level\n  --tls                           Use TLS; implied by --tlsverify\n  --tlscacert=~/.docker/ca.pem    Trust certs signed only by this CA\n  --tlscert=~/.docker/cert.pem    Path to TLS certificate file\n  --tlskey=~/.docker/key.pem      Path to TLS key file\n  --tlsverify                     Use TLS and verify the remote\n  -v, --version                   Print version information and quit\n\nCommands:\n    attach    连接到正在运行中的容器\n    \t\t  Usage: docker attach [OPTIONS] CONTAINER\n    \t\t  CONTAINER:容器名\n\n\t\t\t  Options:\n      \t\t\t--detach-keys string   Override the key sequence for detaching a container\n      \t\t\t--no-stdin             Do not attach STDIN\n     \t\t\t--sig-proxy            Proxy all received signals to the process (default true)\n\n     \t\t {% codeblock %}\n     \t\t runoob@runoob:~$ docker attach --sig-proxy=false mynginx\n\t\t\t\t192.168.239.1 - - [10/Jul/2016:16:54:26 +0000] \"GET / HTTP/1.1\" 304 0 \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36\" \"-\"\n\t\t\t{% endcodeblock %}\t\n\n    build     可以使用Dockerfile来构建镜像\n    \t\t  使用:docker build [OPTIONS] PATH | URL | -\n\n\t\t\t  Options:\n      \t\t\t--build-arg value         设置创建时的变量参数 (default [])\n      \t\t\t--cgroup-parent string    Optional parent cgroup for the container\n      \t\t\t--cpu-period int          限制 CPU CFS周期\n      \t\t\t--cpu-quota int           限制 CPU CFS配额\n  \t\t\t\t-c, --cpu-shares int       设置 cpu 使用权重；\n  \t\t\t\t--cpuset-cpus string      指定使用的CPU id\n     \t\t    --cpuset-mems string      指定使用的内存 id\n                --disable-content-trust   忽略校验，默认开启\n  \t\t\t\t-f, --file string         指定要使用的Dockerfile路径\n      \t\t\t--force-rm                设置镜像过程中删除中间容器\n      \t\t\t--isolation string        使用容器隔离技术；\n      \t\t\t--label value             设置镜像使用的元数据 (default [])\n  \t\t\t\t-m, --memory string       设置内存最大值\n      \t\t\t--memory-swap string      设置Swap的最大值为内存+swap，\"-1\"表示不限swap\n      \t\t\t--no-cache                表示在构建过程中不使用缓存\n      \t\t\t--pull                    尝试去更新镜像的新版本\n  \t\t\t\t-q, --quiet               安静模式，成功后只输出镜像ID\n     \t\t\t --rm                     表示构建成功后，移除所有中间容器(default true)\n      \t\t\t--shm-size string         设置/dev/shm的大小，默认值是64M；\n  \t\t\t\t-t, --tag value               Name and optionally a tag in the 'name:tag' format (default [])\n      \t\t\t--ulimit value            Ulimit options (default [])\n      \t\t   例子：\t\n      \t\t\t{% codeblock %}\n      \t\t\t #使用当前目录的Dockerfile创建镜像。\n\t\t\t\t docker build -t runoob/ubuntu:v1 . \n\t\t\t\t #使用URL github.com/creack/docker-firefox 的 Dockerfile 创建镜像。\n\t\t\t\t docker build github.com/creack/docker-firefox\n\t\t\t\t{% endcodeblock %}\n\n    commit    将容器的状态保持为镜像\n    \t\t  Usage:\tdocker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n\t\t\t  Options:\n               -a, --author string    提交的镜像作者\n               -c, --change value     使用Dockerfile指令来创建镜像 (default [])\n               -m, --message string   提交时的说明文字\n               -p, --pause            在commit时，将容器暂停 (default true)\n              例子：\n              {% codeblock %}\n              runoob@runoob:~$ docker commit -a \"runoob.com\" -m \"my apache\" a404c6c174a2  mymysql:v1 \n\t\t\t\tsha256:37af1236adef1544e8886be23010b66577647a40bc02c0885a6600b33ee28057\t\n\t\t\t\trunoob@runoob:~$ docker images mymysql:v1\n\t\t\t\tREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\t\t\t\tmymysql             v1                  37af1236adef        15 seconds ago      329 M\n\t\t\t   {% endcodeblock %}\n    cp        用于容器与主机之间的数据拷贝\n    \t\t  Usage:\tdocker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-\n\t\t\t\t\t\tdocker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH\n\n\t\t\t  Options:\n               -L, --follow-link   保持源目标中的链接\n              例子：\n              {% codeblock %}\n               #将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下。\n               docker cp /www/runoob 96f7f14e99ab:/www/\n               #将主机/www/runoob目录拷贝到容器96f7f14e99ab中，目录重命名为www。\n               docker cp /www/runoob 96f7f14e99ab:/www\n               #将容器96f7f14e99ab的/www目录拷贝到主机的/tmp目录中。\n               docker cp  96f7f14e99ab:/www /tmp/\n              {% endcodeblock %} \n\n    create    创建一个新的容器\n    \t\t  \n    \t\t  语法同 docker run\n\n    diff      检查容器里文件结构的更改\n    \t\t  Usage:\tdocker diff CONTAINER\n\n\t\t\t  例子：\n\t\t\t  {% codeblock %}\n\t\t\t  查看容器mymysql的文件结构更改。\n\t\t\t  runoob@runoob:~$ docker diff mymysql\n\t\t\t  A /logs\n\t\t\t  A /mysql_data\n              C /run\n              C /run/mysqld\n              A /run/mysqld/mysqld.pid\n              A /run/mysqld/mysqld.sock\n              C /tmp\n\t\t\t {% endcodeblock %}\n\n    events    从服务器获取实时事件\n\n\t\t\t  Usage:\tdocker events [OPTIONS]\n\t\t\t  Options:\n               -f, --filter value   根据条件过滤事件 (default [])\n               --since string   从指定的时间戳后显示所有事件\n               --until string   流水时间显示到指定的时间为止\n    exec      在运行的容器中执行命令\n    \t\t  Usage:\tdocker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n\n              -d, --detach         分离模式: 在后台运行\n              --detach-keys        Override the key sequence for detaching a container\n              -i, --interactive    即使没有(attch)附加也保持STDIN 打开\n              --privileged         Give extended privileges to the command\n             -t, --tty            分配一个伪终端\n             -u, --user           Username or UID (format: <name|uid>[:<group|gid>])\n\n             例子：\n             {% codeblock %}\n             #在容器mynginx中以交互模式执行容器内/root/runoob.sh脚本\n             runoob@runoob:~$ docker exec -it mynginx /bin/sh /root/runoob.sh\n\t\t\t http://www.runoob.com/\n\t\t\t #在容器mynginx中开启一个交互模式的终端\n\t\t\t runoob@runoob:~$ docker exec -i -t  mynginx /bin/bash\n\t\t\t root@b1a0703e41e7:/#\n\t\t\t {% endcodeblock %}\n\n\n    export    将文件系统作为一个tar归档文件导出到STDOUT\n    \t\t  Usage:\tdocker export [OPTIONS] CONTAINER\n\t\t\t   Options:\n               -o, --output string   将输入内容写到文件\n              例子：\n                {% codeblock %}\n                \n                #为a404c6c174a2的容器按日期保存为tar文件。\n\t\t\t\trunoob@runoob:~$ docker export -o mysql-`date +%Y%m%d`.tar a404c6c174a2\n\t\t\t\trunoob@runoob:~$ ls mysql-`date +%Y%m%d`.tar\n\t\t\t\tmysql-20160711.tar\n\t\t\t\t\n\t\t\t\t{% endcodeblock %}\n\n\n    history   查看看某个镜像的历史版本\n\t\t\t  Usage:\tdocker history [OPTIONS] IMAGE\n\n\t\t\t  Options:\n                -H, --human     以可读的格式打印镜像大小和日期（default true)\n                --no-trunc      显示完整的提交记录\n                -q, --quiet      仅列出提交记录ID\n\n    images    查看本机的镜像列表\n    \t\t  用法:docker images [OPTIONS] [REPOSITORY[:TAG]]\n\n\t\t\t  Options:\n  \t\t\t\t-a, --all             显示所有镜像(默认隐藏中间件镜像)\n      \t\t\t--digests             显示摘要\n  \t\t\t\t-f, --filter value    基于提供的条件过滤输出 (default []) \n     \t\t\t--format string       Pretty-print images using a Go template\n     \t\t\t--no-trunc            Don't truncate output\n  \t\t\t\t-q, --quiet          仅显示id\n  \t\t\t  例子：\n  \t\t\t  {% codeblock %}\n  \t\t\t   docker images  --digests\n\t\t\t\tREPOSITORY（表示镜像的仓库源）          TAG（镜像的标签）                 DIGEST                                                                    IMAGE ID（镜像ID）            CREATED（镜像创建时间）             SIZE（镜像大小）\n\t\t\t\tbusybox             latest              sha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6   2b8fd9751c4c        12 weeks ago        \n \t\t\t\tdocker images  --no-trunc\n\t\t\t\tREPOSITORY          TAG                 IMAGE ID                                                                  CREATED             SIZE\n\t\t\t\tbusybox             latest              sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749   12 weeks ago        1.093 MB\n\t\t\t\tdocker images\n\t\t\t\tREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\t\t\t\tbusybox             latest              2b8fd9751c4c        12 weeks ago        1.093 MB\n\t\t\t  {% endcodeblock %}\t\n\n    import    从归档文件中创建镜像\n    \t\t  usage:\tdocker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]\n\n\t\t\t  Options:\n               -c, --change value     应用docker 指令创建镜像； (default [])\n               -m, --message string   提交时的说明文字\n               例子：\n               {% codeblock %}\n\n\t\t\t\t#从镜像归档文件my_ubuntu_v3.tar创建镜像，命名为runoob/ubuntu:v4\n\t\t\t\trunoob@runoob:~$ docker import  my_ubuntu_v3.tar runoob/ubuntu:v4  \n\t\t\t\tsha256:63ce4a6d6bc3fabb95dbd6c561404a309b7bdfc4e21c1d59fe9fe4299cbfea39\n\t\t\t\trunoob@runoob:~$ docker images runoob/ubuntu:v4\n\t\t\t\tREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\t\t\t\trunoob/ubuntu       v4                  63ce4a6d6bc3        20 seconds ago      142.1 MB\n\t\t\t   {% endcodeblock %}\n\n    info      显示 system-wide信息 \n\n    inspect   获取容器/镜像/task的元数据\n    \t\t  Usage:\tdocker inspect [OPTIONS] CONTAINER|IMAGE|TASK [CONTAINER|IMAGE|TASK...]\n\n    \t\t  OPTIONS:\n               -f, --format       指定返回值的模板文件\n               -s, --size         显示总的文件大小\n               --type             为指定类型返回JSON(e.g image, container or task)\n\n    kill      杀掉一个运行中的容器\n    \t\t  Usage:\tdocker kill [OPTIONS] CONTAINER [CONTAINER...]\n\t\t\t  Options:\n               -s, --signal string   向容器发送一个信号 (default \"KILL\")\n              例子：\n              {% codeblock %}\n              \t#杀掉运行中的容器mynginx\n\t\t\t\trunoob@runoob:~$ docker kill -s KILL mynginx\n\t\t\t\tmynginx\n              {% endocdeblock %} \n    load      Load an image from a tar archive or STDIN\n\n    login     登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub\n    \t\t  Usage:\tdocker login [OPTIONS] [SERVER]\n\n\t\t\t  Options:\n               -p, --password string   Password\n               -u, --username string   Username\n\n\n    logout    登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub\n\n    logs      获取容器的日志\n    \t\t  Usage:\tdocker logs [OPTIONS] CONTAINER\n\n\t\t\t  Options:\n               --details        Show extra details provided to logs\n               -f, --follow         跟踪日志输出\n               --help           Print usage\n               --since string   显示某个开始时间的所有日志\n               --tail string    仅列出最新N条容器日志 (default \"all\")\n               -t, --timestamps     显示时间戳\n\n    network   Manage Docker networks\n\n    node      Manage Docker Swarm nodes\n\n    pause     暂停容器中所有的进程\n    \t\t Usage: docker pause [OPTIONS] CONTAINER [CONTAINER...]\n\n    port      列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口。\n    \t\t  Usage:\tdocker port CONTAINER [PRIVATE_PORT[/PROTO]]\n    \t\t  {% codeblock %}\n    \t\t  #查看容器mynginx的端口映射情况。\n\t\t       runoob@runoob:~$ docker port mymysql\n               3306/tcp -> 0.0.0.0:3306\n    \t\t  {% endcodeblock %}\n    ps        列出容器\n    \t\t  Usage:\tdocker ps [OPTIONS]\n\n\t\t\t Options:\n             -a, --all             显示所有的容器，包括未运行的 (default shows just running)\n             -f, --filter value    根据条件过滤显示的内容 (default [])\n             --format string       指定返回值的模板文件\n             -n, --last int        列出最近创建的n个容器 (includes all states) (default -1)\n             -l, --latest          显示最近创建的容器 (includes all states)\n             --no-trunc            不截断输出\n             -q, --quiet           静默模式，只显示容器id\n             -s, --size            显示总的文件大小\n\n\n    pull      从仓库获取所需要的镜像\n\t\t\t  用法：docker pull [OPTIONS] NAME[:TAG|@DIGEST]\n\t\t\t  TAG: 默认为latest\n\t\t\t  Options:\n  \t\t\t\t-a, --all-tags                下载所有tag镜像\n      \t\t\t--disable-content-trust   忽略校验，默认开启\n      \t\t   例子：\n      \t\t   {% codeblock %}\n      \t\t   \t#获取一个镜像\t\n      \t\t   \tdocker pull busybox\n      \t\t   \t#也可以从每个私人或者第三方仓库获取\n      \t\t   \tdocker pull private/busybox:latest\n      \t\t   \t#可以指定网络\n      \t\t   \tdocker pull xxx.xxx.com:5000/busybox:latest\n      \t\t   {% endcodeblock %} \n    push      提交镜像到仓库\n    \t\t  用法：docker push [OPTIONS] NAME[:TAG]\n    \t\t  Options:\n      \t\t  --disable-content-trust   忽略校验，默认开启\n              例子：\n              {% codeblock %}\n              #提交到窗口\n              docker push cayley/busybox\n              #提交到某个私服\n\t\t\t  docker push xxx.xxx.com:5000/busbox:2016\n\t\t\t  #根据ip提交到私服\n\t\t\t  docker push 111.2.12.11:5000/busbox:2016\n\t\t\t  {% endcodeblock %}\n\n    rename    重命名一个容器\n    restart   重新启动一个容器\n    \t\t  Usage: docker restart [OPTIONS] CONTAINER [CONTAINER...]\n    rm        移除一个或者多个容器\n    \t\t  Usage:\tdocker rm [OPTIONS] CONTAINER [CONTAINER...]\n\t\t\t  Options:\n              -f, --force     通过SIGKILL信号强制删除一个运行中的容器 (uses SIGKILL)\n              -l, --link      移除容器间的网络连接，而非容器本身\n              -v, --volumes   删除与容器关联的卷\n\n    rmi       移除一个或者多个镜像\n\n    run       运行一个新的容器\n    \t\t  Usage:\tdocker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n\n\t\t\t  Options:\n                --add-host value              Add a custom host-to-IP mapping (host:ip) (default [])\n                -a, --attach value                Attach to STDIN, STDOUT or STDERR (default [])\n                --blkio-weight value          Block IO (relative weight), between 10 and 1000\n                --blkio-weight-device value   Block IO weight (relative device weight) (default [])\n                --cap-add value               Add Linux capabilities (default [])\n                --cap-drop value              Drop Linux capabilities (default [])\n                --cgroup-parent string        Optional parent cgroup for the container\n                --cidfile string              Write the container ID to the file\n                --cpu-percent int             CPU percent (Windows only)\n                --cpu-period int              Limit CPU CFS (Completely Fair Scheduler) period\n     \t\t\t--cpu-quota int               Limit CPU CFS (Completely Fair Scheduler) quota\n \t\t\t    -c, --cpu-shares int              CPU shares (relative weight)\n                --cpuset-cpus string          CPUs in which to allow execution (0-3, 0,1)\n                --cpuset-mems string          MEMs in which to allow execution (0-3, 0,1)\n                -d, --detach                   后台运行容器，并返回容器ID\n                --detach-keys string          Override the key sequence for detaching a container\n                --device value                Add a host device to the container (default [])\n                --device-read-bps value       Limit read rate (bytes per second) from a device (default [])\n                --device-read-iops value      Limit read rate (IO per second) from a device (default [])\n                --device-write-bps value      Limit write rate (bytes per second) to a device (default [])\n                --device-write-iops value     Limit write rate (IO per second) to a device (default [])\n                --disable-content-trust       Skip image verification (default true)\n                --dns value                   指定容器使用的DNS服务器，默认和宿主一致 (default [])\n                --dns-opt value               Set DNS options (default [])\n                --dns-search value            指定容器DNS搜索域名，默认和宿主一致 (default [])\n                --entrypoint string           Overwrite the default ENTRYPOINT of the image\n                -e, --env value               设置环境变量 (default [])\n                --env-file value              从指定文件读入环境变量 (default [])\n                --expose value                开放一个端口或一组端口 (default [])\n                --group-add value             Add additional groups to join (default [])\n                --health-cmd string           Command to run to check health\n                --health-interval duration    Time between running the check (default 0s)\n                --health-retries int          Consecutive failures needed to report unhealthy\n                --health-timeout duration     Maximum time to allow one check to run (default 0s)\n                -h, --hostname string         指定容器的hostname\n                -i, --interactive             以交互模式运行容器，通常与 -t 同时使用\n                --io-maxbandwidth string      Maximum IO bandwidth limit for the system drive (Windows only)\n                --io-maxiops uint             Maximum IOps limit for the system drive (Windows only)\n                --ip string                   Container IPv4 address (e.g. 172.30.100.104)\n                --ip6 string                  Container IPv6 address (e.g. 2001:db8::33)\n     \t\t\t--ipc string                  IPC namespace to use\n    \t\t\t--isolation string            Container isolation technology\n\t\t\t    --kernel-memory string        Kernel memory limit\n\t\t\t\t-l, --label value                 Set meta data on a container (default [])\n\t\t\t    --label-file value            Read in a line delimited file of labels (default [])\n\t\t\t    --link value                  添加链接到另一个容器 (default [])\n \t\t\t    --link-local-ip value         Container IPv4/IPv6 link-local addresses (default [])\n\t\t\t    --log-driver string           Logging driver for the container\n  \t\t\t\t--log-opt value               Log driver options (default [])\n \t\t\t\t--mac-address string          Container MAC address (e.g. 92:d0:c6:0a:29:33)\n \t\t\t\t-m, --memory string            设置容器使用内存最大值\n    \t\t    --memory-reservation string   Memory soft limit\n                --memory-swap string          Swap limit equal to memory plus swap: '-1' to enable unlimited swap\n                --memory-swappiness int       Tune container memory swappiness (0 to 100) (default -1)\n                --name string                 为容器指定一个名称\n                --network string              指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型； (default \"default\")\n                --network-alias value         Add network-scoped alias for the container (default [])\n                --no-healthcheck              Disable any container-specified HEALTHCHECK\n                --oom-kill-disable            Disable OOM Killer\n                --oom-score-adj int           Tune host's OOM preferences (-1000 to 1000)\n                --pid string                  PID namespace to use\n                --pids-limit int              Tune container pids limit (set -1 for unlimited)\n                --privileged                  Give extended privileges to this container\n                -p, --publish value               Publish a container's port(s) to the host (default [])\n                -P, --publish-all                 Publish all exposed ports to random ports\n                --read-only                   Mount the container's root filesystem as read only\n                --restart string              Restart policy to apply when a container exits (default \"no\")\n                --rm                          Automatically remove the container when it exits\n                --runtime string              Runtime to use for this container\n                --security-opt value          Security Options (default [])\n                --shm-size string             Size of /dev/shm, default value is 64MB\n                --sig-proxy                   Proxy received signals to the process (default true)\n                --stop-signal string          Signal to stop a container, SIGTERM by default (default \"SIGTERM\")\n                --storage-opt value           Storage driver options for the container (default [])\n                --sysctl value                Sysctl options (default map[])\n                --tmpfs value                 Mount a tmpfs directory (default [])\n                -t, --tty                     为容器重新分配一个伪输入终端，通常与 -i 同时使用\n                --ulimit value                Ulimit options (default [])\n                -u, --user string                 Username or UID (format: <name|uid>[:<group|gid>])\n                --userns string               User namespace to use\n                --uts string                  UTS namespace to use\n                -v, --volume value                Bind mount a volume (default [])\n                --volume-driver string        Optional volume driver for the container\n                --volumes-from value          Mount volumes from the specified container(s) (default [])\n                -w, --workdir string              Working directory inside the container\n\n                例子：\n                {% codeblock %}\n                 #使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。\n\t\t\t\t docker run --name mynginx -d nginx:latest\n\t\t\t\t#使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。\n\t\t\t\tdocker run -P -d nginx:latest\n                #使用镜像nginx:latest以后台模式启动一个容器,将容器的80端口映射到主机的80端口,主机的目录/data映射到容器的/data。\n\t\t\t    docker run -p 80:80 -v /data:/data -d nginx:latest\n\t\t\t\t#使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。\n\t\t\t\trunoob@runoob:~$ docker run -it nginx:latest /bin/bash\n\t\t\t\troot@b8573233d675:/#\n               {% endcodeblock %}\n               好的参数，要好好研究\n\n    save      将指定镜像保存成 tar 归档文件\n    \t\t  Usage: docker save [OPTIONS] IMAGE [IMAGE...]\n\t\t\t  OPTIONS：\n              -o :输出到的文件。\n              例子：\n              {% codeblock %}\n              runoob@runoob:~$ docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3\n\t\t\t  runoob@runoob:~$ ll my_ubuntu_v3.tar\n               -rw------- 1 runoob runoob 142102016 Jul 11 01:37 my_ubuntu_v3.ta\n\t\t\t  {% endcodeblock %}\n\n    search    从Docker Hub中搜索镜像 \n    service   Manage Docker services\n    start     启动一个或多少已经被停止的容器\n    \t\t  Usage: docker start [OPTIONS] CONTAINER [CONTAINER...]\n    stats     Display a live stream of container(s) resource usage statistics\n\n    stop      停止运行一个或者多个容器\n    \t\t  Usage: docker stop [OPTIONS] CONTAINER [CONTAINER...]\n\n    swarm     Manage Docker Swarm\n    tag       Tag an image into a repository\n    top       Display the running processes of a container\n    unpause   恢复容器中所有的进程。\n    \t\t  Usage: docker unpause [OPTIONS] CONTAINER [CONTAINER...]\n\n    update    Update configuration of one or more containers\n\n    version   Show the Docker version information\n\n    volume    阻塞运行直到容器停止，然后打印出它的退出代码\n    \t\t  Useage: docker wait [OPTIONS] CONTAINER [CONTAINER...]\n\nRun 'docker COMMAND --help' for more information on a command.\n\n\nDockerFile文件：\nDockerfile文件可以使我自动化的创建容器。\nDockerfile包含创建镜像所需要的全部指令。基于在Dockerfile中的指令，我们可以使用Docker build命令来创建镜像。通过减少镜像和容器的创建过程来简化部署。\n\nDockerfile 基本的语法是\n\n1）使用#来注释\n\n2）所有Dockerfile都必须以FROM命令开始。\nFROM 指令告诉 Docker 使用哪个镜像作为基础\nUsage: FROM <image name> \n如：\nFROM centos\n\n3）主体命令\n\nMAINTAINER：设置该镜像的作者。语法如下：\nMAINTAINER <author name>\n如：\nMAINTAINER \"cayley\" <cayley@gmail.com>\n\n\nRUN：在shell或者exec的环境下执行的命令。RUN指令会在新创建的镜像上添加新的层面，接下来提交的结果用在Dockerfile的下一条指令中。语法如下：\nRUN 《command》\n如：\nRUN echo \"aaaa\"\n\nADD：复制文件指令。它有两个参数<source>和<destination>。destination是容器内的路径。source可以是URL或者是启动配置上下文中的一个文件。语法如下：\nADD 《src》 《destination》\n如：\nADD mongodb-enterprise.repo /etc/yum.repos.d/mongodb-enterprise.repo \n\nCMD：提供了容器默认的执行命令。 Dockerfile只允许使用一次CMD指令。 使用多个CMD会抵消之前所有的指令，只有最后一个指令生效。 CMD有三种形式：\nCMD [\"executable\",\"param1\",\"param2\"]\nCMD [\"param1\",\"param2\"]\nCMD command param1 param2\n如：\nCMD [\"/usr/sbin/init\"]\n\nEXPOSE：指定容器在运行时监听的端口。语法如下：\nEXPOSE <port>;\n如：\nEXPOSE 27017 15672\n\nENTRYPOINT：配置给容器一个可执行的命令，这意味着在每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次被调用时仅能运行指定的应用。类似于CMD，Docker只允许一个ENTRYPOINT，多个ENTRYPOINT会抵消之前所有的指令，只执行最后的ENTRYPOINT指令。语法如下：\nENTRYPOINT [\"executable\", \"param1\",\"param2\"]\nENTRYPOINT command param1 param2\n\nWORKDIR：指定RUN、CMD与ENTRYPOINT命令的工作目录。语法如下：\nWORKDIR /path/to/workdir\n\nENV：设置环境变量。它们使用键值对，增加运行程序的灵活性。语法如下：\nENV <key> <value>\n如：\nENV C_FORCE_ROOT true\n\n\nUSER：镜像正在运行时设置一个UID。语法如下：\nUSER <uid>\n\nVOLUME：授权访问从容器内到主机上的目录。语法如下：\nVOLUME [\"/data\"]\n如：\nVOLUME [ \"/sys/fs/cgroup\" ]\n\n\n","slug":"docker初探","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeielo0008znz4h627b758","content":"<p>先安装docker for mac ,可以使用homebrew||到官网下载<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install docker</div></pre></td></tr></table></figure></p>\n<p>官网地址：<br><a href=\"https://docs.docker.com/docker-for-mac/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/docker-for-mac/</a></p>\n<p>命令：<br> cayley@cayleydeMacBook-Air  ~  docker -h<br>Usage: docker [OPTIONS] COMMAND [arg…]<br>       docker [ –help | -v | –version ]</p>\n<p>A self-sufficient runtime for containers.</p>\n<p>Options:</p>\n<p>  –config=~/.docker              Location of client config files<br>  -D, –debug                     Enable debug mode<br>  -H, –host=[]                   Daemon socket(s) to connect to<br>  -h, –help                      Print usage<br>  -l, –log-level=info            Set the logging level<br>  –tls                           Use TLS; implied by –tlsverify<br>  –tlscacert=~/.docker/ca.pem    Trust certs signed only by this CA<br>  –tlscert=~/.docker/cert.pem    Path to TLS certificate file<br>  –tlskey=~/.docker/key.pem      Path to TLS key file<br>  –tlsverify                     Use TLS and verify the remote<br>  -v, –version                   Print version information and quit</p>\n<p>Commands:<br>    attach    连接到正在运行中的容器<br>              Usage: docker attach [OPTIONS] CONTAINER<br>              CONTAINER:容器名</p>\n<pre><code>          Options:\n              --detach-keys string   Override the key sequence for detaching a container\n              --no-stdin             Do not attach STDIN\n             --sig-proxy            Proxy all received signals to the process (default true)\n\n          {% codeblock %}\n     \t\t runoob@runoob:~$ docker attach --sig-proxy=false mynginx\n\t\t\t\t192.168.239.1 - - [10/Jul/2016:16:54:26 +0000] \"GET / HTTP/1.1\" 304 0 \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36\" \"-\"\n\t\t\t{% endcodeblock %}    \n\nbuild     可以使用Dockerfile来构建镜像\n          使用:docker build [OPTIONS] PATH | URL | -\n\n          Options:\n              --build-arg value         设置创建时的变量参数 (default [])\n              --cgroup-parent string    Optional parent cgroup for the container\n              --cpu-period int          限制 CPU CFS周期\n              --cpu-quota int           限制 CPU CFS配额\n              -c, --cpu-shares int       设置 cpu 使用权重；\n              --cpuset-cpus string      指定使用的CPU id\n             --cpuset-mems string      指定使用的内存 id\n            --disable-content-trust   忽略校验，默认开启\n              -f, --file string         指定要使用的Dockerfile路径\n              --force-rm                设置镜像过程中删除中间容器\n              --isolation string        使用容器隔离技术；\n              --label value             设置镜像使用的元数据 (default [])\n              -m, --memory string       设置内存最大值\n              --memory-swap string      设置Swap的最大值为内存+swap，&quot;-1&quot;表示不限swap\n              --no-cache                表示在构建过程中不使用缓存\n              --pull                    尝试去更新镜像的新版本\n              -q, --quiet               安静模式，成功后只输出镜像ID\n              --rm                     表示构建成功后，移除所有中间容器(default true)\n              --shm-size string         设置/dev/shm的大小，默认值是64M；\n              -t, --tag value               Name and optionally a tag in the &apos;name:tag&apos; format (default [])\n              --ulimit value            Ulimit options (default [])\n             例子：    \n              {% codeblock %}\n      \t\t\t #使用当前目录的Dockerfile创建镜像。\n\t\t\t\t docker build -t runoob/ubuntu:v1 . \n\t\t\t\t #使用URL github.com/creack/docker-firefox 的 Dockerfile 创建镜像。\n\t\t\t\t docker build github.com/creack/docker-firefox\n\t\t\t\t{% endcodeblock %}\n\ncommit    将容器的状态保持为镜像\n          Usage:    docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n          Options:\n           -a, --author string    提交的镜像作者\n           -c, --change value     使用Dockerfile指令来创建镜像 (default [])\n           -m, --message string   提交时的说明文字\n           -p, --pause            在commit时，将容器暂停 (default true)\n          例子：\n          {% codeblock %}\n              runoob@runoob:~$ docker commit -a \"runoob.com\" -m \"my apache\" a404c6c174a2  mymysql:v1 \n\t\t\t\tsha256:37af1236adef1544e8886be23010b66577647a40bc02c0885a6600b33ee28057\t\n\t\t\t\trunoob@runoob:~$ docker images mymysql:v1\n\t\t\t\tREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\t\t\t\tmymysql             v1                  37af1236adef        15 seconds ago      329 M\n\t\t\t   {% endcodeblock %}\ncp        用于容器与主机之间的数据拷贝\n          Usage:    docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-\n                    docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH\n\n          Options:\n           -L, --follow-link   保持源目标中的链接\n          例子：\n          {% codeblock %}\n               #将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下。\n               docker cp /www/runoob 96f7f14e99ab:/www/\n               #将主机/www/runoob目录拷贝到容器96f7f14e99ab中，目录重命名为www。\n               docker cp /www/runoob 96f7f14e99ab:/www\n               #将容器96f7f14e99ab的/www目录拷贝到主机的/tmp目录中。\n               docker cp  96f7f14e99ab:/www /tmp/\n              {% endcodeblock %} \n\ncreate    创建一个新的容器\n\n          语法同 docker run\n\ndiff      检查容器里文件结构的更改\n          Usage:    docker diff CONTAINER\n\n          例子：\n          {% codeblock %}\n\t\t\t  查看容器mymysql的文件结构更改。\n\t\t\t  runoob@runoob:~$ docker diff mymysql\n\t\t\t  A /logs\n\t\t\t  A /mysql_data\n              C /run\n              C /run/mysqld\n              A /run/mysqld/mysqld.pid\n              A /run/mysqld/mysqld.sock\n              C /tmp\n\t\t\t {% endcodeblock %}\n\nevents    从服务器获取实时事件\n\n          Usage:    docker events [OPTIONS]\n          Options:\n           -f, --filter value   根据条件过滤事件 (default [])\n           --since string   从指定的时间戳后显示所有事件\n           --until string   流水时间显示到指定的时间为止\nexec      在运行的容器中执行命令\n          Usage:    docker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n\n          -d, --detach         分离模式: 在后台运行\n          --detach-keys        Override the key sequence for detaching a container\n          -i, --interactive    即使没有(attch)附加也保持STDIN 打开\n          --privileged         Give extended privileges to the command\n         -t, --tty            分配一个伪终端\n         -u, --user           Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])\n\n         例子：\n         {% codeblock %}\n             #在容器mynginx中以交互模式执行容器内/root/runoob.sh脚本\n             runoob@runoob:~$ docker exec -it mynginx /bin/sh /root/runoob.sh\n\t\t\t http://www.runoob.com/\n\t\t\t #在容器mynginx中开启一个交互模式的终端\n\t\t\t runoob@runoob:~$ docker exec -i -t  mynginx /bin/bash\n\t\t\t root@b1a0703e41e7:/#\n\t\t\t {% endcodeblock %}\n\n\nexport    将文件系统作为一个tar归档文件导出到STDOUT\n          Usage:    docker export [OPTIONS] CONTAINER\n           Options:\n           -o, --output string   将输入内容写到文件\n          例子：\n            {% codeblock %}\n                \n                #为a404c6c174a2的容器按日期保存为tar文件。\n\t\t\t\trunoob@runoob:~$ docker export -o mysql-`date +%Y%m%d`.tar a404c6c174a2\n\t\t\t\trunoob@runoob:~$ ls mysql-`date +%Y%m%d`.tar\n\t\t\t\tmysql-20160711.tar\n\t\t\t\t\n\t\t\t\t{% endcodeblock %}\n\n\nhistory   查看看某个镜像的历史版本\n          Usage:    docker history [OPTIONS] IMAGE\n\n          Options:\n            -H, --human     以可读的格式打印镜像大小和日期（default true)\n            --no-trunc      显示完整的提交记录\n            -q, --quiet      仅列出提交记录ID\n\nimages    查看本机的镜像列表\n          用法:docker images [OPTIONS] [REPOSITORY[:TAG]]\n\n          Options:\n              -a, --all             显示所有镜像(默认隐藏中间件镜像)\n              --digests             显示摘要\n              -f, --filter value    基于提供的条件过滤输出 (default []) \n             --format string       Pretty-print images using a Go template\n             --no-trunc            Don&apos;t truncate output\n              -q, --quiet          仅显示id\n            例子：\n            {% codeblock %}\n  \t\t\t   docker images  --digests\n\t\t\t\tREPOSITORY（表示镜像的仓库源）          TAG（镜像的标签）                 DIGEST                                                                    IMAGE ID（镜像ID）            CREATED（镜像创建时间）             SIZE（镜像大小）\n\t\t\t\tbusybox             latest              sha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6   2b8fd9751c4c        12 weeks ago        \n \t\t\t\tdocker images  --no-trunc\n\t\t\t\tREPOSITORY          TAG                 IMAGE ID                                                                  CREATED             SIZE\n\t\t\t\tbusybox             latest              sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749   12 weeks ago        1.093 MB\n\t\t\t\tdocker images\n\t\t\t\tREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\t\t\t\tbusybox             latest              2b8fd9751c4c        12 weeks ago        1.093 MB\n\t\t\t  {% endcodeblock %}    \n\nimport    从归档文件中创建镜像\n          usage:    docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]\n\n          Options:\n           -c, --change value     应用docker 指令创建镜像； (default [])\n           -m, --message string   提交时的说明文字\n           例子：\n           {% codeblock %}\n\n\t\t\t\t#从镜像归档文件my_ubuntu_v3.tar创建镜像，命名为runoob/ubuntu:v4\n\t\t\t\trunoob@runoob:~$ docker import  my_ubuntu_v3.tar runoob/ubuntu:v4  \n\t\t\t\tsha256:63ce4a6d6bc3fabb95dbd6c561404a309b7bdfc4e21c1d59fe9fe4299cbfea39\n\t\t\t\trunoob@runoob:~$ docker images runoob/ubuntu:v4\n\t\t\t\tREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\t\t\t\trunoob/ubuntu       v4                  63ce4a6d6bc3        20 seconds ago      142.1 MB\n\t\t\t   {% endcodeblock %}\n\ninfo      显示 system-wide信息 \n\ninspect   获取容器/镜像/task的元数据\n          Usage:    docker inspect [OPTIONS] CONTAINER|IMAGE|TASK [CONTAINER|IMAGE|TASK...]\n\n          OPTIONS:\n           -f, --format       指定返回值的模板文件\n           -s, --size         显示总的文件大小\n           --type             为指定类型返回JSON(e.g image, container or task)\n\nkill      杀掉一个运行中的容器\n          Usage:    docker kill [OPTIONS] CONTAINER [CONTAINER...]\n          Options:\n           -s, --signal string   向容器发送一个信号 (default &quot;KILL&quot;)\n          例子：\n          {% codeblock %}\n              \t#杀掉运行中的容器mynginx\n\t\t\t\trunoob@runoob:~$ docker kill -s KILL mynginx\n\t\t\t\tmynginx\n              {% endocdeblock %} \n    load      Load an image from a tar archive or STDIN\n\n    login     登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub\n    \t\t  Usage:\tdocker login [OPTIONS] [SERVER]\n\n\t\t\t  Options:\n               -p, --password string   Password\n               -u, --username string   Username\n\n\n    logout    登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub\n\n    logs      获取容器的日志\n    \t\t  Usage:\tdocker logs [OPTIONS] CONTAINER\n\n\t\t\t  Options:\n               --details        Show extra details provided to logs\n               -f, --follow         跟踪日志输出\n               --help           Print usage\n               --since string   显示某个开始时间的所有日志\n               --tail string    仅列出最新N条容器日志 (default \"all\")\n               -t, --timestamps     显示时间戳\n\n    network   Manage Docker networks\n\n    node      Manage Docker Swarm nodes\n\n    pause     暂停容器中所有的进程\n    \t\t Usage: docker pause [OPTIONS] CONTAINER [CONTAINER...]\n\n    port      列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口。\n    \t\t  Usage:\tdocker port CONTAINER [PRIVATE_PORT[/PROTO]]\n    \t\t  {% codeblock %}\n    \t\t  #查看容器mynginx的端口映射情况。\n\t\t       runoob@runoob:~$ docker port mymysql\n               3306/tcp -> 0.0.0.0:3306\n    \t\t  {% endcodeblock %}\nps        列出容器\n          Usage:    docker ps [OPTIONS]\n\n         Options:\n         -a, --all             显示所有的容器，包括未运行的 (default shows just running)\n         -f, --filter value    根据条件过滤显示的内容 (default [])\n         --format string       指定返回值的模板文件\n         -n, --last int        列出最近创建的n个容器 (includes all states) (default -1)\n         -l, --latest          显示最近创建的容器 (includes all states)\n         --no-trunc            不截断输出\n         -q, --quiet           静默模式，只显示容器id\n         -s, --size            显示总的文件大小\n\n\npull      从仓库获取所需要的镜像\n          用法：docker pull [OPTIONS] NAME[:TAG|@DIGEST]\n          TAG: 默认为latest\n          Options:\n              -a, --all-tags                下载所有tag镜像\n              --disable-content-trust   忽略校验，默认开启\n             例子：\n             {% codeblock %}\n      \t\t   \t#获取一个镜像\t\n      \t\t   \tdocker pull busybox\n      \t\t   \t#也可以从每个私人或者第三方仓库获取\n      \t\t   \tdocker pull private/busybox:latest\n      \t\t   \t#可以指定网络\n      \t\t   \tdocker pull xxx.xxx.com:5000/busybox:latest\n      \t\t   {% endcodeblock %} \npush      提交镜像到仓库\n          用法：docker push [OPTIONS] NAME[:TAG]\n          Options:\n            --disable-content-trust   忽略校验，默认开启\n          例子：\n          {% codeblock %}\n              #提交到窗口\n              docker push cayley/busybox\n              #提交到某个私服\n\t\t\t  docker push xxx.xxx.com:5000/busbox:2016\n\t\t\t  #根据ip提交到私服\n\t\t\t  docker push 111.2.12.11:5000/busbox:2016\n\t\t\t  {% endcodeblock %}\n\nrename    重命名一个容器\nrestart   重新启动一个容器\n          Usage: docker restart [OPTIONS] CONTAINER [CONTAINER...]\nrm        移除一个或者多个容器\n          Usage:    docker rm [OPTIONS] CONTAINER [CONTAINER...]\n          Options:\n          -f, --force     通过SIGKILL信号强制删除一个运行中的容器 (uses SIGKILL)\n          -l, --link      移除容器间的网络连接，而非容器本身\n          -v, --volumes   删除与容器关联的卷\n\nrmi       移除一个或者多个镜像\n\nrun       运行一个新的容器\n          Usage:    docker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n\n          Options:\n            --add-host value              Add a custom host-to-IP mapping (host:ip) (default [])\n            -a, --attach value                Attach to STDIN, STDOUT or STDERR (default [])\n            --blkio-weight value          Block IO (relative weight), between 10 and 1000\n            --blkio-weight-device value   Block IO weight (relative device weight) (default [])\n            --cap-add value               Add Linux capabilities (default [])\n            --cap-drop value              Drop Linux capabilities (default [])\n            --cgroup-parent string        Optional parent cgroup for the container\n            --cidfile string              Write the container ID to the file\n            --cpu-percent int             CPU percent (Windows only)\n            --cpu-period int              Limit CPU CFS (Completely Fair Scheduler) period\n             --cpu-quota int               Limit CPU CFS (Completely Fair Scheduler) quota\n             -c, --cpu-shares int              CPU shares (relative weight)\n            --cpuset-cpus string          CPUs in which to allow execution (0-3, 0,1)\n            --cpuset-mems string          MEMs in which to allow execution (0-3, 0,1)\n            -d, --detach                   后台运行容器，并返回容器ID\n            --detach-keys string          Override the key sequence for detaching a container\n            --device value                Add a host device to the container (default [])\n            --device-read-bps value       Limit read rate (bytes per second) from a device (default [])\n            --device-read-iops value      Limit read rate (IO per second) from a device (default [])\n            --device-write-bps value      Limit write rate (bytes per second) to a device (default [])\n            --device-write-iops value     Limit write rate (IO per second) to a device (default [])\n            --disable-content-trust       Skip image verification (default true)\n            --dns value                   指定容器使用的DNS服务器，默认和宿主一致 (default [])\n            --dns-opt value               Set DNS options (default [])\n            --dns-search value            指定容器DNS搜索域名，默认和宿主一致 (default [])\n            --entrypoint string           Overwrite the default ENTRYPOINT of the image\n            -e, --env value               设置环境变量 (default [])\n            --env-file value              从指定文件读入环境变量 (default [])\n            --expose value                开放一个端口或一组端口 (default [])\n            --group-add value             Add additional groups to join (default [])\n            --health-cmd string           Command to run to check health\n            --health-interval duration    Time between running the check (default 0s)\n            --health-retries int          Consecutive failures needed to report unhealthy\n            --health-timeout duration     Maximum time to allow one check to run (default 0s)\n            -h, --hostname string         指定容器的hostname\n            -i, --interactive             以交互模式运行容器，通常与 -t 同时使用\n            --io-maxbandwidth string      Maximum IO bandwidth limit for the system drive (Windows only)\n            --io-maxiops uint             Maximum IOps limit for the system drive (Windows only)\n            --ip string                   Container IPv4 address (e.g. 172.30.100.104)\n            --ip6 string                  Container IPv6 address (e.g. 2001:db8::33)\n             --ipc string                  IPC namespace to use\n            --isolation string            Container isolation technology\n            --kernel-memory string        Kernel memory limit\n            -l, --label value                 Set meta data on a container (default [])\n            --label-file value            Read in a line delimited file of labels (default [])\n            --link value                  添加链接到另一个容器 (default [])\n             --link-local-ip value         Container IPv4/IPv6 link-local addresses (default [])\n            --log-driver string           Logging driver for the container\n              --log-opt value               Log driver options (default [])\n             --mac-address string          Container MAC address (e.g. 92:d0:c6:0a:29:33)\n             -m, --memory string            设置容器使用内存最大值\n            --memory-reservation string   Memory soft limit\n            --memory-swap string          Swap limit equal to memory plus swap: &apos;-1&apos; to enable unlimited swap\n            --memory-swappiness int       Tune container memory swappiness (0 to 100) (default -1)\n            --name string                 为容器指定一个名称\n            --network string              指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型； (default &quot;default&quot;)\n            --network-alias value         Add network-scoped alias for the container (default [])\n            --no-healthcheck              Disable any container-specified HEALTHCHECK\n            --oom-kill-disable            Disable OOM Killer\n            --oom-score-adj int           Tune host&apos;s OOM preferences (-1000 to 1000)\n            --pid string                  PID namespace to use\n            --pids-limit int              Tune container pids limit (set -1 for unlimited)\n            --privileged                  Give extended privileges to this container\n            -p, --publish value               Publish a container&apos;s port(s) to the host (default [])\n            -P, --publish-all                 Publish all exposed ports to random ports\n            --read-only                   Mount the container&apos;s root filesystem as read only\n            --restart string              Restart policy to apply when a container exits (default &quot;no&quot;)\n            --rm                          Automatically remove the container when it exits\n            --runtime string              Runtime to use for this container\n            --security-opt value          Security Options (default [])\n            --shm-size string             Size of /dev/shm, default value is 64MB\n            --sig-proxy                   Proxy received signals to the process (default true)\n            --stop-signal string          Signal to stop a container, SIGTERM by default (default &quot;SIGTERM&quot;)\n            --storage-opt value           Storage driver options for the container (default [])\n            --sysctl value                Sysctl options (default map[])\n            --tmpfs value                 Mount a tmpfs directory (default [])\n            -t, --tty                     为容器重新分配一个伪输入终端，通常与 -i 同时使用\n            --ulimit value                Ulimit options (default [])\n            -u, --user string                 Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])\n            --userns string               User namespace to use\n            --uts string                  UTS namespace to use\n            -v, --volume value                Bind mount a volume (default [])\n            --volume-driver string        Optional volume driver for the container\n            --volumes-from value          Mount volumes from the specified container(s) (default [])\n            -w, --workdir string              Working directory inside the container\n\n            例子：\n            {% codeblock %}\n                 #使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。\n\t\t\t\t docker run --name mynginx -d nginx:latest\n\t\t\t\t#使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。\n\t\t\t\tdocker run -P -d nginx:latest\n                #使用镜像nginx:latest以后台模式启动一个容器,将容器的80端口映射到主机的80端口,主机的目录/data映射到容器的/data。\n\t\t\t    docker run -p 80:80 -v /data:/data -d nginx:latest\n\t\t\t\t#使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。\n\t\t\t\trunoob@runoob:~$ docker run -it nginx:latest /bin/bash\n\t\t\t\troot@b8573233d675:/#\n               {% endcodeblock %}\n           好的参数，要好好研究\n\nsave      将指定镜像保存成 tar 归档文件\n          Usage: docker save [OPTIONS] IMAGE [IMAGE...]\n          OPTIONS：\n          -o :输出到的文件。\n          例子：\n          {% codeblock %}\n              runoob@runoob:~$ docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3\n\t\t\t  runoob@runoob:~$ ll my_ubuntu_v3.tar\n               -rw------- 1 runoob runoob 142102016 Jul 11 01:37 my_ubuntu_v3.ta\n\t\t\t  {% endcodeblock %}\n\nsearch    从Docker Hub中搜索镜像 \nservice   Manage Docker services\nstart     启动一个或多少已经被停止的容器\n          Usage: docker start [OPTIONS] CONTAINER [CONTAINER...]\nstats     Display a live stream of container(s) resource usage statistics\n\nstop      停止运行一个或者多个容器\n          Usage: docker stop [OPTIONS] CONTAINER [CONTAINER...]\n\nswarm     Manage Docker Swarm\ntag       Tag an image into a repository\ntop       Display the running processes of a container\nunpause   恢复容器中所有的进程。\n          Usage: docker unpause [OPTIONS] CONTAINER [CONTAINER...]\n\nupdate    Update configuration of one or more containers\n\nversion   Show the Docker version information\n\nvolume    阻塞运行直到容器停止，然后打印出它的退出代码\n          Useage: docker wait [OPTIONS] CONTAINER [CONTAINER...]\n</code></pre><p>Run ‘docker COMMAND –help’ for more information on a command.</p>\n<p>DockerFile文件：<br>Dockerfile文件可以使我自动化的创建容器。<br>Dockerfile包含创建镜像所需要的全部指令。基于在Dockerfile中的指令，我们可以使用Docker build命令来创建镜像。通过减少镜像和容器的创建过程来简化部署。</p>\n<p>Dockerfile 基本的语法是</p>\n<p>1）使用#来注释</p>\n<p>2）所有Dockerfile都必须以FROM命令开始。<br>FROM 指令告诉 Docker 使用哪个镜像作为基础<br>Usage: FROM <image name=\"\"><br>如：<br>FROM centos</image></p>\n<p>3）主体命令</p>\n<p>MAINTAINER：设置该镜像的作者。语法如下：<br>MAINTAINER <author name=\"\"><br>如：<br>MAINTAINER “cayley” <a href=\"&#109;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#99;&#97;&#121;&#108;&#101;&#121;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#109;\">&#99;&#97;&#121;&#108;&#101;&#121;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#109;</a></author></p>\n<p>RUN：在shell或者exec的环境下执行的命令。RUN指令会在新创建的镜像上添加新的层面，接下来提交的结果用在Dockerfile的下一条指令中。语法如下：<br>RUN 《command》<br>如：<br>RUN echo “aaaa”</p>\n<p>ADD：复制文件指令。它有两个参数<source>和<destination>。destination是容器内的路径。source可以是URL或者是启动配置上下文中的一个文件。语法如下：<br>ADD 《src》 《destination》<br>如：<br>ADD mongodb-enterprise.repo /etc/yum.repos.d/mongodb-enterprise.repo </destination></p>\n<p>CMD：提供了容器默认的执行命令。 Dockerfile只允许使用一次CMD指令。 使用多个CMD会抵消之前所有的指令，只有最后一个指令生效。 CMD有三种形式：<br>CMD [“executable”,”param1”,”param2”]<br>CMD [“param1”,”param2”]<br>CMD command param1 param2<br>如：<br>CMD [“/usr/sbin/init”]</p>\n<p>EXPOSE：指定容器在运行时监听的端口。语法如下：<br>EXPOSE <port>;<br>如：<br>EXPOSE 27017 15672</port></p>\n<p>ENTRYPOINT：配置给容器一个可执行的命令，这意味着在每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次被调用时仅能运行指定的应用。类似于CMD，Docker只允许一个ENTRYPOINT，多个ENTRYPOINT会抵消之前所有的指令，只执行最后的ENTRYPOINT指令。语法如下：<br>ENTRYPOINT [“executable”, “param1”,”param2”]<br>ENTRYPOINT command param1 param2</p>\n<p>WORKDIR：指定RUN、CMD与ENTRYPOINT命令的工作目录。语法如下：<br>WORKDIR /path/to/workdir</p>\n<p>ENV：设置环境变量。它们使用键值对，增加运行程序的灵活性。语法如下：<br>ENV <key> <value><br>如：<br>ENV C_FORCE_ROOT true</value></key></p>\n<p>USER：镜像正在运行时设置一个UID。语法如下：<br>USER <uid></uid></p>\n<p>VOLUME：授权访问从容器内到主机上的目录。语法如下：<br>VOLUME [“/data”]<br>如：<br>VOLUME [ “/sys/fs/cgroup” ]</p>\n","excerpt":"","more":"<p>先安装docker for mac ,可以使用homebrew||到官网下载<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install docker</div></pre></td></tr></table></figure></p>\n<p>官网地址：<br><a href=\"https://docs.docker.com/docker-for-mac/\">https://docs.docker.com/docker-for-mac/</a></p>\n<p>命令：<br> cayley@cayleydeMacBook-Air  ~  docker -h<br>Usage: docker [OPTIONS] COMMAND [arg…]<br>       docker [ –help | -v | –version ]</p>\n<p>A self-sufficient runtime for containers.</p>\n<p>Options:</p>\n<p>  –config=~/.docker              Location of client config files<br>  -D, –debug                     Enable debug mode<br>  -H, –host=[]                   Daemon socket(s) to connect to<br>  -h, –help                      Print usage<br>  -l, –log-level=info            Set the logging level<br>  –tls                           Use TLS; implied by –tlsverify<br>  –tlscacert=~/.docker/ca.pem    Trust certs signed only by this CA<br>  –tlscert=~/.docker/cert.pem    Path to TLS certificate file<br>  –tlskey=~/.docker/key.pem      Path to TLS key file<br>  –tlsverify                     Use TLS and verify the remote<br>  -v, –version                   Print version information and quit</p>\n<p>Commands:<br>    attach    连接到正在运行中的容器<br>              Usage: docker attach [OPTIONS] CONTAINER<br>              CONTAINER:容器名</p>\n<pre><code>          Options:\n              --detach-keys string   Override the key sequence for detaching a container\n              --no-stdin             Do not attach STDIN\n             --sig-proxy            Proxy all received signals to the process (default true)\n\n          {% codeblock %}\n     \t\t runoob@runoob:~$ docker attach --sig-proxy=false mynginx\n\t\t\t\t192.168.239.1 - - [10/Jul/2016:16:54:26 +0000] \"GET / HTTP/1.1\" 304 0 \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36\" \"-\"\n\t\t\t{% endcodeblock %}    \n\nbuild     可以使用Dockerfile来构建镜像\n          使用:docker build [OPTIONS] PATH | URL | -\n\n          Options:\n              --build-arg value         设置创建时的变量参数 (default [])\n              --cgroup-parent string    Optional parent cgroup for the container\n              --cpu-period int          限制 CPU CFS周期\n              --cpu-quota int           限制 CPU CFS配额\n              -c, --cpu-shares int       设置 cpu 使用权重；\n              --cpuset-cpus string      指定使用的CPU id\n             --cpuset-mems string      指定使用的内存 id\n            --disable-content-trust   忽略校验，默认开启\n              -f, --file string         指定要使用的Dockerfile路径\n              --force-rm                设置镜像过程中删除中间容器\n              --isolation string        使用容器隔离技术；\n              --label value             设置镜像使用的元数据 (default [])\n              -m, --memory string       设置内存最大值\n              --memory-swap string      设置Swap的最大值为内存+swap，&quot;-1&quot;表示不限swap\n              --no-cache                表示在构建过程中不使用缓存\n              --pull                    尝试去更新镜像的新版本\n              -q, --quiet               安静模式，成功后只输出镜像ID\n              --rm                     表示构建成功后，移除所有中间容器(default true)\n              --shm-size string         设置/dev/shm的大小，默认值是64M；\n              -t, --tag value               Name and optionally a tag in the &apos;name:tag&apos; format (default [])\n              --ulimit value            Ulimit options (default [])\n             例子：    \n              {% codeblock %}\n      \t\t\t #使用当前目录的Dockerfile创建镜像。\n\t\t\t\t docker build -t runoob/ubuntu:v1 . \n\t\t\t\t #使用URL github.com/creack/docker-firefox 的 Dockerfile 创建镜像。\n\t\t\t\t docker build github.com/creack/docker-firefox\n\t\t\t\t{% endcodeblock %}\n\ncommit    将容器的状态保持为镜像\n          Usage:    docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n          Options:\n           -a, --author string    提交的镜像作者\n           -c, --change value     使用Dockerfile指令来创建镜像 (default [])\n           -m, --message string   提交时的说明文字\n           -p, --pause            在commit时，将容器暂停 (default true)\n          例子：\n          {% codeblock %}\n              runoob@runoob:~$ docker commit -a \"runoob.com\" -m \"my apache\" a404c6c174a2  mymysql:v1 \n\t\t\t\tsha256:37af1236adef1544e8886be23010b66577647a40bc02c0885a6600b33ee28057\t\n\t\t\t\trunoob@runoob:~$ docker images mymysql:v1\n\t\t\t\tREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\t\t\t\tmymysql             v1                  37af1236adef        15 seconds ago      329 M\n\t\t\t   {% endcodeblock %}\ncp        用于容器与主机之间的数据拷贝\n          Usage:    docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-\n                    docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH\n\n          Options:\n           -L, --follow-link   保持源目标中的链接\n          例子：\n          {% codeblock %}\n               #将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下。\n               docker cp /www/runoob 96f7f14e99ab:/www/\n               #将主机/www/runoob目录拷贝到容器96f7f14e99ab中，目录重命名为www。\n               docker cp /www/runoob 96f7f14e99ab:/www\n               #将容器96f7f14e99ab的/www目录拷贝到主机的/tmp目录中。\n               docker cp  96f7f14e99ab:/www /tmp/\n              {% endcodeblock %} \n\ncreate    创建一个新的容器\n\n          语法同 docker run\n\ndiff      检查容器里文件结构的更改\n          Usage:    docker diff CONTAINER\n\n          例子：\n          {% codeblock %}\n\t\t\t  查看容器mymysql的文件结构更改。\n\t\t\t  runoob@runoob:~$ docker diff mymysql\n\t\t\t  A /logs\n\t\t\t  A /mysql_data\n              C /run\n              C /run/mysqld\n              A /run/mysqld/mysqld.pid\n              A /run/mysqld/mysqld.sock\n              C /tmp\n\t\t\t {% endcodeblock %}\n\nevents    从服务器获取实时事件\n\n          Usage:    docker events [OPTIONS]\n          Options:\n           -f, --filter value   根据条件过滤事件 (default [])\n           --since string   从指定的时间戳后显示所有事件\n           --until string   流水时间显示到指定的时间为止\nexec      在运行的容器中执行命令\n          Usage:    docker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n\n          -d, --detach         分离模式: 在后台运行\n          --detach-keys        Override the key sequence for detaching a container\n          -i, --interactive    即使没有(attch)附加也保持STDIN 打开\n          --privileged         Give extended privileges to the command\n         -t, --tty            分配一个伪终端\n         -u, --user           Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])\n\n         例子：\n         {% codeblock %}\n             #在容器mynginx中以交互模式执行容器内/root/runoob.sh脚本\n             runoob@runoob:~$ docker exec -it mynginx /bin/sh /root/runoob.sh\n\t\t\t http://www.runoob.com/\n\t\t\t #在容器mynginx中开启一个交互模式的终端\n\t\t\t runoob@runoob:~$ docker exec -i -t  mynginx /bin/bash\n\t\t\t root@b1a0703e41e7:/#\n\t\t\t {% endcodeblock %}\n\n\nexport    将文件系统作为一个tar归档文件导出到STDOUT\n          Usage:    docker export [OPTIONS] CONTAINER\n           Options:\n           -o, --output string   将输入内容写到文件\n          例子：\n            {% codeblock %}\n                \n                #为a404c6c174a2的容器按日期保存为tar文件。\n\t\t\t\trunoob@runoob:~$ docker export -o mysql-`date +%Y%m%d`.tar a404c6c174a2\n\t\t\t\trunoob@runoob:~$ ls mysql-`date +%Y%m%d`.tar\n\t\t\t\tmysql-20160711.tar\n\t\t\t\t\n\t\t\t\t{% endcodeblock %}\n\n\nhistory   查看看某个镜像的历史版本\n          Usage:    docker history [OPTIONS] IMAGE\n\n          Options:\n            -H, --human     以可读的格式打印镜像大小和日期（default true)\n            --no-trunc      显示完整的提交记录\n            -q, --quiet      仅列出提交记录ID\n\nimages    查看本机的镜像列表\n          用法:docker images [OPTIONS] [REPOSITORY[:TAG]]\n\n          Options:\n              -a, --all             显示所有镜像(默认隐藏中间件镜像)\n              --digests             显示摘要\n              -f, --filter value    基于提供的条件过滤输出 (default []) \n             --format string       Pretty-print images using a Go template\n             --no-trunc            Don&apos;t truncate output\n              -q, --quiet          仅显示id\n            例子：\n            {% codeblock %}\n  \t\t\t   docker images  --digests\n\t\t\t\tREPOSITORY（表示镜像的仓库源）          TAG（镜像的标签）                 DIGEST                                                                    IMAGE ID（镜像ID）            CREATED（镜像创建时间）             SIZE（镜像大小）\n\t\t\t\tbusybox             latest              sha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6   2b8fd9751c4c        12 weeks ago        \n \t\t\t\tdocker images  --no-trunc\n\t\t\t\tREPOSITORY          TAG                 IMAGE ID                                                                  CREATED             SIZE\n\t\t\t\tbusybox             latest              sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749   12 weeks ago        1.093 MB\n\t\t\t\tdocker images\n\t\t\t\tREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\t\t\t\tbusybox             latest              2b8fd9751c4c        12 weeks ago        1.093 MB\n\t\t\t  {% endcodeblock %}    \n\nimport    从归档文件中创建镜像\n          usage:    docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]\n\n          Options:\n           -c, --change value     应用docker 指令创建镜像； (default [])\n           -m, --message string   提交时的说明文字\n           例子：\n           {% codeblock %}\n\n\t\t\t\t#从镜像归档文件my_ubuntu_v3.tar创建镜像，命名为runoob/ubuntu:v4\n\t\t\t\trunoob@runoob:~$ docker import  my_ubuntu_v3.tar runoob/ubuntu:v4  \n\t\t\t\tsha256:63ce4a6d6bc3fabb95dbd6c561404a309b7bdfc4e21c1d59fe9fe4299cbfea39\n\t\t\t\trunoob@runoob:~$ docker images runoob/ubuntu:v4\n\t\t\t\tREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\t\t\t\trunoob/ubuntu       v4                  63ce4a6d6bc3        20 seconds ago      142.1 MB\n\t\t\t   {% endcodeblock %}\n\ninfo      显示 system-wide信息 \n\ninspect   获取容器/镜像/task的元数据\n          Usage:    docker inspect [OPTIONS] CONTAINER|IMAGE|TASK [CONTAINER|IMAGE|TASK...]\n\n          OPTIONS:\n           -f, --format       指定返回值的模板文件\n           -s, --size         显示总的文件大小\n           --type             为指定类型返回JSON(e.g image, container or task)\n\nkill      杀掉一个运行中的容器\n          Usage:    docker kill [OPTIONS] CONTAINER [CONTAINER...]\n          Options:\n           -s, --signal string   向容器发送一个信号 (default &quot;KILL&quot;)\n          例子：\n          {% codeblock %}\n              \t#杀掉运行中的容器mynginx\n\t\t\t\trunoob@runoob:~$ docker kill -s KILL mynginx\n\t\t\t\tmynginx\n              {% endocdeblock %} \n    load      Load an image from a tar archive or STDIN\n\n    login     登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub\n    \t\t  Usage:\tdocker login [OPTIONS] [SERVER]\n\n\t\t\t  Options:\n               -p, --password string   Password\n               -u, --username string   Username\n\n\n    logout    登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub\n\n    logs      获取容器的日志\n    \t\t  Usage:\tdocker logs [OPTIONS] CONTAINER\n\n\t\t\t  Options:\n               --details        Show extra details provided to logs\n               -f, --follow         跟踪日志输出\n               --help           Print usage\n               --since string   显示某个开始时间的所有日志\n               --tail string    仅列出最新N条容器日志 (default \"all\")\n               -t, --timestamps     显示时间戳\n\n    network   Manage Docker networks\n\n    node      Manage Docker Swarm nodes\n\n    pause     暂停容器中所有的进程\n    \t\t Usage: docker pause [OPTIONS] CONTAINER [CONTAINER...]\n\n    port      列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口。\n    \t\t  Usage:\tdocker port CONTAINER [PRIVATE_PORT[/PROTO]]\n    \t\t  {% codeblock %}\n    \t\t  #查看容器mynginx的端口映射情况。\n\t\t       runoob@runoob:~$ docker port mymysql\n               3306/tcp -> 0.0.0.0:3306\n    \t\t  {% endcodeblock %}\nps        列出容器\n          Usage:    docker ps [OPTIONS]\n\n         Options:\n         -a, --all             显示所有的容器，包括未运行的 (default shows just running)\n         -f, --filter value    根据条件过滤显示的内容 (default [])\n         --format string       指定返回值的模板文件\n         -n, --last int        列出最近创建的n个容器 (includes all states) (default -1)\n         -l, --latest          显示最近创建的容器 (includes all states)\n         --no-trunc            不截断输出\n         -q, --quiet           静默模式，只显示容器id\n         -s, --size            显示总的文件大小\n\n\npull      从仓库获取所需要的镜像\n          用法：docker pull [OPTIONS] NAME[:TAG|@DIGEST]\n          TAG: 默认为latest\n          Options:\n              -a, --all-tags                下载所有tag镜像\n              --disable-content-trust   忽略校验，默认开启\n             例子：\n             {% codeblock %}\n      \t\t   \t#获取一个镜像\t\n      \t\t   \tdocker pull busybox\n      \t\t   \t#也可以从每个私人或者第三方仓库获取\n      \t\t   \tdocker pull private/busybox:latest\n      \t\t   \t#可以指定网络\n      \t\t   \tdocker pull xxx.xxx.com:5000/busybox:latest\n      \t\t   {% endcodeblock %} \npush      提交镜像到仓库\n          用法：docker push [OPTIONS] NAME[:TAG]\n          Options:\n            --disable-content-trust   忽略校验，默认开启\n          例子：\n          {% codeblock %}\n              #提交到窗口\n              docker push cayley/busybox\n              #提交到某个私服\n\t\t\t  docker push xxx.xxx.com:5000/busbox:2016\n\t\t\t  #根据ip提交到私服\n\t\t\t  docker push 111.2.12.11:5000/busbox:2016\n\t\t\t  {% endcodeblock %}\n\nrename    重命名一个容器\nrestart   重新启动一个容器\n          Usage: docker restart [OPTIONS] CONTAINER [CONTAINER...]\nrm        移除一个或者多个容器\n          Usage:    docker rm [OPTIONS] CONTAINER [CONTAINER...]\n          Options:\n          -f, --force     通过SIGKILL信号强制删除一个运行中的容器 (uses SIGKILL)\n          -l, --link      移除容器间的网络连接，而非容器本身\n          -v, --volumes   删除与容器关联的卷\n\nrmi       移除一个或者多个镜像\n\nrun       运行一个新的容器\n          Usage:    docker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n\n          Options:\n            --add-host value              Add a custom host-to-IP mapping (host:ip) (default [])\n            -a, --attach value                Attach to STDIN, STDOUT or STDERR (default [])\n            --blkio-weight value          Block IO (relative weight), between 10 and 1000\n            --blkio-weight-device value   Block IO weight (relative device weight) (default [])\n            --cap-add value               Add Linux capabilities (default [])\n            --cap-drop value              Drop Linux capabilities (default [])\n            --cgroup-parent string        Optional parent cgroup for the container\n            --cidfile string              Write the container ID to the file\n            --cpu-percent int             CPU percent (Windows only)\n            --cpu-period int              Limit CPU CFS (Completely Fair Scheduler) period\n             --cpu-quota int               Limit CPU CFS (Completely Fair Scheduler) quota\n             -c, --cpu-shares int              CPU shares (relative weight)\n            --cpuset-cpus string          CPUs in which to allow execution (0-3, 0,1)\n            --cpuset-mems string          MEMs in which to allow execution (0-3, 0,1)\n            -d, --detach                   后台运行容器，并返回容器ID\n            --detach-keys string          Override the key sequence for detaching a container\n            --device value                Add a host device to the container (default [])\n            --device-read-bps value       Limit read rate (bytes per second) from a device (default [])\n            --device-read-iops value      Limit read rate (IO per second) from a device (default [])\n            --device-write-bps value      Limit write rate (bytes per second) to a device (default [])\n            --device-write-iops value     Limit write rate (IO per second) to a device (default [])\n            --disable-content-trust       Skip image verification (default true)\n            --dns value                   指定容器使用的DNS服务器，默认和宿主一致 (default [])\n            --dns-opt value               Set DNS options (default [])\n            --dns-search value            指定容器DNS搜索域名，默认和宿主一致 (default [])\n            --entrypoint string           Overwrite the default ENTRYPOINT of the image\n            -e, --env value               设置环境变量 (default [])\n            --env-file value              从指定文件读入环境变量 (default [])\n            --expose value                开放一个端口或一组端口 (default [])\n            --group-add value             Add additional groups to join (default [])\n            --health-cmd string           Command to run to check health\n            --health-interval duration    Time between running the check (default 0s)\n            --health-retries int          Consecutive failures needed to report unhealthy\n            --health-timeout duration     Maximum time to allow one check to run (default 0s)\n            -h, --hostname string         指定容器的hostname\n            -i, --interactive             以交互模式运行容器，通常与 -t 同时使用\n            --io-maxbandwidth string      Maximum IO bandwidth limit for the system drive (Windows only)\n            --io-maxiops uint             Maximum IOps limit for the system drive (Windows only)\n            --ip string                   Container IPv4 address (e.g. 172.30.100.104)\n            --ip6 string                  Container IPv6 address (e.g. 2001:db8::33)\n             --ipc string                  IPC namespace to use\n            --isolation string            Container isolation technology\n            --kernel-memory string        Kernel memory limit\n            -l, --label value                 Set meta data on a container (default [])\n            --label-file value            Read in a line delimited file of labels (default [])\n            --link value                  添加链接到另一个容器 (default [])\n             --link-local-ip value         Container IPv4/IPv6 link-local addresses (default [])\n            --log-driver string           Logging driver for the container\n              --log-opt value               Log driver options (default [])\n             --mac-address string          Container MAC address (e.g. 92:d0:c6:0a:29:33)\n             -m, --memory string            设置容器使用内存最大值\n            --memory-reservation string   Memory soft limit\n            --memory-swap string          Swap limit equal to memory plus swap: &apos;-1&apos; to enable unlimited swap\n            --memory-swappiness int       Tune container memory swappiness (0 to 100) (default -1)\n            --name string                 为容器指定一个名称\n            --network string              指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型； (default &quot;default&quot;)\n            --network-alias value         Add network-scoped alias for the container (default [])\n            --no-healthcheck              Disable any container-specified HEALTHCHECK\n            --oom-kill-disable            Disable OOM Killer\n            --oom-score-adj int           Tune host&apos;s OOM preferences (-1000 to 1000)\n            --pid string                  PID namespace to use\n            --pids-limit int              Tune container pids limit (set -1 for unlimited)\n            --privileged                  Give extended privileges to this container\n            -p, --publish value               Publish a container&apos;s port(s) to the host (default [])\n            -P, --publish-all                 Publish all exposed ports to random ports\n            --read-only                   Mount the container&apos;s root filesystem as read only\n            --restart string              Restart policy to apply when a container exits (default &quot;no&quot;)\n            --rm                          Automatically remove the container when it exits\n            --runtime string              Runtime to use for this container\n            --security-opt value          Security Options (default [])\n            --shm-size string             Size of /dev/shm, default value is 64MB\n            --sig-proxy                   Proxy received signals to the process (default true)\n            --stop-signal string          Signal to stop a container, SIGTERM by default (default &quot;SIGTERM&quot;)\n            --storage-opt value           Storage driver options for the container (default [])\n            --sysctl value                Sysctl options (default map[])\n            --tmpfs value                 Mount a tmpfs directory (default [])\n            -t, --tty                     为容器重新分配一个伪输入终端，通常与 -i 同时使用\n            --ulimit value                Ulimit options (default [])\n            -u, --user string                 Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])\n            --userns string               User namespace to use\n            --uts string                  UTS namespace to use\n            -v, --volume value                Bind mount a volume (default [])\n            --volume-driver string        Optional volume driver for the container\n            --volumes-from value          Mount volumes from the specified container(s) (default [])\n            -w, --workdir string              Working directory inside the container\n\n            例子：\n            {% codeblock %}\n                 #使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。\n\t\t\t\t docker run --name mynginx -d nginx:latest\n\t\t\t\t#使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。\n\t\t\t\tdocker run -P -d nginx:latest\n                #使用镜像nginx:latest以后台模式启动一个容器,将容器的80端口映射到主机的80端口,主机的目录/data映射到容器的/data。\n\t\t\t    docker run -p 80:80 -v /data:/data -d nginx:latest\n\t\t\t\t#使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。\n\t\t\t\trunoob@runoob:~$ docker run -it nginx:latest /bin/bash\n\t\t\t\troot@b8573233d675:/#\n               {% endcodeblock %}\n           好的参数，要好好研究\n\nsave      将指定镜像保存成 tar 归档文件\n          Usage: docker save [OPTIONS] IMAGE [IMAGE...]\n          OPTIONS：\n          -o :输出到的文件。\n          例子：\n          {% codeblock %}\n              runoob@runoob:~$ docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3\n\t\t\t  runoob@runoob:~$ ll my_ubuntu_v3.tar\n               -rw------- 1 runoob runoob 142102016 Jul 11 01:37 my_ubuntu_v3.ta\n\t\t\t  {% endcodeblock %}\n\nsearch    从Docker Hub中搜索镜像 \nservice   Manage Docker services\nstart     启动一个或多少已经被停止的容器\n          Usage: docker start [OPTIONS] CONTAINER [CONTAINER...]\nstats     Display a live stream of container(s) resource usage statistics\n\nstop      停止运行一个或者多个容器\n          Usage: docker stop [OPTIONS] CONTAINER [CONTAINER...]\n\nswarm     Manage Docker Swarm\ntag       Tag an image into a repository\ntop       Display the running processes of a container\nunpause   恢复容器中所有的进程。\n          Usage: docker unpause [OPTIONS] CONTAINER [CONTAINER...]\n\nupdate    Update configuration of one or more containers\n\nversion   Show the Docker version information\n\nvolume    阻塞运行直到容器停止，然后打印出它的退出代码\n          Useage: docker wait [OPTIONS] CONTAINER [CONTAINER...]\n</code></pre><p>Run ‘docker COMMAND –help’ for more information on a command.</p>\n<p>DockerFile文件：<br>Dockerfile文件可以使我自动化的创建容器。<br>Dockerfile包含创建镜像所需要的全部指令。基于在Dockerfile中的指令，我们可以使用Docker build命令来创建镜像。通过减少镜像和容器的创建过程来简化部署。</p>\n<p>Dockerfile 基本的语法是</p>\n<p>1）使用#来注释</p>\n<p>2）所有Dockerfile都必须以FROM命令开始。<br>FROM 指令告诉 Docker 使用哪个镜像作为基础<br>Usage: FROM <image name><br>如：<br>FROM centos</p>\n<p>3）主体命令</p>\n<p>MAINTAINER：设置该镜像的作者。语法如下：<br>MAINTAINER <author name><br>如：<br>MAINTAINER “cayley” <a href=\"&#109;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#99;&#97;&#121;&#108;&#101;&#121;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#109;\">&#99;&#97;&#121;&#108;&#101;&#121;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#109;</a></p>\n<p>RUN：在shell或者exec的环境下执行的命令。RUN指令会在新创建的镜像上添加新的层面，接下来提交的结果用在Dockerfile的下一条指令中。语法如下：<br>RUN 《command》<br>如：<br>RUN echo “aaaa”</p>\n<p>ADD：复制文件指令。它有两个参数<source>和<destination>。destination是容器内的路径。source可以是URL或者是启动配置上下文中的一个文件。语法如下：<br>ADD 《src》 《destination》<br>如：<br>ADD mongodb-enterprise.repo /etc/yum.repos.d/mongodb-enterprise.repo </p>\n<p>CMD：提供了容器默认的执行命令。 Dockerfile只允许使用一次CMD指令。 使用多个CMD会抵消之前所有的指令，只有最后一个指令生效。 CMD有三种形式：<br>CMD [“executable”,”param1”,”param2”]<br>CMD [“param1”,”param2”]<br>CMD command param1 param2<br>如：<br>CMD [“/usr/sbin/init”]</p>\n<p>EXPOSE：指定容器在运行时监听的端口。语法如下：<br>EXPOSE <port>;<br>如：<br>EXPOSE 27017 15672</p>\n<p>ENTRYPOINT：配置给容器一个可执行的命令，这意味着在每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次被调用时仅能运行指定的应用。类似于CMD，Docker只允许一个ENTRYPOINT，多个ENTRYPOINT会抵消之前所有的指令，只执行最后的ENTRYPOINT指令。语法如下：<br>ENTRYPOINT [“executable”, “param1”,”param2”]<br>ENTRYPOINT command param1 param2</p>\n<p>WORKDIR：指定RUN、CMD与ENTRYPOINT命令的工作目录。语法如下：<br>WORKDIR /path/to/workdir</p>\n<p>ENV：设置环境变量。它们使用键值对，增加运行程序的灵活性。语法如下：<br>ENV <key> <value><br>如：<br>ENV C_FORCE_ROOT true</p>\n<p>USER：镜像正在运行时设置一个UID。语法如下：<br>USER <uid></p>\n<p>VOLUME：授权访问从容器内到主机上的目录。语法如下：<br>VOLUME [“/data”]<br>如：<br>VOLUME [ “/sys/fs/cgroup” ]</p>\n"},{"title":"hexo博客搭建","date":"2016-02-18T04:15:15.000Z","comments":1,"_content":"\nhexo博客搭建:\n什么hexo?\n用官方的话说是:\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页\n\n1.安装node.js:\n1)使用nvm(一种node版本管理器)安装:\ncURL:\n{% codeblock %}\n$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n{% endcodeblock %}\n\nWget:\n{% codeblock %}\n$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n{% endcodeblock %}\n\n安装完成后，重启终端并执行下列命令即可安装 Node.js。\n{% codeblock %}\n$ nvm install 4\n{% endcodeblock %}\n\n2)可以使用yum等rpm包管理工具安装\n\n3)使用源码安装\n{% codeblock %}\nwget 源码地址\ntar xvf node-v4.2.tar.gz \n cd node-v4.2 \n ./configure \nmake \nmake install\n{% endcodeblock %}\n2.安装hexo:\n前提条件: 已安装node.js   git\n\n安装方法: \n{% codeblock %}\n npm install -g hexo-cli\n {% endcodeblock %}\n\n建立新blogs项目:\n{% codeblock %}\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n{% endcodeblock %}\n文件结构:\n.\n├── _config.yml :配置文件\n├── package.json :包信息\n├── scaffolds :模板文件夹,文章模板信息\n├── source : 资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去\n|   ├── _drafts\n|   └── _posts\n└── themes :主题文件夹\n\n设置配置文件_config.yml\n网站\n参数  描述\ntitle 网站标题\nsubtitle  网站副标题\ndescription 网站描述\nauthor  您的名字\nlanguage  网站使用的语言\ntimezone  网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。\n网址\n参数  描述  默认值\nurl 网址  \nroot  网站根目录 \npermalink 文章的 永久链接 格式 :year/:month/:day/:title/\npermalink_default 永久链接中各部分的默认值  \n网站存放在子目录\n如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。\n\n目录\n参数  描述  默认值\nsource_dir  资源文件夹，这个文件夹用来存放内容。  source\npublic_dir  公共文件夹，这个文件夹用于存放生成的站点文件。 public\ntag_dir 标签文件夹 tags\narchive_dir 归档文件夹 archives\ncategory_dir  分类文件夹 categories\ncode_dir  Include code 文件夹  downloads/code\ni18n_dir  国际化（i18n）文件夹  :lang\nskip_render 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 \n文章\n参数  描述  默认值\nnew_post_name 新文章的文件名称  :title.md\ndefault_layout  预设布局  post\nauto_spacing  在中文和英文之间加入空格  false\ntitlecase 把标题转换为 title case false\nexternal_link 在新标签中打开链接 true\nfilename_case 把文件名称转换为 (1) 小写或 (2) 大写 0\nrender_drafts 显示草稿  false\npost_asset_folder 启动 Asset 文件夹  false\nrelative_link 把链接改为与根目录的相对位址  false\nfuture  显示未来的文章 true\nhighlight 代码块的设置  \n分类 & 标签\n参数  描述  默认值\ndefault_category  默认分类  uncategorized\ncategory_map  分类别名  \ntag_map 标签别名  \n日期 / 时间格式\nHexo 使用 Moment.js 来解析和显示时间。\n\n参数  描述  默认值\ndate_format 日期格式  MMM D YYYY\ntime_format 时间格式  H:mm:ss\n分页\n参数  描述  默认值\nper_page  每页显示的文章量 (0 = 关闭分页功能) 10\npagination_dir  分页目录  page\n扩展\n参数  描述\ntheme 当前主题名称。值为false时禁用主题\ndeploy  部署部分的设置\n\n3.安装主题:\n{% codeblock %}\ngit clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant\nnpm install hexo-renderer-sass --save\nnpm install hexo-renderer-jade --save\n{% endcodeblock %}\n编辑Hexo目录下的 _config.yml，将theme的值改为maupassant。\n该主题配置文件_config.yml\n\n4.服务器:\n先安装 hexo-server.\n{% codeblock %}\n$ npm install hexo-server —save\n{% endcodeblock %}\n启动服务器\n{% codeblock %}\n$ hexo server\n{% endcodeblock %}\n启动服务器。默认情况下，访问网址为： http://localhost:4000/。\n选项  描述\n-p, --port  重设端口\n-s, --static  只使用静态文件\n-l, --log 启动日记记录，使用覆盖记录格式\n停止服务器的话,只能将该进程kill\n\n5.部署\n\n就是将hexo生产的静态文件(public文件夹)同步到服务器上\n需要用到deploy命令\n{% codeblock %}\n$ hexo deploy\n{% endcodeblock %}\n部署网站。\n参数  描述\n-g, --generate  部署之前预先生成静态文件\n\n同时需要在_config.yml中配置:\n\n\n同时根据type安装想要相应的插件:\ngit :安装 hexo-deployer-git。\n\n$ npm install hexo-deployer-git --save\n修改配置。\n{% codeblock %}\ndeploy:\n  type: git\n  repo: <repository url>\n  branch: [branch]\n  message: [message]\n  {% endcodeblock %}\n\n参数  描述\nrepo  库（Repository）地址\nbranch  分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。\nmessage 自定义提交信息 (默认为 Site updated: now(\"YYYY-MM-DD HH:mm:ss\"))\n\n6.使用命令\n\n\ninit\n{% codeblock %}\n$ hexo init [folder]\n{% endcodeblock %}\n新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。\n\nnew\n{% codeblock %}\n$ hexo new [layout] <title>\n{% endcodeblock %}\n新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。\n\ngenerate\n{% codeblock %}\n$ hexo generate\n{% endcodeblock %}\n生成静态文件。\n\n选项  描述\n-d, --deploy  文件生成后立即部署网站\n-w, --watch 监视文件变动\npublish\n{% codeblock %}\n$ hexo publish [layout] <filename>\n{% endcodeblock %}\n发表草稿。\n\nserver\n{% codeblock %}\n$ hexo server\n{% endcodeblock %}\n启动服务器。默认情况下，访问网址为： http://localhost:4000/。\n\n选项  描述\n-p, --port  重设端口\n-s, --static  只使用静态文件\n-l, --log 启动日记记录，使用覆盖记录格式\ndeploy\n{% codeblock %}\n$ hexo deploy\n{% endcodeblock %}\n部署网站。\n\n参数  描述\n-g, --generate  部署之前预先生成静态文件\nrender\n{% codeblock %}\n$ hexo render <file1> [file2] ...\n{% endcodeblock %}\n渲染文件。\n\n参数  描述\n-o, --output  设置输出路径\nmigrate\n{% codeblock %}\n$ hexo migrate <type>\n{% endcodeblock %}\n从其他博客系统 迁移内容。\n\nclean\n{% codeblock %}\n$ hexo clean\n{% endcodeblock %}\n清除缓存文件 (db.json) 和已生成的静态文件 (public)。\n\nlist\n{% codeblock %}\n$ hexo list <type>\n{% endcodeblock %}\n列出网站资料。\n\nversion\n{% codeblock %}\n$ hexo version\n{% endcodeblock %}\n显示 Hexo 版本。\n\n选项\n安全模式\n{% codeblock %}\n$ hexo --safe\n{% endcodeblock %}\n在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n\n调试模式\n{% codeblock %}\n$ hexo --debug\n{% endcodeblock %}\n在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。\n\n简洁模式\n{% codeblock %}\n$ hexo --silent\n{% endcodeblock %}\n隐藏终端信息。\n\n自定义配置文件的路径\n{% codeblock %}\n$ hexo --config custom.yml\n{% endcodeblock %}\n自定义配置文件的路径，执行后将不再使用 _config.yml。\n\n显示草稿\n{% codeblock %}\n$ hexo --draft\n{% endcodeblock %}\n显示 source/_drafts 文件夹中的草稿文章。\n\n自定义 CWD\n{% codeblock %}\n$ hexo --cwd /path/to/cwd\n{% endcodeblock %}\n自定义当前工作目录（Current working directory）的路径。\n\n7.写作\n\n使用这个命令来创建新文章:\n{% codeblock %}\n$ hexo new [layout] <title>\n{% endcodeblock %}\n指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。\n\n布局（Layout）\nHexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。\n\n布局  路径\npost  source/_posts\npage  source\ndraft source/_drafts :草稿, 可通过 publish 命令将草稿移动到 source/_posts 文件\n不要处理文章,需要将 Front-Matter 中的layout: 设为 false 。\n\n文件名称\nHexo 默认以标题做为文件名称，但您可编辑 new_post_name 参数来改变默认的文件名称，举例来说，设为 :year-:month-:day-:title.md 可让您更方便的通过日期来管理文章。\n变量  描述\n:title  标题（小写，空格将会被替换为短杠）\n:year 建立的年份，比如， 2015\n:month  建立的月份（有前导零），比如， 04\n:i_month  建立的月份（无前导零），比如， 4\n:day  建立的日期（有前导零），比如， 07\n:i_day  建立的日期（无前导零），比如， 7\n\n模版（Scaffold）\n在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：\n{% codeblock %}\n$ hexo new photo \"My Gallery\"\n{% endcodeblock %}\n在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章，以下是您可以在模版中使用的变量：\n变量  描述\nlayout  布局\ntitle 标题\ndate  文件建立日期\n\n\nFront-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，举例来说：\n{% codeblock %}\ntitle: Hello World\ndate: 2013/7/13 20:46:25\n---\n{% endcodeblock %}\n以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。\n\n参数  描述  默认值\nlayout  布局  \ntitle 标题  \ndate  建立日期  文件建立日期\nupdated 更新日期  文件更新日期\ncomments  开启文章的评论功能 true\ntags  标签（不适用于分页）  \ncategories  分类（不适用于分页）  \npermalink 覆盖文章网址  \n\n8.github博客\n\n前提条件: 安装hexo,hexo-deployer-git插件\n\n1)首先在github上建立与自己用户名对应的仓库，仓库名必须为【your_user_name.github.io】\n所以对应的博客地址为: https://your_user_name.github.io\n\n\n2)在_config.yml中配置好github创库信息\n\n{% codeblock %}\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n-  type: git\n   repo: https://github.com/cayley-hck/cayley-hck.github.io.git\n{% endcodeblock %}\n\n3)配置github ssh key一健登陆\n\n发现每次执行 hexl deploy 都输入github账号和密码,特别麻烦,所以配置ssh key.\n\n{% codeblock %}\n\n#进入目录\n$cd ~./ssh   \n\n#生成ssh key,如果不想输入密码,可以将密码设置为空(直接回车就行)\nhuangchkaideAir:.ssh kai$ ssh-keygen -t rsa -C \"hck920927@qq.com\"\nGenerating public/private rsa key pair.\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in github_rsa.\nYour public key has been saved in github_rsa.pub.\nThe key fingerprint is:\n4d:4c:51:fa:07:c6:49:b6:a4:1c:36:e8:a3:9b:6b:bb hck920927@qq.com\nThe key's randomart image is:\n+--[ RSA 2048]----+\n|         .*o=    |\n|        .= X o   |\n|       .  * *    |\n|        oo o .   |\n|       .S.. . .  |\n|      .      .   |\n|       o         |\n|      +          |\n|     .E+         |\n+-----------------+\nhuangchkaideAir:.ssh kai$ ls\ngithub_rsa\tgithub_rsa.pub\tid_rsa\t\tid_rsa.pub\tknown_hosts\n\n{% endcodeblock %}\n\n加入SSH Agent\n\n下一步输入：\n{% codeblock %}\nhuangchkaideAir:.ssh kai$ ssh-agent -s\nSSH_AUTH_SOCK=/var/folders/3w/ygb7_1m10f98xfnwgh86939c0000gn/T//ssh-lGyzWDf7xrpC/agent.1537; export SSH_AUTH_SOCK;\nSSH_AGENT_PID=1538; export SSH_AGENT_PID;\necho Agent pid 1538;\n{% endcodeblock %}\n\n如果没有显示上面所示的结果的话,就输入：\n{% codeblock %}\neval `ssh-agent -s`\n{% endcodeblock %}\n\n直到出现上面的结果后再输入：\n{% codeblock %}\nhuangchkaideAir:.ssh kai$ ssh-add ~/.ssh/id_rsa\nIdentity added: /Users/kai/.ssh/id_rsa (/Users/kai/.ssh/id_rsa)\n{% endcodeblock %}\n这样，你成功的在本地生成了一个可用的SSH key\n\n在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置.\n\n登陆gihub,点击由上角的用户头像,下拉选择settings. 进入个人设置页面\n\n点击右边的,SSH Keys,选择 New SSH Key\n\n复制 id_rsa.pub的内容,提交保存\n\n\n测试是否成功,只要输入命令:\n\n{% codeblock %}\nhuangchkaideAir:.ssh kai$ ssh -T  git@github.com\nHi cayley-hck! You've successfully authenticated, but GitHub does not provide shell access.\n{% endcodeblock %}\n\n根据提示输入密码即可.\n如果出错的话,输入命令 ssh -T -v git@github.com 根据info解决问题\n\n\n\n常见问题\n1.修改配置文件时注意YAML语法，参数冒号:后一定要留空格\n2.中文乱码请修改文件编码格式为UTF-8\n\n参考地址:\n{% link hexo官方文档 https://hexo.io/zh-cn/docs/tag-plugins.html %}\n{% link maupassant主题 https://github.com/tufu9441/maupassant-hexo %}\n","source":"_posts/hexo博客搭建.md","raw":"---\ntitle: hexo博客搭建\ndate: 2016-02-18 12:15:15\ntags: hexo\ncategories: nodejs\ncomments: true\n\n---\n\nhexo博客搭建:\n什么hexo?\n用官方的话说是:\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页\n\n1.安装node.js:\n1)使用nvm(一种node版本管理器)安装:\ncURL:\n{% codeblock %}\n$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n{% endcodeblock %}\n\nWget:\n{% codeblock %}\n$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n{% endcodeblock %}\n\n安装完成后，重启终端并执行下列命令即可安装 Node.js。\n{% codeblock %}\n$ nvm install 4\n{% endcodeblock %}\n\n2)可以使用yum等rpm包管理工具安装\n\n3)使用源码安装\n{% codeblock %}\nwget 源码地址\ntar xvf node-v4.2.tar.gz \n cd node-v4.2 \n ./configure \nmake \nmake install\n{% endcodeblock %}\n2.安装hexo:\n前提条件: 已安装node.js   git\n\n安装方法: \n{% codeblock %}\n npm install -g hexo-cli\n {% endcodeblock %}\n\n建立新blogs项目:\n{% codeblock %}\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n{% endcodeblock %}\n文件结构:\n.\n├── _config.yml :配置文件\n├── package.json :包信息\n├── scaffolds :模板文件夹,文章模板信息\n├── source : 资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去\n|   ├── _drafts\n|   └── _posts\n└── themes :主题文件夹\n\n设置配置文件_config.yml\n网站\n参数  描述\ntitle 网站标题\nsubtitle  网站副标题\ndescription 网站描述\nauthor  您的名字\nlanguage  网站使用的语言\ntimezone  网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。\n网址\n参数  描述  默认值\nurl 网址  \nroot  网站根目录 \npermalink 文章的 永久链接 格式 :year/:month/:day/:title/\npermalink_default 永久链接中各部分的默认值  \n网站存放在子目录\n如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。\n\n目录\n参数  描述  默认值\nsource_dir  资源文件夹，这个文件夹用来存放内容。  source\npublic_dir  公共文件夹，这个文件夹用于存放生成的站点文件。 public\ntag_dir 标签文件夹 tags\narchive_dir 归档文件夹 archives\ncategory_dir  分类文件夹 categories\ncode_dir  Include code 文件夹  downloads/code\ni18n_dir  国际化（i18n）文件夹  :lang\nskip_render 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 \n文章\n参数  描述  默认值\nnew_post_name 新文章的文件名称  :title.md\ndefault_layout  预设布局  post\nauto_spacing  在中文和英文之间加入空格  false\ntitlecase 把标题转换为 title case false\nexternal_link 在新标签中打开链接 true\nfilename_case 把文件名称转换为 (1) 小写或 (2) 大写 0\nrender_drafts 显示草稿  false\npost_asset_folder 启动 Asset 文件夹  false\nrelative_link 把链接改为与根目录的相对位址  false\nfuture  显示未来的文章 true\nhighlight 代码块的设置  \n分类 & 标签\n参数  描述  默认值\ndefault_category  默认分类  uncategorized\ncategory_map  分类别名  \ntag_map 标签别名  \n日期 / 时间格式\nHexo 使用 Moment.js 来解析和显示时间。\n\n参数  描述  默认值\ndate_format 日期格式  MMM D YYYY\ntime_format 时间格式  H:mm:ss\n分页\n参数  描述  默认值\nper_page  每页显示的文章量 (0 = 关闭分页功能) 10\npagination_dir  分页目录  page\n扩展\n参数  描述\ntheme 当前主题名称。值为false时禁用主题\ndeploy  部署部分的设置\n\n3.安装主题:\n{% codeblock %}\ngit clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant\nnpm install hexo-renderer-sass --save\nnpm install hexo-renderer-jade --save\n{% endcodeblock %}\n编辑Hexo目录下的 _config.yml，将theme的值改为maupassant。\n该主题配置文件_config.yml\n\n4.服务器:\n先安装 hexo-server.\n{% codeblock %}\n$ npm install hexo-server —save\n{% endcodeblock %}\n启动服务器\n{% codeblock %}\n$ hexo server\n{% endcodeblock %}\n启动服务器。默认情况下，访问网址为： http://localhost:4000/。\n选项  描述\n-p, --port  重设端口\n-s, --static  只使用静态文件\n-l, --log 启动日记记录，使用覆盖记录格式\n停止服务器的话,只能将该进程kill\n\n5.部署\n\n就是将hexo生产的静态文件(public文件夹)同步到服务器上\n需要用到deploy命令\n{% codeblock %}\n$ hexo deploy\n{% endcodeblock %}\n部署网站。\n参数  描述\n-g, --generate  部署之前预先生成静态文件\n\n同时需要在_config.yml中配置:\n\n\n同时根据type安装想要相应的插件:\ngit :安装 hexo-deployer-git。\n\n$ npm install hexo-deployer-git --save\n修改配置。\n{% codeblock %}\ndeploy:\n  type: git\n  repo: <repository url>\n  branch: [branch]\n  message: [message]\n  {% endcodeblock %}\n\n参数  描述\nrepo  库（Repository）地址\nbranch  分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。\nmessage 自定义提交信息 (默认为 Site updated: now(\"YYYY-MM-DD HH:mm:ss\"))\n\n6.使用命令\n\n\ninit\n{% codeblock %}\n$ hexo init [folder]\n{% endcodeblock %}\n新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。\n\nnew\n{% codeblock %}\n$ hexo new [layout] <title>\n{% endcodeblock %}\n新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。\n\ngenerate\n{% codeblock %}\n$ hexo generate\n{% endcodeblock %}\n生成静态文件。\n\n选项  描述\n-d, --deploy  文件生成后立即部署网站\n-w, --watch 监视文件变动\npublish\n{% codeblock %}\n$ hexo publish [layout] <filename>\n{% endcodeblock %}\n发表草稿。\n\nserver\n{% codeblock %}\n$ hexo server\n{% endcodeblock %}\n启动服务器。默认情况下，访问网址为： http://localhost:4000/。\n\n选项  描述\n-p, --port  重设端口\n-s, --static  只使用静态文件\n-l, --log 启动日记记录，使用覆盖记录格式\ndeploy\n{% codeblock %}\n$ hexo deploy\n{% endcodeblock %}\n部署网站。\n\n参数  描述\n-g, --generate  部署之前预先生成静态文件\nrender\n{% codeblock %}\n$ hexo render <file1> [file2] ...\n{% endcodeblock %}\n渲染文件。\n\n参数  描述\n-o, --output  设置输出路径\nmigrate\n{% codeblock %}\n$ hexo migrate <type>\n{% endcodeblock %}\n从其他博客系统 迁移内容。\n\nclean\n{% codeblock %}\n$ hexo clean\n{% endcodeblock %}\n清除缓存文件 (db.json) 和已生成的静态文件 (public)。\n\nlist\n{% codeblock %}\n$ hexo list <type>\n{% endcodeblock %}\n列出网站资料。\n\nversion\n{% codeblock %}\n$ hexo version\n{% endcodeblock %}\n显示 Hexo 版本。\n\n选项\n安全模式\n{% codeblock %}\n$ hexo --safe\n{% endcodeblock %}\n在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n\n调试模式\n{% codeblock %}\n$ hexo --debug\n{% endcodeblock %}\n在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。\n\n简洁模式\n{% codeblock %}\n$ hexo --silent\n{% endcodeblock %}\n隐藏终端信息。\n\n自定义配置文件的路径\n{% codeblock %}\n$ hexo --config custom.yml\n{% endcodeblock %}\n自定义配置文件的路径，执行后将不再使用 _config.yml。\n\n显示草稿\n{% codeblock %}\n$ hexo --draft\n{% endcodeblock %}\n显示 source/_drafts 文件夹中的草稿文章。\n\n自定义 CWD\n{% codeblock %}\n$ hexo --cwd /path/to/cwd\n{% endcodeblock %}\n自定义当前工作目录（Current working directory）的路径。\n\n7.写作\n\n使用这个命令来创建新文章:\n{% codeblock %}\n$ hexo new [layout] <title>\n{% endcodeblock %}\n指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。\n\n布局（Layout）\nHexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。\n\n布局  路径\npost  source/_posts\npage  source\ndraft source/_drafts :草稿, 可通过 publish 命令将草稿移动到 source/_posts 文件\n不要处理文章,需要将 Front-Matter 中的layout: 设为 false 。\n\n文件名称\nHexo 默认以标题做为文件名称，但您可编辑 new_post_name 参数来改变默认的文件名称，举例来说，设为 :year-:month-:day-:title.md 可让您更方便的通过日期来管理文章。\n变量  描述\n:title  标题（小写，空格将会被替换为短杠）\n:year 建立的年份，比如， 2015\n:month  建立的月份（有前导零），比如， 04\n:i_month  建立的月份（无前导零），比如， 4\n:day  建立的日期（有前导零），比如， 07\n:i_day  建立的日期（无前导零），比如， 7\n\n模版（Scaffold）\n在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：\n{% codeblock %}\n$ hexo new photo \"My Gallery\"\n{% endcodeblock %}\n在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章，以下是您可以在模版中使用的变量：\n变量  描述\nlayout  布局\ntitle 标题\ndate  文件建立日期\n\n\nFront-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，举例来说：\n{% codeblock %}\ntitle: Hello World\ndate: 2013/7/13 20:46:25\n---\n{% endcodeblock %}\n以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。\n\n参数  描述  默认值\nlayout  布局  \ntitle 标题  \ndate  建立日期  文件建立日期\nupdated 更新日期  文件更新日期\ncomments  开启文章的评论功能 true\ntags  标签（不适用于分页）  \ncategories  分类（不适用于分页）  \npermalink 覆盖文章网址  \n\n8.github博客\n\n前提条件: 安装hexo,hexo-deployer-git插件\n\n1)首先在github上建立与自己用户名对应的仓库，仓库名必须为【your_user_name.github.io】\n所以对应的博客地址为: https://your_user_name.github.io\n\n\n2)在_config.yml中配置好github创库信息\n\n{% codeblock %}\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n-  type: git\n   repo: https://github.com/cayley-hck/cayley-hck.github.io.git\n{% endcodeblock %}\n\n3)配置github ssh key一健登陆\n\n发现每次执行 hexl deploy 都输入github账号和密码,特别麻烦,所以配置ssh key.\n\n{% codeblock %}\n\n#进入目录\n$cd ~./ssh   \n\n#生成ssh key,如果不想输入密码,可以将密码设置为空(直接回车就行)\nhuangchkaideAir:.ssh kai$ ssh-keygen -t rsa -C \"hck920927@qq.com\"\nGenerating public/private rsa key pair.\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in github_rsa.\nYour public key has been saved in github_rsa.pub.\nThe key fingerprint is:\n4d:4c:51:fa:07:c6:49:b6:a4:1c:36:e8:a3:9b:6b:bb hck920927@qq.com\nThe key's randomart image is:\n+--[ RSA 2048]----+\n|         .*o=    |\n|        .= X o   |\n|       .  * *    |\n|        oo o .   |\n|       .S.. . .  |\n|      .      .   |\n|       o         |\n|      +          |\n|     .E+         |\n+-----------------+\nhuangchkaideAir:.ssh kai$ ls\ngithub_rsa\tgithub_rsa.pub\tid_rsa\t\tid_rsa.pub\tknown_hosts\n\n{% endcodeblock %}\n\n加入SSH Agent\n\n下一步输入：\n{% codeblock %}\nhuangchkaideAir:.ssh kai$ ssh-agent -s\nSSH_AUTH_SOCK=/var/folders/3w/ygb7_1m10f98xfnwgh86939c0000gn/T//ssh-lGyzWDf7xrpC/agent.1537; export SSH_AUTH_SOCK;\nSSH_AGENT_PID=1538; export SSH_AGENT_PID;\necho Agent pid 1538;\n{% endcodeblock %}\n\n如果没有显示上面所示的结果的话,就输入：\n{% codeblock %}\neval `ssh-agent -s`\n{% endcodeblock %}\n\n直到出现上面的结果后再输入：\n{% codeblock %}\nhuangchkaideAir:.ssh kai$ ssh-add ~/.ssh/id_rsa\nIdentity added: /Users/kai/.ssh/id_rsa (/Users/kai/.ssh/id_rsa)\n{% endcodeblock %}\n这样，你成功的在本地生成了一个可用的SSH key\n\n在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置.\n\n登陆gihub,点击由上角的用户头像,下拉选择settings. 进入个人设置页面\n\n点击右边的,SSH Keys,选择 New SSH Key\n\n复制 id_rsa.pub的内容,提交保存\n\n\n测试是否成功,只要输入命令:\n\n{% codeblock %}\nhuangchkaideAir:.ssh kai$ ssh -T  git@github.com\nHi cayley-hck! You've successfully authenticated, but GitHub does not provide shell access.\n{% endcodeblock %}\n\n根据提示输入密码即可.\n如果出错的话,输入命令 ssh -T -v git@github.com 根据info解决问题\n\n\n\n常见问题\n1.修改配置文件时注意YAML语法，参数冒号:后一定要留空格\n2.中文乱码请修改文件编码格式为UTF-8\n\n参考地址:\n{% link hexo官方文档 https://hexo.io/zh-cn/docs/tag-plugins.html %}\n{% link maupassant主题 https://github.com/tufu9441/maupassant-hexo %}\n","slug":"hexo博客搭建","published":1,"updated":"2017-03-01T02:52:32.000Z","layout":"post","photos":[],"link":"","_id":"cizqeiels0009znz4r0plppml","content":"<p>hexo博客搭建:<br>什么hexo?<br>用官方的话说是:<br>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页</p>\n<p>1.安装node.js:<br>1)使用nvm(一种node版本管理器)安装:<br>cURL:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure></p>\n<p>Wget:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure></p>\n<p>安装完成后，重启终端并执行下列命令即可安装 Node.js。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nvm install 4</div></pre></td></tr></table></figure></p>\n<p>2)可以使用yum等rpm包管理工具安装</p>\n<p>3)使用源码安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget 源码地址</div><div class=\"line\">tar xvf node-v4.2.tar.gz </div><div class=\"line\"> cd node-v4.2 </div><div class=\"line\"> ./configure </div><div class=\"line\">make </div><div class=\"line\">make install</div></pre></td></tr></table></figure><br>2.安装hexo:<br>前提条件: 已安装node.js   git</p>\n<p>安装方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>建立新blogs项目:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init &lt;folder&gt;</div><div class=\"line\">$ cd &lt;folder&gt;</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure><br>文件结构:<br>.<br>├── _config.yml :配置文件<br>├── package.json :包信息<br>├── scaffolds :模板文件夹,文章模板信息<br>├── source : 资源文件夹是存放用户资源的地方。除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去<br>|   ├── _drafts<br>|   └── _posts<br>└── themes :主题文件夹</p>\n<p>设置配置文件_config.yml<br>网站<br>参数  描述<br>title 网站标题<br>subtitle  网站副标题<br>description 网站描述<br>author  您的名字<br>language  网站使用的语言<br>timezone  网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。<br>网址<br>参数  描述  默认值<br>url 网址<br>root  网站根目录<br>permalink 文章的 永久链接 格式 :year/:month/:day/:title/<br>permalink_default 永久链接中各部分的默认值<br>网站存放在子目录<br>如果您的网站存放在子目录中，例如 <a href=\"http://yoursite.com/blog，则请将您的\" target=\"_blank\" rel=\"external\">http://yoursite.com/blog，则请将您的</a> url 设为 <a href=\"http://yoursite.com/blog\" target=\"_blank\" rel=\"external\">http://yoursite.com/blog</a> 并把 root 设为 /blog/。</p>\n<p>目录<br>参数  描述  默认值<br>source_dir  资源文件夹，这个文件夹用来存放内容。  source<br>public_dir  公共文件夹，这个文件夹用于存放生成的站点文件。 public<br>tag_dir 标签文件夹 tags<br>archive_dir 归档文件夹 archives<br>category_dir  分类文件夹 categories<br>code_dir  Include code 文件夹  downloads/code<br>i18n_dir  国际化（i18n）文件夹  :lang<br>skip_render 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。<br>文章<br>参数  描述  默认值<br>new_post_name 新文章的文件名称  :title.md<br>default_layout  预设布局  post<br>auto_spacing  在中文和英文之间加入空格  false<br>titlecase 把标题转换为 title case false<br>external_link 在新标签中打开链接 true<br>filename_case 把文件名称转换为 (1) 小写或 (2) 大写 0<br>render_drafts 显示草稿  false<br>post_asset_folder 启动 Asset 文件夹  false<br>relative_link 把链接改为与根目录的相对位址  false<br>future  显示未来的文章 true<br>highlight 代码块的设置<br>分类 &amp; 标签<br>参数  描述  默认值<br>default_category  默认分类  uncategorized<br>category_map  分类别名<br>tag_map 标签别名<br>日期 / 时间格式<br>Hexo 使用 Moment.js 来解析和显示时间。</p>\n<p>参数  描述  默认值<br>date_format 日期格式  MMM D YYYY<br>time_format 时间格式  H:mm:ss<br>分页<br>参数  描述  默认值<br>per_page  每页显示的文章量 (0 = 关闭分页功能) 10<br>pagination_dir  分页目录  page<br>扩展<br>参数  描述<br>theme 当前主题名称。值为false时禁用主题<br>deploy  部署部分的设置</p>\n<p>3.安装主题:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</div><div class=\"line\">npm install hexo-renderer-sass --save</div><div class=\"line\">npm install hexo-renderer-jade --save</div></pre></td></tr></table></figure><br>编辑Hexo目录下的 _config.yml，将theme的值改为maupassant。<br>该主题配置文件_config.yml</p>\n<p>4.服务器:<br>先安装 hexo-server.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-server —save</div></pre></td></tr></table></figure><br>启动服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure><br>启动服务器。默认情况下，访问网址为： <a href=\"http://localhost:4000/。\" target=\"_blank\" rel=\"external\">http://localhost:4000/。</a><br>选项  描述<br>-p, –port  重设端口<br>-s, –static  只使用静态文件<br>-l, –log 启动日记记录，使用覆盖记录格式<br>停止服务器的话,只能将该进程kill</p>\n<p>5.部署</p>\n<p>就是将hexo生产的静态文件(public文件夹)同步到服务器上<br>需要用到deploy命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure><br>部署网站。<br>参数  描述<br>-g, –generate  部署之前预先生成静态文件</p>\n<p>同时需要在_config.yml中配置:</p>\n<p>同时根据type安装想要相应的插件:<br>git :安装 hexo-deployer-git。</p>\n<p>$ npm install hexo-deployer-git –save<br>修改配置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: &lt;repository url&gt;</div><div class=\"line\">  branch: [branch]</div><div class=\"line\">  message: [message]</div><div class=\"line\">  </div></pre></td></tr></table></figure></p>\n<p>参数  描述<br>repo  库（Repository）地址<br>branch  分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。<br>message 自定义提交信息 (默认为 Site updated: now(“YYYY-MM-DD HH:mm:ss”))</p>\n<p>6.使用命令</p>\n<p>init<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init [folder]</div></pre></td></tr></table></figure><br>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p>\n<p>new<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure><br>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<p>generate<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure><br>生成静态文件。</p>\n<p>选项  描述<br>-d, –deploy  文件生成后立即部署网站<br>-w, –watch 监视文件变动<br>publish<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure><br>发表草稿。</p>\n<p>server<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure><br>启动服务器。默认情况下，访问网址为： <a href=\"http://localhost:4000/。\" target=\"_blank\" rel=\"external\">http://localhost:4000/。</a></p>\n<p>选项  描述<br>-p, –port  重设端口<br>-s, –static  只使用静态文件<br>-l, –log 启动日记记录，使用覆盖记录格式<br>deploy<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure><br>部署网站。</p>\n<p>参数  描述<br>-g, –generate  部署之前预先生成静态文件<br>render<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</div></pre></td></tr></table></figure><br>渲染文件。</p>\n<p>参数  描述<br>-o, –output  设置输出路径<br>migrate<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo migrate &lt;type&gt;</div></pre></td></tr></table></figure><br>从其他博客系统 迁移内容。</p>\n<p>clean<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure><br>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>\n<p>list<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo list &lt;type&gt;</div></pre></td></tr></table></figure><br>列出网站资料。</p>\n<p>version<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo version</div></pre></td></tr></table></figure><br>显示 Hexo 版本。</p>\n<p>选项<br>安全模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --safe</div></pre></td></tr></table></figure><br>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<p>调试模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --debug</div></pre></td></tr></table></figure><br>在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。</p>\n<p>简洁模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --silent</div></pre></td></tr></table></figure><br>隐藏终端信息。</p>\n<p>自定义配置文件的路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --config custom.yml</div></pre></td></tr></table></figure><br>自定义配置文件的路径，执行后将不再使用 _config.yml。</p>\n<p>显示草稿<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --draft</div></pre></td></tr></table></figure><br>显示 source/_drafts 文件夹中的草稿文章。</p>\n<p>自定义 CWD<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --cwd /path/to/cwd</div></pre></td></tr></table></figure><br>自定义当前工作目录（Current working directory）的路径。</p>\n<p>7.写作</p>\n<p>使用这个命令来创建新文章:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure><br>指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。</p>\n<p>布局（Layout）<br>Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。</p>\n<p>布局  路径<br>post  source/_posts<br>page  source<br>draft source/_drafts :草稿, 可通过 publish 命令将草稿移动到 source/_posts 文件<br>不要处理文章,需要将 Front-Matter 中的layout: 设为 false 。</p>\n<p>文件名称<br>Hexo 默认以标题做为文件名称，但您可编辑 new_post_name 参数来改变默认的文件名称，举例来说，设为 :year-:month-:day-:title.md 可让您更方便的通过日期来管理文章。<br>变量  描述<br>:title  标题（小写，空格将会被替换为短杠）<br>:year 建立的年份，比如， 2015<br>:month  建立的月份（有前导零），比如， 04<br>:i_month  建立的月份（无前导零），比如， 4<br>:day  建立的日期（有前导零），比如， 07<br>:i_day  建立的日期（无前导零），比如， 7</p>\n<p>模版（Scaffold）<br>在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new photo &quot;My Gallery&quot;</div></pre></td></tr></table></figure><br>在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章，以下是您可以在模版中使用的变量：<br>变量  描述<br>layout  布局<br>title 标题<br>date  文件建立日期</p>\n<p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，举例来说：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: Hello World</div><div class=\"line\">date: 2013/7/13 20:46:25</div><div class=\"line\">---</div></pre></td></tr></table></figure><br>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p>\n<p>参数  描述  默认值<br>layout  布局<br>title 标题<br>date  建立日期  文件建立日期<br>updated 更新日期  文件更新日期<br>comments  开启文章的评论功能 true<br>tags  标签（不适用于分页）<br>categories  分类（不适用于分页）<br>permalink 覆盖文章网址  </p>\n<p>8.github博客</p>\n<p>前提条件: 安装hexo,hexo-deployer-git插件</p>\n<p>1)首先在github上建立与自己用户名对应的仓库，仓库名必须为【your_user_name.github.io】<br>所以对应的博客地址为: <a href=\"https://your_user_name.github.io\" target=\"_blank\" rel=\"external\">https://your_user_name.github.io</a></p>\n<p>2)在_config.yml中配置好github创库信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">-  type: git</div><div class=\"line\">   repo: https://github.com/cayley-hck/cayley-hck.github.io.git</div></pre></td></tr></table></figure>\n<p>3)配置github ssh key一健登陆</p>\n<p>发现每次执行 hexl deploy 都输入github账号和密码,特别麻烦,所以配置ssh key.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#进入目录</div><div class=\"line\">$cd ~./ssh   </div><div class=\"line\"></div><div class=\"line\">#生成ssh key,如果不想输入密码,可以将密码设置为空(直接回车就行)</div><div class=\"line\">huangchkaideAir:.ssh kai$ ssh-keygen -t rsa -C &quot;hck920927@qq.com&quot;</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter passphrase (empty for no passphrase): </div><div class=\"line\">Enter same passphrase again: </div><div class=\"line\">Your identification has been saved in github_rsa.</div><div class=\"line\">Your public key has been saved in github_rsa.pub.</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">4d:4c:51:fa:07:c6:49:b6:a4:1c:36:e8:a3:9b:6b:bb hck920927@qq.com</div><div class=\"line\">The key&apos;s randomart image is:</div><div class=\"line\">+--[ RSA 2048]----+</div><div class=\"line\">|         .*o=    |</div><div class=\"line\">|        .= X o   |</div><div class=\"line\">|       .  * *    |</div><div class=\"line\">|        oo o .   |</div><div class=\"line\">|       .S.. . .  |</div><div class=\"line\">|      .      .   |</div><div class=\"line\">|       o         |</div><div class=\"line\">|      +          |</div><div class=\"line\">|     .E+         |</div><div class=\"line\">+-----------------+</div><div class=\"line\">huangchkaideAir:.ssh kai$ ls</div><div class=\"line\">github_rsa\tgithub_rsa.pub\tid_rsa\t\tid_rsa.pub\tknown_hosts</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>加入SSH Agent</p>\n<p>下一步输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchkaideAir:.ssh kai$ ssh-agent -s</div><div class=\"line\">SSH_AUTH_SOCK=/var/folders/3w/ygb7_1m10f98xfnwgh86939c0000gn/T//ssh-lGyzWDf7xrpC/agent.1537; export SSH_AUTH_SOCK;</div><div class=\"line\">SSH_AGENT_PID=1538; export SSH_AGENT_PID;</div><div class=\"line\">echo Agent pid 1538;</div></pre></td></tr></table></figure></p>\n<p>如果没有显示上面所示的结果的话,就输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">eval `ssh-agent -s`</div></pre></td></tr></table></figure></p>\n<p>直到出现上面的结果后再输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchkaideAir:.ssh kai$ ssh-add ~/.ssh/id_rsa</div><div class=\"line\">Identity added: /Users/kai/.ssh/id_rsa (/Users/kai/.ssh/id_rsa)</div></pre></td></tr></table></figure><br>这样，你成功的在本地生成了一个可用的SSH key</p>\n<p>在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置.</p>\n<p>登陆gihub,点击由上角的用户头像,下拉选择settings. 进入个人设置页面</p>\n<p>点击右边的,SSH Keys,选择 New SSH Key</p>\n<p>复制 id_rsa.pub的内容,提交保存</p>\n<p>测试是否成功,只要输入命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchkaideAir:.ssh kai$ ssh -T  git@github.com</div><div class=\"line\">Hi cayley-hck! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>\n<p>根据提示输入密码即可.<br>如果出错的话,输入命令 ssh -T -v git@github.com 根据info解决问题</p>\n<p>常见问题<br>1.修改配置文件时注意YAML语法，参数冒号:后一定要留空格<br>2.中文乱码请修改文件编码格式为UTF-8</p>\n<p>参考地址:<br><a href=\"https://hexo.io/zh-cn/docs/tag-plugins.html\" target=\"_blank\" rel=\"external\">hexo官方文档</a><br><a href=\"https://github.com/tufu9441/maupassant-hexo\" target=\"_blank\" rel=\"external\">maupassant主题</a></p>\n","excerpt":"","more":"<p>hexo博客搭建:<br>什么hexo?<br>用官方的话说是:<br>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页</p>\n<p>1.安装node.js:<br>1)使用nvm(一种node版本管理器)安装:<br>cURL:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure></p>\n<p>Wget:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure></p>\n<p>安装完成后，重启终端并执行下列命令即可安装 Node.js。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nvm install 4</div></pre></td></tr></table></figure></p>\n<p>2)可以使用yum等rpm包管理工具安装</p>\n<p>3)使用源码安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget 源码地址</div><div class=\"line\">tar xvf node-v4.2.tar.gz </div><div class=\"line\"> cd node-v4.2 </div><div class=\"line\"> ./configure </div><div class=\"line\">make </div><div class=\"line\">make install</div></pre></td></tr></table></figure><br>2.安装hexo:<br>前提条件: 已安装node.js   git</p>\n<p>安装方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>建立新blogs项目:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init &lt;folder&gt;</div><div class=\"line\">$ cd &lt;folder&gt;</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure><br>文件结构:<br>.<br>├── _config.yml :配置文件<br>├── package.json :包信息<br>├── scaffolds :模板文件夹,文章模板信息<br>├── source : 资源文件夹是存放用户资源的地方。除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去<br>|   ├── _drafts<br>|   └── _posts<br>└── themes :主题文件夹</p>\n<p>设置配置文件_config.yml<br>网站<br>参数  描述<br>title 网站标题<br>subtitle  网站副标题<br>description 网站描述<br>author  您的名字<br>language  网站使用的语言<br>timezone  网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。<br>网址<br>参数  描述  默认值<br>url 网址<br>root  网站根目录<br>permalink 文章的 永久链接 格式 :year/:month/:day/:title/<br>permalink_default 永久链接中各部分的默认值<br>网站存放在子目录<br>如果您的网站存放在子目录中，例如 <a href=\"http://yoursite.com/blog，则请将您的\">http://yoursite.com/blog，则请将您的</a> url 设为 <a href=\"http://yoursite.com/blog\">http://yoursite.com/blog</a> 并把 root 设为 /blog/。</p>\n<p>目录<br>参数  描述  默认值<br>source_dir  资源文件夹，这个文件夹用来存放内容。  source<br>public_dir  公共文件夹，这个文件夹用于存放生成的站点文件。 public<br>tag_dir 标签文件夹 tags<br>archive_dir 归档文件夹 archives<br>category_dir  分类文件夹 categories<br>code_dir  Include code 文件夹  downloads/code<br>i18n_dir  国际化（i18n）文件夹  :lang<br>skip_render 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。<br>文章<br>参数  描述  默认值<br>new_post_name 新文章的文件名称  :title.md<br>default_layout  预设布局  post<br>auto_spacing  在中文和英文之间加入空格  false<br>titlecase 把标题转换为 title case false<br>external_link 在新标签中打开链接 true<br>filename_case 把文件名称转换为 (1) 小写或 (2) 大写 0<br>render_drafts 显示草稿  false<br>post_asset_folder 启动 Asset 文件夹  false<br>relative_link 把链接改为与根目录的相对位址  false<br>future  显示未来的文章 true<br>highlight 代码块的设置<br>分类 &amp; 标签<br>参数  描述  默认值<br>default_category  默认分类  uncategorized<br>category_map  分类别名<br>tag_map 标签别名<br>日期 / 时间格式<br>Hexo 使用 Moment.js 来解析和显示时间。</p>\n<p>参数  描述  默认值<br>date_format 日期格式  MMM D YYYY<br>time_format 时间格式  H:mm:ss<br>分页<br>参数  描述  默认值<br>per_page  每页显示的文章量 (0 = 关闭分页功能) 10<br>pagination_dir  分页目录  page<br>扩展<br>参数  描述<br>theme 当前主题名称。值为false时禁用主题<br>deploy  部署部分的设置</p>\n<p>3.安装主题:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</div><div class=\"line\">npm install hexo-renderer-sass --save</div><div class=\"line\">npm install hexo-renderer-jade --save</div></pre></td></tr></table></figure><br>编辑Hexo目录下的 _config.yml，将theme的值改为maupassant。<br>该主题配置文件_config.yml</p>\n<p>4.服务器:<br>先安装 hexo-server.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-server —save</div></pre></td></tr></table></figure><br>启动服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure><br>启动服务器。默认情况下，访问网址为： <a href=\"http://localhost:4000/。\">http://localhost:4000/。</a><br>选项  描述<br>-p, –port  重设端口<br>-s, –static  只使用静态文件<br>-l, –log 启动日记记录，使用覆盖记录格式<br>停止服务器的话,只能将该进程kill</p>\n<p>5.部署</p>\n<p>就是将hexo生产的静态文件(public文件夹)同步到服务器上<br>需要用到deploy命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure><br>部署网站。<br>参数  描述<br>-g, –generate  部署之前预先生成静态文件</p>\n<p>同时需要在_config.yml中配置:</p>\n<p>同时根据type安装想要相应的插件:<br>git :安装 hexo-deployer-git。</p>\n<p>$ npm install hexo-deployer-git –save<br>修改配置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: &lt;repository url&gt;</div><div class=\"line\">  branch: [branch]</div><div class=\"line\">  message: [message]</div><div class=\"line\">  </div></pre></td></tr></table></figure></p>\n<p>参数  描述<br>repo  库（Repository）地址<br>branch  分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。<br>message 自定义提交信息 (默认为 Site updated: now(“YYYY-MM-DD HH:mm:ss”))</p>\n<p>6.使用命令</p>\n<p>init<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init [folder]</div></pre></td></tr></table></figure><br>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p>\n<p>new<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure><br>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<p>generate<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure><br>生成静态文件。</p>\n<p>选项  描述<br>-d, –deploy  文件生成后立即部署网站<br>-w, –watch 监视文件变动<br>publish<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure><br>发表草稿。</p>\n<p>server<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure><br>启动服务器。默认情况下，访问网址为： <a href=\"http://localhost:4000/。\">http://localhost:4000/。</a></p>\n<p>选项  描述<br>-p, –port  重设端口<br>-s, –static  只使用静态文件<br>-l, –log 启动日记记录，使用覆盖记录格式<br>deploy<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure><br>部署网站。</p>\n<p>参数  描述<br>-g, –generate  部署之前预先生成静态文件<br>render<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</div></pre></td></tr></table></figure><br>渲染文件。</p>\n<p>参数  描述<br>-o, –output  设置输出路径<br>migrate<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo migrate &lt;type&gt;</div></pre></td></tr></table></figure><br>从其他博客系统 迁移内容。</p>\n<p>clean<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure><br>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>\n<p>list<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo list &lt;type&gt;</div></pre></td></tr></table></figure><br>列出网站资料。</p>\n<p>version<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo version</div></pre></td></tr></table></figure><br>显示 Hexo 版本。</p>\n<p>选项<br>安全模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --safe</div></pre></td></tr></table></figure><br>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<p>调试模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --debug</div></pre></td></tr></table></figure><br>在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。</p>\n<p>简洁模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --silent</div></pre></td></tr></table></figure><br>隐藏终端信息。</p>\n<p>自定义配置文件的路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --config custom.yml</div></pre></td></tr></table></figure><br>自定义配置文件的路径，执行后将不再使用 _config.yml。</p>\n<p>显示草稿<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --draft</div></pre></td></tr></table></figure><br>显示 source/_drafts 文件夹中的草稿文章。</p>\n<p>自定义 CWD<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --cwd /path/to/cwd</div></pre></td></tr></table></figure><br>自定义当前工作目录（Current working directory）的路径。</p>\n<p>7.写作</p>\n<p>使用这个命令来创建新文章:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure><br>指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。</p>\n<p>布局（Layout）<br>Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。</p>\n<p>布局  路径<br>post  source/_posts<br>page  source<br>draft source/_drafts :草稿, 可通过 publish 命令将草稿移动到 source/_posts 文件<br>不要处理文章,需要将 Front-Matter 中的layout: 设为 false 。</p>\n<p>文件名称<br>Hexo 默认以标题做为文件名称，但您可编辑 new_post_name 参数来改变默认的文件名称，举例来说，设为 :year-:month-:day-:title.md 可让您更方便的通过日期来管理文章。<br>变量  描述<br>:title  标题（小写，空格将会被替换为短杠）<br>:year 建立的年份，比如， 2015<br>:month  建立的月份（有前导零），比如， 04<br>:i_month  建立的月份（无前导零），比如， 4<br>:day  建立的日期（有前导零），比如， 07<br>:i_day  建立的日期（无前导零），比如， 7</p>\n<p>模版（Scaffold）<br>在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new photo &quot;My Gallery&quot;</div></pre></td></tr></table></figure><br>在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章，以下是您可以在模版中使用的变量：<br>变量  描述<br>layout  布局<br>title 标题<br>date  文件建立日期</p>\n<p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，举例来说：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: Hello World</div><div class=\"line\">date: 2013/7/13 20:46:25</div><div class=\"line\">---</div></pre></td></tr></table></figure><br>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p>\n<p>参数  描述  默认值<br>layout  布局<br>title 标题<br>date  建立日期  文件建立日期<br>updated 更新日期  文件更新日期<br>comments  开启文章的评论功能 true<br>tags  标签（不适用于分页）<br>categories  分类（不适用于分页）<br>permalink 覆盖文章网址  </p>\n<p>8.github博客</p>\n<p>前提条件: 安装hexo,hexo-deployer-git插件</p>\n<p>1)首先在github上建立与自己用户名对应的仓库，仓库名必须为【your_user_name.github.io】<br>所以对应的博客地址为: <a href=\"https://your_user_name.github.io\">https://your_user_name.github.io</a></p>\n<p>2)在_config.yml中配置好github创库信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">-  type: git</div><div class=\"line\">   repo: https://github.com/cayley-hck/cayley-hck.github.io.git</div></pre></td></tr></table></figure>\n<p>3)配置github ssh key一健登陆</p>\n<p>发现每次执行 hexl deploy 都输入github账号和密码,特别麻烦,所以配置ssh key.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#进入目录</div><div class=\"line\">$cd ~./ssh   </div><div class=\"line\"></div><div class=\"line\">#生成ssh key,如果不想输入密码,可以将密码设置为空(直接回车就行)</div><div class=\"line\">huangchkaideAir:.ssh kai$ ssh-keygen -t rsa -C &quot;hck920927@qq.com&quot;</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter passphrase (empty for no passphrase): </div><div class=\"line\">Enter same passphrase again: </div><div class=\"line\">Your identification has been saved in github_rsa.</div><div class=\"line\">Your public key has been saved in github_rsa.pub.</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">4d:4c:51:fa:07:c6:49:b6:a4:1c:36:e8:a3:9b:6b:bb hck920927@qq.com</div><div class=\"line\">The key&apos;s randomart image is:</div><div class=\"line\">+--[ RSA 2048]----+</div><div class=\"line\">|         .*o=    |</div><div class=\"line\">|        .= X o   |</div><div class=\"line\">|       .  * *    |</div><div class=\"line\">|        oo o .   |</div><div class=\"line\">|       .S.. . .  |</div><div class=\"line\">|      .      .   |</div><div class=\"line\">|       o         |</div><div class=\"line\">|      +          |</div><div class=\"line\">|     .E+         |</div><div class=\"line\">+-----------------+</div><div class=\"line\">huangchkaideAir:.ssh kai$ ls</div><div class=\"line\">github_rsa\tgithub_rsa.pub\tid_rsa\t\tid_rsa.pub\tknown_hosts</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>加入SSH Agent</p>\n<p>下一步输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchkaideAir:.ssh kai$ ssh-agent -s</div><div class=\"line\">SSH_AUTH_SOCK=/var/folders/3w/ygb7_1m10f98xfnwgh86939c0000gn/T//ssh-lGyzWDf7xrpC/agent.1537; export SSH_AUTH_SOCK;</div><div class=\"line\">SSH_AGENT_PID=1538; export SSH_AGENT_PID;</div><div class=\"line\">echo Agent pid 1538;</div></pre></td></tr></table></figure></p>\n<p>如果没有显示上面所示的结果的话,就输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">eval `ssh-agent -s`</div></pre></td></tr></table></figure></p>\n<p>直到出现上面的结果后再输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchkaideAir:.ssh kai$ ssh-add ~/.ssh/id_rsa</div><div class=\"line\">Identity added: /Users/kai/.ssh/id_rsa (/Users/kai/.ssh/id_rsa)</div></pre></td></tr></table></figure><br>这样，你成功的在本地生成了一个可用的SSH key</p>\n<p>在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置.</p>\n<p>登陆gihub,点击由上角的用户头像,下拉选择settings. 进入个人设置页面</p>\n<p>点击右边的,SSH Keys,选择 New SSH Key</p>\n<p>复制 id_rsa.pub的内容,提交保存</p>\n<p>测试是否成功,只要输入命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchkaideAir:.ssh kai$ ssh -T  git@github.com</div><div class=\"line\">Hi cayley-hck! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>\n<p>根据提示输入密码即可.<br>如果出错的话,输入命令 ssh -T -v git@github.com 根据info解决问题</p>\n<p>常见问题<br>1.修改配置文件时注意YAML语法，参数冒号:后一定要留空格<br>2.中文乱码请修改文件编码格式为UTF-8</p>\n<p>参考地址:<br><a href=\"https://hexo.io/zh-cn/docs/tag-plugins.html\">hexo官方文档</a><br><a href=\"https://github.com/tufu9441/maupassant-hexo\">maupassant主题</a></p>\n"},{"title":"nginx安装分析","date":"2016-07-06T15:18:03.000Z","comments":1,"_content":"\nnginx的安装分析:\n\n1.安装准备软件\n1)编译工具\n{% codeblock %}\n\tyum install -y gcc\n{% endcodeblock %}\n\ngcc可用于编译c语言.\n{% codeblock %}\n\tyum install -y gcc-c++\n{% endcodeblock %}\n\ng++可用于编译c++\n\n2)依赖库\n\n{% codeblock %}\n\tyum install -y pcre pcre-devel\n{% endcodeblock %}\n\nPCRE是支持perl兼容正则表达式,nginx的http模块来解析正则表达式,很多地方都需要解析正则,所以要将RCRE库编译进nignx\n\npcre-devel是使用PCRE做二次开发时所需要的开发库,包括头文件等,是编译nginx所需要的.\n\n{% codeblock %}\nyum isntall -y zlib zlib-devel\n{% endcodeblock %}\n\nzlib库用于对http包内容做gzip格式的压缩,如果要对http响应包进行gzip压缩,减少网络传输量,就需要将zlib库编译进niginx\n\nzlib-devel 是二次开发所需要的库\n\n{% codeblock %}\nyum install -y opensll openssl-devel\n{% endcodeblock %}\n\nSSL协议上传所需要的库,同时也是md5 sha1等散列函数所需库\n\n......如果还需要安装nginx其他模块,则还要需要安装响应模块所依赖的库......\n\n\n2.安装\n\n解压源码文件得到文件如下:\n{% codeblock %}\n[root@niaoyun49026 nginx-1.11.1]# ls -al\ntotal 676\ndrwxr-xr-x  8 1001 1001    147 Jul 15 14:07 .\ndrwxr-xr-x. 3 root root     25 Jun 28 13:58 ..\ndrwxr-xr-x  6 1001 1001   4096 Jun 28 13:58 auto\n-rw-r--r--  1 1001 1001 264694 May 31 21:43 CHANGES\n-rw-r--r--  1 1001 1001 403645 May 31 21:43 CHANGES.ru\ndrwxr-xr-x  2 1001 1001   4096 Jun 28 13:58 conf\n-rwxr-xr-x  1 1001 1001   2481 May 31 21:43 configure\ndrwxr-xr-x  4 1001 1001     68 Jun 28 13:58 contrib\ndrwxr-xr-x  2 1001 1001     38 Jun 28 13:58 html\n-rw-r--r--  1 1001 1001   1397 May 31 21:43 LICENSE\ndrwxr-xr-x  2 1001 1001     20 Jun 28 13:58 man\n-rw-r--r--  1 1001 1001     49 May 31 21:43 README\ndrwxr-xr-x  9 1001 1001     84 Jun 28 13:58 src\n{% endcodeblock %}\n\n以默认的方式安装就这么简单\n\n{% codeblock %}\n./configure\nmake\nmake install\n{% endcodeblock %}\n\n3.分析\n\n1)configure的命令做了以下工作:\n\n检测操作内核和系统已经安装的软件和库,如果不满足编译条件做出相应的提示\n编译参数的解析(还要分析参数)\n中间目录的生成\n根据编译参数生成一些c源码,Makefile文件等\n\n查看configure的命令参数:\n{% codeblock %}\n./configure --help \n{% endcodeblock %}\n\nconfigure的参数太多了,现在下命令分析:\n\n路径相关参数:\n\n--prefix=PATH :安装目录,默认/usr/local/nginx\n\n--sbin-path=PATH : 可执行文件路径 ,默认<prefx>/sbin/nignx\n\n--conf-path=PATH : 配置文件路径 ,默认<prefx>/conf/nginx.conf\n\n--error-log-path=PATH : error日志路径 ,默认<prefix>/logs/error.log\n\n--pid-path=PATH : pid文件路径,这个文件仅保存ngix master进程ID ,默认<prefix>/logs/nginx.pid\n\n--lock-path=PATH : lock文件路径 ,默认<prefix>/logs/nginx.lock\n\n--builddir=DIR : configure执行时与编译期间产生的临时文件目录,makefile,c文件,目标文件,可执行文件 ,默认<soure path>/objs\n\n--with-perl_modul=PATH : perl module路径,只要使用第三方perl module才需要设置这个路径\n\n\n--with-perl=PATH : perl binary路径,如果配置的niginx会执行perl脚本,就必须设置改路径\n\n--http-log-path=PATH  : access log文件路径 ,默认<prefix>/logs/access.log\n\n--http-client-body-temp-path=PATH : 设置htpp请求包体临时存放的文件路径, 默认<prefix>/client_body_tmp\n\n--http-proxy-temp-path=PATH : 反向代理时http proxy临时文件路径,默认<prefix>/proxy_tmp\n\n--http-fastcgi-temp-path=PATH : fastcgi临时文件路径,默认<prefix>/fastcgi_tmp\n\n--http-uwsgicgi-temp-path=PATH : uwsgicgi临时文件路径,默认<prefix>/uwsgicgi_tmp\n\n--http-scgi-temp-path=PATH : scgi临时文件路径,默认<prefix>/scgi_tmp\n\n编译相关参数:\n\n-with-cc=PATH :  设置C编译器路径\n--with-cpp=PATH : 设置C预处理路径\n--with-cc-opt=OPTIONS :  设置C编译器参数\n--with-ld-opt=OPTIONS : 设置连接文件参数,将某个库链接到nginx中,用户--with-ld-opt=-llibaryName -LlibaryPath\n--with-cpu-opt=CPU : 为指定CPU优化,可选参数有:\n          pentium, pentiumpro, pentium3, pentium4,\n          athlon, opteron, sparc32, sparc64, ppc64\n\n依赖软件相关参数:\npcre库:\n--with-pcre : 强制使用pcre库\n--without-pcre : 不使用pcre库文件\n--with-pcre=DIR : 设定PCRE库路径\n--with-pcre-opt=OPTIONS  : 设置PCRE运行参数\nOpenSSL库:\n--with-openssl=DIR : 设定OpenSSL库文件路径\n--with-openssl-opt=OPTIONS : 设置OpenSSL运行参数\natomic(原子)库:\n--with-libatomic : 强制使用atomic库,该库是cpu架构独立的一种原子操作方式,支持x86,ppc64,sparc6\n--with-libatomic=DIR : atomic库的路径\n散列函数库:\n--with-md5=DIR : 设定md5库文件路径\n--with-md5-opt=OPTIONS  : 设置md5运行参数\n--with-md5-asm : 使用md5源文件编译\n--with-sha1=DIR : 设定sha1库文件路径\n--with-sha1-opt=OPTIONS : 设置sha1运行参数\n--with-sha1-asm : 使用sha1源文件编译\nzlib库:\n--with-zlib=DIR : 设定zlib库文件路径\n--with-zlib-opt=OPTIONS : 设置zlib运行参数\n--with-zlib-asm=CPU : 使zlib对特定的CPU进行优化,可选参数:\n          pentium, pentiumpro\n\n模块相关参数:\n事件模块:\n--with-rtsig_module : 允许rtsig模块,默认不安装\n--with-select_module : 允许select模块(一种轮询模式,不推荐用在高载环境)\n--without-select_module : 不使用select模块\n--with-poll_module : 允许poll模块(一种轮询模式,不推荐用在高载环境)\n--without-poll_module : 不使用poll模块\n--with-aio_module : 使用aio模块\nHTTP模块:\n默认编译进的http模块:\n\n--without-http_charset_module : 不使用ngx_http_charset_module模块  该模块可以将服务器发出的http响应重编码\n--without-http_gzip_module :  不使用ngx_http_gzip_module模块,该模块根据配置文件指定的conten_type对特定的http响应包进行gzip压缩\n--without-http_ssi_module :  不使用ngx_http_ssi_module模块,该模块可以在http响应包体中加入指定内容\n--without-http_userid_module : 不使用ngx_http_userid_module模块,该模块可以通过http请求的头部信息里的一些字段认证用户信息,以便确认请求合法性\n--without-http_access_module : 不使用ngx_http_access_module模块,该模块可以通过ip地址限制是否能访问\n--without-http_auth_basic_module : 不使用ngx_http_auth_basic_module模块,该模块提供最简单的用户名密码认证\n--without-http_autoindex_module : 不使用ngx_http_autoindex_module模块,该模块提供简单的目录浏览功能呢\n--without-http_geo_module : 不使用ngx_http_geo_module模块,该模块可以定义一些变量,这些变量的值将与客户端ip关联,这些nginx可以通过该不同变量做出不同的处理\n--without-http_map_module : 不使用ngx_http_map_module模块,该模块可以建立一个key/value的映射表,这样可以针对不同的url做特殊处理.\n--without-http_referer_module : 不使用ngx_http_referer_module模块,该模块可以根据请求的referer字段来拒接请求\n--without-http_rewrite_module : 不使用ngx_http_rewrite_module模块,该模块可以提供http请求在nginx内部的重定向的功能,需要依赖pcre库\n--without-http_proxy_module : 不使用ngx_http_proxy_module模块,该模块提供基本http反向代理功能\n--without-http_fastcgi_module : 不使用ngx_http_fastcgi_module模块,该模块提供fastcgi功能\n--without-http_memcached_module : 不使用ngx_http_memcached_module模块,该模块可以使nginx直接由上游的memcached服务读取数据,并简单的适配成http响应返回给客户端\n--without-http_limit_zone_module : 不使用ngx_http_limit_zone_module模块,该模块可以针对某个ip地址限制并发直连接数\n--without-http_empty_gif_module : 不使用ngx_http_empty_gif_module模块,该模块可以使得nginx收到无效请求时,立刻返回内存中1*1像素的gif图片.对于无效请求不会浪费服务器资源\n--without-http_browser_module : 不使用ngx_http_browser_module模块,该模块会根据http请求中的user_agent字段来识别浏览器\n--without-http_upstream_ip_hash_module : 不使用ngx_http_upstream_ip_hash_module模块,该模块提供当nginx与后端server建立连接时,可以根据ip做散列运算来决定会与哪个后端服务器通讯,这样就可以实现负载均衡\n\n\n默认不编译进的http模块:\n\n--with-http_ssl_module : 允许ngx_http_ssl_module模块 ,该模块是nginx支持ssl协议,提供https服务\n--with-http_realip_module 允许ngx_http_realip_module模块,该模块可以从客户端请求的header信息中获取真正的ip地址\n--with-http_addition_module 允许ngx_http_addition_module模块,该模块提供在返回客户端的http包体头部或者尾部增加内容\n--with-http_xslt_module 允许ngx_http_xslt_module模块,该模块提供xml格式的数据在发给客户端前加入xsl渲染,依赖libxml2库和libxslt库\n--with-http_image_filter_module : 安装http_image_filter_module模块,该模块提供将符合配置的图片实时压缩为指定大小的缩列图后再发给用户,依赖libgd库\n--with-http_geoip_module 安装http_geoi_module模块,该模块提供可以根据MaxMind GeoIp的IP地址数据库对客户端的ip地址得到的实际的地理位置信息,依赖MaxMind GeoIP的库文件\n--with-http_sub_module 允许ngx_http_sub_module模块,该模块可以在返回给客户端的http响应包中将指定的字符串替换为自己的字符串\n--with-http_dav_module 允许ngx_http_dav_module模块,该模块可以让nginx支持webdav标准(PUT,DELETED,COPY,MOVE,MKCOL等)\n--with-http_flv_module 允许ngx_http_flv_module模块,该模块是的nginx可以在返回flv格式的视频文件时在header头做一些出来,是的客户端可以直接观看\n--with-http_mp4_module 允许ngx_http_mp4_module模块,该模块是的nginx可以在返回mp4格式的视频文件时在header头做一些出来,是的客户端可以直接观看\n--with-http_gzip_static_module 允许ngx_http_gzip_static_module模块,如果使用gizp模块对响应的文档进行gizp格式返回给客户端,那个这个文档就会每次都压缩,所以该模块的作用是压缩的文档缓存起来,如果下次请求一样的文档就直接返回文档,提高响应速度和减少对服务器资料的消耗.\n--with-http_random_index_module 允许ngx_http_random_index_module模块,该模块的作用是,当客户端访问某个目录时,,随机返回该目录下任意文件.\n--with-http_stub_status_module 允许ngx_http_stub_status_module模块,该模块可以让给nginx提高性能统计的页面,获得相关的并发连接,请求的信息\n--with-google_perftools_module 允许ngx_google_perftools_module模块,该模块提供google的性能测试工具\n\n邮件代理服务器相关的mail模块参数:\n-with-mail  安装邮件服务器反向代理模块.是nginx可以反向代理POP3/IMAP4/SMTP等协议,默认不安装\n--with-mail_ssl_module 允许ngx_mail_ssl_module模块,该模块可以使IMAP,POP3,SMTP等协议基于SSL/TLS协议上使用.默认不安装,不依赖openSSL库\n--without-mail_pop3_module 不允许ngx_mail_pop3_module模块,使用--with-mail参数后,该模块默认安装\n--without-mail_imap_module 不允许ngx_mail_imap_module模块,使用--with-mail参数后,该模块默认安装\n--without-mail_smtp_module 不允许ngx_mail_smtp_module模块,使用--with-mail参数后,该模块默认安装\n\n\n其他参数:\n--with-debug : 调试日志,将nginx需要打印debug调试级别的日志的代码编译进nginx\n--add-module=PATH 允许使用外部模块,以及路径,通过这个参数指定第三方模块的路径\n--without-http 不使用HTTP server功能,禁用http服务器\n--without-http-cache : 禁用http服务器里面的缓存cache特性\n--with-file-aio : 启用文件的异步I\\O功能来处理磁盘文件,需要liunx内核支持原声的异步I/O\n--with-ipv6 : 使nignx支持IPv6\n--user=USER 设定程序运行的用户环境(www)\n--group=GROUP 设定程序运行的组环境(www)\n\n注意:nginx编译时不是功能加的越多越好，应该尽可能少编译模块，不用的最好不要加入。\n\n编译好的nginx可通过 /usr/local/nginx/sbin/nginx -V 查看编译时的参数\n\n\n2)make命令就是根据configure生成的Makefile文件编译nginx,并生成目标文件&二进制文件\n\n\n3)make install命令就是将编译好的文件和目录根据编译的设置保存到相应目录\n\n4.configure脚本\n看下该脚本分析一下:\n{% codeblock %}\n#!/bin/sh\n\n# Copyright (C) Igor Sysoev\n# Copyright (C) Nginx, Inc.\n\n\nLC_ALL=C\nexport LC_ALL\n\n#options脚本会处理传给configure的参数和根据参数定义后续所需要的变量.\n. auto/options\n#init脚本初始化后续将产生的文件路径\n. auto/init\n#sourdes脚本分析nginx的源码结构,为后续构造makefile文件准备\n. auto/sources\n\n#创建目标文件路径\ntest -d $NGX_OBJS || mkdir -p $NGX_OBJS\n#开始准备建立nginx_auto_hearders.h,autoconf.err等必要文件\necho > $NGX_AUTO_HEADERS_H\necho > $NGX_AUTOCONF_ERR\n#往objs/niginx_auto_config.h写入命令行带的参数\necho \"#define NGX_CONFIGURE \\\"$NGX_CONFIGURE\\\"\" > $NGX_AUTO_CONFIG_H\n\n#如果有debug标志位,就将objs/nginx_auto_config.h文件写入debug相关的宏定义\nif [ $NGX_DEBUG = YES ]; then\n    have=NGX_DEBUG . auto/have\nfi\n\n#获取操作系统参数,检查编译的操作系统参数是否支持编译\nif test -z \"$NGX_PLATFORM\"; then\n    echo \"checking for OS\"\n    #获取操作系统名称\n    NGX_SYSTEM=`uname -s 2>/dev/null`\n    #获取操作系统内核版本\n    NGX_RELEASE=`uname -r 2>/dev/null`\n    #获取操作系统是32位/还是64位的内核\n    NGX_MACHINE=`uname -m 2>/dev/null`\n    #输出获取的操作系统结果\n    echo \" + $NGX_SYSTEM $NGX_RELEASE $NGX_MACHINE\"\n\n    NGX_PLATFORM=\"$NGX_SYSTEM:$NGX_RELEASE:$NGX_MACHINE\";\n\n    case \"$NGX_SYSTEM\" in\n        MINGW32_*)\n            NGX_PLATFORM=win32\n        ;;\n    esac\n\nelse\n    echo \"building for $NGX_PLATFORM\"\n    NGX_SYSTEM=$NGX_PLATFORM\nfi\n#检查并设置编译器,检查gcc是否安装和支持\n. auto/cc/conf\n#对于非windows操作系统定义一些必要的头文件\nif [ \"$NGX_PLATFORM\" != win32 ]; then\n    . auto/headers\nfi\n#对于目前的操作系统环境检查检查和定义一些特定的操作系统相关的方法和变量\n. auto/os/conf\n#定义类unix操作系统中通用的头文件和系统调用等,同时检查当前系统环境\nif [ \"$NGX_PLATFORM\" != win32 ]; then\n    . auto/unix\nfi\n\n. auto/threads\n#定义ngx_modulues数组,生产ngx_moduloes.c文件,定义nginx需要用到的模块,ngx_modules数组的先后顺序非常重要,同时如果使用了--add-module=参数加入的模块,也会在这里面\n. auto/modules\n#检查nginx在链接期间需要的链接的第三方静态库,动态库或者目标文件是否存在\n. auto/lib/conf\n#处理编译安装后的路径设置\ncase \".$NGX_PREFIX\" in\n    .)\n        NGX_PREFIX=${NGX_PREFIX:-/usr/local/nginx}\n        have=NGX_PREFIX value=\"\\\"$NGX_PREFIX/\\\"\" . auto/define\n    ;;\n\n    .!)\n        NGX_PREFIX=\n    ;;\n\n    *)\n        have=NGX_PREFIX value=\"\\\"$NGX_PREFIX/\\\"\" . auto/define\n    ;;\nesac\n#处理编译安装后的配置文件路径设置\nif [ \".$NGX_CONF_PREFIX\" != \".\" ]; then\n    have=NGX_CONF_PREFIX value=\"\\\"$NGX_CONF_PREFIX/\\\"\" . auto/define\nfi\n#处理编译安装后的,二进制文件,pid,lock等文件的路径设置\nhave=NGX_SBIN_PATH value=\"\\\"$NGX_SBIN_PATH\\\"\" . auto/define\nhave=NGX_CONF_PATH value=\"\\\"$NGX_CONF_PATH\\\"\" . auto/define\nhave=NGX_PID_PATH value=\"\\\"$NGX_PID_PATH\\\"\" . auto/define\nhave=NGX_LOCK_PATH value=\"\\\"$NGX_LOCK_PATH\\\"\" . auto/define\nhave=NGX_ERROR_LOG_PATH value=\"\\\"$NGX_ERROR_LOG_PATH\\\"\" . auto/define\n\nhave=NGX_HTTP_LOG_PATH value=\"\\\"$NGX_HTTP_LOG_PATH\\\"\" . auto/define\nhave=NGX_HTTP_CLIENT_TEMP_PATH value=\"\\\"$NGX_HTTP_CLIENT_TEMP_PATH\\\"\"\n. auto/define\nhave=NGX_HTTP_PROXY_TEMP_PATH value=\"\\\"$NGX_HTTP_PROXY_TEMP_PATH\\\"\"\n. auto/define\nhave=NGX_HTTP_FASTCGI_TEMP_PATH value=\"\\\"$NGX_HTTP_FASTCGI_TEMP_PATH\\\"\"\n. auto/define\nhave=NGX_HTTP_UWSGI_TEMP_PATH value=\"\\\"$NGX_HTTP_UWSGI_TEMP_PATH\\\"\"\n. auto/define\nhave=NGX_HTTP_SCGI_TEMP_PATH value=\"\\\"$NGX_HTTP_SCGI_TEMP_PATH\\\"\"\n. auto/define\n#创建编译时需要的makefile文件\n. auto/make\n#为makefile文件加入需要的连接的第三方静态库,动态库或者目标文件\n. auto/lib/make\n#为makefile文件加入install功能,将编译成功的文件复制到安装路径\n. auto/install\n\n# STUB,在nginx_auto_config.h文件中加入NGX_SUPPRESS_WARN宏和 NGX_SMP宏\n. auto/stubs\n#在nginx_auto_config.h文件中加入NGX_USER宏和 NGX_GROUP\t宏,如果没有使用--with-user||--with-group参数时默认两者都为nobody\nhave=NGX_USER value=\"\\\"$NGX_USER\\\"\" . auto/define\nhave=NGX_GROUP value=\"\\\"$NGX_GROUP\\\"\" . auto/define\n\nif [ \".$NGX_BUILD\" != \".\" ]; then\n    have=NGX_BUILD value=\"\\\"$NGX_BUILD\\\"\" . auto/define\nfi\n#打印configure脚本执行结果,如果有错误则返回错误提示\n. auto/summary\n\n{% endcodeblock %}\n\n\n5.记录安装:\n\n{% codeblock %}\n\n[root@niaoyun49026 nginx-1.11.1]# yum -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel opensll openssl-devel\nLoaded plugins: fastestmirror\nNo such command: gcc. Please use /usr/bin/yum --help\n[root@niaoyun49026 nginx-1.11.1]# yum  install -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel opensll openssl-devel\nLoaded plugins: fastestmirror\n.................(大多了,省略一下)....................................\nPackage gcc-4.8.5-4.el7.x86_64 already installed and latest version\nPackage gcc-c++-4.8.5-4.el7.x86_64 already installed and latest version\nPackage pcre-8.32-15.el7_2.1.x86_64 already installed and latest version\nPackage zlib-1.2.7-15.el7.x86_64 already installed and latest version\n.................(大多了,省略一下)....................................                                                                                                  \nInstalled:\n  openssl-devel.x86_64 1:1.0.1e-51.el7_2.5                        pcre-devel.x86_64 0:8.32-15.el7_2.1                        zlib-devel.x86_64 0:1.2.7-15.el7                       \n\nDependency Installed:\n  keyutils-libs-devel.x86_64 0:1.5.8-3.el7       krb5-devel.x86_64 0:1.13.2-12.el7_2       libcom_err-devel.x86_64 0:1.42.9-7.el7       libselinux-devel.x86_64 0:2.2.2-6.el7      \n  libsepol-devel.x86_64 0:2.1.9-3.el7            libverto-devel.x86_64 0:0.2.5-4.el7      \n\nComplete!\n\n#基本必须库已经安装完了,下面执行configure 脚本\n[root@niaoyun49026 nginx-1.11.1]# ./configure \nchecking for OS\n + Linux 3.10.0-123.el7.x86_64 x86_64\nchecking for C compiler ... found\n + using GNU C compiler\n + gcc version: 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC) \nchecking for gcc -pipe switch ... found\n................(大多了,省略一下)....................................                                                                                                  \ncreating objs/Makefile\n\nConfiguration summary\n  + using system PCRE library\n  + OpenSSL library is not used\n  + md5: using system crypto library\n  + sha1: using system crypto library\n  + using system zlib library\n\n  nginx path prefix: \"/usr/local/nginx\"\n  nginx binary file: \"/usr/local/nginx/sbin/nginx\"\n  nginx modules path: \"/usr/local/nginx/modules\"\n  nginx configuration prefix: \"/usr/local/nginx/conf\"\n  nginx configuration file: \"/usr/local/nginx/conf/nginx.conf\"\n  nginx pid file: \"/usr/local/nginx/logs/nginx.pid\"\n  nginx error log file: \"/usr/local/nginx/logs/error.log\"\n  nginx http access log file: \"/usr/local/nginx/logs/access.log\"\n  nginx http client request body temporary files: \"client_body_temp\"\n  nginx http proxy temporary files: \"proxy_temp\"\n  nginx http fastcgi temporary files: \"fastcgi_temp\"\n  nginx http uwsgi temporary files: \"uwsgi_temp\"\n  nginx http scgi temporary files: \"scgi_temp\"\n\n#执行confgrue脚本后,多了Makefile文件和objs目录\n[root@niaoyun49026 nginx-1.11.1]# ls -al\ntotal 684\ndrwxr-xr-x  9 1001 1001   4096 Jul 15 15:07 .\ndrwxr-xr-x. 3 root root     25 Jun 28 13:58 ..\ndrwxr-xr-x  6 1001 1001   4096 Jun 28 13:58 auto\n-rw-r--r--  1 1001 1001 264694 May 31 21:43 CHANGES\n-rw-r--r--  1 1001 1001 403645 May 31 21:43 CHANGES.ru\ndrwxr-xr-x  2 1001 1001   4096 Jun 28 13:58 conf\n-rwxr-xr-x  1 1001 1001   2481 May 31 21:43 configure\ndrwxr-xr-x  4 1001 1001     68 Jun 28 13:58 contrib\ndrwxr-xr-x  2 1001 1001     38 Jun 28 13:58 html\n-rw-r--r--  1 1001 1001   1397 May 31 21:43 LICENSE\n-rw-r--r--  1 root root    376 Jul 15 15:07 Makefile(这里的makefile的功能都是调用objs/Makefile的)\ndrwxr-xr-x  2 1001 1001     20 Jun 28 13:58 man\ndrwxr-xr-x  3 root root    119 Jul 15 15:07 objs\n-rw-r--r--  1 1001 1001     49 May 31 21:43 README\ndrwxr-xr-x  9 1001 1001     84 Jun 28 13:58 src\n\n#再看下objs目录下东西吧\n[root@niaoyun49026 objs]# ls -al\ntotal 84\ndrwxr-xr-x 3 root root   119 Jul 15 15:07 .\ndrwxr-xr-x 9 1001 1001  4096 Jul 15 15:14 ..\n-rw-r--r-- 1 root root 16426 Jul 15 15:07 autoconf.err(保存执行过程生产的结果)\n-rw-r--r-- 1 root root 38230 Jul 15 15:07 Makefile(编译使用,和install)\n-rw-r--r-- 1 root root  6719 Jul 15 15:07 ngx_auto_config.h(宏定义)\n-rw-r--r-- 1 root root   657 Jul 15 15:07 ngx_auto_headers.h(宏定义)\n-rw-r--r-- 1 root root  5508 Jul 15 15:07 ngx_modules.c(记录nignx要使用的模块和顺序)\ndrwxr-xr-x 9 root root    84 Jul 15 15:07 src(源码和存放的目标文件)\n#看下src\n[root@niaoyun49026 objs]# ls -al src\ntotal 0\ndrwxr-xr-x 9 root root  84 Jul 15 15:07 .\ndrwxr-xr-x 3 root root 119 Jul 15 15:07 ..\ndrwxr-xr-x 2 root root   6 Jul 15 15:07 core\ndrwxr-xr-x 3 root root  20 Jul 15 15:07 event\ndrwxr-xr-x 4 root root  29 Jul 15 15:07 http\ndrwxr-xr-x 2 root root   6 Jul 15 15:07 mail\ndrwxr-xr-x 2 root root   6 Jul 15 15:07 misc\ndrwxr-xr-x 4 root root  29 Jul 15 15:07 os\ndrwxr-xr-x 2 root root   6 Jul 15 15:07 stream\n\n\n#ngx_modules.c文件记录nginx模块,就是定义ngx_module数组的,下面看下这个文件\n\n[root@niaoyun49026 objs]# cat ngx_modules.c \n#include <ngx_config.h>\n#include <ngx_core.h>\n................(大多了,省略一下)....................................                                                                                                  \nngx_module_t *ngx_modules[] = {\n    &ngx_core_module,\n    &ngx_errlog_module,\n    &ngx_conf_module,\n    &ngx_regex_module,\n    &ngx_events_module,\n    &ngx_event_core_module,\n    &ngx_epoll_module,\n    &ngx_http_module,\n    &ngx_http_core_module,\n    &ngx_http_log_module,\n    &ngx_http_upstream_module,\n    &ngx_http_static_module,\n    &ngx_http_autoindex_module,\n    &ngx_http_index_module,\n    &ngx_http_auth_basic_module,\n    &ngx_http_access_module,\n    &ngx_http_limit_conn_module,\n    &ngx_http_limit_req_module,\n    &ngx_http_geo_module,\n    &ngx_http_map_module,\n    &ngx_http_split_clients_module,\n    &ngx_http_referer_module,\n    &ngx_http_rewrite_module,\n    &ngx_http_proxy_module,\n    &ngx_http_fastcgi_module,\n    &ngx_http_uwsgi_module,\n    &ngx_http_scgi_module,\n    &ngx_http_memcached_module,\n    &ngx_http_empty_gif_module,\n    &ngx_http_browser_module,\n    &ngx_http_upstream_hash_module,\n    &ngx_http_upstream_ip_hash_module,\n    &ngx_http_upstream_least_conn_module,\n    &ngx_http_upstream_keepalive_module,\n    &ngx_http_upstream_zone_module,\n    &ngx_http_write_filter_module,\n    &ngx_http_header_filter_module,\n    &ngx_http_chunked_filter_module,\n    &ngx_http_range_header_filter_module,\n    &ngx_http_gzip_filter_module,\n    &ngx_http_postpone_filter_module,\n    &ngx_http_ssi_filter_module,\n    &ngx_http_charset_filter_module,\n    &ngx_http_userid_filter_module,\n    &ngx_http_headers_filter_module,\n    &ngx_http_copy_filter_module,\n    &ngx_http_range_body_filter_module,\n    &ngx_http_not_modified_filter_module,\n    NULL\n};\n\n#模块名称\nchar *ngx_module_names[] = {\n    \"ngx_core_module\",\n    \"ngx_errlog_module\",\n    \"ngx_conf_module\",\n    \"ngx_regex_module\",\n    \"ngx_events_module\",\n    \"ngx_event_core_module\",\n    \"ngx_epoll_module\",\n    \"ngx_http_module\",\n    \"ngx_http_core_module\",\n    \"ngx_http_log_module\",\n    \"ngx_http_upstream_module\",\n    \"ngx_http_static_module\",\n    \"ngx_http_autoindex_module\",\n    \"ngx_http_index_module\",\n    \"ngx_http_auth_basic_module\",\n    \"ngx_http_access_module\",\n    \"ngx_http_limit_conn_module\",\n    \"ngx_http_limit_req_module\",\n    \"ngx_http_geo_module\",\n    \"ngx_http_map_module\",\n    \"ngx_http_split_clients_module\",\n    \"ngx_http_referer_module\",\n    \"ngx_http_rewrite_module\",\n    \"ngx_http_proxy_module\",\n    \"ngx_http_fastcgi_module\",\n    \"ngx_http_uwsgi_module\",\n    \"ngx_http_scgi_module\",\n    \"ngx_http_memcached_module\",\n    \"ngx_http_empty_gif_module\",\n    \"ngx_http_browser_module\",\n    \"ngx_http_upstream_hash_module\",\n    \"ngx_http_upstream_ip_hash_module\",\n    \"ngx_http_upstream_least_conn_module\",\n    \"ngx_http_upstream_keepalive_module\",\n    \"ngx_http_upstream_zone_module\",\n    \"ngx_http_write_filter_module\",\n    \"ngx_http_header_filter_module\",\n    \"ngx_http_chunked_filter_module\",\n    \"ngx_http_range_header_filter_module\",\n    \"ngx_http_gzip_filter_module\",\n    \"ngx_http_postpone_filter_module\",\n    \"ngx_http_ssi_filter_module\",\n    \"ngx_http_charset_filter_module\",\n    \"ngx_http_userid_filter_module\",\n    \"ngx_http_headers_filter_module\",\n    \"ngx_http_copy_filter_module\",\n    \"ngx_http_range_body_filter_module\",\n    \"ngx_http_not_modified_filter_module\",\n    NULL\n};\n\n{% endcodeblock %}\n\n\n\n\n\n\n\n","source":"_posts/nginx安装分析.md","raw":"---\ntitle: nginx安装分析\ndate: 2016-07-06 23:18:03\ntags: nginx\ncategories: liunx\ncomments: true\n---\n\nnginx的安装分析:\n\n1.安装准备软件\n1)编译工具\n{% codeblock %}\n\tyum install -y gcc\n{% endcodeblock %}\n\ngcc可用于编译c语言.\n{% codeblock %}\n\tyum install -y gcc-c++\n{% endcodeblock %}\n\ng++可用于编译c++\n\n2)依赖库\n\n{% codeblock %}\n\tyum install -y pcre pcre-devel\n{% endcodeblock %}\n\nPCRE是支持perl兼容正则表达式,nginx的http模块来解析正则表达式,很多地方都需要解析正则,所以要将RCRE库编译进nignx\n\npcre-devel是使用PCRE做二次开发时所需要的开发库,包括头文件等,是编译nginx所需要的.\n\n{% codeblock %}\nyum isntall -y zlib zlib-devel\n{% endcodeblock %}\n\nzlib库用于对http包内容做gzip格式的压缩,如果要对http响应包进行gzip压缩,减少网络传输量,就需要将zlib库编译进niginx\n\nzlib-devel 是二次开发所需要的库\n\n{% codeblock %}\nyum install -y opensll openssl-devel\n{% endcodeblock %}\n\nSSL协议上传所需要的库,同时也是md5 sha1等散列函数所需库\n\n......如果还需要安装nginx其他模块,则还要需要安装响应模块所依赖的库......\n\n\n2.安装\n\n解压源码文件得到文件如下:\n{% codeblock %}\n[root@niaoyun49026 nginx-1.11.1]# ls -al\ntotal 676\ndrwxr-xr-x  8 1001 1001    147 Jul 15 14:07 .\ndrwxr-xr-x. 3 root root     25 Jun 28 13:58 ..\ndrwxr-xr-x  6 1001 1001   4096 Jun 28 13:58 auto\n-rw-r--r--  1 1001 1001 264694 May 31 21:43 CHANGES\n-rw-r--r--  1 1001 1001 403645 May 31 21:43 CHANGES.ru\ndrwxr-xr-x  2 1001 1001   4096 Jun 28 13:58 conf\n-rwxr-xr-x  1 1001 1001   2481 May 31 21:43 configure\ndrwxr-xr-x  4 1001 1001     68 Jun 28 13:58 contrib\ndrwxr-xr-x  2 1001 1001     38 Jun 28 13:58 html\n-rw-r--r--  1 1001 1001   1397 May 31 21:43 LICENSE\ndrwxr-xr-x  2 1001 1001     20 Jun 28 13:58 man\n-rw-r--r--  1 1001 1001     49 May 31 21:43 README\ndrwxr-xr-x  9 1001 1001     84 Jun 28 13:58 src\n{% endcodeblock %}\n\n以默认的方式安装就这么简单\n\n{% codeblock %}\n./configure\nmake\nmake install\n{% endcodeblock %}\n\n3.分析\n\n1)configure的命令做了以下工作:\n\n检测操作内核和系统已经安装的软件和库,如果不满足编译条件做出相应的提示\n编译参数的解析(还要分析参数)\n中间目录的生成\n根据编译参数生成一些c源码,Makefile文件等\n\n查看configure的命令参数:\n{% codeblock %}\n./configure --help \n{% endcodeblock %}\n\nconfigure的参数太多了,现在下命令分析:\n\n路径相关参数:\n\n--prefix=PATH :安装目录,默认/usr/local/nginx\n\n--sbin-path=PATH : 可执行文件路径 ,默认<prefx>/sbin/nignx\n\n--conf-path=PATH : 配置文件路径 ,默认<prefx>/conf/nginx.conf\n\n--error-log-path=PATH : error日志路径 ,默认<prefix>/logs/error.log\n\n--pid-path=PATH : pid文件路径,这个文件仅保存ngix master进程ID ,默认<prefix>/logs/nginx.pid\n\n--lock-path=PATH : lock文件路径 ,默认<prefix>/logs/nginx.lock\n\n--builddir=DIR : configure执行时与编译期间产生的临时文件目录,makefile,c文件,目标文件,可执行文件 ,默认<soure path>/objs\n\n--with-perl_modul=PATH : perl module路径,只要使用第三方perl module才需要设置这个路径\n\n\n--with-perl=PATH : perl binary路径,如果配置的niginx会执行perl脚本,就必须设置改路径\n\n--http-log-path=PATH  : access log文件路径 ,默认<prefix>/logs/access.log\n\n--http-client-body-temp-path=PATH : 设置htpp请求包体临时存放的文件路径, 默认<prefix>/client_body_tmp\n\n--http-proxy-temp-path=PATH : 反向代理时http proxy临时文件路径,默认<prefix>/proxy_tmp\n\n--http-fastcgi-temp-path=PATH : fastcgi临时文件路径,默认<prefix>/fastcgi_tmp\n\n--http-uwsgicgi-temp-path=PATH : uwsgicgi临时文件路径,默认<prefix>/uwsgicgi_tmp\n\n--http-scgi-temp-path=PATH : scgi临时文件路径,默认<prefix>/scgi_tmp\n\n编译相关参数:\n\n-with-cc=PATH :  设置C编译器路径\n--with-cpp=PATH : 设置C预处理路径\n--with-cc-opt=OPTIONS :  设置C编译器参数\n--with-ld-opt=OPTIONS : 设置连接文件参数,将某个库链接到nginx中,用户--with-ld-opt=-llibaryName -LlibaryPath\n--with-cpu-opt=CPU : 为指定CPU优化,可选参数有:\n          pentium, pentiumpro, pentium3, pentium4,\n          athlon, opteron, sparc32, sparc64, ppc64\n\n依赖软件相关参数:\npcre库:\n--with-pcre : 强制使用pcre库\n--without-pcre : 不使用pcre库文件\n--with-pcre=DIR : 设定PCRE库路径\n--with-pcre-opt=OPTIONS  : 设置PCRE运行参数\nOpenSSL库:\n--with-openssl=DIR : 设定OpenSSL库文件路径\n--with-openssl-opt=OPTIONS : 设置OpenSSL运行参数\natomic(原子)库:\n--with-libatomic : 强制使用atomic库,该库是cpu架构独立的一种原子操作方式,支持x86,ppc64,sparc6\n--with-libatomic=DIR : atomic库的路径\n散列函数库:\n--with-md5=DIR : 设定md5库文件路径\n--with-md5-opt=OPTIONS  : 设置md5运行参数\n--with-md5-asm : 使用md5源文件编译\n--with-sha1=DIR : 设定sha1库文件路径\n--with-sha1-opt=OPTIONS : 设置sha1运行参数\n--with-sha1-asm : 使用sha1源文件编译\nzlib库:\n--with-zlib=DIR : 设定zlib库文件路径\n--with-zlib-opt=OPTIONS : 设置zlib运行参数\n--with-zlib-asm=CPU : 使zlib对特定的CPU进行优化,可选参数:\n          pentium, pentiumpro\n\n模块相关参数:\n事件模块:\n--with-rtsig_module : 允许rtsig模块,默认不安装\n--with-select_module : 允许select模块(一种轮询模式,不推荐用在高载环境)\n--without-select_module : 不使用select模块\n--with-poll_module : 允许poll模块(一种轮询模式,不推荐用在高载环境)\n--without-poll_module : 不使用poll模块\n--with-aio_module : 使用aio模块\nHTTP模块:\n默认编译进的http模块:\n\n--without-http_charset_module : 不使用ngx_http_charset_module模块  该模块可以将服务器发出的http响应重编码\n--without-http_gzip_module :  不使用ngx_http_gzip_module模块,该模块根据配置文件指定的conten_type对特定的http响应包进行gzip压缩\n--without-http_ssi_module :  不使用ngx_http_ssi_module模块,该模块可以在http响应包体中加入指定内容\n--without-http_userid_module : 不使用ngx_http_userid_module模块,该模块可以通过http请求的头部信息里的一些字段认证用户信息,以便确认请求合法性\n--without-http_access_module : 不使用ngx_http_access_module模块,该模块可以通过ip地址限制是否能访问\n--without-http_auth_basic_module : 不使用ngx_http_auth_basic_module模块,该模块提供最简单的用户名密码认证\n--without-http_autoindex_module : 不使用ngx_http_autoindex_module模块,该模块提供简单的目录浏览功能呢\n--without-http_geo_module : 不使用ngx_http_geo_module模块,该模块可以定义一些变量,这些变量的值将与客户端ip关联,这些nginx可以通过该不同变量做出不同的处理\n--without-http_map_module : 不使用ngx_http_map_module模块,该模块可以建立一个key/value的映射表,这样可以针对不同的url做特殊处理.\n--without-http_referer_module : 不使用ngx_http_referer_module模块,该模块可以根据请求的referer字段来拒接请求\n--without-http_rewrite_module : 不使用ngx_http_rewrite_module模块,该模块可以提供http请求在nginx内部的重定向的功能,需要依赖pcre库\n--without-http_proxy_module : 不使用ngx_http_proxy_module模块,该模块提供基本http反向代理功能\n--without-http_fastcgi_module : 不使用ngx_http_fastcgi_module模块,该模块提供fastcgi功能\n--without-http_memcached_module : 不使用ngx_http_memcached_module模块,该模块可以使nginx直接由上游的memcached服务读取数据,并简单的适配成http响应返回给客户端\n--without-http_limit_zone_module : 不使用ngx_http_limit_zone_module模块,该模块可以针对某个ip地址限制并发直连接数\n--without-http_empty_gif_module : 不使用ngx_http_empty_gif_module模块,该模块可以使得nginx收到无效请求时,立刻返回内存中1*1像素的gif图片.对于无效请求不会浪费服务器资源\n--without-http_browser_module : 不使用ngx_http_browser_module模块,该模块会根据http请求中的user_agent字段来识别浏览器\n--without-http_upstream_ip_hash_module : 不使用ngx_http_upstream_ip_hash_module模块,该模块提供当nginx与后端server建立连接时,可以根据ip做散列运算来决定会与哪个后端服务器通讯,这样就可以实现负载均衡\n\n\n默认不编译进的http模块:\n\n--with-http_ssl_module : 允许ngx_http_ssl_module模块 ,该模块是nginx支持ssl协议,提供https服务\n--with-http_realip_module 允许ngx_http_realip_module模块,该模块可以从客户端请求的header信息中获取真正的ip地址\n--with-http_addition_module 允许ngx_http_addition_module模块,该模块提供在返回客户端的http包体头部或者尾部增加内容\n--with-http_xslt_module 允许ngx_http_xslt_module模块,该模块提供xml格式的数据在发给客户端前加入xsl渲染,依赖libxml2库和libxslt库\n--with-http_image_filter_module : 安装http_image_filter_module模块,该模块提供将符合配置的图片实时压缩为指定大小的缩列图后再发给用户,依赖libgd库\n--with-http_geoip_module 安装http_geoi_module模块,该模块提供可以根据MaxMind GeoIp的IP地址数据库对客户端的ip地址得到的实际的地理位置信息,依赖MaxMind GeoIP的库文件\n--with-http_sub_module 允许ngx_http_sub_module模块,该模块可以在返回给客户端的http响应包中将指定的字符串替换为自己的字符串\n--with-http_dav_module 允许ngx_http_dav_module模块,该模块可以让nginx支持webdav标准(PUT,DELETED,COPY,MOVE,MKCOL等)\n--with-http_flv_module 允许ngx_http_flv_module模块,该模块是的nginx可以在返回flv格式的视频文件时在header头做一些出来,是的客户端可以直接观看\n--with-http_mp4_module 允许ngx_http_mp4_module模块,该模块是的nginx可以在返回mp4格式的视频文件时在header头做一些出来,是的客户端可以直接观看\n--with-http_gzip_static_module 允许ngx_http_gzip_static_module模块,如果使用gizp模块对响应的文档进行gizp格式返回给客户端,那个这个文档就会每次都压缩,所以该模块的作用是压缩的文档缓存起来,如果下次请求一样的文档就直接返回文档,提高响应速度和减少对服务器资料的消耗.\n--with-http_random_index_module 允许ngx_http_random_index_module模块,该模块的作用是,当客户端访问某个目录时,,随机返回该目录下任意文件.\n--with-http_stub_status_module 允许ngx_http_stub_status_module模块,该模块可以让给nginx提高性能统计的页面,获得相关的并发连接,请求的信息\n--with-google_perftools_module 允许ngx_google_perftools_module模块,该模块提供google的性能测试工具\n\n邮件代理服务器相关的mail模块参数:\n-with-mail  安装邮件服务器反向代理模块.是nginx可以反向代理POP3/IMAP4/SMTP等协议,默认不安装\n--with-mail_ssl_module 允许ngx_mail_ssl_module模块,该模块可以使IMAP,POP3,SMTP等协议基于SSL/TLS协议上使用.默认不安装,不依赖openSSL库\n--without-mail_pop3_module 不允许ngx_mail_pop3_module模块,使用--with-mail参数后,该模块默认安装\n--without-mail_imap_module 不允许ngx_mail_imap_module模块,使用--with-mail参数后,该模块默认安装\n--without-mail_smtp_module 不允许ngx_mail_smtp_module模块,使用--with-mail参数后,该模块默认安装\n\n\n其他参数:\n--with-debug : 调试日志,将nginx需要打印debug调试级别的日志的代码编译进nginx\n--add-module=PATH 允许使用外部模块,以及路径,通过这个参数指定第三方模块的路径\n--without-http 不使用HTTP server功能,禁用http服务器\n--without-http-cache : 禁用http服务器里面的缓存cache特性\n--with-file-aio : 启用文件的异步I\\O功能来处理磁盘文件,需要liunx内核支持原声的异步I/O\n--with-ipv6 : 使nignx支持IPv6\n--user=USER 设定程序运行的用户环境(www)\n--group=GROUP 设定程序运行的组环境(www)\n\n注意:nginx编译时不是功能加的越多越好，应该尽可能少编译模块，不用的最好不要加入。\n\n编译好的nginx可通过 /usr/local/nginx/sbin/nginx -V 查看编译时的参数\n\n\n2)make命令就是根据configure生成的Makefile文件编译nginx,并生成目标文件&二进制文件\n\n\n3)make install命令就是将编译好的文件和目录根据编译的设置保存到相应目录\n\n4.configure脚本\n看下该脚本分析一下:\n{% codeblock %}\n#!/bin/sh\n\n# Copyright (C) Igor Sysoev\n# Copyright (C) Nginx, Inc.\n\n\nLC_ALL=C\nexport LC_ALL\n\n#options脚本会处理传给configure的参数和根据参数定义后续所需要的变量.\n. auto/options\n#init脚本初始化后续将产生的文件路径\n. auto/init\n#sourdes脚本分析nginx的源码结构,为后续构造makefile文件准备\n. auto/sources\n\n#创建目标文件路径\ntest -d $NGX_OBJS || mkdir -p $NGX_OBJS\n#开始准备建立nginx_auto_hearders.h,autoconf.err等必要文件\necho > $NGX_AUTO_HEADERS_H\necho > $NGX_AUTOCONF_ERR\n#往objs/niginx_auto_config.h写入命令行带的参数\necho \"#define NGX_CONFIGURE \\\"$NGX_CONFIGURE\\\"\" > $NGX_AUTO_CONFIG_H\n\n#如果有debug标志位,就将objs/nginx_auto_config.h文件写入debug相关的宏定义\nif [ $NGX_DEBUG = YES ]; then\n    have=NGX_DEBUG . auto/have\nfi\n\n#获取操作系统参数,检查编译的操作系统参数是否支持编译\nif test -z \"$NGX_PLATFORM\"; then\n    echo \"checking for OS\"\n    #获取操作系统名称\n    NGX_SYSTEM=`uname -s 2>/dev/null`\n    #获取操作系统内核版本\n    NGX_RELEASE=`uname -r 2>/dev/null`\n    #获取操作系统是32位/还是64位的内核\n    NGX_MACHINE=`uname -m 2>/dev/null`\n    #输出获取的操作系统结果\n    echo \" + $NGX_SYSTEM $NGX_RELEASE $NGX_MACHINE\"\n\n    NGX_PLATFORM=\"$NGX_SYSTEM:$NGX_RELEASE:$NGX_MACHINE\";\n\n    case \"$NGX_SYSTEM\" in\n        MINGW32_*)\n            NGX_PLATFORM=win32\n        ;;\n    esac\n\nelse\n    echo \"building for $NGX_PLATFORM\"\n    NGX_SYSTEM=$NGX_PLATFORM\nfi\n#检查并设置编译器,检查gcc是否安装和支持\n. auto/cc/conf\n#对于非windows操作系统定义一些必要的头文件\nif [ \"$NGX_PLATFORM\" != win32 ]; then\n    . auto/headers\nfi\n#对于目前的操作系统环境检查检查和定义一些特定的操作系统相关的方法和变量\n. auto/os/conf\n#定义类unix操作系统中通用的头文件和系统调用等,同时检查当前系统环境\nif [ \"$NGX_PLATFORM\" != win32 ]; then\n    . auto/unix\nfi\n\n. auto/threads\n#定义ngx_modulues数组,生产ngx_moduloes.c文件,定义nginx需要用到的模块,ngx_modules数组的先后顺序非常重要,同时如果使用了--add-module=参数加入的模块,也会在这里面\n. auto/modules\n#检查nginx在链接期间需要的链接的第三方静态库,动态库或者目标文件是否存在\n. auto/lib/conf\n#处理编译安装后的路径设置\ncase \".$NGX_PREFIX\" in\n    .)\n        NGX_PREFIX=${NGX_PREFIX:-/usr/local/nginx}\n        have=NGX_PREFIX value=\"\\\"$NGX_PREFIX/\\\"\" . auto/define\n    ;;\n\n    .!)\n        NGX_PREFIX=\n    ;;\n\n    *)\n        have=NGX_PREFIX value=\"\\\"$NGX_PREFIX/\\\"\" . auto/define\n    ;;\nesac\n#处理编译安装后的配置文件路径设置\nif [ \".$NGX_CONF_PREFIX\" != \".\" ]; then\n    have=NGX_CONF_PREFIX value=\"\\\"$NGX_CONF_PREFIX/\\\"\" . auto/define\nfi\n#处理编译安装后的,二进制文件,pid,lock等文件的路径设置\nhave=NGX_SBIN_PATH value=\"\\\"$NGX_SBIN_PATH\\\"\" . auto/define\nhave=NGX_CONF_PATH value=\"\\\"$NGX_CONF_PATH\\\"\" . auto/define\nhave=NGX_PID_PATH value=\"\\\"$NGX_PID_PATH\\\"\" . auto/define\nhave=NGX_LOCK_PATH value=\"\\\"$NGX_LOCK_PATH\\\"\" . auto/define\nhave=NGX_ERROR_LOG_PATH value=\"\\\"$NGX_ERROR_LOG_PATH\\\"\" . auto/define\n\nhave=NGX_HTTP_LOG_PATH value=\"\\\"$NGX_HTTP_LOG_PATH\\\"\" . auto/define\nhave=NGX_HTTP_CLIENT_TEMP_PATH value=\"\\\"$NGX_HTTP_CLIENT_TEMP_PATH\\\"\"\n. auto/define\nhave=NGX_HTTP_PROXY_TEMP_PATH value=\"\\\"$NGX_HTTP_PROXY_TEMP_PATH\\\"\"\n. auto/define\nhave=NGX_HTTP_FASTCGI_TEMP_PATH value=\"\\\"$NGX_HTTP_FASTCGI_TEMP_PATH\\\"\"\n. auto/define\nhave=NGX_HTTP_UWSGI_TEMP_PATH value=\"\\\"$NGX_HTTP_UWSGI_TEMP_PATH\\\"\"\n. auto/define\nhave=NGX_HTTP_SCGI_TEMP_PATH value=\"\\\"$NGX_HTTP_SCGI_TEMP_PATH\\\"\"\n. auto/define\n#创建编译时需要的makefile文件\n. auto/make\n#为makefile文件加入需要的连接的第三方静态库,动态库或者目标文件\n. auto/lib/make\n#为makefile文件加入install功能,将编译成功的文件复制到安装路径\n. auto/install\n\n# STUB,在nginx_auto_config.h文件中加入NGX_SUPPRESS_WARN宏和 NGX_SMP宏\n. auto/stubs\n#在nginx_auto_config.h文件中加入NGX_USER宏和 NGX_GROUP\t宏,如果没有使用--with-user||--with-group参数时默认两者都为nobody\nhave=NGX_USER value=\"\\\"$NGX_USER\\\"\" . auto/define\nhave=NGX_GROUP value=\"\\\"$NGX_GROUP\\\"\" . auto/define\n\nif [ \".$NGX_BUILD\" != \".\" ]; then\n    have=NGX_BUILD value=\"\\\"$NGX_BUILD\\\"\" . auto/define\nfi\n#打印configure脚本执行结果,如果有错误则返回错误提示\n. auto/summary\n\n{% endcodeblock %}\n\n\n5.记录安装:\n\n{% codeblock %}\n\n[root@niaoyun49026 nginx-1.11.1]# yum -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel opensll openssl-devel\nLoaded plugins: fastestmirror\nNo such command: gcc. Please use /usr/bin/yum --help\n[root@niaoyun49026 nginx-1.11.1]# yum  install -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel opensll openssl-devel\nLoaded plugins: fastestmirror\n.................(大多了,省略一下)....................................\nPackage gcc-4.8.5-4.el7.x86_64 already installed and latest version\nPackage gcc-c++-4.8.5-4.el7.x86_64 already installed and latest version\nPackage pcre-8.32-15.el7_2.1.x86_64 already installed and latest version\nPackage zlib-1.2.7-15.el7.x86_64 already installed and latest version\n.................(大多了,省略一下)....................................                                                                                                  \nInstalled:\n  openssl-devel.x86_64 1:1.0.1e-51.el7_2.5                        pcre-devel.x86_64 0:8.32-15.el7_2.1                        zlib-devel.x86_64 0:1.2.7-15.el7                       \n\nDependency Installed:\n  keyutils-libs-devel.x86_64 0:1.5.8-3.el7       krb5-devel.x86_64 0:1.13.2-12.el7_2       libcom_err-devel.x86_64 0:1.42.9-7.el7       libselinux-devel.x86_64 0:2.2.2-6.el7      \n  libsepol-devel.x86_64 0:2.1.9-3.el7            libverto-devel.x86_64 0:0.2.5-4.el7      \n\nComplete!\n\n#基本必须库已经安装完了,下面执行configure 脚本\n[root@niaoyun49026 nginx-1.11.1]# ./configure \nchecking for OS\n + Linux 3.10.0-123.el7.x86_64 x86_64\nchecking for C compiler ... found\n + using GNU C compiler\n + gcc version: 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC) \nchecking for gcc -pipe switch ... found\n................(大多了,省略一下)....................................                                                                                                  \ncreating objs/Makefile\n\nConfiguration summary\n  + using system PCRE library\n  + OpenSSL library is not used\n  + md5: using system crypto library\n  + sha1: using system crypto library\n  + using system zlib library\n\n  nginx path prefix: \"/usr/local/nginx\"\n  nginx binary file: \"/usr/local/nginx/sbin/nginx\"\n  nginx modules path: \"/usr/local/nginx/modules\"\n  nginx configuration prefix: \"/usr/local/nginx/conf\"\n  nginx configuration file: \"/usr/local/nginx/conf/nginx.conf\"\n  nginx pid file: \"/usr/local/nginx/logs/nginx.pid\"\n  nginx error log file: \"/usr/local/nginx/logs/error.log\"\n  nginx http access log file: \"/usr/local/nginx/logs/access.log\"\n  nginx http client request body temporary files: \"client_body_temp\"\n  nginx http proxy temporary files: \"proxy_temp\"\n  nginx http fastcgi temporary files: \"fastcgi_temp\"\n  nginx http uwsgi temporary files: \"uwsgi_temp\"\n  nginx http scgi temporary files: \"scgi_temp\"\n\n#执行confgrue脚本后,多了Makefile文件和objs目录\n[root@niaoyun49026 nginx-1.11.1]# ls -al\ntotal 684\ndrwxr-xr-x  9 1001 1001   4096 Jul 15 15:07 .\ndrwxr-xr-x. 3 root root     25 Jun 28 13:58 ..\ndrwxr-xr-x  6 1001 1001   4096 Jun 28 13:58 auto\n-rw-r--r--  1 1001 1001 264694 May 31 21:43 CHANGES\n-rw-r--r--  1 1001 1001 403645 May 31 21:43 CHANGES.ru\ndrwxr-xr-x  2 1001 1001   4096 Jun 28 13:58 conf\n-rwxr-xr-x  1 1001 1001   2481 May 31 21:43 configure\ndrwxr-xr-x  4 1001 1001     68 Jun 28 13:58 contrib\ndrwxr-xr-x  2 1001 1001     38 Jun 28 13:58 html\n-rw-r--r--  1 1001 1001   1397 May 31 21:43 LICENSE\n-rw-r--r--  1 root root    376 Jul 15 15:07 Makefile(这里的makefile的功能都是调用objs/Makefile的)\ndrwxr-xr-x  2 1001 1001     20 Jun 28 13:58 man\ndrwxr-xr-x  3 root root    119 Jul 15 15:07 objs\n-rw-r--r--  1 1001 1001     49 May 31 21:43 README\ndrwxr-xr-x  9 1001 1001     84 Jun 28 13:58 src\n\n#再看下objs目录下东西吧\n[root@niaoyun49026 objs]# ls -al\ntotal 84\ndrwxr-xr-x 3 root root   119 Jul 15 15:07 .\ndrwxr-xr-x 9 1001 1001  4096 Jul 15 15:14 ..\n-rw-r--r-- 1 root root 16426 Jul 15 15:07 autoconf.err(保存执行过程生产的结果)\n-rw-r--r-- 1 root root 38230 Jul 15 15:07 Makefile(编译使用,和install)\n-rw-r--r-- 1 root root  6719 Jul 15 15:07 ngx_auto_config.h(宏定义)\n-rw-r--r-- 1 root root   657 Jul 15 15:07 ngx_auto_headers.h(宏定义)\n-rw-r--r-- 1 root root  5508 Jul 15 15:07 ngx_modules.c(记录nignx要使用的模块和顺序)\ndrwxr-xr-x 9 root root    84 Jul 15 15:07 src(源码和存放的目标文件)\n#看下src\n[root@niaoyun49026 objs]# ls -al src\ntotal 0\ndrwxr-xr-x 9 root root  84 Jul 15 15:07 .\ndrwxr-xr-x 3 root root 119 Jul 15 15:07 ..\ndrwxr-xr-x 2 root root   6 Jul 15 15:07 core\ndrwxr-xr-x 3 root root  20 Jul 15 15:07 event\ndrwxr-xr-x 4 root root  29 Jul 15 15:07 http\ndrwxr-xr-x 2 root root   6 Jul 15 15:07 mail\ndrwxr-xr-x 2 root root   6 Jul 15 15:07 misc\ndrwxr-xr-x 4 root root  29 Jul 15 15:07 os\ndrwxr-xr-x 2 root root   6 Jul 15 15:07 stream\n\n\n#ngx_modules.c文件记录nginx模块,就是定义ngx_module数组的,下面看下这个文件\n\n[root@niaoyun49026 objs]# cat ngx_modules.c \n#include <ngx_config.h>\n#include <ngx_core.h>\n................(大多了,省略一下)....................................                                                                                                  \nngx_module_t *ngx_modules[] = {\n    &ngx_core_module,\n    &ngx_errlog_module,\n    &ngx_conf_module,\n    &ngx_regex_module,\n    &ngx_events_module,\n    &ngx_event_core_module,\n    &ngx_epoll_module,\n    &ngx_http_module,\n    &ngx_http_core_module,\n    &ngx_http_log_module,\n    &ngx_http_upstream_module,\n    &ngx_http_static_module,\n    &ngx_http_autoindex_module,\n    &ngx_http_index_module,\n    &ngx_http_auth_basic_module,\n    &ngx_http_access_module,\n    &ngx_http_limit_conn_module,\n    &ngx_http_limit_req_module,\n    &ngx_http_geo_module,\n    &ngx_http_map_module,\n    &ngx_http_split_clients_module,\n    &ngx_http_referer_module,\n    &ngx_http_rewrite_module,\n    &ngx_http_proxy_module,\n    &ngx_http_fastcgi_module,\n    &ngx_http_uwsgi_module,\n    &ngx_http_scgi_module,\n    &ngx_http_memcached_module,\n    &ngx_http_empty_gif_module,\n    &ngx_http_browser_module,\n    &ngx_http_upstream_hash_module,\n    &ngx_http_upstream_ip_hash_module,\n    &ngx_http_upstream_least_conn_module,\n    &ngx_http_upstream_keepalive_module,\n    &ngx_http_upstream_zone_module,\n    &ngx_http_write_filter_module,\n    &ngx_http_header_filter_module,\n    &ngx_http_chunked_filter_module,\n    &ngx_http_range_header_filter_module,\n    &ngx_http_gzip_filter_module,\n    &ngx_http_postpone_filter_module,\n    &ngx_http_ssi_filter_module,\n    &ngx_http_charset_filter_module,\n    &ngx_http_userid_filter_module,\n    &ngx_http_headers_filter_module,\n    &ngx_http_copy_filter_module,\n    &ngx_http_range_body_filter_module,\n    &ngx_http_not_modified_filter_module,\n    NULL\n};\n\n#模块名称\nchar *ngx_module_names[] = {\n    \"ngx_core_module\",\n    \"ngx_errlog_module\",\n    \"ngx_conf_module\",\n    \"ngx_regex_module\",\n    \"ngx_events_module\",\n    \"ngx_event_core_module\",\n    \"ngx_epoll_module\",\n    \"ngx_http_module\",\n    \"ngx_http_core_module\",\n    \"ngx_http_log_module\",\n    \"ngx_http_upstream_module\",\n    \"ngx_http_static_module\",\n    \"ngx_http_autoindex_module\",\n    \"ngx_http_index_module\",\n    \"ngx_http_auth_basic_module\",\n    \"ngx_http_access_module\",\n    \"ngx_http_limit_conn_module\",\n    \"ngx_http_limit_req_module\",\n    \"ngx_http_geo_module\",\n    \"ngx_http_map_module\",\n    \"ngx_http_split_clients_module\",\n    \"ngx_http_referer_module\",\n    \"ngx_http_rewrite_module\",\n    \"ngx_http_proxy_module\",\n    \"ngx_http_fastcgi_module\",\n    \"ngx_http_uwsgi_module\",\n    \"ngx_http_scgi_module\",\n    \"ngx_http_memcached_module\",\n    \"ngx_http_empty_gif_module\",\n    \"ngx_http_browser_module\",\n    \"ngx_http_upstream_hash_module\",\n    \"ngx_http_upstream_ip_hash_module\",\n    \"ngx_http_upstream_least_conn_module\",\n    \"ngx_http_upstream_keepalive_module\",\n    \"ngx_http_upstream_zone_module\",\n    \"ngx_http_write_filter_module\",\n    \"ngx_http_header_filter_module\",\n    \"ngx_http_chunked_filter_module\",\n    \"ngx_http_range_header_filter_module\",\n    \"ngx_http_gzip_filter_module\",\n    \"ngx_http_postpone_filter_module\",\n    \"ngx_http_ssi_filter_module\",\n    \"ngx_http_charset_filter_module\",\n    \"ngx_http_userid_filter_module\",\n    \"ngx_http_headers_filter_module\",\n    \"ngx_http_copy_filter_module\",\n    \"ngx_http_range_body_filter_module\",\n    \"ngx_http_not_modified_filter_module\",\n    NULL\n};\n\n{% endcodeblock %}\n\n\n\n\n\n\n\n","slug":"nginx安装分析","published":1,"updated":"2017-03-01T02:52:32.000Z","layout":"post","photos":[],"link":"","_id":"cizqeielx000dznz41z2zmyus","content":"<p>nginx的安装分析:</p>\n<p>1.安装准备软件<br>1)编译工具<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y gcc</div></pre></td></tr></table></figure></p>\n<p>gcc可用于编译c语言.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y gcc-c++</div></pre></td></tr></table></figure></p>\n<p>g++可用于编译c++</p>\n<p>2)依赖库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y pcre pcre-devel</div></pre></td></tr></table></figure>\n<p>PCRE是支持perl兼容正则表达式,nginx的http模块来解析正则表达式,很多地方都需要解析正则,所以要将RCRE库编译进nignx</p>\n<p>pcre-devel是使用PCRE做二次开发时所需要的开发库,包括头文件等,是编译nginx所需要的.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum isntall -y zlib zlib-devel</div></pre></td></tr></table></figure>\n<p>zlib库用于对http包内容做gzip格式的压缩,如果要对http响应包进行gzip压缩,减少网络传输量,就需要将zlib库编译进niginx</p>\n<p>zlib-devel 是二次开发所需要的库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y opensll openssl-devel</div></pre></td></tr></table></figure>\n<p>SSL协议上传所需要的库,同时也是md5 sha1等散列函数所需库</p>\n<p>……如果还需要安装nginx其他模块,则还要需要安装响应模块所依赖的库……</p>\n<p>2.安装</p>\n<p>解压源码文件得到文件如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@niaoyun49026 nginx-1.11.1]# ls -al</div><div class=\"line\">total 676</div><div class=\"line\">drwxr-xr-x  8 1001 1001    147 Jul 15 14:07 .</div><div class=\"line\">drwxr-xr-x. 3 root root     25 Jun 28 13:58 ..</div><div class=\"line\">drwxr-xr-x  6 1001 1001   4096 Jun 28 13:58 auto</div><div class=\"line\">-rw-r--r--  1 1001 1001 264694 May 31 21:43 CHANGES</div><div class=\"line\">-rw-r--r--  1 1001 1001 403645 May 31 21:43 CHANGES.ru</div><div class=\"line\">drwxr-xr-x  2 1001 1001   4096 Jun 28 13:58 conf</div><div class=\"line\">-rwxr-xr-x  1 1001 1001   2481 May 31 21:43 configure</div><div class=\"line\">drwxr-xr-x  4 1001 1001     68 Jun 28 13:58 contrib</div><div class=\"line\">drwxr-xr-x  2 1001 1001     38 Jun 28 13:58 html</div><div class=\"line\">-rw-r--r--  1 1001 1001   1397 May 31 21:43 LICENSE</div><div class=\"line\">drwxr-xr-x  2 1001 1001     20 Jun 28 13:58 man</div><div class=\"line\">-rw-r--r--  1 1001 1001     49 May 31 21:43 README</div><div class=\"line\">drwxr-xr-x  9 1001 1001     84 Jun 28 13:58 src</div></pre></td></tr></table></figure></p>\n<p>以默认的方式安装就这么简单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure</div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure>\n<p>3.分析</p>\n<p>1)configure的命令做了以下工作:</p>\n<p>检测操作内核和系统已经安装的软件和库,如果不满足编译条件做出相应的提示<br>编译参数的解析(还要分析参数)<br>中间目录的生成<br>根据编译参数生成一些c源码,Makefile文件等</p>\n<p>查看configure的命令参数:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --help </div></pre></td></tr></table></figure></p>\n<p>configure的参数太多了,现在下命令分析:</p>\n<p>路径相关参数:</p>\n<p>–prefix=PATH :安装目录,默认/usr/local/nginx</p>\n<p>–sbin-path=PATH : 可执行文件路径 ,默认<prefx>/sbin/nignx</prefx></p>\n<p>–conf-path=PATH : 配置文件路径 ,默认<prefx>/conf/nginx.conf</prefx></p>\n<p>–error-log-path=PATH : error日志路径 ,默认<prefix>/logs/error.log</prefix></p>\n<p>–pid-path=PATH : pid文件路径,这个文件仅保存ngix master进程ID ,默认<prefix>/logs/nginx.pid</prefix></p>\n<p>–lock-path=PATH : lock文件路径 ,默认<prefix>/logs/nginx.lock</prefix></p>\n<p>–builddir=DIR : configure执行时与编译期间产生的临时文件目录,makefile,c文件,目标文件,可执行文件 ,默认<soure path=\"\">/objs</soure></p>\n<p>–with-perl_modul=PATH : perl module路径,只要使用第三方perl module才需要设置这个路径</p>\n<p>–with-perl=PATH : perl binary路径,如果配置的niginx会执行perl脚本,就必须设置改路径</p>\n<p>–http-log-path=PATH  : access log文件路径 ,默认<prefix>/logs/access.log</prefix></p>\n<p>–http-client-body-temp-path=PATH : 设置htpp请求包体临时存放的文件路径, 默认<prefix>/client_body_tmp</prefix></p>\n<p>–http-proxy-temp-path=PATH : 反向代理时http proxy临时文件路径,默认<prefix>/proxy_tmp</prefix></p>\n<p>–http-fastcgi-temp-path=PATH : fastcgi临时文件路径,默认<prefix>/fastcgi_tmp</prefix></p>\n<p>–http-uwsgicgi-temp-path=PATH : uwsgicgi临时文件路径,默认<prefix>/uwsgicgi_tmp</prefix></p>\n<p>–http-scgi-temp-path=PATH : scgi临时文件路径,默认<prefix>/scgi_tmp</prefix></p>\n<p>编译相关参数:</p>\n<p>-with-cc=PATH :  设置C编译器路径<br>–with-cpp=PATH : 设置C预处理路径<br>–with-cc-opt=OPTIONS :  设置C编译器参数<br>–with-ld-opt=OPTIONS : 设置连接文件参数,将某个库链接到nginx中,用户–with-ld-opt=-llibaryName -LlibaryPath<br>–with-cpu-opt=CPU : 为指定CPU优化,可选参数有:<br>          pentium, pentiumpro, pentium3, pentium4,<br>          athlon, opteron, sparc32, sparc64, ppc64</p>\n<p>依赖软件相关参数:<br>pcre库:<br>–with-pcre : 强制使用pcre库<br>–without-pcre : 不使用pcre库文件<br>–with-pcre=DIR : 设定PCRE库路径<br>–with-pcre-opt=OPTIONS  : 设置PCRE运行参数<br>OpenSSL库:<br>–with-openssl=DIR : 设定OpenSSL库文件路径<br>–with-openssl-opt=OPTIONS : 设置OpenSSL运行参数<br>atomic(原子)库:<br>–with-libatomic : 强制使用atomic库,该库是cpu架构独立的一种原子操作方式,支持x86,ppc64,sparc6<br>–with-libatomic=DIR : atomic库的路径<br>散列函数库:<br>–with-md5=DIR : 设定md5库文件路径<br>–with-md5-opt=OPTIONS  : 设置md5运行参数<br>–with-md5-asm : 使用md5源文件编译<br>–with-sha1=DIR : 设定sha1库文件路径<br>–with-sha1-opt=OPTIONS : 设置sha1运行参数<br>–with-sha1-asm : 使用sha1源文件编译<br>zlib库:<br>–with-zlib=DIR : 设定zlib库文件路径<br>–with-zlib-opt=OPTIONS : 设置zlib运行参数<br>–with-zlib-asm=CPU : 使zlib对特定的CPU进行优化,可选参数:<br>          pentium, pentiumpro</p>\n<p>模块相关参数:<br>事件模块:<br>–with-rtsig_module : 允许rtsig模块,默认不安装<br>–with-select_module : 允许select模块(一种轮询模式,不推荐用在高载环境)<br>–without-select_module : 不使用select模块<br>–with-poll_module : 允许poll模块(一种轮询模式,不推荐用在高载环境)<br>–without-poll_module : 不使用poll模块<br>–with-aio_module : 使用aio模块<br>HTTP模块:<br>默认编译进的http模块:</p>\n<p>–without-http_charset_module : 不使用ngx_http_charset_module模块  该模块可以将服务器发出的http响应重编码<br>–without-http_gzip_module :  不使用ngx_http_gzip_module模块,该模块根据配置文件指定的conten_type对特定的http响应包进行gzip压缩<br>–without-http_ssi_module :  不使用ngx_http_ssi_module模块,该模块可以在http响应包体中加入指定内容<br>–without-http_userid_module : 不使用ngx_http_userid_module模块,该模块可以通过http请求的头部信息里的一些字段认证用户信息,以便确认请求合法性<br>–without-http_access_module : 不使用ngx_http_access_module模块,该模块可以通过ip地址限制是否能访问<br>–without-http_auth_basic_module : 不使用ngx_http_auth_basic_module模块,该模块提供最简单的用户名密码认证<br>–without-http_autoindex_module : 不使用ngx_http_autoindex_module模块,该模块提供简单的目录浏览功能呢<br>–without-http_geo_module : 不使用ngx_http_geo_module模块,该模块可以定义一些变量,这些变量的值将与客户端ip关联,这些nginx可以通过该不同变量做出不同的处理<br>–without-http_map_module : 不使用ngx_http_map_module模块,该模块可以建立一个key/value的映射表,这样可以针对不同的url做特殊处理.<br>–without-http_referer_module : 不使用ngx_http_referer_module模块,该模块可以根据请求的referer字段来拒接请求<br>–without-http_rewrite_module : 不使用ngx_http_rewrite_module模块,该模块可以提供http请求在nginx内部的重定向的功能,需要依赖pcre库<br>–without-http_proxy_module : 不使用ngx_http_proxy_module模块,该模块提供基本http反向代理功能<br>–without-http_fastcgi_module : 不使用ngx_http_fastcgi_module模块,该模块提供fastcgi功能<br>–without-http_memcached_module : 不使用ngx_http_memcached_module模块,该模块可以使nginx直接由上游的memcached服务读取数据,并简单的适配成http响应返回给客户端<br>–without-http_limit_zone_module : 不使用ngx_http_limit_zone_module模块,该模块可以针对某个ip地址限制并发直连接数<br>–without-http_empty_gif_module : 不使用ngx_http_empty_gif_module模块,该模块可以使得nginx收到无效请求时,立刻返回内存中1*1像素的gif图片.对于无效请求不会浪费服务器资源<br>–without-http_browser_module : 不使用ngx_http_browser_module模块,该模块会根据http请求中的user_agent字段来识别浏览器<br>–without-http_upstream_ip_hash_module : 不使用ngx_http_upstream_ip_hash_module模块,该模块提供当nginx与后端server建立连接时,可以根据ip做散列运算来决定会与哪个后端服务器通讯,这样就可以实现负载均衡</p>\n<p>默认不编译进的http模块:</p>\n<p>–with-http_ssl_module : 允许ngx_http_ssl_module模块 ,该模块是nginx支持ssl协议,提供https服务<br>–with-http_realip_module 允许ngx_http_realip_module模块,该模块可以从客户端请求的header信息中获取真正的ip地址<br>–with-http_addition_module 允许ngx_http_addition_module模块,该模块提供在返回客户端的http包体头部或者尾部增加内容<br>–with-http_xslt_module 允许ngx_http_xslt_module模块,该模块提供xml格式的数据在发给客户端前加入xsl渲染,依赖libxml2库和libxslt库<br>–with-http_image_filter_module : 安装http_image_filter_module模块,该模块提供将符合配置的图片实时压缩为指定大小的缩列图后再发给用户,依赖libgd库<br>–with-http_geoip_module 安装http_geoi_module模块,该模块提供可以根据MaxMind GeoIp的IP地址数据库对客户端的ip地址得到的实际的地理位置信息,依赖MaxMind GeoIP的库文件<br>–with-http_sub_module 允许ngx_http_sub_module模块,该模块可以在返回给客户端的http响应包中将指定的字符串替换为自己的字符串<br>–with-http_dav_module 允许ngx_http_dav_module模块,该模块可以让nginx支持webdav标准(PUT,DELETED,COPY,MOVE,MKCOL等)<br>–with-http_flv_module 允许ngx_http_flv_module模块,该模块是的nginx可以在返回flv格式的视频文件时在header头做一些出来,是的客户端可以直接观看<br>–with-http_mp4_module 允许ngx_http_mp4_module模块,该模块是的nginx可以在返回mp4格式的视频文件时在header头做一些出来,是的客户端可以直接观看<br>–with-http_gzip_static_module 允许ngx_http_gzip_static_module模块,如果使用gizp模块对响应的文档进行gizp格式返回给客户端,那个这个文档就会每次都压缩,所以该模块的作用是压缩的文档缓存起来,如果下次请求一样的文档就直接返回文档,提高响应速度和减少对服务器资料的消耗.<br>–with-http_random_index_module 允许ngx_http_random_index_module模块,该模块的作用是,当客户端访问某个目录时,,随机返回该目录下任意文件.<br>–with-http_stub_status_module 允许ngx_http_stub_status_module模块,该模块可以让给nginx提高性能统计的页面,获得相关的并发连接,请求的信息<br>–with-google_perftools_module 允许ngx_google_perftools_module模块,该模块提供google的性能测试工具</p>\n<p>邮件代理服务器相关的mail模块参数:<br>-with-mail  安装邮件服务器反向代理模块.是nginx可以反向代理POP3/IMAP4/SMTP等协议,默认不安装<br>–with-mail_ssl_module 允许ngx_mail_ssl_module模块,该模块可以使IMAP,POP3,SMTP等协议基于SSL/TLS协议上使用.默认不安装,不依赖openSSL库<br>–without-mail_pop3_module 不允许ngx_mail_pop3_module模块,使用–with-mail参数后,该模块默认安装<br>–without-mail_imap_module 不允许ngx_mail_imap_module模块,使用–with-mail参数后,该模块默认安装<br>–without-mail_smtp_module 不允许ngx_mail_smtp_module模块,使用–with-mail参数后,该模块默认安装</p>\n<p>其他参数:<br>–with-debug : 调试日志,将nginx需要打印debug调试级别的日志的代码编译进nginx<br>–add-module=PATH 允许使用外部模块,以及路径,通过这个参数指定第三方模块的路径<br>–without-http 不使用HTTP server功能,禁用http服务器<br>–without-http-cache : 禁用http服务器里面的缓存cache特性<br>–with-file-aio : 启用文件的异步I\\O功能来处理磁盘文件,需要liunx内核支持原声的异步I/O<br>–with-ipv6 : 使nignx支持IPv6<br>–user=USER 设定程序运行的用户环境(www)<br>–group=GROUP 设定程序运行的组环境(www)</p>\n<p>注意:nginx编译时不是功能加的越多越好，应该尽可能少编译模块，不用的最好不要加入。</p>\n<p>编译好的nginx可通过 /usr/local/nginx/sbin/nginx -V 查看编译时的参数</p>\n<p>2)make命令就是根据configure生成的Makefile文件编译nginx,并生成目标文件&amp;二进制文件</p>\n<p>3)make install命令就是将编译好的文件和目录根据编译的设置保存到相应目录</p>\n<p>4.configure脚本<br>看下该脚本分析一下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\"></div><div class=\"line\"># Copyright (C) Igor Sysoev</div><div class=\"line\"># Copyright (C) Nginx, Inc.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">LC_ALL=C</div><div class=\"line\">export LC_ALL</div><div class=\"line\"></div><div class=\"line\">#options脚本会处理传给configure的参数和根据参数定义后续所需要的变量.</div><div class=\"line\">. auto/options</div><div class=\"line\">#init脚本初始化后续将产生的文件路径</div><div class=\"line\">. auto/init</div><div class=\"line\">#sourdes脚本分析nginx的源码结构,为后续构造makefile文件准备</div><div class=\"line\">. auto/sources</div><div class=\"line\"></div><div class=\"line\">#创建目标文件路径</div><div class=\"line\">test -d $NGX_OBJS || mkdir -p $NGX_OBJS</div><div class=\"line\">#开始准备建立nginx_auto_hearders.h,autoconf.err等必要文件</div><div class=\"line\">echo &gt; $NGX_AUTO_HEADERS_H</div><div class=\"line\">echo &gt; $NGX_AUTOCONF_ERR</div><div class=\"line\">#往objs/niginx_auto_config.h写入命令行带的参数</div><div class=\"line\">echo &quot;#define NGX_CONFIGURE \\&quot;$NGX_CONFIGURE\\&quot;&quot; &gt; $NGX_AUTO_CONFIG_H</div><div class=\"line\"></div><div class=\"line\">#如果有debug标志位,就将objs/nginx_auto_config.h文件写入debug相关的宏定义</div><div class=\"line\">if [ $NGX_DEBUG = YES ]; then</div><div class=\"line\">    have=NGX_DEBUG . auto/have</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">#获取操作系统参数,检查编译的操作系统参数是否支持编译</div><div class=\"line\">if test -z &quot;$NGX_PLATFORM&quot;; then</div><div class=\"line\">    echo &quot;checking for OS&quot;</div><div class=\"line\">    #获取操作系统名称</div><div class=\"line\">    NGX_SYSTEM=`uname -s 2&gt;/dev/null`</div><div class=\"line\">    #获取操作系统内核版本</div><div class=\"line\">    NGX_RELEASE=`uname -r 2&gt;/dev/null`</div><div class=\"line\">    #获取操作系统是32位/还是64位的内核</div><div class=\"line\">    NGX_MACHINE=`uname -m 2&gt;/dev/null`</div><div class=\"line\">    #输出获取的操作系统结果</div><div class=\"line\">    echo &quot; + $NGX_SYSTEM $NGX_RELEASE $NGX_MACHINE&quot;</div><div class=\"line\"></div><div class=\"line\">    NGX_PLATFORM=&quot;$NGX_SYSTEM:$NGX_RELEASE:$NGX_MACHINE&quot;;</div><div class=\"line\"></div><div class=\"line\">    case &quot;$NGX_SYSTEM&quot; in</div><div class=\"line\">        MINGW32_*)</div><div class=\"line\">            NGX_PLATFORM=win32</div><div class=\"line\">        ;;</div><div class=\"line\">    esac</div><div class=\"line\"></div><div class=\"line\">else</div><div class=\"line\">    echo &quot;building for $NGX_PLATFORM&quot;</div><div class=\"line\">    NGX_SYSTEM=$NGX_PLATFORM</div><div class=\"line\">fi</div><div class=\"line\">#检查并设置编译器,检查gcc是否安装和支持</div><div class=\"line\">. auto/cc/conf</div><div class=\"line\">#对于非windows操作系统定义一些必要的头文件</div><div class=\"line\">if [ &quot;$NGX_PLATFORM&quot; != win32 ]; then</div><div class=\"line\">    . auto/headers</div><div class=\"line\">fi</div><div class=\"line\">#对于目前的操作系统环境检查检查和定义一些特定的操作系统相关的方法和变量</div><div class=\"line\">. auto/os/conf</div><div class=\"line\">#定义类unix操作系统中通用的头文件和系统调用等,同时检查当前系统环境</div><div class=\"line\">if [ &quot;$NGX_PLATFORM&quot; != win32 ]; then</div><div class=\"line\">    . auto/unix</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">. auto/threads</div><div class=\"line\">#定义ngx_modulues数组,生产ngx_moduloes.c文件,定义nginx需要用到的模块,ngx_modules数组的先后顺序非常重要,同时如果使用了--add-module=参数加入的模块,也会在这里面</div><div class=\"line\">. auto/modules</div><div class=\"line\">#检查nginx在链接期间需要的链接的第三方静态库,动态库或者目标文件是否存在</div><div class=\"line\">. auto/lib/conf</div><div class=\"line\">#处理编译安装后的路径设置</div><div class=\"line\">case &quot;.$NGX_PREFIX&quot; in</div><div class=\"line\">    .)</div><div class=\"line\">        NGX_PREFIX=$&#123;NGX_PREFIX:-/usr/local/nginx&#125;</div><div class=\"line\">        have=NGX_PREFIX value=&quot;\\&quot;$NGX_PREFIX/\\&quot;&quot; . auto/define</div><div class=\"line\">    ;;</div><div class=\"line\"></div><div class=\"line\">    .!)</div><div class=\"line\">        NGX_PREFIX=</div><div class=\"line\">    ;;</div><div class=\"line\"></div><div class=\"line\">    *)</div><div class=\"line\">        have=NGX_PREFIX value=&quot;\\&quot;$NGX_PREFIX/\\&quot;&quot; . auto/define</div><div class=\"line\">    ;;</div><div class=\"line\">esac</div><div class=\"line\">#处理编译安装后的配置文件路径设置</div><div class=\"line\">if [ &quot;.$NGX_CONF_PREFIX&quot; != &quot;.&quot; ]; then</div><div class=\"line\">    have=NGX_CONF_PREFIX value=&quot;\\&quot;$NGX_CONF_PREFIX/\\&quot;&quot; . auto/define</div><div class=\"line\">fi</div><div class=\"line\">#处理编译安装后的,二进制文件,pid,lock等文件的路径设置</div><div class=\"line\">have=NGX_SBIN_PATH value=&quot;\\&quot;$NGX_SBIN_PATH\\&quot;&quot; . auto/define</div><div class=\"line\">have=NGX_CONF_PATH value=&quot;\\&quot;$NGX_CONF_PATH\\&quot;&quot; . auto/define</div><div class=\"line\">have=NGX_PID_PATH value=&quot;\\&quot;$NGX_PID_PATH\\&quot;&quot; . auto/define</div><div class=\"line\">have=NGX_LOCK_PATH value=&quot;\\&quot;$NGX_LOCK_PATH\\&quot;&quot; . auto/define</div><div class=\"line\">have=NGX_ERROR_LOG_PATH value=&quot;\\&quot;$NGX_ERROR_LOG_PATH\\&quot;&quot; . auto/define</div><div class=\"line\"></div><div class=\"line\">have=NGX_HTTP_LOG_PATH value=&quot;\\&quot;$NGX_HTTP_LOG_PATH\\&quot;&quot; . auto/define</div><div class=\"line\">have=NGX_HTTP_CLIENT_TEMP_PATH value=&quot;\\&quot;$NGX_HTTP_CLIENT_TEMP_PATH\\&quot;&quot;</div><div class=\"line\">. auto/define</div><div class=\"line\">have=NGX_HTTP_PROXY_TEMP_PATH value=&quot;\\&quot;$NGX_HTTP_PROXY_TEMP_PATH\\&quot;&quot;</div><div class=\"line\">. auto/define</div><div class=\"line\">have=NGX_HTTP_FASTCGI_TEMP_PATH value=&quot;\\&quot;$NGX_HTTP_FASTCGI_TEMP_PATH\\&quot;&quot;</div><div class=\"line\">. auto/define</div><div class=\"line\">have=NGX_HTTP_UWSGI_TEMP_PATH value=&quot;\\&quot;$NGX_HTTP_UWSGI_TEMP_PATH\\&quot;&quot;</div><div class=\"line\">. auto/define</div><div class=\"line\">have=NGX_HTTP_SCGI_TEMP_PATH value=&quot;\\&quot;$NGX_HTTP_SCGI_TEMP_PATH\\&quot;&quot;</div><div class=\"line\">. auto/define</div><div class=\"line\">#创建编译时需要的makefile文件</div><div class=\"line\">. auto/make</div><div class=\"line\">#为makefile文件加入需要的连接的第三方静态库,动态库或者目标文件</div><div class=\"line\">. auto/lib/make</div><div class=\"line\">#为makefile文件加入install功能,将编译成功的文件复制到安装路径</div><div class=\"line\">. auto/install</div><div class=\"line\"></div><div class=\"line\"># STUB,在nginx_auto_config.h文件中加入NGX_SUPPRESS_WARN宏和 NGX_SMP宏</div><div class=\"line\">. auto/stubs</div><div class=\"line\">#在nginx_auto_config.h文件中加入NGX_USER宏和 NGX_GROUP\t宏,如果没有使用--with-user||--with-group参数时默认两者都为nobody</div><div class=\"line\">have=NGX_USER value=&quot;\\&quot;$NGX_USER\\&quot;&quot; . auto/define</div><div class=\"line\">have=NGX_GROUP value=&quot;\\&quot;$NGX_GROUP\\&quot;&quot; . auto/define</div><div class=\"line\"></div><div class=\"line\">if [ &quot;.$NGX_BUILD&quot; != &quot;.&quot; ]; then</div><div class=\"line\">    have=NGX_BUILD value=&quot;\\&quot;$NGX_BUILD\\&quot;&quot; . auto/define</div><div class=\"line\">fi</div><div class=\"line\">#打印configure脚本执行结果,如果有错误则返回错误提示</div><div class=\"line\">. auto/summary</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>5.记录安装:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">[root@niaoyun49026 nginx-1.11.1]# yum -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel opensll openssl-devel</div><div class=\"line\">Loaded plugins: fastestmirror</div><div class=\"line\">No such command: gcc. Please use /usr/bin/yum --help</div><div class=\"line\">[root@niaoyun49026 nginx-1.11.1]# yum  install -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel opensll openssl-devel</div><div class=\"line\">Loaded plugins: fastestmirror</div><div class=\"line\">.................(大多了,省略一下)....................................</div><div class=\"line\">Package gcc-4.8.5-4.el7.x86_64 already installed and latest version</div><div class=\"line\">Package gcc-c++-4.8.5-4.el7.x86_64 already installed and latest version</div><div class=\"line\">Package pcre-8.32-15.el7_2.1.x86_64 already installed and latest version</div><div class=\"line\">Package zlib-1.2.7-15.el7.x86_64 already installed and latest version</div><div class=\"line\">.................(大多了,省略一下)....................................                                                                                                  </div><div class=\"line\">Installed:</div><div class=\"line\">  openssl-devel.x86_64 1:1.0.1e-51.el7_2.5                        pcre-devel.x86_64 0:8.32-15.el7_2.1                        zlib-devel.x86_64 0:1.2.7-15.el7                       </div><div class=\"line\"></div><div class=\"line\">Dependency Installed:</div><div class=\"line\">  keyutils-libs-devel.x86_64 0:1.5.8-3.el7       krb5-devel.x86_64 0:1.13.2-12.el7_2       libcom_err-devel.x86_64 0:1.42.9-7.el7       libselinux-devel.x86_64 0:2.2.2-6.el7      </div><div class=\"line\">  libsepol-devel.x86_64 0:2.1.9-3.el7            libverto-devel.x86_64 0:0.2.5-4.el7      </div><div class=\"line\"></div><div class=\"line\">Complete!</div><div class=\"line\"></div><div class=\"line\">#基本必须库已经安装完了,下面执行configure 脚本</div><div class=\"line\">[root@niaoyun49026 nginx-1.11.1]# ./configure </div><div class=\"line\">checking for OS</div><div class=\"line\"> + Linux 3.10.0-123.el7.x86_64 x86_64</div><div class=\"line\">checking for C compiler ... found</div><div class=\"line\"> + using GNU C compiler</div><div class=\"line\"> + gcc version: 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC) </div><div class=\"line\">checking for gcc -pipe switch ... found</div><div class=\"line\">................(大多了,省略一下)....................................                                                                                                  </div><div class=\"line\">creating objs/Makefile</div><div class=\"line\"></div><div class=\"line\">Configuration summary</div><div class=\"line\">  + using system PCRE library</div><div class=\"line\">  + OpenSSL library is not used</div><div class=\"line\">  + md5: using system crypto library</div><div class=\"line\">  + sha1: using system crypto library</div><div class=\"line\">  + using system zlib library</div><div class=\"line\"></div><div class=\"line\">  nginx path prefix: &quot;/usr/local/nginx&quot;</div><div class=\"line\">  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;</div><div class=\"line\">  nginx modules path: &quot;/usr/local/nginx/modules&quot;</div><div class=\"line\">  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;</div><div class=\"line\">  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;</div><div class=\"line\">  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;</div><div class=\"line\">  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;</div><div class=\"line\">  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;</div><div class=\"line\">  nginx http client request body temporary files: &quot;client_body_temp&quot;</div><div class=\"line\">  nginx http proxy temporary files: &quot;proxy_temp&quot;</div><div class=\"line\">  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</div><div class=\"line\">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</div><div class=\"line\">  nginx http scgi temporary files: &quot;scgi_temp&quot;</div><div class=\"line\"></div><div class=\"line\">#执行confgrue脚本后,多了Makefile文件和objs目录</div><div class=\"line\">[root@niaoyun49026 nginx-1.11.1]# ls -al</div><div class=\"line\">total 684</div><div class=\"line\">drwxr-xr-x  9 1001 1001   4096 Jul 15 15:07 .</div><div class=\"line\">drwxr-xr-x. 3 root root     25 Jun 28 13:58 ..</div><div class=\"line\">drwxr-xr-x  6 1001 1001   4096 Jun 28 13:58 auto</div><div class=\"line\">-rw-r--r--  1 1001 1001 264694 May 31 21:43 CHANGES</div><div class=\"line\">-rw-r--r--  1 1001 1001 403645 May 31 21:43 CHANGES.ru</div><div class=\"line\">drwxr-xr-x  2 1001 1001   4096 Jun 28 13:58 conf</div><div class=\"line\">-rwxr-xr-x  1 1001 1001   2481 May 31 21:43 configure</div><div class=\"line\">drwxr-xr-x  4 1001 1001     68 Jun 28 13:58 contrib</div><div class=\"line\">drwxr-xr-x  2 1001 1001     38 Jun 28 13:58 html</div><div class=\"line\">-rw-r--r--  1 1001 1001   1397 May 31 21:43 LICENSE</div><div class=\"line\">-rw-r--r--  1 root root    376 Jul 15 15:07 Makefile(这里的makefile的功能都是调用objs/Makefile的)</div><div class=\"line\">drwxr-xr-x  2 1001 1001     20 Jun 28 13:58 man</div><div class=\"line\">drwxr-xr-x  3 root root    119 Jul 15 15:07 objs</div><div class=\"line\">-rw-r--r--  1 1001 1001     49 May 31 21:43 README</div><div class=\"line\">drwxr-xr-x  9 1001 1001     84 Jun 28 13:58 src</div><div class=\"line\"></div><div class=\"line\">#再看下objs目录下东西吧</div><div class=\"line\">[root@niaoyun49026 objs]# ls -al</div><div class=\"line\">total 84</div><div class=\"line\">drwxr-xr-x 3 root root   119 Jul 15 15:07 .</div><div class=\"line\">drwxr-xr-x 9 1001 1001  4096 Jul 15 15:14 ..</div><div class=\"line\">-rw-r--r-- 1 root root 16426 Jul 15 15:07 autoconf.err(保存执行过程生产的结果)</div><div class=\"line\">-rw-r--r-- 1 root root 38230 Jul 15 15:07 Makefile(编译使用,和install)</div><div class=\"line\">-rw-r--r-- 1 root root  6719 Jul 15 15:07 ngx_auto_config.h(宏定义)</div><div class=\"line\">-rw-r--r-- 1 root root   657 Jul 15 15:07 ngx_auto_headers.h(宏定义)</div><div class=\"line\">-rw-r--r-- 1 root root  5508 Jul 15 15:07 ngx_modules.c(记录nignx要使用的模块和顺序)</div><div class=\"line\">drwxr-xr-x 9 root root    84 Jul 15 15:07 src(源码和存放的目标文件)</div><div class=\"line\">#看下src</div><div class=\"line\">[root@niaoyun49026 objs]# ls -al src</div><div class=\"line\">total 0</div><div class=\"line\">drwxr-xr-x 9 root root  84 Jul 15 15:07 .</div><div class=\"line\">drwxr-xr-x 3 root root 119 Jul 15 15:07 ..</div><div class=\"line\">drwxr-xr-x 2 root root   6 Jul 15 15:07 core</div><div class=\"line\">drwxr-xr-x 3 root root  20 Jul 15 15:07 event</div><div class=\"line\">drwxr-xr-x 4 root root  29 Jul 15 15:07 http</div><div class=\"line\">drwxr-xr-x 2 root root   6 Jul 15 15:07 mail</div><div class=\"line\">drwxr-xr-x 2 root root   6 Jul 15 15:07 misc</div><div class=\"line\">drwxr-xr-x 4 root root  29 Jul 15 15:07 os</div><div class=\"line\">drwxr-xr-x 2 root root   6 Jul 15 15:07 stream</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#ngx_modules.c文件记录nginx模块,就是定义ngx_module数组的,下面看下这个文件</div><div class=\"line\"></div><div class=\"line\">[root@niaoyun49026 objs]# cat ngx_modules.c </div><div class=\"line\">#include &lt;ngx_config.h&gt;</div><div class=\"line\">#include &lt;ngx_core.h&gt;</div><div class=\"line\">................(大多了,省略一下)....................................                                                                                                  </div><div class=\"line\">ngx_module_t *ngx_modules[] = &#123;</div><div class=\"line\">    &amp;ngx_core_module,</div><div class=\"line\">    &amp;ngx_errlog_module,</div><div class=\"line\">    &amp;ngx_conf_module,</div><div class=\"line\">    &amp;ngx_regex_module,</div><div class=\"line\">    &amp;ngx_events_module,</div><div class=\"line\">    &amp;ngx_event_core_module,</div><div class=\"line\">    &amp;ngx_epoll_module,</div><div class=\"line\">    &amp;ngx_http_module,</div><div class=\"line\">    &amp;ngx_http_core_module,</div><div class=\"line\">    &amp;ngx_http_log_module,</div><div class=\"line\">    &amp;ngx_http_upstream_module,</div><div class=\"line\">    &amp;ngx_http_static_module,</div><div class=\"line\">    &amp;ngx_http_autoindex_module,</div><div class=\"line\">    &amp;ngx_http_index_module,</div><div class=\"line\">    &amp;ngx_http_auth_basic_module,</div><div class=\"line\">    &amp;ngx_http_access_module,</div><div class=\"line\">    &amp;ngx_http_limit_conn_module,</div><div class=\"line\">    &amp;ngx_http_limit_req_module,</div><div class=\"line\">    &amp;ngx_http_geo_module,</div><div class=\"line\">    &amp;ngx_http_map_module,</div><div class=\"line\">    &amp;ngx_http_split_clients_module,</div><div class=\"line\">    &amp;ngx_http_referer_module,</div><div class=\"line\">    &amp;ngx_http_rewrite_module,</div><div class=\"line\">    &amp;ngx_http_proxy_module,</div><div class=\"line\">    &amp;ngx_http_fastcgi_module,</div><div class=\"line\">    &amp;ngx_http_uwsgi_module,</div><div class=\"line\">    &amp;ngx_http_scgi_module,</div><div class=\"line\">    &amp;ngx_http_memcached_module,</div><div class=\"line\">    &amp;ngx_http_empty_gif_module,</div><div class=\"line\">    &amp;ngx_http_browser_module,</div><div class=\"line\">    &amp;ngx_http_upstream_hash_module,</div><div class=\"line\">    &amp;ngx_http_upstream_ip_hash_module,</div><div class=\"line\">    &amp;ngx_http_upstream_least_conn_module,</div><div class=\"line\">    &amp;ngx_http_upstream_keepalive_module,</div><div class=\"line\">    &amp;ngx_http_upstream_zone_module,</div><div class=\"line\">    &amp;ngx_http_write_filter_module,</div><div class=\"line\">    &amp;ngx_http_header_filter_module,</div><div class=\"line\">    &amp;ngx_http_chunked_filter_module,</div><div class=\"line\">    &amp;ngx_http_range_header_filter_module,</div><div class=\"line\">    &amp;ngx_http_gzip_filter_module,</div><div class=\"line\">    &amp;ngx_http_postpone_filter_module,</div><div class=\"line\">    &amp;ngx_http_ssi_filter_module,</div><div class=\"line\">    &amp;ngx_http_charset_filter_module,</div><div class=\"line\">    &amp;ngx_http_userid_filter_module,</div><div class=\"line\">    &amp;ngx_http_headers_filter_module,</div><div class=\"line\">    &amp;ngx_http_copy_filter_module,</div><div class=\"line\">    &amp;ngx_http_range_body_filter_module,</div><div class=\"line\">    &amp;ngx_http_not_modified_filter_module,</div><div class=\"line\">    NULL</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">#模块名称</div><div class=\"line\">char *ngx_module_names[] = &#123;</div><div class=\"line\">    &quot;ngx_core_module&quot;,</div><div class=\"line\">    &quot;ngx_errlog_module&quot;,</div><div class=\"line\">    &quot;ngx_conf_module&quot;,</div><div class=\"line\">    &quot;ngx_regex_module&quot;,</div><div class=\"line\">    &quot;ngx_events_module&quot;,</div><div class=\"line\">    &quot;ngx_event_core_module&quot;,</div><div class=\"line\">    &quot;ngx_epoll_module&quot;,</div><div class=\"line\">    &quot;ngx_http_module&quot;,</div><div class=\"line\">    &quot;ngx_http_core_module&quot;,</div><div class=\"line\">    &quot;ngx_http_log_module&quot;,</div><div class=\"line\">    &quot;ngx_http_upstream_module&quot;,</div><div class=\"line\">    &quot;ngx_http_static_module&quot;,</div><div class=\"line\">    &quot;ngx_http_autoindex_module&quot;,</div><div class=\"line\">    &quot;ngx_http_index_module&quot;,</div><div class=\"line\">    &quot;ngx_http_auth_basic_module&quot;,</div><div class=\"line\">    &quot;ngx_http_access_module&quot;,</div><div class=\"line\">    &quot;ngx_http_limit_conn_module&quot;,</div><div class=\"line\">    &quot;ngx_http_limit_req_module&quot;,</div><div class=\"line\">    &quot;ngx_http_geo_module&quot;,</div><div class=\"line\">    &quot;ngx_http_map_module&quot;,</div><div class=\"line\">    &quot;ngx_http_split_clients_module&quot;,</div><div class=\"line\">    &quot;ngx_http_referer_module&quot;,</div><div class=\"line\">    &quot;ngx_http_rewrite_module&quot;,</div><div class=\"line\">    &quot;ngx_http_proxy_module&quot;,</div><div class=\"line\">    &quot;ngx_http_fastcgi_module&quot;,</div><div class=\"line\">    &quot;ngx_http_uwsgi_module&quot;,</div><div class=\"line\">    &quot;ngx_http_scgi_module&quot;,</div><div class=\"line\">    &quot;ngx_http_memcached_module&quot;,</div><div class=\"line\">    &quot;ngx_http_empty_gif_module&quot;,</div><div class=\"line\">    &quot;ngx_http_browser_module&quot;,</div><div class=\"line\">    &quot;ngx_http_upstream_hash_module&quot;,</div><div class=\"line\">    &quot;ngx_http_upstream_ip_hash_module&quot;,</div><div class=\"line\">    &quot;ngx_http_upstream_least_conn_module&quot;,</div><div class=\"line\">    &quot;ngx_http_upstream_keepalive_module&quot;,</div><div class=\"line\">    &quot;ngx_http_upstream_zone_module&quot;,</div><div class=\"line\">    &quot;ngx_http_write_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_header_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_chunked_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_range_header_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_gzip_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_postpone_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_ssi_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_charset_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_userid_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_headers_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_copy_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_range_body_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_not_modified_filter_module&quot;,</div><div class=\"line\">    NULL</div><div class=\"line\">&#125;;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>nginx的安装分析:</p>\n<p>1.安装准备软件<br>1)编译工具<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y gcc</div></pre></td></tr></table></figure></p>\n<p>gcc可用于编译c语言.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y gcc-c++</div></pre></td></tr></table></figure></p>\n<p>g++可用于编译c++</p>\n<p>2)依赖库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y pcre pcre-devel</div></pre></td></tr></table></figure>\n<p>PCRE是支持perl兼容正则表达式,nginx的http模块来解析正则表达式,很多地方都需要解析正则,所以要将RCRE库编译进nignx</p>\n<p>pcre-devel是使用PCRE做二次开发时所需要的开发库,包括头文件等,是编译nginx所需要的.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum isntall -y zlib zlib-devel</div></pre></td></tr></table></figure>\n<p>zlib库用于对http包内容做gzip格式的压缩,如果要对http响应包进行gzip压缩,减少网络传输量,就需要将zlib库编译进niginx</p>\n<p>zlib-devel 是二次开发所需要的库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y opensll openssl-devel</div></pre></td></tr></table></figure>\n<p>SSL协议上传所需要的库,同时也是md5 sha1等散列函数所需库</p>\n<p>……如果还需要安装nginx其他模块,则还要需要安装响应模块所依赖的库……</p>\n<p>2.安装</p>\n<p>解压源码文件得到文件如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@niaoyun49026 nginx-1.11.1]# ls -al</div><div class=\"line\">total 676</div><div class=\"line\">drwxr-xr-x  8 1001 1001    147 Jul 15 14:07 .</div><div class=\"line\">drwxr-xr-x. 3 root root     25 Jun 28 13:58 ..</div><div class=\"line\">drwxr-xr-x  6 1001 1001   4096 Jun 28 13:58 auto</div><div class=\"line\">-rw-r--r--  1 1001 1001 264694 May 31 21:43 CHANGES</div><div class=\"line\">-rw-r--r--  1 1001 1001 403645 May 31 21:43 CHANGES.ru</div><div class=\"line\">drwxr-xr-x  2 1001 1001   4096 Jun 28 13:58 conf</div><div class=\"line\">-rwxr-xr-x  1 1001 1001   2481 May 31 21:43 configure</div><div class=\"line\">drwxr-xr-x  4 1001 1001     68 Jun 28 13:58 contrib</div><div class=\"line\">drwxr-xr-x  2 1001 1001     38 Jun 28 13:58 html</div><div class=\"line\">-rw-r--r--  1 1001 1001   1397 May 31 21:43 LICENSE</div><div class=\"line\">drwxr-xr-x  2 1001 1001     20 Jun 28 13:58 man</div><div class=\"line\">-rw-r--r--  1 1001 1001     49 May 31 21:43 README</div><div class=\"line\">drwxr-xr-x  9 1001 1001     84 Jun 28 13:58 src</div></pre></td></tr></table></figure></p>\n<p>以默认的方式安装就这么简单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure</div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure>\n<p>3.分析</p>\n<p>1)configure的命令做了以下工作:</p>\n<p>检测操作内核和系统已经安装的软件和库,如果不满足编译条件做出相应的提示<br>编译参数的解析(还要分析参数)<br>中间目录的生成<br>根据编译参数生成一些c源码,Makefile文件等</p>\n<p>查看configure的命令参数:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --help </div></pre></td></tr></table></figure></p>\n<p>configure的参数太多了,现在下命令分析:</p>\n<p>路径相关参数:</p>\n<p>–prefix=PATH :安装目录,默认/usr/local/nginx</p>\n<p>–sbin-path=PATH : 可执行文件路径 ,默认<prefx>/sbin/nignx</p>\n<p>–conf-path=PATH : 配置文件路径 ,默认<prefx>/conf/nginx.conf</p>\n<p>–error-log-path=PATH : error日志路径 ,默认<prefix>/logs/error.log</p>\n<p>–pid-path=PATH : pid文件路径,这个文件仅保存ngix master进程ID ,默认<prefix>/logs/nginx.pid</p>\n<p>–lock-path=PATH : lock文件路径 ,默认<prefix>/logs/nginx.lock</p>\n<p>–builddir=DIR : configure执行时与编译期间产生的临时文件目录,makefile,c文件,目标文件,可执行文件 ,默认<soure path>/objs</p>\n<p>–with-perl_modul=PATH : perl module路径,只要使用第三方perl module才需要设置这个路径</p>\n<p>–with-perl=PATH : perl binary路径,如果配置的niginx会执行perl脚本,就必须设置改路径</p>\n<p>–http-log-path=PATH  : access log文件路径 ,默认<prefix>/logs/access.log</p>\n<p>–http-client-body-temp-path=PATH : 设置htpp请求包体临时存放的文件路径, 默认<prefix>/client_body_tmp</p>\n<p>–http-proxy-temp-path=PATH : 反向代理时http proxy临时文件路径,默认<prefix>/proxy_tmp</p>\n<p>–http-fastcgi-temp-path=PATH : fastcgi临时文件路径,默认<prefix>/fastcgi_tmp</p>\n<p>–http-uwsgicgi-temp-path=PATH : uwsgicgi临时文件路径,默认<prefix>/uwsgicgi_tmp</p>\n<p>–http-scgi-temp-path=PATH : scgi临时文件路径,默认<prefix>/scgi_tmp</p>\n<p>编译相关参数:</p>\n<p>-with-cc=PATH :  设置C编译器路径<br>–with-cpp=PATH : 设置C预处理路径<br>–with-cc-opt=OPTIONS :  设置C编译器参数<br>–with-ld-opt=OPTIONS : 设置连接文件参数,将某个库链接到nginx中,用户–with-ld-opt=-llibaryName -LlibaryPath<br>–with-cpu-opt=CPU : 为指定CPU优化,可选参数有:<br>          pentium, pentiumpro, pentium3, pentium4,<br>          athlon, opteron, sparc32, sparc64, ppc64</p>\n<p>依赖软件相关参数:<br>pcre库:<br>–with-pcre : 强制使用pcre库<br>–without-pcre : 不使用pcre库文件<br>–with-pcre=DIR : 设定PCRE库路径<br>–with-pcre-opt=OPTIONS  : 设置PCRE运行参数<br>OpenSSL库:<br>–with-openssl=DIR : 设定OpenSSL库文件路径<br>–with-openssl-opt=OPTIONS : 设置OpenSSL运行参数<br>atomic(原子)库:<br>–with-libatomic : 强制使用atomic库,该库是cpu架构独立的一种原子操作方式,支持x86,ppc64,sparc6<br>–with-libatomic=DIR : atomic库的路径<br>散列函数库:<br>–with-md5=DIR : 设定md5库文件路径<br>–with-md5-opt=OPTIONS  : 设置md5运行参数<br>–with-md5-asm : 使用md5源文件编译<br>–with-sha1=DIR : 设定sha1库文件路径<br>–with-sha1-opt=OPTIONS : 设置sha1运行参数<br>–with-sha1-asm : 使用sha1源文件编译<br>zlib库:<br>–with-zlib=DIR : 设定zlib库文件路径<br>–with-zlib-opt=OPTIONS : 设置zlib运行参数<br>–with-zlib-asm=CPU : 使zlib对特定的CPU进行优化,可选参数:<br>          pentium, pentiumpro</p>\n<p>模块相关参数:<br>事件模块:<br>–with-rtsig_module : 允许rtsig模块,默认不安装<br>–with-select_module : 允许select模块(一种轮询模式,不推荐用在高载环境)<br>–without-select_module : 不使用select模块<br>–with-poll_module : 允许poll模块(一种轮询模式,不推荐用在高载环境)<br>–without-poll_module : 不使用poll模块<br>–with-aio_module : 使用aio模块<br>HTTP模块:<br>默认编译进的http模块:</p>\n<p>–without-http_charset_module : 不使用ngx_http_charset_module模块  该模块可以将服务器发出的http响应重编码<br>–without-http_gzip_module :  不使用ngx_http_gzip_module模块,该模块根据配置文件指定的conten_type对特定的http响应包进行gzip压缩<br>–without-http_ssi_module :  不使用ngx_http_ssi_module模块,该模块可以在http响应包体中加入指定内容<br>–without-http_userid_module : 不使用ngx_http_userid_module模块,该模块可以通过http请求的头部信息里的一些字段认证用户信息,以便确认请求合法性<br>–without-http_access_module : 不使用ngx_http_access_module模块,该模块可以通过ip地址限制是否能访问<br>–without-http_auth_basic_module : 不使用ngx_http_auth_basic_module模块,该模块提供最简单的用户名密码认证<br>–without-http_autoindex_module : 不使用ngx_http_autoindex_module模块,该模块提供简单的目录浏览功能呢<br>–without-http_geo_module : 不使用ngx_http_geo_module模块,该模块可以定义一些变量,这些变量的值将与客户端ip关联,这些nginx可以通过该不同变量做出不同的处理<br>–without-http_map_module : 不使用ngx_http_map_module模块,该模块可以建立一个key/value的映射表,这样可以针对不同的url做特殊处理.<br>–without-http_referer_module : 不使用ngx_http_referer_module模块,该模块可以根据请求的referer字段来拒接请求<br>–without-http_rewrite_module : 不使用ngx_http_rewrite_module模块,该模块可以提供http请求在nginx内部的重定向的功能,需要依赖pcre库<br>–without-http_proxy_module : 不使用ngx_http_proxy_module模块,该模块提供基本http反向代理功能<br>–without-http_fastcgi_module : 不使用ngx_http_fastcgi_module模块,该模块提供fastcgi功能<br>–without-http_memcached_module : 不使用ngx_http_memcached_module模块,该模块可以使nginx直接由上游的memcached服务读取数据,并简单的适配成http响应返回给客户端<br>–without-http_limit_zone_module : 不使用ngx_http_limit_zone_module模块,该模块可以针对某个ip地址限制并发直连接数<br>–without-http_empty_gif_module : 不使用ngx_http_empty_gif_module模块,该模块可以使得nginx收到无效请求时,立刻返回内存中1*1像素的gif图片.对于无效请求不会浪费服务器资源<br>–without-http_browser_module : 不使用ngx_http_browser_module模块,该模块会根据http请求中的user_agent字段来识别浏览器<br>–without-http_upstream_ip_hash_module : 不使用ngx_http_upstream_ip_hash_module模块,该模块提供当nginx与后端server建立连接时,可以根据ip做散列运算来决定会与哪个后端服务器通讯,这样就可以实现负载均衡</p>\n<p>默认不编译进的http模块:</p>\n<p>–with-http_ssl_module : 允许ngx_http_ssl_module模块 ,该模块是nginx支持ssl协议,提供https服务<br>–with-http_realip_module 允许ngx_http_realip_module模块,该模块可以从客户端请求的header信息中获取真正的ip地址<br>–with-http_addition_module 允许ngx_http_addition_module模块,该模块提供在返回客户端的http包体头部或者尾部增加内容<br>–with-http_xslt_module 允许ngx_http_xslt_module模块,该模块提供xml格式的数据在发给客户端前加入xsl渲染,依赖libxml2库和libxslt库<br>–with-http_image_filter_module : 安装http_image_filter_module模块,该模块提供将符合配置的图片实时压缩为指定大小的缩列图后再发给用户,依赖libgd库<br>–with-http_geoip_module 安装http_geoi_module模块,该模块提供可以根据MaxMind GeoIp的IP地址数据库对客户端的ip地址得到的实际的地理位置信息,依赖MaxMind GeoIP的库文件<br>–with-http_sub_module 允许ngx_http_sub_module模块,该模块可以在返回给客户端的http响应包中将指定的字符串替换为自己的字符串<br>–with-http_dav_module 允许ngx_http_dav_module模块,该模块可以让nginx支持webdav标准(PUT,DELETED,COPY,MOVE,MKCOL等)<br>–with-http_flv_module 允许ngx_http_flv_module模块,该模块是的nginx可以在返回flv格式的视频文件时在header头做一些出来,是的客户端可以直接观看<br>–with-http_mp4_module 允许ngx_http_mp4_module模块,该模块是的nginx可以在返回mp4格式的视频文件时在header头做一些出来,是的客户端可以直接观看<br>–with-http_gzip_static_module 允许ngx_http_gzip_static_module模块,如果使用gizp模块对响应的文档进行gizp格式返回给客户端,那个这个文档就会每次都压缩,所以该模块的作用是压缩的文档缓存起来,如果下次请求一样的文档就直接返回文档,提高响应速度和减少对服务器资料的消耗.<br>–with-http_random_index_module 允许ngx_http_random_index_module模块,该模块的作用是,当客户端访问某个目录时,,随机返回该目录下任意文件.<br>–with-http_stub_status_module 允许ngx_http_stub_status_module模块,该模块可以让给nginx提高性能统计的页面,获得相关的并发连接,请求的信息<br>–with-google_perftools_module 允许ngx_google_perftools_module模块,该模块提供google的性能测试工具</p>\n<p>邮件代理服务器相关的mail模块参数:<br>-with-mail  安装邮件服务器反向代理模块.是nginx可以反向代理POP3/IMAP4/SMTP等协议,默认不安装<br>–with-mail_ssl_module 允许ngx_mail_ssl_module模块,该模块可以使IMAP,POP3,SMTP等协议基于SSL/TLS协议上使用.默认不安装,不依赖openSSL库<br>–without-mail_pop3_module 不允许ngx_mail_pop3_module模块,使用–with-mail参数后,该模块默认安装<br>–without-mail_imap_module 不允许ngx_mail_imap_module模块,使用–with-mail参数后,该模块默认安装<br>–without-mail_smtp_module 不允许ngx_mail_smtp_module模块,使用–with-mail参数后,该模块默认安装</p>\n<p>其他参数:<br>–with-debug : 调试日志,将nginx需要打印debug调试级别的日志的代码编译进nginx<br>–add-module=PATH 允许使用外部模块,以及路径,通过这个参数指定第三方模块的路径<br>–without-http 不使用HTTP server功能,禁用http服务器<br>–without-http-cache : 禁用http服务器里面的缓存cache特性<br>–with-file-aio : 启用文件的异步I\\O功能来处理磁盘文件,需要liunx内核支持原声的异步I/O<br>–with-ipv6 : 使nignx支持IPv6<br>–user=USER 设定程序运行的用户环境(www)<br>–group=GROUP 设定程序运行的组环境(www)</p>\n<p>注意:nginx编译时不是功能加的越多越好，应该尽可能少编译模块，不用的最好不要加入。</p>\n<p>编译好的nginx可通过 /usr/local/nginx/sbin/nginx -V 查看编译时的参数</p>\n<p>2)make命令就是根据configure生成的Makefile文件编译nginx,并生成目标文件&amp;二进制文件</p>\n<p>3)make install命令就是将编译好的文件和目录根据编译的设置保存到相应目录</p>\n<p>4.configure脚本<br>看下该脚本分析一下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\"></div><div class=\"line\"># Copyright (C) Igor Sysoev</div><div class=\"line\"># Copyright (C) Nginx, Inc.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">LC_ALL=C</div><div class=\"line\">export LC_ALL</div><div class=\"line\"></div><div class=\"line\">#options脚本会处理传给configure的参数和根据参数定义后续所需要的变量.</div><div class=\"line\">. auto/options</div><div class=\"line\">#init脚本初始化后续将产生的文件路径</div><div class=\"line\">. auto/init</div><div class=\"line\">#sourdes脚本分析nginx的源码结构,为后续构造makefile文件准备</div><div class=\"line\">. auto/sources</div><div class=\"line\"></div><div class=\"line\">#创建目标文件路径</div><div class=\"line\">test -d $NGX_OBJS || mkdir -p $NGX_OBJS</div><div class=\"line\">#开始准备建立nginx_auto_hearders.h,autoconf.err等必要文件</div><div class=\"line\">echo &gt; $NGX_AUTO_HEADERS_H</div><div class=\"line\">echo &gt; $NGX_AUTOCONF_ERR</div><div class=\"line\">#往objs/niginx_auto_config.h写入命令行带的参数</div><div class=\"line\">echo &quot;#define NGX_CONFIGURE \\&quot;$NGX_CONFIGURE\\&quot;&quot; &gt; $NGX_AUTO_CONFIG_H</div><div class=\"line\"></div><div class=\"line\">#如果有debug标志位,就将objs/nginx_auto_config.h文件写入debug相关的宏定义</div><div class=\"line\">if [ $NGX_DEBUG = YES ]; then</div><div class=\"line\">    have=NGX_DEBUG . auto/have</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">#获取操作系统参数,检查编译的操作系统参数是否支持编译</div><div class=\"line\">if test -z &quot;$NGX_PLATFORM&quot;; then</div><div class=\"line\">    echo &quot;checking for OS&quot;</div><div class=\"line\">    #获取操作系统名称</div><div class=\"line\">    NGX_SYSTEM=`uname -s 2&gt;/dev/null`</div><div class=\"line\">    #获取操作系统内核版本</div><div class=\"line\">    NGX_RELEASE=`uname -r 2&gt;/dev/null`</div><div class=\"line\">    #获取操作系统是32位/还是64位的内核</div><div class=\"line\">    NGX_MACHINE=`uname -m 2&gt;/dev/null`</div><div class=\"line\">    #输出获取的操作系统结果</div><div class=\"line\">    echo &quot; + $NGX_SYSTEM $NGX_RELEASE $NGX_MACHINE&quot;</div><div class=\"line\"></div><div class=\"line\">    NGX_PLATFORM=&quot;$NGX_SYSTEM:$NGX_RELEASE:$NGX_MACHINE&quot;;</div><div class=\"line\"></div><div class=\"line\">    case &quot;$NGX_SYSTEM&quot; in</div><div class=\"line\">        MINGW32_*)</div><div class=\"line\">            NGX_PLATFORM=win32</div><div class=\"line\">        ;;</div><div class=\"line\">    esac</div><div class=\"line\"></div><div class=\"line\">else</div><div class=\"line\">    echo &quot;building for $NGX_PLATFORM&quot;</div><div class=\"line\">    NGX_SYSTEM=$NGX_PLATFORM</div><div class=\"line\">fi</div><div class=\"line\">#检查并设置编译器,检查gcc是否安装和支持</div><div class=\"line\">. auto/cc/conf</div><div class=\"line\">#对于非windows操作系统定义一些必要的头文件</div><div class=\"line\">if [ &quot;$NGX_PLATFORM&quot; != win32 ]; then</div><div class=\"line\">    . auto/headers</div><div class=\"line\">fi</div><div class=\"line\">#对于目前的操作系统环境检查检查和定义一些特定的操作系统相关的方法和变量</div><div class=\"line\">. auto/os/conf</div><div class=\"line\">#定义类unix操作系统中通用的头文件和系统调用等,同时检查当前系统环境</div><div class=\"line\">if [ &quot;$NGX_PLATFORM&quot; != win32 ]; then</div><div class=\"line\">    . auto/unix</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">. auto/threads</div><div class=\"line\">#定义ngx_modulues数组,生产ngx_moduloes.c文件,定义nginx需要用到的模块,ngx_modules数组的先后顺序非常重要,同时如果使用了--add-module=参数加入的模块,也会在这里面</div><div class=\"line\">. auto/modules</div><div class=\"line\">#检查nginx在链接期间需要的链接的第三方静态库,动态库或者目标文件是否存在</div><div class=\"line\">. auto/lib/conf</div><div class=\"line\">#处理编译安装后的路径设置</div><div class=\"line\">case &quot;.$NGX_PREFIX&quot; in</div><div class=\"line\">    .)</div><div class=\"line\">        NGX_PREFIX=$&#123;NGX_PREFIX:-/usr/local/nginx&#125;</div><div class=\"line\">        have=NGX_PREFIX value=&quot;\\&quot;$NGX_PREFIX/\\&quot;&quot; . auto/define</div><div class=\"line\">    ;;</div><div class=\"line\"></div><div class=\"line\">    .!)</div><div class=\"line\">        NGX_PREFIX=</div><div class=\"line\">    ;;</div><div class=\"line\"></div><div class=\"line\">    *)</div><div class=\"line\">        have=NGX_PREFIX value=&quot;\\&quot;$NGX_PREFIX/\\&quot;&quot; . auto/define</div><div class=\"line\">    ;;</div><div class=\"line\">esac</div><div class=\"line\">#处理编译安装后的配置文件路径设置</div><div class=\"line\">if [ &quot;.$NGX_CONF_PREFIX&quot; != &quot;.&quot; ]; then</div><div class=\"line\">    have=NGX_CONF_PREFIX value=&quot;\\&quot;$NGX_CONF_PREFIX/\\&quot;&quot; . auto/define</div><div class=\"line\">fi</div><div class=\"line\">#处理编译安装后的,二进制文件,pid,lock等文件的路径设置</div><div class=\"line\">have=NGX_SBIN_PATH value=&quot;\\&quot;$NGX_SBIN_PATH\\&quot;&quot; . auto/define</div><div class=\"line\">have=NGX_CONF_PATH value=&quot;\\&quot;$NGX_CONF_PATH\\&quot;&quot; . auto/define</div><div class=\"line\">have=NGX_PID_PATH value=&quot;\\&quot;$NGX_PID_PATH\\&quot;&quot; . auto/define</div><div class=\"line\">have=NGX_LOCK_PATH value=&quot;\\&quot;$NGX_LOCK_PATH\\&quot;&quot; . auto/define</div><div class=\"line\">have=NGX_ERROR_LOG_PATH value=&quot;\\&quot;$NGX_ERROR_LOG_PATH\\&quot;&quot; . auto/define</div><div class=\"line\"></div><div class=\"line\">have=NGX_HTTP_LOG_PATH value=&quot;\\&quot;$NGX_HTTP_LOG_PATH\\&quot;&quot; . auto/define</div><div class=\"line\">have=NGX_HTTP_CLIENT_TEMP_PATH value=&quot;\\&quot;$NGX_HTTP_CLIENT_TEMP_PATH\\&quot;&quot;</div><div class=\"line\">. auto/define</div><div class=\"line\">have=NGX_HTTP_PROXY_TEMP_PATH value=&quot;\\&quot;$NGX_HTTP_PROXY_TEMP_PATH\\&quot;&quot;</div><div class=\"line\">. auto/define</div><div class=\"line\">have=NGX_HTTP_FASTCGI_TEMP_PATH value=&quot;\\&quot;$NGX_HTTP_FASTCGI_TEMP_PATH\\&quot;&quot;</div><div class=\"line\">. auto/define</div><div class=\"line\">have=NGX_HTTP_UWSGI_TEMP_PATH value=&quot;\\&quot;$NGX_HTTP_UWSGI_TEMP_PATH\\&quot;&quot;</div><div class=\"line\">. auto/define</div><div class=\"line\">have=NGX_HTTP_SCGI_TEMP_PATH value=&quot;\\&quot;$NGX_HTTP_SCGI_TEMP_PATH\\&quot;&quot;</div><div class=\"line\">. auto/define</div><div class=\"line\">#创建编译时需要的makefile文件</div><div class=\"line\">. auto/make</div><div class=\"line\">#为makefile文件加入需要的连接的第三方静态库,动态库或者目标文件</div><div class=\"line\">. auto/lib/make</div><div class=\"line\">#为makefile文件加入install功能,将编译成功的文件复制到安装路径</div><div class=\"line\">. auto/install</div><div class=\"line\"></div><div class=\"line\"># STUB,在nginx_auto_config.h文件中加入NGX_SUPPRESS_WARN宏和 NGX_SMP宏</div><div class=\"line\">. auto/stubs</div><div class=\"line\">#在nginx_auto_config.h文件中加入NGX_USER宏和 NGX_GROUP\t宏,如果没有使用--with-user||--with-group参数时默认两者都为nobody</div><div class=\"line\">have=NGX_USER value=&quot;\\&quot;$NGX_USER\\&quot;&quot; . auto/define</div><div class=\"line\">have=NGX_GROUP value=&quot;\\&quot;$NGX_GROUP\\&quot;&quot; . auto/define</div><div class=\"line\"></div><div class=\"line\">if [ &quot;.$NGX_BUILD&quot; != &quot;.&quot; ]; then</div><div class=\"line\">    have=NGX_BUILD value=&quot;\\&quot;$NGX_BUILD\\&quot;&quot; . auto/define</div><div class=\"line\">fi</div><div class=\"line\">#打印configure脚本执行结果,如果有错误则返回错误提示</div><div class=\"line\">. auto/summary</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>5.记录安装:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">[root@niaoyun49026 nginx-1.11.1]# yum -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel opensll openssl-devel</div><div class=\"line\">Loaded plugins: fastestmirror</div><div class=\"line\">No such command: gcc. Please use /usr/bin/yum --help</div><div class=\"line\">[root@niaoyun49026 nginx-1.11.1]# yum  install -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel opensll openssl-devel</div><div class=\"line\">Loaded plugins: fastestmirror</div><div class=\"line\">.................(大多了,省略一下)....................................</div><div class=\"line\">Package gcc-4.8.5-4.el7.x86_64 already installed and latest version</div><div class=\"line\">Package gcc-c++-4.8.5-4.el7.x86_64 already installed and latest version</div><div class=\"line\">Package pcre-8.32-15.el7_2.1.x86_64 already installed and latest version</div><div class=\"line\">Package zlib-1.2.7-15.el7.x86_64 already installed and latest version</div><div class=\"line\">.................(大多了,省略一下)....................................                                                                                                  </div><div class=\"line\">Installed:</div><div class=\"line\">  openssl-devel.x86_64 1:1.0.1e-51.el7_2.5                        pcre-devel.x86_64 0:8.32-15.el7_2.1                        zlib-devel.x86_64 0:1.2.7-15.el7                       </div><div class=\"line\"></div><div class=\"line\">Dependency Installed:</div><div class=\"line\">  keyutils-libs-devel.x86_64 0:1.5.8-3.el7       krb5-devel.x86_64 0:1.13.2-12.el7_2       libcom_err-devel.x86_64 0:1.42.9-7.el7       libselinux-devel.x86_64 0:2.2.2-6.el7      </div><div class=\"line\">  libsepol-devel.x86_64 0:2.1.9-3.el7            libverto-devel.x86_64 0:0.2.5-4.el7      </div><div class=\"line\"></div><div class=\"line\">Complete!</div><div class=\"line\"></div><div class=\"line\">#基本必须库已经安装完了,下面执行configure 脚本</div><div class=\"line\">[root@niaoyun49026 nginx-1.11.1]# ./configure </div><div class=\"line\">checking for OS</div><div class=\"line\"> + Linux 3.10.0-123.el7.x86_64 x86_64</div><div class=\"line\">checking for C compiler ... found</div><div class=\"line\"> + using GNU C compiler</div><div class=\"line\"> + gcc version: 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC) </div><div class=\"line\">checking for gcc -pipe switch ... found</div><div class=\"line\">................(大多了,省略一下)....................................                                                                                                  </div><div class=\"line\">creating objs/Makefile</div><div class=\"line\"></div><div class=\"line\">Configuration summary</div><div class=\"line\">  + using system PCRE library</div><div class=\"line\">  + OpenSSL library is not used</div><div class=\"line\">  + md5: using system crypto library</div><div class=\"line\">  + sha1: using system crypto library</div><div class=\"line\">  + using system zlib library</div><div class=\"line\"></div><div class=\"line\">  nginx path prefix: &quot;/usr/local/nginx&quot;</div><div class=\"line\">  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;</div><div class=\"line\">  nginx modules path: &quot;/usr/local/nginx/modules&quot;</div><div class=\"line\">  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;</div><div class=\"line\">  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;</div><div class=\"line\">  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;</div><div class=\"line\">  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;</div><div class=\"line\">  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;</div><div class=\"line\">  nginx http client request body temporary files: &quot;client_body_temp&quot;</div><div class=\"line\">  nginx http proxy temporary files: &quot;proxy_temp&quot;</div><div class=\"line\">  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</div><div class=\"line\">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</div><div class=\"line\">  nginx http scgi temporary files: &quot;scgi_temp&quot;</div><div class=\"line\"></div><div class=\"line\">#执行confgrue脚本后,多了Makefile文件和objs目录</div><div class=\"line\">[root@niaoyun49026 nginx-1.11.1]# ls -al</div><div class=\"line\">total 684</div><div class=\"line\">drwxr-xr-x  9 1001 1001   4096 Jul 15 15:07 .</div><div class=\"line\">drwxr-xr-x. 3 root root     25 Jun 28 13:58 ..</div><div class=\"line\">drwxr-xr-x  6 1001 1001   4096 Jun 28 13:58 auto</div><div class=\"line\">-rw-r--r--  1 1001 1001 264694 May 31 21:43 CHANGES</div><div class=\"line\">-rw-r--r--  1 1001 1001 403645 May 31 21:43 CHANGES.ru</div><div class=\"line\">drwxr-xr-x  2 1001 1001   4096 Jun 28 13:58 conf</div><div class=\"line\">-rwxr-xr-x  1 1001 1001   2481 May 31 21:43 configure</div><div class=\"line\">drwxr-xr-x  4 1001 1001     68 Jun 28 13:58 contrib</div><div class=\"line\">drwxr-xr-x  2 1001 1001     38 Jun 28 13:58 html</div><div class=\"line\">-rw-r--r--  1 1001 1001   1397 May 31 21:43 LICENSE</div><div class=\"line\">-rw-r--r--  1 root root    376 Jul 15 15:07 Makefile(这里的makefile的功能都是调用objs/Makefile的)</div><div class=\"line\">drwxr-xr-x  2 1001 1001     20 Jun 28 13:58 man</div><div class=\"line\">drwxr-xr-x  3 root root    119 Jul 15 15:07 objs</div><div class=\"line\">-rw-r--r--  1 1001 1001     49 May 31 21:43 README</div><div class=\"line\">drwxr-xr-x  9 1001 1001     84 Jun 28 13:58 src</div><div class=\"line\"></div><div class=\"line\">#再看下objs目录下东西吧</div><div class=\"line\">[root@niaoyun49026 objs]# ls -al</div><div class=\"line\">total 84</div><div class=\"line\">drwxr-xr-x 3 root root   119 Jul 15 15:07 .</div><div class=\"line\">drwxr-xr-x 9 1001 1001  4096 Jul 15 15:14 ..</div><div class=\"line\">-rw-r--r-- 1 root root 16426 Jul 15 15:07 autoconf.err(保存执行过程生产的结果)</div><div class=\"line\">-rw-r--r-- 1 root root 38230 Jul 15 15:07 Makefile(编译使用,和install)</div><div class=\"line\">-rw-r--r-- 1 root root  6719 Jul 15 15:07 ngx_auto_config.h(宏定义)</div><div class=\"line\">-rw-r--r-- 1 root root   657 Jul 15 15:07 ngx_auto_headers.h(宏定义)</div><div class=\"line\">-rw-r--r-- 1 root root  5508 Jul 15 15:07 ngx_modules.c(记录nignx要使用的模块和顺序)</div><div class=\"line\">drwxr-xr-x 9 root root    84 Jul 15 15:07 src(源码和存放的目标文件)</div><div class=\"line\">#看下src</div><div class=\"line\">[root@niaoyun49026 objs]# ls -al src</div><div class=\"line\">total 0</div><div class=\"line\">drwxr-xr-x 9 root root  84 Jul 15 15:07 .</div><div class=\"line\">drwxr-xr-x 3 root root 119 Jul 15 15:07 ..</div><div class=\"line\">drwxr-xr-x 2 root root   6 Jul 15 15:07 core</div><div class=\"line\">drwxr-xr-x 3 root root  20 Jul 15 15:07 event</div><div class=\"line\">drwxr-xr-x 4 root root  29 Jul 15 15:07 http</div><div class=\"line\">drwxr-xr-x 2 root root   6 Jul 15 15:07 mail</div><div class=\"line\">drwxr-xr-x 2 root root   6 Jul 15 15:07 misc</div><div class=\"line\">drwxr-xr-x 4 root root  29 Jul 15 15:07 os</div><div class=\"line\">drwxr-xr-x 2 root root   6 Jul 15 15:07 stream</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#ngx_modules.c文件记录nginx模块,就是定义ngx_module数组的,下面看下这个文件</div><div class=\"line\"></div><div class=\"line\">[root@niaoyun49026 objs]# cat ngx_modules.c </div><div class=\"line\">#include &lt;ngx_config.h&gt;</div><div class=\"line\">#include &lt;ngx_core.h&gt;</div><div class=\"line\">................(大多了,省略一下)....................................                                                                                                  </div><div class=\"line\">ngx_module_t *ngx_modules[] = &#123;</div><div class=\"line\">    &amp;ngx_core_module,</div><div class=\"line\">    &amp;ngx_errlog_module,</div><div class=\"line\">    &amp;ngx_conf_module,</div><div class=\"line\">    &amp;ngx_regex_module,</div><div class=\"line\">    &amp;ngx_events_module,</div><div class=\"line\">    &amp;ngx_event_core_module,</div><div class=\"line\">    &amp;ngx_epoll_module,</div><div class=\"line\">    &amp;ngx_http_module,</div><div class=\"line\">    &amp;ngx_http_core_module,</div><div class=\"line\">    &amp;ngx_http_log_module,</div><div class=\"line\">    &amp;ngx_http_upstream_module,</div><div class=\"line\">    &amp;ngx_http_static_module,</div><div class=\"line\">    &amp;ngx_http_autoindex_module,</div><div class=\"line\">    &amp;ngx_http_index_module,</div><div class=\"line\">    &amp;ngx_http_auth_basic_module,</div><div class=\"line\">    &amp;ngx_http_access_module,</div><div class=\"line\">    &amp;ngx_http_limit_conn_module,</div><div class=\"line\">    &amp;ngx_http_limit_req_module,</div><div class=\"line\">    &amp;ngx_http_geo_module,</div><div class=\"line\">    &amp;ngx_http_map_module,</div><div class=\"line\">    &amp;ngx_http_split_clients_module,</div><div class=\"line\">    &amp;ngx_http_referer_module,</div><div class=\"line\">    &amp;ngx_http_rewrite_module,</div><div class=\"line\">    &amp;ngx_http_proxy_module,</div><div class=\"line\">    &amp;ngx_http_fastcgi_module,</div><div class=\"line\">    &amp;ngx_http_uwsgi_module,</div><div class=\"line\">    &amp;ngx_http_scgi_module,</div><div class=\"line\">    &amp;ngx_http_memcached_module,</div><div class=\"line\">    &amp;ngx_http_empty_gif_module,</div><div class=\"line\">    &amp;ngx_http_browser_module,</div><div class=\"line\">    &amp;ngx_http_upstream_hash_module,</div><div class=\"line\">    &amp;ngx_http_upstream_ip_hash_module,</div><div class=\"line\">    &amp;ngx_http_upstream_least_conn_module,</div><div class=\"line\">    &amp;ngx_http_upstream_keepalive_module,</div><div class=\"line\">    &amp;ngx_http_upstream_zone_module,</div><div class=\"line\">    &amp;ngx_http_write_filter_module,</div><div class=\"line\">    &amp;ngx_http_header_filter_module,</div><div class=\"line\">    &amp;ngx_http_chunked_filter_module,</div><div class=\"line\">    &amp;ngx_http_range_header_filter_module,</div><div class=\"line\">    &amp;ngx_http_gzip_filter_module,</div><div class=\"line\">    &amp;ngx_http_postpone_filter_module,</div><div class=\"line\">    &amp;ngx_http_ssi_filter_module,</div><div class=\"line\">    &amp;ngx_http_charset_filter_module,</div><div class=\"line\">    &amp;ngx_http_userid_filter_module,</div><div class=\"line\">    &amp;ngx_http_headers_filter_module,</div><div class=\"line\">    &amp;ngx_http_copy_filter_module,</div><div class=\"line\">    &amp;ngx_http_range_body_filter_module,</div><div class=\"line\">    &amp;ngx_http_not_modified_filter_module,</div><div class=\"line\">    NULL</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">#模块名称</div><div class=\"line\">char *ngx_module_names[] = &#123;</div><div class=\"line\">    &quot;ngx_core_module&quot;,</div><div class=\"line\">    &quot;ngx_errlog_module&quot;,</div><div class=\"line\">    &quot;ngx_conf_module&quot;,</div><div class=\"line\">    &quot;ngx_regex_module&quot;,</div><div class=\"line\">    &quot;ngx_events_module&quot;,</div><div class=\"line\">    &quot;ngx_event_core_module&quot;,</div><div class=\"line\">    &quot;ngx_epoll_module&quot;,</div><div class=\"line\">    &quot;ngx_http_module&quot;,</div><div class=\"line\">    &quot;ngx_http_core_module&quot;,</div><div class=\"line\">    &quot;ngx_http_log_module&quot;,</div><div class=\"line\">    &quot;ngx_http_upstream_module&quot;,</div><div class=\"line\">    &quot;ngx_http_static_module&quot;,</div><div class=\"line\">    &quot;ngx_http_autoindex_module&quot;,</div><div class=\"line\">    &quot;ngx_http_index_module&quot;,</div><div class=\"line\">    &quot;ngx_http_auth_basic_module&quot;,</div><div class=\"line\">    &quot;ngx_http_access_module&quot;,</div><div class=\"line\">    &quot;ngx_http_limit_conn_module&quot;,</div><div class=\"line\">    &quot;ngx_http_limit_req_module&quot;,</div><div class=\"line\">    &quot;ngx_http_geo_module&quot;,</div><div class=\"line\">    &quot;ngx_http_map_module&quot;,</div><div class=\"line\">    &quot;ngx_http_split_clients_module&quot;,</div><div class=\"line\">    &quot;ngx_http_referer_module&quot;,</div><div class=\"line\">    &quot;ngx_http_rewrite_module&quot;,</div><div class=\"line\">    &quot;ngx_http_proxy_module&quot;,</div><div class=\"line\">    &quot;ngx_http_fastcgi_module&quot;,</div><div class=\"line\">    &quot;ngx_http_uwsgi_module&quot;,</div><div class=\"line\">    &quot;ngx_http_scgi_module&quot;,</div><div class=\"line\">    &quot;ngx_http_memcached_module&quot;,</div><div class=\"line\">    &quot;ngx_http_empty_gif_module&quot;,</div><div class=\"line\">    &quot;ngx_http_browser_module&quot;,</div><div class=\"line\">    &quot;ngx_http_upstream_hash_module&quot;,</div><div class=\"line\">    &quot;ngx_http_upstream_ip_hash_module&quot;,</div><div class=\"line\">    &quot;ngx_http_upstream_least_conn_module&quot;,</div><div class=\"line\">    &quot;ngx_http_upstream_keepalive_module&quot;,</div><div class=\"line\">    &quot;ngx_http_upstream_zone_module&quot;,</div><div class=\"line\">    &quot;ngx_http_write_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_header_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_chunked_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_range_header_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_gzip_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_postpone_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_ssi_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_charset_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_userid_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_headers_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_copy_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_range_body_filter_module&quot;,</div><div class=\"line\">    &quot;ngx_http_not_modified_filter_module&quot;,</div><div class=\"line\">    NULL</div><div class=\"line\">&#125;;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n"},{"title":"nginx的使用与配置","date":"2016-07-17T12:51:08.000Z","_content":"\n安装完成nginx后,默认路径在/usr/local/nginx目录,在该目录可以看到一下文件\n{% codeblock %}\n[root@niaoyun49026 nginx]# ls -al\ntotal 8\ndrwxr-xr-x  11 root   root  142 Jul 15 16:15 .\ndrwxr-xr-x. 13 root   root 4096 Jul 15 16:00 ..\ndrwx------   2 nobody root    6 Jul 15 16:15 client_body_temp(保存客户端请求包体的临时目录)\ndrwxr-xr-x   2 root   root 4096 Jul 15 16:00 conf(配置文件)\ndrwx------   2 nobody root    6 Jul 15 16:15 fastcgi_temp\ndrwxr-xr-x   2 root   root   38 Jul 15 16:00 html(nginx显示50x等错误信息的网页)\ndrwxr-xr-x   2 root   root   55 Jul 15 16:15 logs(nginx的日志文件)\ndrwx------   2 nobody root    6 Jul 15 16:15 proxy_temp\ndrwxr-xr-x   2 root   root   18 Jul 15 16:00 sbin(nginx的二进制文件)\ndrwx------   2 nobody root    6 Jul 15 16:15 scgi_temp\ndrwx------   2 nobody root    6 Jul 15 16:15 uwsgi_temp\n{% endcodeblock %}\n\nnginx的命令控制\n{% codeblock %}\n[root@niaoyun49026 sbin]# ./nginx -h\nnginx version: nginx/1.11.1\nUsage: nginx [-?hvVtTq] [-s signal] [-c filename] [-p prefix] [-g directives]\n\nOptions:\n  -?,-h         : this help(显示帮助信息)\n  -v            : show version and exit(显示版本)\n  -V            : show version and configure options then exit(显示版本&&编译时参数设置值)\n  -t            : test configuration and exit(检测配置文件的设置是否有错误)\n  -T            : test configuration, dump it and exit(检测配置设置,并显示详细信息)\n  -q            : suppress non-error messages during configuration testing(检测配置文件时,使用-q参数可以不把error级别以下的信息显示)\n  -s signal     : send signal to a master process: stop, quit, reopen, reload(发送信号到nginx master进程,控制nginx 进程停止,退出,重启等操作)\n  -p prefix     : set prefix path (default: /usr/local/nginx/)(指定安装路径,是nignx在安装路径下查找配置文件启动)\n  -c filename   : set configuration file (default: conf/nginx.conf)(指定配置文件路径启动)\n  -g directives : set global directives out of configuration file(临时指定一些全局配置项,以使新的配置项生效.注意指定的配置项不能跟nginx.conf文件中的配置项冲突)\n{% endcodeblock %}\n\n使用:\n\n{% codeblock %}\n#检查配置文件设置是否正确\n[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -t\nnginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok\nnginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful\n#使用-q参数,不显示error级别以下的信息,检查配置文件的时候\n[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -t -q\n#查看nginx的版本\n[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -v\nnginx version: nginx/1.11.1\n#查看nginx的版本和编译时的设置参数\n[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -V\nnginx version: nginx/1.11.1\nbuilt by gcc 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC) \nconfigure arguments:(因为使用默认参数编译,所以这里显示为空)\n#快速停止nginx服务\n[root@niaoyun49026 ~]# /usr/local/nginx/sbin/nginx -s stop\n#相当于 kill -s SIGTRM <nginx master pid > || kill -s SIGINT <nginx master pid>\n#优雅的停止nginx服务,先处理完当前所有的请求在提示服务\n[root@niaoyun49026 ~]# /usr/local/nginx/sbin/nginx -s quit\n#相当于 kill -s SIGQUIT <nginx master pid>\n#如果要优雅的停止某个子线程的话\n#kill -s SIGWINCH <nginx worker pid>\n\n#重启nginx ,先检查配置项是否有误,如果都正确就优雅的方式停止服务,再启动nginx\n[root@niaoyun49026 ~]# /usr/local/nginx/sbin/nginx -s reload\n#相当于 kill -s SIGHUP <niginx master pid>\n\n#使日志文件回滚,就是将日志文件备份后,移动到备份目录,在生成一个新日志文件\n[root@niaoyun49026 ~]# /usr/local/nginx/sbin/nginx -s reopen\n#相当于 kill -s SIGUSR1 <nginx master pid>\n\n#启动nginx\n[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx \n#启动nginx同时指定配置文件路径\n[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n#启动nginx,以指定安装目录的方式启动\n[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -p /usr/local/nginx/\n#启动nginx,使用-g参数临时指定配置项\n[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -g \"pid /tmp/test.pid;\"\n#注意,因为这里临时指定了pid的文件路径,所有重启&&停止等操作,都要指定启动的时候的pid路径参数,否则会找不到pid,无法对进程进行操作\n[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -g \"pid /tmp/test.pid;\"\n\n{% endcodeblock %}\n\n认识nginx进程:\n\n启动nginx服务,可以发现nginx有master process 和 worker process 在运行\n{% codeblock %}\n[root@niaoyun49026 ~]# ps -ef | grep  nginx\nroot      16230      1  0 21:47 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnobody    16231  16230  0 21:47 ?        00:00:00 nginx: worker process\nroot      16233  16175  0 21:47 pts/1    00:00:00 grep --color=auto nginx\n{% endcodeblock %}\nmaster process: 唯一的,该进程不会对客户端请求提供服务,主要负责管理worker进程,为管理员提供命令行服务,包括启动,停止,重启等服务,当任意一个worker进程出现错误时,master进程会理解启动一个新的worker进程,继续提供服务\nworker process: 多个,处理客户端的请求.一般情况下,worker 进程数和服务器的cpu的核数相当(进程间切换的代价最小),worker进程之间通过共享内存,原子操作等进程间通信方式实现负载均衡等功能.不同于apache(一个进程或线程只能处理一个请求),nginx的一个worker进程可以同时处理的请求数只受限于内存大小.worker进程间处理并发请求几乎没有同步锁,worker进程通常不会进入睡眠状态.\n\n","source":"_posts/nginx的使用与配置.md","raw":"---\ntitle: nginx的使用与配置\ndate: 2016-07-17 20:51:08\ntags: nginx\ncategories: liunx\n---\n\n安装完成nginx后,默认路径在/usr/local/nginx目录,在该目录可以看到一下文件\n{% codeblock %}\n[root@niaoyun49026 nginx]# ls -al\ntotal 8\ndrwxr-xr-x  11 root   root  142 Jul 15 16:15 .\ndrwxr-xr-x. 13 root   root 4096 Jul 15 16:00 ..\ndrwx------   2 nobody root    6 Jul 15 16:15 client_body_temp(保存客户端请求包体的临时目录)\ndrwxr-xr-x   2 root   root 4096 Jul 15 16:00 conf(配置文件)\ndrwx------   2 nobody root    6 Jul 15 16:15 fastcgi_temp\ndrwxr-xr-x   2 root   root   38 Jul 15 16:00 html(nginx显示50x等错误信息的网页)\ndrwxr-xr-x   2 root   root   55 Jul 15 16:15 logs(nginx的日志文件)\ndrwx------   2 nobody root    6 Jul 15 16:15 proxy_temp\ndrwxr-xr-x   2 root   root   18 Jul 15 16:00 sbin(nginx的二进制文件)\ndrwx------   2 nobody root    6 Jul 15 16:15 scgi_temp\ndrwx------   2 nobody root    6 Jul 15 16:15 uwsgi_temp\n{% endcodeblock %}\n\nnginx的命令控制\n{% codeblock %}\n[root@niaoyun49026 sbin]# ./nginx -h\nnginx version: nginx/1.11.1\nUsage: nginx [-?hvVtTq] [-s signal] [-c filename] [-p prefix] [-g directives]\n\nOptions:\n  -?,-h         : this help(显示帮助信息)\n  -v            : show version and exit(显示版本)\n  -V            : show version and configure options then exit(显示版本&&编译时参数设置值)\n  -t            : test configuration and exit(检测配置文件的设置是否有错误)\n  -T            : test configuration, dump it and exit(检测配置设置,并显示详细信息)\n  -q            : suppress non-error messages during configuration testing(检测配置文件时,使用-q参数可以不把error级别以下的信息显示)\n  -s signal     : send signal to a master process: stop, quit, reopen, reload(发送信号到nginx master进程,控制nginx 进程停止,退出,重启等操作)\n  -p prefix     : set prefix path (default: /usr/local/nginx/)(指定安装路径,是nignx在安装路径下查找配置文件启动)\n  -c filename   : set configuration file (default: conf/nginx.conf)(指定配置文件路径启动)\n  -g directives : set global directives out of configuration file(临时指定一些全局配置项,以使新的配置项生效.注意指定的配置项不能跟nginx.conf文件中的配置项冲突)\n{% endcodeblock %}\n\n使用:\n\n{% codeblock %}\n#检查配置文件设置是否正确\n[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -t\nnginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok\nnginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful\n#使用-q参数,不显示error级别以下的信息,检查配置文件的时候\n[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -t -q\n#查看nginx的版本\n[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -v\nnginx version: nginx/1.11.1\n#查看nginx的版本和编译时的设置参数\n[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -V\nnginx version: nginx/1.11.1\nbuilt by gcc 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC) \nconfigure arguments:(因为使用默认参数编译,所以这里显示为空)\n#快速停止nginx服务\n[root@niaoyun49026 ~]# /usr/local/nginx/sbin/nginx -s stop\n#相当于 kill -s SIGTRM <nginx master pid > || kill -s SIGINT <nginx master pid>\n#优雅的停止nginx服务,先处理完当前所有的请求在提示服务\n[root@niaoyun49026 ~]# /usr/local/nginx/sbin/nginx -s quit\n#相当于 kill -s SIGQUIT <nginx master pid>\n#如果要优雅的停止某个子线程的话\n#kill -s SIGWINCH <nginx worker pid>\n\n#重启nginx ,先检查配置项是否有误,如果都正确就优雅的方式停止服务,再启动nginx\n[root@niaoyun49026 ~]# /usr/local/nginx/sbin/nginx -s reload\n#相当于 kill -s SIGHUP <niginx master pid>\n\n#使日志文件回滚,就是将日志文件备份后,移动到备份目录,在生成一个新日志文件\n[root@niaoyun49026 ~]# /usr/local/nginx/sbin/nginx -s reopen\n#相当于 kill -s SIGUSR1 <nginx master pid>\n\n#启动nginx\n[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx \n#启动nginx同时指定配置文件路径\n[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n#启动nginx,以指定安装目录的方式启动\n[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -p /usr/local/nginx/\n#启动nginx,使用-g参数临时指定配置项\n[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -g \"pid /tmp/test.pid;\"\n#注意,因为这里临时指定了pid的文件路径,所有重启&&停止等操作,都要指定启动的时候的pid路径参数,否则会找不到pid,无法对进程进行操作\n[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -g \"pid /tmp/test.pid;\"\n\n{% endcodeblock %}\n\n认识nginx进程:\n\n启动nginx服务,可以发现nginx有master process 和 worker process 在运行\n{% codeblock %}\n[root@niaoyun49026 ~]# ps -ef | grep  nginx\nroot      16230      1  0 21:47 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx\nnobody    16231  16230  0 21:47 ?        00:00:00 nginx: worker process\nroot      16233  16175  0 21:47 pts/1    00:00:00 grep --color=auto nginx\n{% endcodeblock %}\nmaster process: 唯一的,该进程不会对客户端请求提供服务,主要负责管理worker进程,为管理员提供命令行服务,包括启动,停止,重启等服务,当任意一个worker进程出现错误时,master进程会理解启动一个新的worker进程,继续提供服务\nworker process: 多个,处理客户端的请求.一般情况下,worker 进程数和服务器的cpu的核数相当(进程间切换的代价最小),worker进程之间通过共享内存,原子操作等进程间通信方式实现负载均衡等功能.不同于apache(一个进程或线程只能处理一个请求),nginx的一个worker进程可以同时处理的请求数只受限于内存大小.worker进程间处理并发请求几乎没有同步锁,worker进程通常不会进入睡眠状态.\n\n","slug":"nginx的使用与配置","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeiem0000fznz4r020othm","content":"<p>安装完成nginx后,默认路径在/usr/local/nginx目录,在该目录可以看到一下文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@niaoyun49026 nginx]# ls -al</div><div class=\"line\">total 8</div><div class=\"line\">drwxr-xr-x  11 root   root  142 Jul 15 16:15 .</div><div class=\"line\">drwxr-xr-x. 13 root   root 4096 Jul 15 16:00 ..</div><div class=\"line\">drwx------   2 nobody root    6 Jul 15 16:15 client_body_temp(保存客户端请求包体的临时目录)</div><div class=\"line\">drwxr-xr-x   2 root   root 4096 Jul 15 16:00 conf(配置文件)</div><div class=\"line\">drwx------   2 nobody root    6 Jul 15 16:15 fastcgi_temp</div><div class=\"line\">drwxr-xr-x   2 root   root   38 Jul 15 16:00 html(nginx显示50x等错误信息的网页)</div><div class=\"line\">drwxr-xr-x   2 root   root   55 Jul 15 16:15 logs(nginx的日志文件)</div><div class=\"line\">drwx------   2 nobody root    6 Jul 15 16:15 proxy_temp</div><div class=\"line\">drwxr-xr-x   2 root   root   18 Jul 15 16:00 sbin(nginx的二进制文件)</div><div class=\"line\">drwx------   2 nobody root    6 Jul 15 16:15 scgi_temp</div><div class=\"line\">drwx------   2 nobody root    6 Jul 15 16:15 uwsgi_temp</div></pre></td></tr></table></figure></p>\n<p>nginx的命令控制<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@niaoyun49026 sbin]# ./nginx -h</div><div class=\"line\">nginx version: nginx/1.11.1</div><div class=\"line\">Usage: nginx [-?hvVtTq] [-s signal] [-c filename] [-p prefix] [-g directives]</div><div class=\"line\"></div><div class=\"line\">Options:</div><div class=\"line\">  -?,-h         : this help(显示帮助信息)</div><div class=\"line\">  -v            : show version and exit(显示版本)</div><div class=\"line\">  -V            : show version and configure options then exit(显示版本&amp;&amp;编译时参数设置值)</div><div class=\"line\">  -t            : test configuration and exit(检测配置文件的设置是否有错误)</div><div class=\"line\">  -T            : test configuration, dump it and exit(检测配置设置,并显示详细信息)</div><div class=\"line\">  -q            : suppress non-error messages during configuration testing(检测配置文件时,使用-q参数可以不把error级别以下的信息显示)</div><div class=\"line\">  -s signal     : send signal to a master process: stop, quit, reopen, reload(发送信号到nginx master进程,控制nginx 进程停止,退出,重启等操作)</div><div class=\"line\">  -p prefix     : set prefix path (default: /usr/local/nginx/)(指定安装路径,是nignx在安装路径下查找配置文件启动)</div><div class=\"line\">  -c filename   : set configuration file (default: conf/nginx.conf)(指定配置文件路径启动)</div><div class=\"line\">  -g directives : set global directives out of configuration file(临时指定一些全局配置项,以使新的配置项生效.注意指定的配置项不能跟nginx.conf文件中的配置项冲突)</div></pre></td></tr></table></figure></p>\n<p>使用:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">#检查配置文件设置是否正确</div><div class=\"line\">[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -t</div><div class=\"line\">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</div><div class=\"line\">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</div><div class=\"line\">#使用-q参数,不显示error级别以下的信息,检查配置文件的时候</div><div class=\"line\">[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -t -q</div><div class=\"line\">#查看nginx的版本</div><div class=\"line\">[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -v</div><div class=\"line\">nginx version: nginx/1.11.1</div><div class=\"line\">#查看nginx的版本和编译时的设置参数</div><div class=\"line\">[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -V</div><div class=\"line\">nginx version: nginx/1.11.1</div><div class=\"line\">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC) </div><div class=\"line\">configure arguments:(因为使用默认参数编译,所以这里显示为空)</div><div class=\"line\">#快速停止nginx服务</div><div class=\"line\">[root@niaoyun49026 ~]# /usr/local/nginx/sbin/nginx -s stop</div><div class=\"line\">#相当于 kill -s SIGTRM &lt;nginx master pid &gt; || kill -s SIGINT &lt;nginx master pid&gt;</div><div class=\"line\">#优雅的停止nginx服务,先处理完当前所有的请求在提示服务</div><div class=\"line\">[root@niaoyun49026 ~]# /usr/local/nginx/sbin/nginx -s quit</div><div class=\"line\">#相当于 kill -s SIGQUIT &lt;nginx master pid&gt;</div><div class=\"line\">#如果要优雅的停止某个子线程的话</div><div class=\"line\">#kill -s SIGWINCH &lt;nginx worker pid&gt;</div><div class=\"line\"></div><div class=\"line\">#重启nginx ,先检查配置项是否有误,如果都正确就优雅的方式停止服务,再启动nginx</div><div class=\"line\">[root@niaoyun49026 ~]# /usr/local/nginx/sbin/nginx -s reload</div><div class=\"line\">#相当于 kill -s SIGHUP &lt;niginx master pid&gt;</div><div class=\"line\"></div><div class=\"line\">#使日志文件回滚,就是将日志文件备份后,移动到备份目录,在生成一个新日志文件</div><div class=\"line\">[root@niaoyun49026 ~]# /usr/local/nginx/sbin/nginx -s reopen</div><div class=\"line\">#相当于 kill -s SIGUSR1 &lt;nginx master pid&gt;</div><div class=\"line\"></div><div class=\"line\">#启动nginx</div><div class=\"line\">[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx </div><div class=\"line\">#启动nginx同时指定配置文件路径</div><div class=\"line\">[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</div><div class=\"line\">#启动nginx,以指定安装目录的方式启动</div><div class=\"line\">[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -p /usr/local/nginx/</div><div class=\"line\">#启动nginx,使用-g参数临时指定配置项</div><div class=\"line\">[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -g &quot;pid /tmp/test.pid;&quot;</div><div class=\"line\">#注意,因为这里临时指定了pid的文件路径,所有重启&amp;&amp;停止等操作,都要指定启动的时候的pid路径参数,否则会找不到pid,无法对进程进行操作</div><div class=\"line\">[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -g &quot;pid /tmp/test.pid;&quot;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>认识nginx进程:</p>\n<p>启动nginx服务,可以发现nginx有master process 和 worker process 在运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@niaoyun49026 ~]# ps -ef | grep  nginx</div><div class=\"line\">root      16230      1  0 21:47 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</div><div class=\"line\">nobody    16231  16230  0 21:47 ?        00:00:00 nginx: worker process</div><div class=\"line\">root      16233  16175  0 21:47 pts/1    00:00:00 grep --color=auto nginx</div></pre></td></tr></table></figure><br>master process: 唯一的,该进程不会对客户端请求提供服务,主要负责管理worker进程,为管理员提供命令行服务,包括启动,停止,重启等服务,当任意一个worker进程出现错误时,master进程会理解启动一个新的worker进程,继续提供服务<br>worker process: 多个,处理客户端的请求.一般情况下,worker 进程数和服务器的cpu的核数相当(进程间切换的代价最小),worker进程之间通过共享内存,原子操作等进程间通信方式实现负载均衡等功能.不同于apache(一个进程或线程只能处理一个请求),nginx的一个worker进程可以同时处理的请求数只受限于内存大小.worker进程间处理并发请求几乎没有同步锁,worker进程通常不会进入睡眠状态.</p>\n","excerpt":"","more":"<p>安装完成nginx后,默认路径在/usr/local/nginx目录,在该目录可以看到一下文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@niaoyun49026 nginx]# ls -al</div><div class=\"line\">total 8</div><div class=\"line\">drwxr-xr-x  11 root   root  142 Jul 15 16:15 .</div><div class=\"line\">drwxr-xr-x. 13 root   root 4096 Jul 15 16:00 ..</div><div class=\"line\">drwx------   2 nobody root    6 Jul 15 16:15 client_body_temp(保存客户端请求包体的临时目录)</div><div class=\"line\">drwxr-xr-x   2 root   root 4096 Jul 15 16:00 conf(配置文件)</div><div class=\"line\">drwx------   2 nobody root    6 Jul 15 16:15 fastcgi_temp</div><div class=\"line\">drwxr-xr-x   2 root   root   38 Jul 15 16:00 html(nginx显示50x等错误信息的网页)</div><div class=\"line\">drwxr-xr-x   2 root   root   55 Jul 15 16:15 logs(nginx的日志文件)</div><div class=\"line\">drwx------   2 nobody root    6 Jul 15 16:15 proxy_temp</div><div class=\"line\">drwxr-xr-x   2 root   root   18 Jul 15 16:00 sbin(nginx的二进制文件)</div><div class=\"line\">drwx------   2 nobody root    6 Jul 15 16:15 scgi_temp</div><div class=\"line\">drwx------   2 nobody root    6 Jul 15 16:15 uwsgi_temp</div></pre></td></tr></table></figure></p>\n<p>nginx的命令控制<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@niaoyun49026 sbin]# ./nginx -h</div><div class=\"line\">nginx version: nginx/1.11.1</div><div class=\"line\">Usage: nginx [-?hvVtTq] [-s signal] [-c filename] [-p prefix] [-g directives]</div><div class=\"line\"></div><div class=\"line\">Options:</div><div class=\"line\">  -?,-h         : this help(显示帮助信息)</div><div class=\"line\">  -v            : show version and exit(显示版本)</div><div class=\"line\">  -V            : show version and configure options then exit(显示版本&amp;&amp;编译时参数设置值)</div><div class=\"line\">  -t            : test configuration and exit(检测配置文件的设置是否有错误)</div><div class=\"line\">  -T            : test configuration, dump it and exit(检测配置设置,并显示详细信息)</div><div class=\"line\">  -q            : suppress non-error messages during configuration testing(检测配置文件时,使用-q参数可以不把error级别以下的信息显示)</div><div class=\"line\">  -s signal     : send signal to a master process: stop, quit, reopen, reload(发送信号到nginx master进程,控制nginx 进程停止,退出,重启等操作)</div><div class=\"line\">  -p prefix     : set prefix path (default: /usr/local/nginx/)(指定安装路径,是nignx在安装路径下查找配置文件启动)</div><div class=\"line\">  -c filename   : set configuration file (default: conf/nginx.conf)(指定配置文件路径启动)</div><div class=\"line\">  -g directives : set global directives out of configuration file(临时指定一些全局配置项,以使新的配置项生效.注意指定的配置项不能跟nginx.conf文件中的配置项冲突)</div></pre></td></tr></table></figure></p>\n<p>使用:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">#检查配置文件设置是否正确</div><div class=\"line\">[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -t</div><div class=\"line\">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</div><div class=\"line\">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</div><div class=\"line\">#使用-q参数,不显示error级别以下的信息,检查配置文件的时候</div><div class=\"line\">[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -t -q</div><div class=\"line\">#查看nginx的版本</div><div class=\"line\">[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -v</div><div class=\"line\">nginx version: nginx/1.11.1</div><div class=\"line\">#查看nginx的版本和编译时的设置参数</div><div class=\"line\">[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -V</div><div class=\"line\">nginx version: nginx/1.11.1</div><div class=\"line\">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC) </div><div class=\"line\">configure arguments:(因为使用默认参数编译,所以这里显示为空)</div><div class=\"line\">#快速停止nginx服务</div><div class=\"line\">[root@niaoyun49026 ~]# /usr/local/nginx/sbin/nginx -s stop</div><div class=\"line\">#相当于 kill -s SIGTRM &lt;nginx master pid &gt; || kill -s SIGINT &lt;nginx master pid&gt;</div><div class=\"line\">#优雅的停止nginx服务,先处理完当前所有的请求在提示服务</div><div class=\"line\">[root@niaoyun49026 ~]# /usr/local/nginx/sbin/nginx -s quit</div><div class=\"line\">#相当于 kill -s SIGQUIT &lt;nginx master pid&gt;</div><div class=\"line\">#如果要优雅的停止某个子线程的话</div><div class=\"line\">#kill -s SIGWINCH &lt;nginx worker pid&gt;</div><div class=\"line\"></div><div class=\"line\">#重启nginx ,先检查配置项是否有误,如果都正确就优雅的方式停止服务,再启动nginx</div><div class=\"line\">[root@niaoyun49026 ~]# /usr/local/nginx/sbin/nginx -s reload</div><div class=\"line\">#相当于 kill -s SIGHUP &lt;niginx master pid&gt;</div><div class=\"line\"></div><div class=\"line\">#使日志文件回滚,就是将日志文件备份后,移动到备份目录,在生成一个新日志文件</div><div class=\"line\">[root@niaoyun49026 ~]# /usr/local/nginx/sbin/nginx -s reopen</div><div class=\"line\">#相当于 kill -s SIGUSR1 &lt;nginx master pid&gt;</div><div class=\"line\"></div><div class=\"line\">#启动nginx</div><div class=\"line\">[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx </div><div class=\"line\">#启动nginx同时指定配置文件路径</div><div class=\"line\">[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</div><div class=\"line\">#启动nginx,以指定安装目录的方式启动</div><div class=\"line\">[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -p /usr/local/nginx/</div><div class=\"line\">#启动nginx,使用-g参数临时指定配置项</div><div class=\"line\">[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -g &quot;pid /tmp/test.pid;&quot;</div><div class=\"line\">#注意,因为这里临时指定了pid的文件路径,所有重启&amp;&amp;停止等操作,都要指定启动的时候的pid路径参数,否则会找不到pid,无法对进程进行操作</div><div class=\"line\">[root@niaoyun49026 sbin]# /usr/local/nginx/sbin/nginx -g &quot;pid /tmp/test.pid;&quot;</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>认识nginx进程:</p>\n<p>启动nginx服务,可以发现nginx有master process 和 worker process 在运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@niaoyun49026 ~]# ps -ef | grep  nginx</div><div class=\"line\">root      16230      1  0 21:47 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</div><div class=\"line\">nobody    16231  16230  0 21:47 ?        00:00:00 nginx: worker process</div><div class=\"line\">root      16233  16175  0 21:47 pts/1    00:00:00 grep --color=auto nginx</div></pre></td></tr></table></figure><br>master process: 唯一的,该进程不会对客户端请求提供服务,主要负责管理worker进程,为管理员提供命令行服务,包括启动,停止,重启等服务,当任意一个worker进程出现错误时,master进程会理解启动一个新的worker进程,继续提供服务<br>worker process: 多个,处理客户端的请求.一般情况下,worker 进程数和服务器的cpu的核数相当(进程间切换的代价最小),worker进程之间通过共享内存,原子操作等进程间通信方式实现负载均衡等功能.不同于apache(一个进程或线程只能处理一个请求),nginx的一个worker进程可以同时处理的请求数只受限于内存大小.worker进程间处理并发请求几乎没有同步锁,worker进程通常不会进入睡眠状态.</p>\n"},{"title":"openwrt上的uhttp的使用与配置","date":"2016-08-04T13:21:10.000Z","_content":"\nuHTTPd 是一个 OpenWrt/LUCI 开发者从头编写的 Web 服务器。 它着力于实现一个稳定高效的服务器，能够满足嵌入式设备的轻量级任务需求，且能够与 OpenWrt 的配置框架 (UCI) 整合。默认情况下它被用于 OpenWrt 的 Web 管理接口 LuCI。\nuHTTPd 也能提供一个常规 Web 服务器所需要的所有功能。包括 TLS (SSL)、CGI 以及 Lua。uHTTPd 是单线程的，但是支持多个实例 (例如，支持监听多个端口，每个端口都可以使用独立的文档根目录以及其他功能)。与其他很多 Web 服务器相比， uHTTPd 支持进程内执行 Lua，可以提高 Lua CGI 脚本的执行效率(官方说法)\n\n安装:\n{% codeblock %}\nopkg update\nopkg install uhttpd\n{% endcodeblock %}\n\n使用:\n{% codeblock %}\n[root@PandoraBox:/data/codebase/owncloud]#/etc/init.d/uhttpd -h\nSyntax: /etc/init.d/uhttpd [command]\n\nAvailable commands:\n\tstart\tStart the service\n\tstop\tStop the service\n\trestart\tRestart the service\n\treload\tReload configuration files (or restart if that fails)\n\tenable\tEnable service autostart\n\tdisable\tDisable service autostart\n{% endcodeblock %}\n\n配置:\n\nconfig 'uhttpd' 'main'\n        option 'listen_http' '80'\n        option 'home'        '/www'\n\n\n项:\nlisten_http\t  \t\t设置http   ip地址&端口   0.0.0.0:88'   [::]:80 \nlisten_https  \t\t设置TLS,https ip地址&端口   0.0.0.0:443'   [::]:433 \nhome \t\t  \t\t设置网站根目录  默认值: /www \ncert          \t\t设置listen_https项后,启用https,需要设置crt证书文件 \t默认值:/etc/uhttpd.crt\nkey\t\t\t  \t\t设置listen_https项后,启用https,需要设置key文件 \t    默认值:/etc/uhttpd.key\ncgi_prefix    \t\t定义cgi脚本的前缀 ,相对于完整根目录  默认:/cgi-bin\nlua_prefix    \t\t定义lua脚本的前缀\nlua_handler   \t\t定义lua脚本的handler\nscript_timeout\t\tcgi脚本超时时间, 默认60\nnetwork_timeout\t\t网络请求超时时间, 默认30\nrealm \t\t\t\tBasic authentication realm when prompting the client for credentials (HTTP 400)  local hostname\nConfig      \t\t配置文件\nindex_file\t\t\t主页文件,默认加载的文件 index.html, index.htm, default.html, default.htm\nindex_page\t\t\t主页,默认index.html\nerror_page\t\t\t错误页\nno_symlinks\t\t\t默认0\nno_dirlists\t\t\t是否可以浏览文件夹列表,默认 0\nhttp_keepalive\t\thttp保持连接 ,可复用连接数,默认30\nmax_requests\t\t最大请求数,默认3\nmax_connections\t\t最大连接数, 默认100\n\n\n配置文件路径:/etc/config/uhttp\n\n使用php的配置:\n{% codeblock %}\n list interpreter \".php=/usr/bin/php-cgi\"\n {% endcodeblock %}\n\n使用lua(源自官网):\n{% codeblock %}\nroot@OpenWrt:~# opkg install uhttpd-mod-lua\nInstalling uhttpd-mod-lua (18) to root...\nDownloading http://downloads.openwrt.org/snapshots/trunk/ar71xx/packages/uhttpd-mod-lua_18_ar71xx.ipk.\nConfiguring uhttpd-mod-lua.\nroot@OpenWrt:~# uci set uhttpd.main.lua_prefix=/lua\nroot@OpenWrt:~# uci set uhttpd.main.lua_handler=/root/test.lua\nroot@OpenWrt:~# cat /root/test.lua\nfunction handle_request(env)\n        uhttpd.send(\"Status: 200 OK\\r\\n\")\n        uhttpd.send(\"Content-Type: text/plain\\r\\n\\r\\n\")\n        uhttpd.send(\"Hello world.\\n\")\nend\nroot@OpenWrt:~# /etc/init.d/uhttpd restart\nroot@OpenWrt:~# wget -qO- http://127.0.0.1/lua/\nHello world.\nroot@OpenWrt:~#\n{% endcodeblock %}\n\n参考:\n\n{% link https://wiki.openwrt.org/doc/howto/owncloud %}\n","source":"_posts/openwrt上的uhttp的使用与配置.md","raw":"---\ntitle: openwrt上的uhttp的使用与配置\ndate: 2016-08-04 21:21:10\ntags:\n---\n\nuHTTPd 是一个 OpenWrt/LUCI 开发者从头编写的 Web 服务器。 它着力于实现一个稳定高效的服务器，能够满足嵌入式设备的轻量级任务需求，且能够与 OpenWrt 的配置框架 (UCI) 整合。默认情况下它被用于 OpenWrt 的 Web 管理接口 LuCI。\nuHTTPd 也能提供一个常规 Web 服务器所需要的所有功能。包括 TLS (SSL)、CGI 以及 Lua。uHTTPd 是单线程的，但是支持多个实例 (例如，支持监听多个端口，每个端口都可以使用独立的文档根目录以及其他功能)。与其他很多 Web 服务器相比， uHTTPd 支持进程内执行 Lua，可以提高 Lua CGI 脚本的执行效率(官方说法)\n\n安装:\n{% codeblock %}\nopkg update\nopkg install uhttpd\n{% endcodeblock %}\n\n使用:\n{% codeblock %}\n[root@PandoraBox:/data/codebase/owncloud]#/etc/init.d/uhttpd -h\nSyntax: /etc/init.d/uhttpd [command]\n\nAvailable commands:\n\tstart\tStart the service\n\tstop\tStop the service\n\trestart\tRestart the service\n\treload\tReload configuration files (or restart if that fails)\n\tenable\tEnable service autostart\n\tdisable\tDisable service autostart\n{% endcodeblock %}\n\n配置:\n\nconfig 'uhttpd' 'main'\n        option 'listen_http' '80'\n        option 'home'        '/www'\n\n\n项:\nlisten_http\t  \t\t设置http   ip地址&端口   0.0.0.0:88'   [::]:80 \nlisten_https  \t\t设置TLS,https ip地址&端口   0.0.0.0:443'   [::]:433 \nhome \t\t  \t\t设置网站根目录  默认值: /www \ncert          \t\t设置listen_https项后,启用https,需要设置crt证书文件 \t默认值:/etc/uhttpd.crt\nkey\t\t\t  \t\t设置listen_https项后,启用https,需要设置key文件 \t    默认值:/etc/uhttpd.key\ncgi_prefix    \t\t定义cgi脚本的前缀 ,相对于完整根目录  默认:/cgi-bin\nlua_prefix    \t\t定义lua脚本的前缀\nlua_handler   \t\t定义lua脚本的handler\nscript_timeout\t\tcgi脚本超时时间, 默认60\nnetwork_timeout\t\t网络请求超时时间, 默认30\nrealm \t\t\t\tBasic authentication realm when prompting the client for credentials (HTTP 400)  local hostname\nConfig      \t\t配置文件\nindex_file\t\t\t主页文件,默认加载的文件 index.html, index.htm, default.html, default.htm\nindex_page\t\t\t主页,默认index.html\nerror_page\t\t\t错误页\nno_symlinks\t\t\t默认0\nno_dirlists\t\t\t是否可以浏览文件夹列表,默认 0\nhttp_keepalive\t\thttp保持连接 ,可复用连接数,默认30\nmax_requests\t\t最大请求数,默认3\nmax_connections\t\t最大连接数, 默认100\n\n\n配置文件路径:/etc/config/uhttp\n\n使用php的配置:\n{% codeblock %}\n list interpreter \".php=/usr/bin/php-cgi\"\n {% endcodeblock %}\n\n使用lua(源自官网):\n{% codeblock %}\nroot@OpenWrt:~# opkg install uhttpd-mod-lua\nInstalling uhttpd-mod-lua (18) to root...\nDownloading http://downloads.openwrt.org/snapshots/trunk/ar71xx/packages/uhttpd-mod-lua_18_ar71xx.ipk.\nConfiguring uhttpd-mod-lua.\nroot@OpenWrt:~# uci set uhttpd.main.lua_prefix=/lua\nroot@OpenWrt:~# uci set uhttpd.main.lua_handler=/root/test.lua\nroot@OpenWrt:~# cat /root/test.lua\nfunction handle_request(env)\n        uhttpd.send(\"Status: 200 OK\\r\\n\")\n        uhttpd.send(\"Content-Type: text/plain\\r\\n\\r\\n\")\n        uhttpd.send(\"Hello world.\\n\")\nend\nroot@OpenWrt:~# /etc/init.d/uhttpd restart\nroot@OpenWrt:~# wget -qO- http://127.0.0.1/lua/\nHello world.\nroot@OpenWrt:~#\n{% endcodeblock %}\n\n参考:\n\n{% link https://wiki.openwrt.org/doc/howto/owncloud %}\n","slug":"openwrt上的uhttp的使用与配置","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeiem3000jznz45xx5xwcj","content":"<p>uHTTPd 是一个 OpenWrt/LUCI 开发者从头编写的 Web 服务器。 它着力于实现一个稳定高效的服务器，能够满足嵌入式设备的轻量级任务需求，且能够与 OpenWrt 的配置框架 (UCI) 整合。默认情况下它被用于 OpenWrt 的 Web 管理接口 LuCI。<br>uHTTPd 也能提供一个常规 Web 服务器所需要的所有功能。包括 TLS (SSL)、CGI 以及 Lua。uHTTPd 是单线程的，但是支持多个实例 (例如，支持监听多个端口，每个端口都可以使用独立的文档根目录以及其他功能)。与其他很多 Web 服务器相比， uHTTPd 支持进程内执行 Lua，可以提高 Lua CGI 脚本的执行效率(官方说法)</p>\n<p>安装:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg update</div><div class=\"line\">opkg install uhttpd</div></pre></td></tr></table></figure></p>\n<p>使用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/data/codebase/owncloud]#/etc/init.d/uhttpd -h</div><div class=\"line\">Syntax: /etc/init.d/uhttpd [command]</div><div class=\"line\"></div><div class=\"line\">Available commands:</div><div class=\"line\">\tstart\tStart the service</div><div class=\"line\">\tstop\tStop the service</div><div class=\"line\">\trestart\tRestart the service</div><div class=\"line\">\treload\tReload configuration files (or restart if that fails)</div><div class=\"line\">\tenable\tEnable service autostart</div><div class=\"line\">\tdisable\tDisable service autostart</div></pre></td></tr></table></figure></p>\n<p>配置:</p>\n<p>config ‘uhttpd’ ‘main’<br>        option ‘listen_http’ ‘80’<br>        option ‘home’        ‘/www’</p>\n<p>项:<br>listen_http              设置http   ip地址&amp;端口   0.0.0.0:88’   [::]:80<br>listen_https          设置TLS,https ip地址&amp;端口   0.0.0.0:443’   [::]:433<br>home                   设置网站根目录  默认值: /www<br>cert                  设置listen_https项后,启用https,需要设置crt证书文件     默认值:/etc/uhttpd.crt<br>key                      设置listen_https项后,启用https,需要设置key文件         默认值:/etc/uhttpd.key<br>cgi_prefix            定义cgi脚本的前缀 ,相对于完整根目录  默认:/cgi-bin<br>lua_prefix            定义lua脚本的前缀<br>lua_handler           定义lua脚本的handler<br>script_timeout        cgi脚本超时时间, 默认60<br>network_timeout        网络请求超时时间, 默认30<br>realm                 Basic authentication realm when prompting the client for credentials (HTTP 400)  local hostname<br>Config              配置文件<br>index_file            主页文件,默认加载的文件 index.html, index.htm, default.html, default.htm<br>index_page            主页,默认index.html<br>error_page            错误页<br>no_symlinks            默认0<br>no_dirlists            是否可以浏览文件夹列表,默认 0<br>http_keepalive        http保持连接 ,可复用连接数,默认30<br>max_requests        最大请求数,默认3<br>max_connections        最大连接数, 默认100</p>\n<p>配置文件路径:/etc/config/uhttp</p>\n<p>使用php的配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">list interpreter &quot;.php=/usr/bin/php-cgi&quot;</div></pre></td></tr></table></figure></p>\n<p>使用lua(源自官网):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@OpenWrt:~# opkg install uhttpd-mod-lua</div><div class=\"line\">Installing uhttpd-mod-lua (18) to root...</div><div class=\"line\">Downloading http://downloads.openwrt.org/snapshots/trunk/ar71xx/packages/uhttpd-mod-lua_18_ar71xx.ipk.</div><div class=\"line\">Configuring uhttpd-mod-lua.</div><div class=\"line\">root@OpenWrt:~# uci set uhttpd.main.lua_prefix=/lua</div><div class=\"line\">root@OpenWrt:~# uci set uhttpd.main.lua_handler=/root/test.lua</div><div class=\"line\">root@OpenWrt:~# cat /root/test.lua</div><div class=\"line\">function handle_request(env)</div><div class=\"line\">        uhttpd.send(&quot;Status: 200 OK\\r\\n&quot;)</div><div class=\"line\">        uhttpd.send(&quot;Content-Type: text/plain\\r\\n\\r\\n&quot;)</div><div class=\"line\">        uhttpd.send(&quot;Hello world.\\n&quot;)</div><div class=\"line\">end</div><div class=\"line\">root@OpenWrt:~# /etc/init.d/uhttpd restart</div><div class=\"line\">root@OpenWrt:~# wget -qO- http://127.0.0.1/lua/</div><div class=\"line\">Hello world.</div><div class=\"line\">root@OpenWrt:~#</div></pre></td></tr></table></figure></p>\n<p>参考:</p>\n<a href=\"https://wiki.openwrt.org/doc/howto/owncloud\" target=\"_blank\" rel=\"external\"></a>\n","excerpt":"","more":"<p>uHTTPd 是一个 OpenWrt/LUCI 开发者从头编写的 Web 服务器。 它着力于实现一个稳定高效的服务器，能够满足嵌入式设备的轻量级任务需求，且能够与 OpenWrt 的配置框架 (UCI) 整合。默认情况下它被用于 OpenWrt 的 Web 管理接口 LuCI。<br>uHTTPd 也能提供一个常规 Web 服务器所需要的所有功能。包括 TLS (SSL)、CGI 以及 Lua。uHTTPd 是单线程的，但是支持多个实例 (例如，支持监听多个端口，每个端口都可以使用独立的文档根目录以及其他功能)。与其他很多 Web 服务器相比， uHTTPd 支持进程内执行 Lua，可以提高 Lua CGI 脚本的执行效率(官方说法)</p>\n<p>安装:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg update</div><div class=\"line\">opkg install uhttpd</div></pre></td></tr></table></figure></p>\n<p>使用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/data/codebase/owncloud]#/etc/init.d/uhttpd -h</div><div class=\"line\">Syntax: /etc/init.d/uhttpd [command]</div><div class=\"line\"></div><div class=\"line\">Available commands:</div><div class=\"line\">\tstart\tStart the service</div><div class=\"line\">\tstop\tStop the service</div><div class=\"line\">\trestart\tRestart the service</div><div class=\"line\">\treload\tReload configuration files (or restart if that fails)</div><div class=\"line\">\tenable\tEnable service autostart</div><div class=\"line\">\tdisable\tDisable service autostart</div></pre></td></tr></table></figure></p>\n<p>配置:</p>\n<p>config ‘uhttpd’ ‘main’<br>        option ‘listen_http’ ‘80’<br>        option ‘home’        ‘/www’</p>\n<p>项:<br>listen_http              设置http   ip地址&amp;端口   0.0.0.0:88’   [::]:80<br>listen_https          设置TLS,https ip地址&amp;端口   0.0.0.0:443’   [::]:433<br>home                   设置网站根目录  默认值: /www<br>cert                  设置listen_https项后,启用https,需要设置crt证书文件     默认值:/etc/uhttpd.crt<br>key                      设置listen_https项后,启用https,需要设置key文件         默认值:/etc/uhttpd.key<br>cgi_prefix            定义cgi脚本的前缀 ,相对于完整根目录  默认:/cgi-bin<br>lua_prefix            定义lua脚本的前缀<br>lua_handler           定义lua脚本的handler<br>script_timeout        cgi脚本超时时间, 默认60<br>network_timeout        网络请求超时时间, 默认30<br>realm                 Basic authentication realm when prompting the client for credentials (HTTP 400)  local hostname<br>Config              配置文件<br>index_file            主页文件,默认加载的文件 index.html, index.htm, default.html, default.htm<br>index_page            主页,默认index.html<br>error_page            错误页<br>no_symlinks            默认0<br>no_dirlists            是否可以浏览文件夹列表,默认 0<br>http_keepalive        http保持连接 ,可复用连接数,默认30<br>max_requests        最大请求数,默认3<br>max_connections        最大连接数, 默认100</p>\n<p>配置文件路径:/etc/config/uhttp</p>\n<p>使用php的配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">list interpreter &quot;.php=/usr/bin/php-cgi&quot;</div></pre></td></tr></table></figure></p>\n<p>使用lua(源自官网):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@OpenWrt:~# opkg install uhttpd-mod-lua</div><div class=\"line\">Installing uhttpd-mod-lua (18) to root...</div><div class=\"line\">Downloading http://downloads.openwrt.org/snapshots/trunk/ar71xx/packages/uhttpd-mod-lua_18_ar71xx.ipk.</div><div class=\"line\">Configuring uhttpd-mod-lua.</div><div class=\"line\">root@OpenWrt:~# uci set uhttpd.main.lua_prefix=/lua</div><div class=\"line\">root@OpenWrt:~# uci set uhttpd.main.lua_handler=/root/test.lua</div><div class=\"line\">root@OpenWrt:~# cat /root/test.lua</div><div class=\"line\">function handle_request(env)</div><div class=\"line\">        uhttpd.send(&quot;Status: 200 OK\\r\\n&quot;)</div><div class=\"line\">        uhttpd.send(&quot;Content-Type: text/plain\\r\\n\\r\\n&quot;)</div><div class=\"line\">        uhttpd.send(&quot;Hello world.\\n&quot;)</div><div class=\"line\">end</div><div class=\"line\">root@OpenWrt:~# /etc/init.d/uhttpd restart</div><div class=\"line\">root@OpenWrt:~# wget -qO- http://127.0.0.1/lua/</div><div class=\"line\">Hello world.</div><div class=\"line\">root@OpenWrt:~#</div></pre></td></tr></table></figure></p>\n<p>参考:</p>\n<a href=\"https://wiki.openwrt.org/doc/howto/owncloud\"></a>\n"},{"title":"owncloud安装在openwrt路由器上","date":"2016-08-04T13:20:42.000Z","_content":"之前研究owncloud,突然想将它装在家里的路由器上.\n说干就干,然后记录以下自己忙活的过程.\n\n1.下载源码:\n{% codeblock %}\n[root@PandoraBox:/root]# mkdir /data/codebase\n[rroot@PandoraBox:/root]# wget https://download.owncloud.org/community/owncloud-9.1.0.tar.bz2\n--2016-07-27 17:21:11--  https://download.owncloud.org/community/owncloud-9.1.0.tar.bz2\nResolving download.owncloud.org (download.owncloud.org)... 188.40.127.122, 148.251.209.106, 188.40.68.177, ...\nConnecting to download.owncloud.org (download.owncloud.org)|188.40.127.122|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 29055490 (28M) [application/x-bzip2]\nSaving to: wncloud-9.1.0.tar.bz2\n2016-07-27 17:44:55\n{% endcodeblock %}\n\n解压源码:\n{% codeblock %}\n#需要先安装tar\n[root@PandoraBox:/root]# opkg install tar\n#解压\n[root@PandoraBox:/root]# tar -xvf owncloud-9.1.0.tar.bz2 -C /data/codebase/\n{% endcodeblock %}\n\n2.安装php:\n{% codeblock %}\n[root@PandoraBox:/root]# opkg install php5 php5-cgi php5-fastcgi php5-mod-json php5-mod-session php5-mod-zip libsqlite3 zoneinfo-core php5-mod-pdo php5-mod-pdo-sqlite php5-mod-ctype php5-mod-mbstring php5-mod-gd sqlite3-cli php5-mod-sqlite3 php5-mod-curl curl php5-mod-xml php5-mod-simplexml php5-mod-hash php5-mod-dom php5-mod-iconv\n\n[root@PandoraBox:/root]# opkg install php5-mod-mcrypt php5-mod-openssl php5-mod-fileinfo php5-mod-exif\n\n[root@PandoraBox:/root]#opkg install php5-mod-xmlreader php5-mod-xmlwriter\n\n{% endcodeblock %}\n\n那些梗:\n\n安装完成后,运行发先出错了,错误如下:\n{% codeblock %}\n[root@PandoraBox:/root]#php-cli \nPHP Warning:  PHP Startup: Unable to load dynamic library '/usr/lib/php/gd.so' - File not found in Unknown on line 0\n{% endcodeblock %}\n查资料后,发现可能是lib库的问题,重装下:\n{% codeblock %}\n[root@PandoraBox:/root]#opkg install php5-mod-gd libjpeg libpng libgd  --force-reinstal\n{% endcodeblock %}\n\n然后报错:\n{% codeblock %}\n[root@PandoraBox:/root]#opkg install php5-mod-gd libjpeg libpng libgd  --force-r\neinstall\nRemoving package php5-mod-gd from root...\nRemoving package libpng from root...\nInstalling php5-mod-gd (5.4.27-1) to root...\nDownloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/oldpackages/php5-mod-gd_5.4.27-1_ralink.ipk.\nInstalling libjpeg (9a-1) to root...\nInstalling libjpeg (9a-1) to root...\nInstalling libpng (1.2.51-1) to root...\nDownloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/packages/libpng_1.2.51-1_ralink.ipk.\nInstalling libgd (2.1.0-1) to root...\nDownloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/packages/libgd_2.1.0-1_ralink.ipk.\nInstalling libjpeg (9a-1) to root...\nConfiguring libpng.\nCollected errors:\n * opkg_download_pkg: Package libjpeg is not available from any configured src.\n * opkg_install_pkg: Failed to download libjpeg. Perhaps you need to run 'opkg update'?\n #所以严重怀疑是libjepg库,没装好\n * opkg_install_cmd: Cannot install package php5-mod-gd.\n * opkg_download_pkg: Package libjpeg is not available from any configured src.\n * opkg_install_pkg: Failed to download libjpeg. Perhaps you need to run 'opkg update'?\n * opkg_install_cmd: Cannot install package libjpeg.\n * opkg_download_pkg: Package libjpeg is not available from any configured src.\n * opkg_install_pkg: Failed to download libjpeg. Perhaps you need to run 'opkg update'?\n * opkg_install_cmd: Cannot install package libgd.\n\n#怀疑libjepg库,没装好,所以单独装一下:\n[root@PandoraBox:/root]#opkg install  libjpeg\nInstalling libjpeg (9a-1) to root...\nCollected errors:\n * opkg_download_pkg: Package libjpeg is not available from any configured src.\n * opkg_install_pkg: Failed to download libjpeg. Perhaps you need to run 'opkg update'?\n * opkg_install_cmd: Cannot install package libjpeg.\n\n\n #所以应该这个包没法现在,看下还有那些可以替代的包\n [root@PandoraBox:/root]#opkg list libjpeg*\nlibjpeg - 9a-1\nlibjpeg - 6b-1 - The Independent JPEG Group's JPEG runtime library\n#发现libjpeg - 6b-1可用,然后去官网下载这个包,安装:\n[root@PandoraBox:/root]#wget http://downloads.openwrt.org.cn/PandoraBox/ralink/p\nackages/packages/libjpeg_6b-1_ralink.ipk\n--2016-08-03 21:15:58--  http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/packages/libjpeg_6b-1_ralink.ipk\nResolving downloads.openwrt.org.cn... 106.185.25.62\nConnecting to downloads.openwrt.org.cn|106.185.25.62|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 55298 (54K) [application/octet-stream]\nSaving to: 'libjpeg_6b-1_ralink.ipk'\n\nlibjpeg_6b-1_ralink 100%[=====================>]  54.00K  15.1KB/s   in 3.6s   \n\n2016-08-03 21:16:03 (15.1 KB/s) - 'libjpeg_6b-1_ralink.ipk' saved [55298/55298]\n\n[root@PandoraBox:/root]#opkg install libjpeg_6b-1_ralink.ipk \nInstalling libjpeg (6b-1) to root...\nConfiguring libjpeg.\n\n#最后再安装一下php-gd,发现问题解决了\n[root@PandoraBox:/root]#opkg install php5-mod-gd \nInstalling php5-mod-gd (5.4.27-1) to root...\nDownloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/oldpackages/php5-mod-gd_5.4.27-1_ralink.ipk.\n\nConfiguring php5-mod-gd.\n{% endcodeblock %}\n\n3.配置web server:\n\n对于web server,本来想用nginx,但发现pandorabox有自带的uhttp,所有用自带的.修改相应配置文件/etc/config/uhttpd \n配置如下:\n{% codeblock %}\nvim /etc/config/uhttpd\n\n#首先将原来路由器的web的端口改为其他的,我这里改为88 和4430\nconfig uhttpd 'main'\n\tlist listen_http '0.0.0.0:88' \n\tlist listen_http '[::]:88'\n\tlist listen_https '0.0.0.0:4430'\n\tlist listen_https '[::]:4430'\n\toption home '/www'\n\toption rfc1918_filter '1'\n\toption max_requests '3'\n\toption max_connections '100'\n\toption cert '/etc/uhttpd.crt'\n\toption key '/etc/uhttpd.key'\n\toption cgi_prefix '/cgi-bin'\n\toption script_timeout '60'\n\toption network_timeout '30'\n\toption http_keepalive '20'\n\toption tcp_keepalive '1'\n\toption ubus_prefix '/ubus'\n\tlist index_page 'cgi-bin/luci'\n\nconfig cert 'px5g'\n\toption days '730'\n\toption bits '1024'\n\toption country 'DE'\n\toption state 'Berlin'\n\toption location 'Berlin'\n\toption commonname 'OpenWrt'\n#配置\nconfig uhttpd 'owncloud'\n        list listen_http '0.0.0.0:80'\n        list listen_http '[::]:80'\n        list listen_https '0.0.0.0:443'\n        list listen_https '[::]:443'\n\n        option home '/data/codebase/owncloud'\n        option index_page  index.php, index.html, index.htm, default.html, default.htm\n\n        option rfc1918_filter '1'\n        option max_requests '3'\n        option max_connections '100'\n        option cert '/data/ssl/c.miaoxiaohei.com.crt'\n        option key '/data/ssl/c.miaoxiaohei.com.key'\n        option script_timeout '60'\n        option network_timeout '30'\n        option http_keepalive '20'\n        option tcp_keepalive '1'\n        option cgi_prefix '/cgi-bin'\n        #配置php-cgi\n        list interpreter  \".php=/usr/bin/php-cgi\"\n\n\n{% endcodeblock %}\n\n\n4.打开浏览器,输入192.168.1.1 进入安装安装界面\n安装之前需要创建打data目录,存放数据\n{% codeblock %}\n[root@PandoraBox:/root]# mkdir /data/codeblock/owncloud/data\n{% endcodeblock %}\n\n那些梗:\n安装的时间,发现报错了,具体错误如下:\n\n设置语言为 en_US.UTF-8/fr_FR.UTF-8/es_ES.UTF-8/de_DE.UTF-8/ru_RU.UTF-8/pt_BR.UTF-8/it_IT.UTF-8/ja_JP.UTF-8/zh_CN.UTF-8 失败\nPlease install one of these locales on your system and restart your webserver.\n\n然后找了很久的解决方案,1)安装6以下的owncloud版本 2)设置语言 3)修改代码\n\n然后我用修改代码的方法解决了\n{% codeblock %}\n[root@PandoraBox:/root]#vim /data/codebase/owncloud/lib/private/legacy/util.php \n\n        public static function isSetLocaleWorking() {                           \n                // setlocale test is pointless on Windows                      \n                if (OC_Util::runningOnWindows()) {                              \n                        return true;                                            \n                }                                                               \n                                                                                \n                \\Patchwork\\Utf8\\Bootup::initLocale();                         \n                //将这里注释掉了\n                if ('' === basename('..')) {                                    \n                        //return false;                                         \n                }                                                               \n                return true;                                                    \n        } \n{% endcodeblock %}\n\n到这里.................就已经安装完成.\n\n安装完成后,发现运行不是很流畅,性能有问题","source":"_posts/owncloud安装在openwrt路由器上.md","raw":"---\ntitle: owncloud安装在openwrt路由器上\ndate: 2016-08-04 21:20:42\ntags:\n---\n之前研究owncloud,突然想将它装在家里的路由器上.\n说干就干,然后记录以下自己忙活的过程.\n\n1.下载源码:\n{% codeblock %}\n[root@PandoraBox:/root]# mkdir /data/codebase\n[rroot@PandoraBox:/root]# wget https://download.owncloud.org/community/owncloud-9.1.0.tar.bz2\n--2016-07-27 17:21:11--  https://download.owncloud.org/community/owncloud-9.1.0.tar.bz2\nResolving download.owncloud.org (download.owncloud.org)... 188.40.127.122, 148.251.209.106, 188.40.68.177, ...\nConnecting to download.owncloud.org (download.owncloud.org)|188.40.127.122|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 29055490 (28M) [application/x-bzip2]\nSaving to: wncloud-9.1.0.tar.bz2\n2016-07-27 17:44:55\n{% endcodeblock %}\n\n解压源码:\n{% codeblock %}\n#需要先安装tar\n[root@PandoraBox:/root]# opkg install tar\n#解压\n[root@PandoraBox:/root]# tar -xvf owncloud-9.1.0.tar.bz2 -C /data/codebase/\n{% endcodeblock %}\n\n2.安装php:\n{% codeblock %}\n[root@PandoraBox:/root]# opkg install php5 php5-cgi php5-fastcgi php5-mod-json php5-mod-session php5-mod-zip libsqlite3 zoneinfo-core php5-mod-pdo php5-mod-pdo-sqlite php5-mod-ctype php5-mod-mbstring php5-mod-gd sqlite3-cli php5-mod-sqlite3 php5-mod-curl curl php5-mod-xml php5-mod-simplexml php5-mod-hash php5-mod-dom php5-mod-iconv\n\n[root@PandoraBox:/root]# opkg install php5-mod-mcrypt php5-mod-openssl php5-mod-fileinfo php5-mod-exif\n\n[root@PandoraBox:/root]#opkg install php5-mod-xmlreader php5-mod-xmlwriter\n\n{% endcodeblock %}\n\n那些梗:\n\n安装完成后,运行发先出错了,错误如下:\n{% codeblock %}\n[root@PandoraBox:/root]#php-cli \nPHP Warning:  PHP Startup: Unable to load dynamic library '/usr/lib/php/gd.so' - File not found in Unknown on line 0\n{% endcodeblock %}\n查资料后,发现可能是lib库的问题,重装下:\n{% codeblock %}\n[root@PandoraBox:/root]#opkg install php5-mod-gd libjpeg libpng libgd  --force-reinstal\n{% endcodeblock %}\n\n然后报错:\n{% codeblock %}\n[root@PandoraBox:/root]#opkg install php5-mod-gd libjpeg libpng libgd  --force-r\neinstall\nRemoving package php5-mod-gd from root...\nRemoving package libpng from root...\nInstalling php5-mod-gd (5.4.27-1) to root...\nDownloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/oldpackages/php5-mod-gd_5.4.27-1_ralink.ipk.\nInstalling libjpeg (9a-1) to root...\nInstalling libjpeg (9a-1) to root...\nInstalling libpng (1.2.51-1) to root...\nDownloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/packages/libpng_1.2.51-1_ralink.ipk.\nInstalling libgd (2.1.0-1) to root...\nDownloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/packages/libgd_2.1.0-1_ralink.ipk.\nInstalling libjpeg (9a-1) to root...\nConfiguring libpng.\nCollected errors:\n * opkg_download_pkg: Package libjpeg is not available from any configured src.\n * opkg_install_pkg: Failed to download libjpeg. Perhaps you need to run 'opkg update'?\n #所以严重怀疑是libjepg库,没装好\n * opkg_install_cmd: Cannot install package php5-mod-gd.\n * opkg_download_pkg: Package libjpeg is not available from any configured src.\n * opkg_install_pkg: Failed to download libjpeg. Perhaps you need to run 'opkg update'?\n * opkg_install_cmd: Cannot install package libjpeg.\n * opkg_download_pkg: Package libjpeg is not available from any configured src.\n * opkg_install_pkg: Failed to download libjpeg. Perhaps you need to run 'opkg update'?\n * opkg_install_cmd: Cannot install package libgd.\n\n#怀疑libjepg库,没装好,所以单独装一下:\n[root@PandoraBox:/root]#opkg install  libjpeg\nInstalling libjpeg (9a-1) to root...\nCollected errors:\n * opkg_download_pkg: Package libjpeg is not available from any configured src.\n * opkg_install_pkg: Failed to download libjpeg. Perhaps you need to run 'opkg update'?\n * opkg_install_cmd: Cannot install package libjpeg.\n\n\n #所以应该这个包没法现在,看下还有那些可以替代的包\n [root@PandoraBox:/root]#opkg list libjpeg*\nlibjpeg - 9a-1\nlibjpeg - 6b-1 - The Independent JPEG Group's JPEG runtime library\n#发现libjpeg - 6b-1可用,然后去官网下载这个包,安装:\n[root@PandoraBox:/root]#wget http://downloads.openwrt.org.cn/PandoraBox/ralink/p\nackages/packages/libjpeg_6b-1_ralink.ipk\n--2016-08-03 21:15:58--  http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/packages/libjpeg_6b-1_ralink.ipk\nResolving downloads.openwrt.org.cn... 106.185.25.62\nConnecting to downloads.openwrt.org.cn|106.185.25.62|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 55298 (54K) [application/octet-stream]\nSaving to: 'libjpeg_6b-1_ralink.ipk'\n\nlibjpeg_6b-1_ralink 100%[=====================>]  54.00K  15.1KB/s   in 3.6s   \n\n2016-08-03 21:16:03 (15.1 KB/s) - 'libjpeg_6b-1_ralink.ipk' saved [55298/55298]\n\n[root@PandoraBox:/root]#opkg install libjpeg_6b-1_ralink.ipk \nInstalling libjpeg (6b-1) to root...\nConfiguring libjpeg.\n\n#最后再安装一下php-gd,发现问题解决了\n[root@PandoraBox:/root]#opkg install php5-mod-gd \nInstalling php5-mod-gd (5.4.27-1) to root...\nDownloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/oldpackages/php5-mod-gd_5.4.27-1_ralink.ipk.\n\nConfiguring php5-mod-gd.\n{% endcodeblock %}\n\n3.配置web server:\n\n对于web server,本来想用nginx,但发现pandorabox有自带的uhttp,所有用自带的.修改相应配置文件/etc/config/uhttpd \n配置如下:\n{% codeblock %}\nvim /etc/config/uhttpd\n\n#首先将原来路由器的web的端口改为其他的,我这里改为88 和4430\nconfig uhttpd 'main'\n\tlist listen_http '0.0.0.0:88' \n\tlist listen_http '[::]:88'\n\tlist listen_https '0.0.0.0:4430'\n\tlist listen_https '[::]:4430'\n\toption home '/www'\n\toption rfc1918_filter '1'\n\toption max_requests '3'\n\toption max_connections '100'\n\toption cert '/etc/uhttpd.crt'\n\toption key '/etc/uhttpd.key'\n\toption cgi_prefix '/cgi-bin'\n\toption script_timeout '60'\n\toption network_timeout '30'\n\toption http_keepalive '20'\n\toption tcp_keepalive '1'\n\toption ubus_prefix '/ubus'\n\tlist index_page 'cgi-bin/luci'\n\nconfig cert 'px5g'\n\toption days '730'\n\toption bits '1024'\n\toption country 'DE'\n\toption state 'Berlin'\n\toption location 'Berlin'\n\toption commonname 'OpenWrt'\n#配置\nconfig uhttpd 'owncloud'\n        list listen_http '0.0.0.0:80'\n        list listen_http '[::]:80'\n        list listen_https '0.0.0.0:443'\n        list listen_https '[::]:443'\n\n        option home '/data/codebase/owncloud'\n        option index_page  index.php, index.html, index.htm, default.html, default.htm\n\n        option rfc1918_filter '1'\n        option max_requests '3'\n        option max_connections '100'\n        option cert '/data/ssl/c.miaoxiaohei.com.crt'\n        option key '/data/ssl/c.miaoxiaohei.com.key'\n        option script_timeout '60'\n        option network_timeout '30'\n        option http_keepalive '20'\n        option tcp_keepalive '1'\n        option cgi_prefix '/cgi-bin'\n        #配置php-cgi\n        list interpreter  \".php=/usr/bin/php-cgi\"\n\n\n{% endcodeblock %}\n\n\n4.打开浏览器,输入192.168.1.1 进入安装安装界面\n安装之前需要创建打data目录,存放数据\n{% codeblock %}\n[root@PandoraBox:/root]# mkdir /data/codeblock/owncloud/data\n{% endcodeblock %}\n\n那些梗:\n安装的时间,发现报错了,具体错误如下:\n\n设置语言为 en_US.UTF-8/fr_FR.UTF-8/es_ES.UTF-8/de_DE.UTF-8/ru_RU.UTF-8/pt_BR.UTF-8/it_IT.UTF-8/ja_JP.UTF-8/zh_CN.UTF-8 失败\nPlease install one of these locales on your system and restart your webserver.\n\n然后找了很久的解决方案,1)安装6以下的owncloud版本 2)设置语言 3)修改代码\n\n然后我用修改代码的方法解决了\n{% codeblock %}\n[root@PandoraBox:/root]#vim /data/codebase/owncloud/lib/private/legacy/util.php \n\n        public static function isSetLocaleWorking() {                           \n                // setlocale test is pointless on Windows                      \n                if (OC_Util::runningOnWindows()) {                              \n                        return true;                                            \n                }                                                               \n                                                                                \n                \\Patchwork\\Utf8\\Bootup::initLocale();                         \n                //将这里注释掉了\n                if ('' === basename('..')) {                                    \n                        //return false;                                         \n                }                                                               \n                return true;                                                    \n        } \n{% endcodeblock %}\n\n到这里.................就已经安装完成.\n\n安装完成后,发现运行不是很流畅,性能有问题","slug":"owncloud安装在openwrt路由器上","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeiem5000lznz47gryoy4y","content":"<p>之前研究owncloud,突然想将它装在家里的路由器上.<br>说干就干,然后记录以下自己忙活的过程.</p>\n<p>1.下载源码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/root]# mkdir /data/codebase</div><div class=\"line\">[rroot@PandoraBox:/root]# wget https://download.owncloud.org/community/owncloud-9.1.0.tar.bz2</div><div class=\"line\">--2016-07-27 17:21:11--  https://download.owncloud.org/community/owncloud-9.1.0.tar.bz2</div><div class=\"line\">Resolving download.owncloud.org (download.owncloud.org)... 188.40.127.122, 148.251.209.106, 188.40.68.177, ...</div><div class=\"line\">Connecting to download.owncloud.org (download.owncloud.org)|188.40.127.122|:443... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 200 OK</div><div class=\"line\">Length: 29055490 (28M) [application/x-bzip2]</div><div class=\"line\">Saving to: wncloud-9.1.0.tar.bz2</div><div class=\"line\">2016-07-27 17:44:55</div></pre></td></tr></table></figure></p>\n<p>解压源码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#需要先安装tar</div><div class=\"line\">[root@PandoraBox:/root]# opkg install tar</div><div class=\"line\">#解压</div><div class=\"line\">[root@PandoraBox:/root]# tar -xvf owncloud-9.1.0.tar.bz2 -C /data/codebase/</div></pre></td></tr></table></figure></p>\n<p>2.安装php:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/root]# opkg install php5 php5-cgi php5-fastcgi php5-mod-json php5-mod-session php5-mod-zip libsqlite3 zoneinfo-core php5-mod-pdo php5-mod-pdo-sqlite php5-mod-ctype php5-mod-mbstring php5-mod-gd sqlite3-cli php5-mod-sqlite3 php5-mod-curl curl php5-mod-xml php5-mod-simplexml php5-mod-hash php5-mod-dom php5-mod-iconv</div><div class=\"line\"></div><div class=\"line\">[root@PandoraBox:/root]# opkg install php5-mod-mcrypt php5-mod-openssl php5-mod-fileinfo php5-mod-exif</div><div class=\"line\"></div><div class=\"line\">[root@PandoraBox:/root]#opkg install php5-mod-xmlreader php5-mod-xmlwriter</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>那些梗:</p>\n<p>安装完成后,运行发先出错了,错误如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/root]#php-cli </div><div class=\"line\">PHP Warning:  PHP Startup: Unable to load dynamic library &apos;/usr/lib/php/gd.so&apos; - File not found in Unknown on line 0</div></pre></td></tr></table></figure><br>查资料后,发现可能是lib库的问题,重装下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/root]#opkg install php5-mod-gd libjpeg libpng libgd  --force-reinstal</div></pre></td></tr></table></figure></p>\n<p>然后报错:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/root]#opkg install php5-mod-gd libjpeg libpng libgd  --force-r</div><div class=\"line\">einstall</div><div class=\"line\">Removing package php5-mod-gd from root...</div><div class=\"line\">Removing package libpng from root...</div><div class=\"line\">Installing php5-mod-gd (5.4.27-1) to root...</div><div class=\"line\">Downloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/oldpackages/php5-mod-gd_5.4.27-1_ralink.ipk.</div><div class=\"line\">Installing libjpeg (9a-1) to root...</div><div class=\"line\">Installing libjpeg (9a-1) to root...</div><div class=\"line\">Installing libpng (1.2.51-1) to root...</div><div class=\"line\">Downloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/packages/libpng_1.2.51-1_ralink.ipk.</div><div class=\"line\">Installing libgd (2.1.0-1) to root...</div><div class=\"line\">Downloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/packages/libgd_2.1.0-1_ralink.ipk.</div><div class=\"line\">Installing libjpeg (9a-1) to root...</div><div class=\"line\">Configuring libpng.</div><div class=\"line\">Collected errors:</div><div class=\"line\"> * opkg_download_pkg: Package libjpeg is not available from any configured src.</div><div class=\"line\"> * opkg_install_pkg: Failed to download libjpeg. Perhaps you need to run &apos;opkg update&apos;?</div><div class=\"line\"> #所以严重怀疑是libjepg库,没装好</div><div class=\"line\"> * opkg_install_cmd: Cannot install package php5-mod-gd.</div><div class=\"line\"> * opkg_download_pkg: Package libjpeg is not available from any configured src.</div><div class=\"line\"> * opkg_install_pkg: Failed to download libjpeg. Perhaps you need to run &apos;opkg update&apos;?</div><div class=\"line\"> * opkg_install_cmd: Cannot install package libjpeg.</div><div class=\"line\"> * opkg_download_pkg: Package libjpeg is not available from any configured src.</div><div class=\"line\"> * opkg_install_pkg: Failed to download libjpeg. Perhaps you need to run &apos;opkg update&apos;?</div><div class=\"line\"> * opkg_install_cmd: Cannot install package libgd.</div><div class=\"line\"></div><div class=\"line\">#怀疑libjepg库,没装好,所以单独装一下:</div><div class=\"line\">[root@PandoraBox:/root]#opkg install  libjpeg</div><div class=\"line\">Installing libjpeg (9a-1) to root...</div><div class=\"line\">Collected errors:</div><div class=\"line\"> * opkg_download_pkg: Package libjpeg is not available from any configured src.</div><div class=\"line\"> * opkg_install_pkg: Failed to download libjpeg. Perhaps you need to run &apos;opkg update&apos;?</div><div class=\"line\"> * opkg_install_cmd: Cannot install package libjpeg.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> #所以应该这个包没法现在,看下还有那些可以替代的包</div><div class=\"line\"> [root@PandoraBox:/root]#opkg list libjpeg*</div><div class=\"line\">libjpeg - 9a-1</div><div class=\"line\">libjpeg - 6b-1 - The Independent JPEG Group&apos;s JPEG runtime library</div><div class=\"line\">#发现libjpeg - 6b-1可用,然后去官网下载这个包,安装:</div><div class=\"line\">[root@PandoraBox:/root]#wget http://downloads.openwrt.org.cn/PandoraBox/ralink/p</div><div class=\"line\">ackages/packages/libjpeg_6b-1_ralink.ipk</div><div class=\"line\">--2016-08-03 21:15:58--  http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/packages/libjpeg_6b-1_ralink.ipk</div><div class=\"line\">Resolving downloads.openwrt.org.cn... 106.185.25.62</div><div class=\"line\">Connecting to downloads.openwrt.org.cn|106.185.25.62|:80... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 200 OK</div><div class=\"line\">Length: 55298 (54K) [application/octet-stream]</div><div class=\"line\">Saving to: &apos;libjpeg_6b-1_ralink.ipk&apos;</div><div class=\"line\"></div><div class=\"line\">libjpeg_6b-1_ralink 100%[=====================&gt;]  54.00K  15.1KB/s   in 3.6s   </div><div class=\"line\"></div><div class=\"line\">2016-08-03 21:16:03 (15.1 KB/s) - &apos;libjpeg_6b-1_ralink.ipk&apos; saved [55298/55298]</div><div class=\"line\"></div><div class=\"line\">[root@PandoraBox:/root]#opkg install libjpeg_6b-1_ralink.ipk </div><div class=\"line\">Installing libjpeg (6b-1) to root...</div><div class=\"line\">Configuring libjpeg.</div><div class=\"line\"></div><div class=\"line\">#最后再安装一下php-gd,发现问题解决了</div><div class=\"line\">[root@PandoraBox:/root]#opkg install php5-mod-gd </div><div class=\"line\">Installing php5-mod-gd (5.4.27-1) to root...</div><div class=\"line\">Downloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/oldpackages/php5-mod-gd_5.4.27-1_ralink.ipk.</div><div class=\"line\"></div><div class=\"line\">Configuring php5-mod-gd.</div></pre></td></tr></table></figure></p>\n<p>3.配置web server:</p>\n<p>对于web server,本来想用nginx,但发现pandorabox有自带的uhttp,所有用自带的.修改相应配置文件/etc/config/uhttpd<br>配置如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/config/uhttpd</div><div class=\"line\"></div><div class=\"line\">#首先将原来路由器的web的端口改为其他的,我这里改为88 和4430</div><div class=\"line\">config uhttpd &apos;main&apos;</div><div class=\"line\">\tlist listen_http &apos;0.0.0.0:88&apos; </div><div class=\"line\">\tlist listen_http &apos;[::]:88&apos;</div><div class=\"line\">\tlist listen_https &apos;0.0.0.0:4430&apos;</div><div class=\"line\">\tlist listen_https &apos;[::]:4430&apos;</div><div class=\"line\">\toption home &apos;/www&apos;</div><div class=\"line\">\toption rfc1918_filter &apos;1&apos;</div><div class=\"line\">\toption max_requests &apos;3&apos;</div><div class=\"line\">\toption max_connections &apos;100&apos;</div><div class=\"line\">\toption cert &apos;/etc/uhttpd.crt&apos;</div><div class=\"line\">\toption key &apos;/etc/uhttpd.key&apos;</div><div class=\"line\">\toption cgi_prefix &apos;/cgi-bin&apos;</div><div class=\"line\">\toption script_timeout &apos;60&apos;</div><div class=\"line\">\toption network_timeout &apos;30&apos;</div><div class=\"line\">\toption http_keepalive &apos;20&apos;</div><div class=\"line\">\toption tcp_keepalive &apos;1&apos;</div><div class=\"line\">\toption ubus_prefix &apos;/ubus&apos;</div><div class=\"line\">\tlist index_page &apos;cgi-bin/luci&apos;</div><div class=\"line\"></div><div class=\"line\">config cert &apos;px5g&apos;</div><div class=\"line\">\toption days &apos;730&apos;</div><div class=\"line\">\toption bits &apos;1024&apos;</div><div class=\"line\">\toption country &apos;DE&apos;</div><div class=\"line\">\toption state &apos;Berlin&apos;</div><div class=\"line\">\toption location &apos;Berlin&apos;</div><div class=\"line\">\toption commonname &apos;OpenWrt&apos;</div><div class=\"line\">#配置</div><div class=\"line\">config uhttpd &apos;owncloud&apos;</div><div class=\"line\">        list listen_http &apos;0.0.0.0:80&apos;</div><div class=\"line\">        list listen_http &apos;[::]:80&apos;</div><div class=\"line\">        list listen_https &apos;0.0.0.0:443&apos;</div><div class=\"line\">        list listen_https &apos;[::]:443&apos;</div><div class=\"line\"></div><div class=\"line\">        option home &apos;/data/codebase/owncloud&apos;</div><div class=\"line\">        option index_page  index.php, index.html, index.htm, default.html, default.htm</div><div class=\"line\"></div><div class=\"line\">        option rfc1918_filter &apos;1&apos;</div><div class=\"line\">        option max_requests &apos;3&apos;</div><div class=\"line\">        option max_connections &apos;100&apos;</div><div class=\"line\">        option cert &apos;/data/ssl/c.miaoxiaohei.com.crt&apos;</div><div class=\"line\">        option key &apos;/data/ssl/c.miaoxiaohei.com.key&apos;</div><div class=\"line\">        option script_timeout &apos;60&apos;</div><div class=\"line\">        option network_timeout &apos;30&apos;</div><div class=\"line\">        option http_keepalive &apos;20&apos;</div><div class=\"line\">        option tcp_keepalive &apos;1&apos;</div><div class=\"line\">        option cgi_prefix &apos;/cgi-bin&apos;</div><div class=\"line\">        #配置php-cgi</div><div class=\"line\">        list interpreter  &quot;.php=/usr/bin/php-cgi&quot;</div><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>4.打开浏览器,输入192.168.1.1 进入安装安装界面<br>安装之前需要创建打data目录,存放数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/root]# mkdir /data/codeblock/owncloud/data</div></pre></td></tr></table></figure></p>\n<p>那些梗:<br>安装的时间,发现报错了,具体错误如下:</p>\n<p>设置语言为 en_US.UTF-8/fr_FR.UTF-8/es_ES.UTF-8/de_DE.UTF-8/ru_RU.UTF-8/pt_BR.UTF-8/it_IT.UTF-8/ja_JP.UTF-8/zh_CN.UTF-8 失败<br>Please install one of these locales on your system and restart your webserver.</p>\n<p>然后找了很久的解决方案,1)安装6以下的owncloud版本 2)设置语言 3)修改代码</p>\n<p>然后我用修改代码的方法解决了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/root]#vim /data/codebase/owncloud/lib/private/legacy/util.php </div><div class=\"line\"></div><div class=\"line\">        public static function isSetLocaleWorking() &#123;                           </div><div class=\"line\">                // setlocale test is pointless on Windows                      </div><div class=\"line\">                if (OC_Util::runningOnWindows()) &#123;                              </div><div class=\"line\">                        return true;                                            </div><div class=\"line\">                &#125;                                                               </div><div class=\"line\">                                                                                </div><div class=\"line\">                \\Patchwork\\Utf8\\Bootup::initLocale();                         </div><div class=\"line\">                //将这里注释掉了</div><div class=\"line\">                if (&apos;&apos; === basename(&apos;..&apos;)) &#123;                                    </div><div class=\"line\">                        //return false;                                         </div><div class=\"line\">                &#125;                                                               </div><div class=\"line\">                return true;                                                    </div><div class=\"line\">        &#125; </div></pre></td></tr></table></figure></p>\n<p>到这里……………..就已经安装完成.</p>\n<p>安装完成后,发现运行不是很流畅,性能有问题</p>\n","excerpt":"","more":"<p>之前研究owncloud,突然想将它装在家里的路由器上.<br>说干就干,然后记录以下自己忙活的过程.</p>\n<p>1.下载源码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/root]# mkdir /data/codebase</div><div class=\"line\">[rroot@PandoraBox:/root]# wget https://download.owncloud.org/community/owncloud-9.1.0.tar.bz2</div><div class=\"line\">--2016-07-27 17:21:11--  https://download.owncloud.org/community/owncloud-9.1.0.tar.bz2</div><div class=\"line\">Resolving download.owncloud.org (download.owncloud.org)... 188.40.127.122, 148.251.209.106, 188.40.68.177, ...</div><div class=\"line\">Connecting to download.owncloud.org (download.owncloud.org)|188.40.127.122|:443... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 200 OK</div><div class=\"line\">Length: 29055490 (28M) [application/x-bzip2]</div><div class=\"line\">Saving to: wncloud-9.1.0.tar.bz2</div><div class=\"line\">2016-07-27 17:44:55</div></pre></td></tr></table></figure></p>\n<p>解压源码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#需要先安装tar</div><div class=\"line\">[root@PandoraBox:/root]# opkg install tar</div><div class=\"line\">#解压</div><div class=\"line\">[root@PandoraBox:/root]# tar -xvf owncloud-9.1.0.tar.bz2 -C /data/codebase/</div></pre></td></tr></table></figure></p>\n<p>2.安装php:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/root]# opkg install php5 php5-cgi php5-fastcgi php5-mod-json php5-mod-session php5-mod-zip libsqlite3 zoneinfo-core php5-mod-pdo php5-mod-pdo-sqlite php5-mod-ctype php5-mod-mbstring php5-mod-gd sqlite3-cli php5-mod-sqlite3 php5-mod-curl curl php5-mod-xml php5-mod-simplexml php5-mod-hash php5-mod-dom php5-mod-iconv</div><div class=\"line\"></div><div class=\"line\">[root@PandoraBox:/root]# opkg install php5-mod-mcrypt php5-mod-openssl php5-mod-fileinfo php5-mod-exif</div><div class=\"line\"></div><div class=\"line\">[root@PandoraBox:/root]#opkg install php5-mod-xmlreader php5-mod-xmlwriter</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>那些梗:</p>\n<p>安装完成后,运行发先出错了,错误如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/root]#php-cli </div><div class=\"line\">PHP Warning:  PHP Startup: Unable to load dynamic library &apos;/usr/lib/php/gd.so&apos; - File not found in Unknown on line 0</div></pre></td></tr></table></figure><br>查资料后,发现可能是lib库的问题,重装下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/root]#opkg install php5-mod-gd libjpeg libpng libgd  --force-reinstal</div></pre></td></tr></table></figure></p>\n<p>然后报错:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/root]#opkg install php5-mod-gd libjpeg libpng libgd  --force-r</div><div class=\"line\">einstall</div><div class=\"line\">Removing package php5-mod-gd from root...</div><div class=\"line\">Removing package libpng from root...</div><div class=\"line\">Installing php5-mod-gd (5.4.27-1) to root...</div><div class=\"line\">Downloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/oldpackages/php5-mod-gd_5.4.27-1_ralink.ipk.</div><div class=\"line\">Installing libjpeg (9a-1) to root...</div><div class=\"line\">Installing libjpeg (9a-1) to root...</div><div class=\"line\">Installing libpng (1.2.51-1) to root...</div><div class=\"line\">Downloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/packages/libpng_1.2.51-1_ralink.ipk.</div><div class=\"line\">Installing libgd (2.1.0-1) to root...</div><div class=\"line\">Downloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/packages/libgd_2.1.0-1_ralink.ipk.</div><div class=\"line\">Installing libjpeg (9a-1) to root...</div><div class=\"line\">Configuring libpng.</div><div class=\"line\">Collected errors:</div><div class=\"line\"> * opkg_download_pkg: Package libjpeg is not available from any configured src.</div><div class=\"line\"> * opkg_install_pkg: Failed to download libjpeg. Perhaps you need to run &apos;opkg update&apos;?</div><div class=\"line\"> #所以严重怀疑是libjepg库,没装好</div><div class=\"line\"> * opkg_install_cmd: Cannot install package php5-mod-gd.</div><div class=\"line\"> * opkg_download_pkg: Package libjpeg is not available from any configured src.</div><div class=\"line\"> * opkg_install_pkg: Failed to download libjpeg. Perhaps you need to run &apos;opkg update&apos;?</div><div class=\"line\"> * opkg_install_cmd: Cannot install package libjpeg.</div><div class=\"line\"> * opkg_download_pkg: Package libjpeg is not available from any configured src.</div><div class=\"line\"> * opkg_install_pkg: Failed to download libjpeg. Perhaps you need to run &apos;opkg update&apos;?</div><div class=\"line\"> * opkg_install_cmd: Cannot install package libgd.</div><div class=\"line\"></div><div class=\"line\">#怀疑libjepg库,没装好,所以单独装一下:</div><div class=\"line\">[root@PandoraBox:/root]#opkg install  libjpeg</div><div class=\"line\">Installing libjpeg (9a-1) to root...</div><div class=\"line\">Collected errors:</div><div class=\"line\"> * opkg_download_pkg: Package libjpeg is not available from any configured src.</div><div class=\"line\"> * opkg_install_pkg: Failed to download libjpeg. Perhaps you need to run &apos;opkg update&apos;?</div><div class=\"line\"> * opkg_install_cmd: Cannot install package libjpeg.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> #所以应该这个包没法现在,看下还有那些可以替代的包</div><div class=\"line\"> [root@PandoraBox:/root]#opkg list libjpeg*</div><div class=\"line\">libjpeg - 9a-1</div><div class=\"line\">libjpeg - 6b-1 - The Independent JPEG Group&apos;s JPEG runtime library</div><div class=\"line\">#发现libjpeg - 6b-1可用,然后去官网下载这个包,安装:</div><div class=\"line\">[root@PandoraBox:/root]#wget http://downloads.openwrt.org.cn/PandoraBox/ralink/p</div><div class=\"line\">ackages/packages/libjpeg_6b-1_ralink.ipk</div><div class=\"line\">--2016-08-03 21:15:58--  http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/packages/libjpeg_6b-1_ralink.ipk</div><div class=\"line\">Resolving downloads.openwrt.org.cn... 106.185.25.62</div><div class=\"line\">Connecting to downloads.openwrt.org.cn|106.185.25.62|:80... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 200 OK</div><div class=\"line\">Length: 55298 (54K) [application/octet-stream]</div><div class=\"line\">Saving to: &apos;libjpeg_6b-1_ralink.ipk&apos;</div><div class=\"line\"></div><div class=\"line\">libjpeg_6b-1_ralink 100%[=====================&gt;]  54.00K  15.1KB/s   in 3.6s   </div><div class=\"line\"></div><div class=\"line\">2016-08-03 21:16:03 (15.1 KB/s) - &apos;libjpeg_6b-1_ralink.ipk&apos; saved [55298/55298]</div><div class=\"line\"></div><div class=\"line\">[root@PandoraBox:/root]#opkg install libjpeg_6b-1_ralink.ipk </div><div class=\"line\">Installing libjpeg (6b-1) to root...</div><div class=\"line\">Configuring libjpeg.</div><div class=\"line\"></div><div class=\"line\">#最后再安装一下php-gd,发现问题解决了</div><div class=\"line\">[root@PandoraBox:/root]#opkg install php5-mod-gd </div><div class=\"line\">Installing php5-mod-gd (5.4.27-1) to root...</div><div class=\"line\">Downloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/oldpackages/php5-mod-gd_5.4.27-1_ralink.ipk.</div><div class=\"line\"></div><div class=\"line\">Configuring php5-mod-gd.</div></pre></td></tr></table></figure></p>\n<p>3.配置web server:</p>\n<p>对于web server,本来想用nginx,但发现pandorabox有自带的uhttp,所有用自带的.修改相应配置文件/etc/config/uhttpd<br>配置如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/config/uhttpd</div><div class=\"line\"></div><div class=\"line\">#首先将原来路由器的web的端口改为其他的,我这里改为88 和4430</div><div class=\"line\">config uhttpd &apos;main&apos;</div><div class=\"line\">\tlist listen_http &apos;0.0.0.0:88&apos; </div><div class=\"line\">\tlist listen_http &apos;[::]:88&apos;</div><div class=\"line\">\tlist listen_https &apos;0.0.0.0:4430&apos;</div><div class=\"line\">\tlist listen_https &apos;[::]:4430&apos;</div><div class=\"line\">\toption home &apos;/www&apos;</div><div class=\"line\">\toption rfc1918_filter &apos;1&apos;</div><div class=\"line\">\toption max_requests &apos;3&apos;</div><div class=\"line\">\toption max_connections &apos;100&apos;</div><div class=\"line\">\toption cert &apos;/etc/uhttpd.crt&apos;</div><div class=\"line\">\toption key &apos;/etc/uhttpd.key&apos;</div><div class=\"line\">\toption cgi_prefix &apos;/cgi-bin&apos;</div><div class=\"line\">\toption script_timeout &apos;60&apos;</div><div class=\"line\">\toption network_timeout &apos;30&apos;</div><div class=\"line\">\toption http_keepalive &apos;20&apos;</div><div class=\"line\">\toption tcp_keepalive &apos;1&apos;</div><div class=\"line\">\toption ubus_prefix &apos;/ubus&apos;</div><div class=\"line\">\tlist index_page &apos;cgi-bin/luci&apos;</div><div class=\"line\"></div><div class=\"line\">config cert &apos;px5g&apos;</div><div class=\"line\">\toption days &apos;730&apos;</div><div class=\"line\">\toption bits &apos;1024&apos;</div><div class=\"line\">\toption country &apos;DE&apos;</div><div class=\"line\">\toption state &apos;Berlin&apos;</div><div class=\"line\">\toption location &apos;Berlin&apos;</div><div class=\"line\">\toption commonname &apos;OpenWrt&apos;</div><div class=\"line\">#配置</div><div class=\"line\">config uhttpd &apos;owncloud&apos;</div><div class=\"line\">        list listen_http &apos;0.0.0.0:80&apos;</div><div class=\"line\">        list listen_http &apos;[::]:80&apos;</div><div class=\"line\">        list listen_https &apos;0.0.0.0:443&apos;</div><div class=\"line\">        list listen_https &apos;[::]:443&apos;</div><div class=\"line\"></div><div class=\"line\">        option home &apos;/data/codebase/owncloud&apos;</div><div class=\"line\">        option index_page  index.php, index.html, index.htm, default.html, default.htm</div><div class=\"line\"></div><div class=\"line\">        option rfc1918_filter &apos;1&apos;</div><div class=\"line\">        option max_requests &apos;3&apos;</div><div class=\"line\">        option max_connections &apos;100&apos;</div><div class=\"line\">        option cert &apos;/data/ssl/c.miaoxiaohei.com.crt&apos;</div><div class=\"line\">        option key &apos;/data/ssl/c.miaoxiaohei.com.key&apos;</div><div class=\"line\">        option script_timeout &apos;60&apos;</div><div class=\"line\">        option network_timeout &apos;30&apos;</div><div class=\"line\">        option http_keepalive &apos;20&apos;</div><div class=\"line\">        option tcp_keepalive &apos;1&apos;</div><div class=\"line\">        option cgi_prefix &apos;/cgi-bin&apos;</div><div class=\"line\">        #配置php-cgi</div><div class=\"line\">        list interpreter  &quot;.php=/usr/bin/php-cgi&quot;</div><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>4.打开浏览器,输入192.168.1.1 进入安装安装界面<br>安装之前需要创建打data目录,存放数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/root]# mkdir /data/codeblock/owncloud/data</div></pre></td></tr></table></figure></p>\n<p>那些梗:<br>安装的时间,发现报错了,具体错误如下:</p>\n<p>设置语言为 en_US.UTF-8/fr_FR.UTF-8/es_ES.UTF-8/de_DE.UTF-8/ru_RU.UTF-8/pt_BR.UTF-8/it_IT.UTF-8/ja_JP.UTF-8/zh_CN.UTF-8 失败<br>Please install one of these locales on your system and restart your webserver.</p>\n<p>然后找了很久的解决方案,1)安装6以下的owncloud版本 2)设置语言 3)修改代码</p>\n<p>然后我用修改代码的方法解决了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/root]#vim /data/codebase/owncloud/lib/private/legacy/util.php </div><div class=\"line\"></div><div class=\"line\">        public static function isSetLocaleWorking() &#123;                           </div><div class=\"line\">                // setlocale test is pointless on Windows                      </div><div class=\"line\">                if (OC_Util::runningOnWindows()) &#123;                              </div><div class=\"line\">                        return true;                                            </div><div class=\"line\">                &#125;                                                               </div><div class=\"line\">                                                                                </div><div class=\"line\">                \\Patchwork\\Utf8\\Bootup::initLocale();                         </div><div class=\"line\">                //将这里注释掉了</div><div class=\"line\">                if (&apos;&apos; === basename(&apos;..&apos;)) &#123;                                    </div><div class=\"line\">                        //return false;                                         </div><div class=\"line\">                &#125;                                                               </div><div class=\"line\">                return true;                                                    </div><div class=\"line\">        &#125; </div></pre></td></tr></table></figure></p>\n<p>到这里……………..就已经安装完成.</p>\n<p>安装完成后,发现运行不是很流畅,性能有问题</p>\n"},{"title":"php-xhproff分析扩展","date":"2016-07-03T10:03:07.000Z","_content":"XHProf 是一个轻量级的分层性能测量分析器。 在数据收集阶段，它跟踪调用次数与测量数据，展示程序动态调用的弧线图。 它在报告、后期处理阶段计算了独占的性能度量，例如运行经过的时间、CPU 计算时间和内存开销。 函数性能报告可以由调用者和被调用者终止。 在数据搜集阶段 XHProf 通过调用图的循环来检测递归函数，通过赋予唯一的深度名称来避免递归调用的循环。\n\nXHProf 包含了一个基于 HTML 的简单用户界面(由 PHP 写成)。 基于浏览器的用户界面使得浏览、分享性能数据结果更加简单方便。 同时也支持查看调用图。\n\nXHProf 的报告对理解代码执行结构常常很有帮助。 比如此分层报告可用于确定在哪个调用链里调用了某个函数。\n\n\n1. 编译安装\n{% codeblock %}\n  wget http://pecl.php.net/get/xhprof-0.9.3.tgz\n  tar zxvf xhprof-0.9.2.tgz\n  cd xhprof-0.9.2/extension/\n  sudo phpize\n  ./configure --with-php-config=/usr/local/php/bin/php-config\n  sudo make\n  sudo make install\n  或者 yum install php-xhprof\n{% endcodeblock %}\n\n2. 配置 php.ini\n{% codeblock %}\n[xhprof]\nextension=xhprof.so;\nxhprof.output_dir=/tmp/xhprof\n{% endcodeblock %}\n\n重启PHP-fpm  or  Apache\n3. 嵌入代码\n{% codeblock %}\n<?php\n// cpu:XHPROF_FLAGS_CPU 内存:XHPROF_FLAGS_MEMORY\n// 如果两个一起：XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY \nxhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);\n\n//要测试的php代码\n\n$data = xhprof_disable();   //返回运行数据\n \n// xhprof_lib在下载的包里存在这个目录,记得将目录包含到运行的php代码中\ninclude_once \"xhprof_lib/utils/xhprof_lib.php”;  //（这个目录文件在源码中，需要复制到web-work中）\ninclude_once \"xhprof_lib/utils/xhprof_runs.php”;  //(这个目录文件在源码中，需要复制到web)\n \n$objXhprofRun = new XHProfRuns_Default(); \n\n// 第一个参数j是xhprof_disable()函数返回的运行信息\n// 第二个参数是自定义的命名空间字符串(任意字符串),\n// 返回运行ID,用这个ID查看相关的运行结果\n$run_id = $objXhprofRun->save_run($data, \"xhprof\");\nvar_dump($run_id);\n{% endcodeblock %}\n\n4. 页面展示\n将xhprof_lib&&xhprof_html相关目录copy到可以访问到的地址\n访问 xxx/xhprof_html/index.php?run=$run_id&source=xhprof 就可经看到你的php代码运行的相关情况\n\n下面是一些参数说明\nInclusive Time                 包括子函数所有执行时间。\nExclusive Time/Self Time       函数执行本身花费的时间，不包括子树执行时间。\nWall Time                      花去了的时间或挂钟时间。\nCPU Time                       用户耗的时间+内核耗的时间\nInclusive CPU                  包括子函数一起所占用的CPU\nExclusive CPU                  函数自身所占用的CPU","source":"_posts/php-xhproff分析扩展.md","raw":"---\ntitle: php-xhproff分析扩展\ndate: 2016-07-03 18:03:07\ntags: php \ncategories: php\n---\nXHProf 是一个轻量级的分层性能测量分析器。 在数据收集阶段，它跟踪调用次数与测量数据，展示程序动态调用的弧线图。 它在报告、后期处理阶段计算了独占的性能度量，例如运行经过的时间、CPU 计算时间和内存开销。 函数性能报告可以由调用者和被调用者终止。 在数据搜集阶段 XHProf 通过调用图的循环来检测递归函数，通过赋予唯一的深度名称来避免递归调用的循环。\n\nXHProf 包含了一个基于 HTML 的简单用户界面(由 PHP 写成)。 基于浏览器的用户界面使得浏览、分享性能数据结果更加简单方便。 同时也支持查看调用图。\n\nXHProf 的报告对理解代码执行结构常常很有帮助。 比如此分层报告可用于确定在哪个调用链里调用了某个函数。\n\n\n1. 编译安装\n{% codeblock %}\n  wget http://pecl.php.net/get/xhprof-0.9.3.tgz\n  tar zxvf xhprof-0.9.2.tgz\n  cd xhprof-0.9.2/extension/\n  sudo phpize\n  ./configure --with-php-config=/usr/local/php/bin/php-config\n  sudo make\n  sudo make install\n  或者 yum install php-xhprof\n{% endcodeblock %}\n\n2. 配置 php.ini\n{% codeblock %}\n[xhprof]\nextension=xhprof.so;\nxhprof.output_dir=/tmp/xhprof\n{% endcodeblock %}\n\n重启PHP-fpm  or  Apache\n3. 嵌入代码\n{% codeblock %}\n<?php\n// cpu:XHPROF_FLAGS_CPU 内存:XHPROF_FLAGS_MEMORY\n// 如果两个一起：XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY \nxhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);\n\n//要测试的php代码\n\n$data = xhprof_disable();   //返回运行数据\n \n// xhprof_lib在下载的包里存在这个目录,记得将目录包含到运行的php代码中\ninclude_once \"xhprof_lib/utils/xhprof_lib.php”;  //（这个目录文件在源码中，需要复制到web-work中）\ninclude_once \"xhprof_lib/utils/xhprof_runs.php”;  //(这个目录文件在源码中，需要复制到web)\n \n$objXhprofRun = new XHProfRuns_Default(); \n\n// 第一个参数j是xhprof_disable()函数返回的运行信息\n// 第二个参数是自定义的命名空间字符串(任意字符串),\n// 返回运行ID,用这个ID查看相关的运行结果\n$run_id = $objXhprofRun->save_run($data, \"xhprof\");\nvar_dump($run_id);\n{% endcodeblock %}\n\n4. 页面展示\n将xhprof_lib&&xhprof_html相关目录copy到可以访问到的地址\n访问 xxx/xhprof_html/index.php?run=$run_id&source=xhprof 就可经看到你的php代码运行的相关情况\n\n下面是一些参数说明\nInclusive Time                 包括子函数所有执行时间。\nExclusive Time/Self Time       函数执行本身花费的时间，不包括子树执行时间。\nWall Time                      花去了的时间或挂钟时间。\nCPU Time                       用户耗的时间+内核耗的时间\nInclusive CPU                  包括子函数一起所占用的CPU\nExclusive CPU                  函数自身所占用的CPU","slug":"php-xhproff分析扩展","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeiema000pznz4ejky9kav","content":"<p>XHProf 是一个轻量级的分层性能测量分析器。 在数据收集阶段，它跟踪调用次数与测量数据，展示程序动态调用的弧线图。 它在报告、后期处理阶段计算了独占的性能度量，例如运行经过的时间、CPU 计算时间和内存开销。 函数性能报告可以由调用者和被调用者终止。 在数据搜集阶段 XHProf 通过调用图的循环来检测递归函数，通过赋予唯一的深度名称来避免递归调用的循环。</p>\n<p>XHProf 包含了一个基于 HTML 的简单用户界面(由 PHP 写成)。 基于浏览器的用户界面使得浏览、分享性能数据结果更加简单方便。 同时也支持查看调用图。</p>\n<p>XHProf 的报告对理解代码执行结构常常很有帮助。 比如此分层报告可用于确定在哪个调用链里调用了某个函数。</p>\n<ol>\n<li><p>编译安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://pecl.php.net/get/xhprof-0.9.3.tgz</div><div class=\"line\">tar zxvf xhprof-0.9.2.tgz</div><div class=\"line\">cd xhprof-0.9.2/extension/</div><div class=\"line\">sudo phpize</div><div class=\"line\">./configure --with-php-config=/usr/local/php/bin/php-config</div><div class=\"line\">sudo make</div><div class=\"line\">sudo make install</div><div class=\"line\">或者 yum install php-xhprof</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置 php.ini</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[xhprof]</div><div class=\"line\">extension=xhprof.so;</div><div class=\"line\">xhprof.output_dir=/tmp/xhprof</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>重启PHP-fpm  or  Apache</p>\n<ol>\n<li><p>嵌入代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">// cpu:XHPROF_FLAGS_CPU 内存:XHPROF_FLAGS_MEMORY</div><div class=\"line\">// 如果两个一起：XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY </div><div class=\"line\">xhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);</div><div class=\"line\"></div><div class=\"line\">//要测试的php代码</div><div class=\"line\"></div><div class=\"line\">$data = xhprof_disable();   //返回运行数据</div><div class=\"line\"> </div><div class=\"line\">// xhprof_lib在下载的包里存在这个目录,记得将目录包含到运行的php代码中</div><div class=\"line\">include_once &quot;xhprof_lib/utils/xhprof_lib.php”;  //（这个目录文件在源码中，需要复制到web-work中）</div><div class=\"line\">include_once &quot;xhprof_lib/utils/xhprof_runs.php”;  //(这个目录文件在源码中，需要复制到web)</div><div class=\"line\"> </div><div class=\"line\">$objXhprofRun = new XHProfRuns_Default(); </div><div class=\"line\"></div><div class=\"line\">// 第一个参数j是xhprof_disable()函数返回的运行信息</div><div class=\"line\">// 第二个参数是自定义的命名空间字符串(任意字符串),</div><div class=\"line\">// 返回运行ID,用这个ID查看相关的运行结果</div><div class=\"line\">$run_id = $objXhprofRun-&gt;save_run($data, &quot;xhprof&quot;);</div><div class=\"line\">var_dump($run_id);</div></pre></td></tr></table></figure>\n</li>\n<li><p>页面展示<br>将xhprof_lib&amp;&amp;xhprof_html相关目录copy到可以访问到的地址<br>访问 xxx/xhprof_html/index.php?run=$run_id&amp;source=xhprof 就可经看到你的php代码运行的相关情况</p>\n</li>\n</ol>\n<p>下面是一些参数说明<br>Inclusive Time                 包括子函数所有执行时间。<br>Exclusive Time/Self Time       函数执行本身花费的时间，不包括子树执行时间。<br>Wall Time                      花去了的时间或挂钟时间。<br>CPU Time                       用户耗的时间+内核耗的时间<br>Inclusive CPU                  包括子函数一起所占用的CPU<br>Exclusive CPU                  函数自身所占用的CPU</p>\n","excerpt":"","more":"<p>XHProf 是一个轻量级的分层性能测量分析器。 在数据收集阶段，它跟踪调用次数与测量数据，展示程序动态调用的弧线图。 它在报告、后期处理阶段计算了独占的性能度量，例如运行经过的时间、CPU 计算时间和内存开销。 函数性能报告可以由调用者和被调用者终止。 在数据搜集阶段 XHProf 通过调用图的循环来检测递归函数，通过赋予唯一的深度名称来避免递归调用的循环。</p>\n<p>XHProf 包含了一个基于 HTML 的简单用户界面(由 PHP 写成)。 基于浏览器的用户界面使得浏览、分享性能数据结果更加简单方便。 同时也支持查看调用图。</p>\n<p>XHProf 的报告对理解代码执行结构常常很有帮助。 比如此分层报告可用于确定在哪个调用链里调用了某个函数。</p>\n<ol>\n<li><p>编译安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://pecl.php.net/get/xhprof-0.9.3.tgz</div><div class=\"line\">tar zxvf xhprof-0.9.2.tgz</div><div class=\"line\">cd xhprof-0.9.2/extension/</div><div class=\"line\">sudo phpize</div><div class=\"line\">./configure --with-php-config=/usr/local/php/bin/php-config</div><div class=\"line\">sudo make</div><div class=\"line\">sudo make install</div><div class=\"line\">或者 yum install php-xhprof</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置 php.ini</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[xhprof]</div><div class=\"line\">extension=xhprof.so;</div><div class=\"line\">xhprof.output_dir=/tmp/xhprof</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>重启PHP-fpm  or  Apache</p>\n<ol>\n<li><p>嵌入代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">// cpu:XHPROF_FLAGS_CPU 内存:XHPROF_FLAGS_MEMORY</div><div class=\"line\">// 如果两个一起：XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY </div><div class=\"line\">xhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);</div><div class=\"line\"></div><div class=\"line\">//要测试的php代码</div><div class=\"line\"></div><div class=\"line\">$data = xhprof_disable();   //返回运行数据</div><div class=\"line\"> </div><div class=\"line\">// xhprof_lib在下载的包里存在这个目录,记得将目录包含到运行的php代码中</div><div class=\"line\">include_once &quot;xhprof_lib/utils/xhprof_lib.php”;  //（这个目录文件在源码中，需要复制到web-work中）</div><div class=\"line\">include_once &quot;xhprof_lib/utils/xhprof_runs.php”;  //(这个目录文件在源码中，需要复制到web)</div><div class=\"line\"> </div><div class=\"line\">$objXhprofRun = new XHProfRuns_Default(); </div><div class=\"line\"></div><div class=\"line\">// 第一个参数j是xhprof_disable()函数返回的运行信息</div><div class=\"line\">// 第二个参数是自定义的命名空间字符串(任意字符串),</div><div class=\"line\">// 返回运行ID,用这个ID查看相关的运行结果</div><div class=\"line\">$run_id = $objXhprofRun-&gt;save_run($data, &quot;xhprof&quot;);</div><div class=\"line\">var_dump($run_id);</div></pre></td></tr></table></figure>\n</li>\n<li><p>页面展示<br>将xhprof_lib&amp;&amp;xhprof_html相关目录copy到可以访问到的地址<br>访问 xxx/xhprof_html/index.php?run=$run_id&amp;source=xhprof 就可经看到你的php代码运行的相关情况</p>\n</li>\n</ol>\n<p>下面是一些参数说明<br>Inclusive Time                 包括子函数所有执行时间。<br>Exclusive Time/Self Time       函数执行本身花费的时间，不包括子树执行时间。<br>Wall Time                      花去了的时间或挂钟时间。<br>CPU Time                       用户耗的时间+内核耗的时间<br>Inclusive CPU                  包括子函数一起所占用的CPU<br>Exclusive CPU                  函数自身所占用的CPU</p>\n"},{"title":"php7和nginx1.9安装脚本","date":"2016-02-19T04:52:43.000Z","comments":1,"_content":"\nphp7和nginx1.9安装脚本:\n\n这里记录php7和nginx 1.9,安装脚本.\n{% codeblock %}\n\n#创建user\nuseradd www\n#安装编译工具和需要的库包\nyum install epel-* -y\nyum install -y wget unzip gcc gcc-c++  make zlib zlib-devel pcre pcre-devel  libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers\n\n#编译安装libiconv库\nwget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz\ntar zxf libiconv-1.14.tar.gz\ncd libiconv-1.14\n./configure --prefix=/usr\nmake\nmake install\ncd ..\n<!-- more -->\n\n#安装php7\nwget http://php.net/distributions/php-7.0.3.tar.bz2\ntar -jxvf php-7.0.3.tar.bz2\ncd php-7.0.3\n#./configure --prefix=/usr/local/php7 --sysconfdir=/usr/local/php7/etc --with-config-file-scan-dir=/usr/local/php7/etc --enable-fpm --with-fpm-user=www --with-fpm-group=www --enable-mbstring --enable-sockets --enable-pcntl --enable-pdo --enable-mysqlnd --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --enable-sysvshm --enable-shmop  --with-jpeg-dir=/usr --with-freetype-dir=/usr --with-png-dir=/usr --with-zlib-dir=/usr --with-gd --with-openssl --enable-opcache --enable-zip --enable-bcmath --enable-pcntl --enable-ftp --with-curl\n\n./configure --prefix=/usr/local/php7 --sysconfdir=/usr/local/php7/etc --with-config-file-scan-dir=/usr/local/php7/etc --enable-fpm --with-fpm-user=www --with-fpm-group=www --enable-mbstring --enable-sockets --enable-pcntl --enable-pdo --enable-mysqlnd --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --enable-sysvshm --enable-shmop  --with-jpeg-dir=/usr --with-freetype-dir=/usr --with-png-dir=/usr --with-zlib-dir=/usr --with-iconv=/usr/lib --with-gd --with-openssl --enable-opcache=no --enable-zip --enable-bcmath --enable-pcntl --enable-ftp --with-curl\n\nmake\nmake install\ncp php.ini-production /usr/local/php7/etc/php.ini\ncp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm \ncp sapi/fpm/php-fpm.conf /usr/local/php7/etc/php-fpm.conf  \ncp sapi/fpm/www.conf /usr/local/php7/etc/php-fpm.d/www.conf\ncd ..\n\nsed -i 's#short_open_tag = Off#short_open_tag = On#g' /usr/local/php7/etc/php.ini\nchmod +x /etc/init.d/php-fpm\n\n#安装nginx\nwget http://nginx.org/download/nginx-1.9.11.tar.gz\ntar -zxvf nginx-1.9.11.tar.gz\ncd nginx-1.9.11\n./configure --user=www --group=www --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module\nmake;make install\ncd ..\n\n#配置nginx\n#vi /usr/local/nginx/conf/nginx.conf\n#...\n#       location ~ \\.php$ {\n#            root           html;\n#           fastcgi_pass   127.0.0.1:9000;\n#            fastcgi_index  index.php;\n#           fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n#            include        fastcgi_params;\n#        }\n\n{% endcodeblock%}\n\n","source":"_posts/php7和nginx1-9安装脚本.md","raw":"---\ntitle: php7和nginx1.9安装脚本\ndate: 2016-02-19 12:52:43\ntags: php\ncategories: liunx\ncomments: true\n---\n\nphp7和nginx1.9安装脚本:\n\n这里记录php7和nginx 1.9,安装脚本.\n{% codeblock %}\n\n#创建user\nuseradd www\n#安装编译工具和需要的库包\nyum install epel-* -y\nyum install -y wget unzip gcc gcc-c++  make zlib zlib-devel pcre pcre-devel  libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers\n\n#编译安装libiconv库\nwget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz\ntar zxf libiconv-1.14.tar.gz\ncd libiconv-1.14\n./configure --prefix=/usr\nmake\nmake install\ncd ..\n<!-- more -->\n\n#安装php7\nwget http://php.net/distributions/php-7.0.3.tar.bz2\ntar -jxvf php-7.0.3.tar.bz2\ncd php-7.0.3\n#./configure --prefix=/usr/local/php7 --sysconfdir=/usr/local/php7/etc --with-config-file-scan-dir=/usr/local/php7/etc --enable-fpm --with-fpm-user=www --with-fpm-group=www --enable-mbstring --enable-sockets --enable-pcntl --enable-pdo --enable-mysqlnd --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --enable-sysvshm --enable-shmop  --with-jpeg-dir=/usr --with-freetype-dir=/usr --with-png-dir=/usr --with-zlib-dir=/usr --with-gd --with-openssl --enable-opcache --enable-zip --enable-bcmath --enable-pcntl --enable-ftp --with-curl\n\n./configure --prefix=/usr/local/php7 --sysconfdir=/usr/local/php7/etc --with-config-file-scan-dir=/usr/local/php7/etc --enable-fpm --with-fpm-user=www --with-fpm-group=www --enable-mbstring --enable-sockets --enable-pcntl --enable-pdo --enable-mysqlnd --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --enable-sysvshm --enable-shmop  --with-jpeg-dir=/usr --with-freetype-dir=/usr --with-png-dir=/usr --with-zlib-dir=/usr --with-iconv=/usr/lib --with-gd --with-openssl --enable-opcache=no --enable-zip --enable-bcmath --enable-pcntl --enable-ftp --with-curl\n\nmake\nmake install\ncp php.ini-production /usr/local/php7/etc/php.ini\ncp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm \ncp sapi/fpm/php-fpm.conf /usr/local/php7/etc/php-fpm.conf  \ncp sapi/fpm/www.conf /usr/local/php7/etc/php-fpm.d/www.conf\ncd ..\n\nsed -i 's#short_open_tag = Off#short_open_tag = On#g' /usr/local/php7/etc/php.ini\nchmod +x /etc/init.d/php-fpm\n\n#安装nginx\nwget http://nginx.org/download/nginx-1.9.11.tar.gz\ntar -zxvf nginx-1.9.11.tar.gz\ncd nginx-1.9.11\n./configure --user=www --group=www --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module\nmake;make install\ncd ..\n\n#配置nginx\n#vi /usr/local/nginx/conf/nginx.conf\n#...\n#       location ~ \\.php$ {\n#            root           html;\n#           fastcgi_pass   127.0.0.1:9000;\n#            fastcgi_index  index.php;\n#           fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n#            include        fastcgi_params;\n#        }\n\n{% endcodeblock%}\n\n","slug":"php7和nginx1-9安装脚本","published":1,"updated":"2017-03-01T02:52:32.000Z","layout":"post","photos":[],"link":"","_id":"cizqeiemd000rznz43cqa6yrn","content":"<p>php7和nginx1.9安装脚本:</p>\n<p>这里记录php7和nginx 1.9,安装脚本.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#创建user</div><div class=\"line\">useradd www</div><div class=\"line\">#安装编译工具和需要的库包</div><div class=\"line\">yum install epel-* -y</div><div class=\"line\">yum install -y wget unzip gcc gcc-c++  make zlib zlib-devel pcre pcre-devel  libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers</div><div class=\"line\"></div><div class=\"line\">#编译安装libiconv库</div><div class=\"line\">wget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz</div><div class=\"line\">tar zxf libiconv-1.14.tar.gz</div><div class=\"line\">cd libiconv-1.14</div><div class=\"line\">./configure --prefix=/usr</div><div class=\"line\">make</div><div class=\"line\">make install</div><div class=\"line\">cd ..</div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"></div><div class=\"line\">#安装php7</div><div class=\"line\">wget http://php.net/distributions/php-7.0.3.tar.bz2</div><div class=\"line\">tar -jxvf php-7.0.3.tar.bz2</div><div class=\"line\">cd php-7.0.3</div><div class=\"line\">#./configure --prefix=/usr/local/php7 --sysconfdir=/usr/local/php7/etc --with-config-file-scan-dir=/usr/local/php7/etc --enable-fpm --with-fpm-user=www --with-fpm-group=www --enable-mbstring --enable-sockets --enable-pcntl --enable-pdo --enable-mysqlnd --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --enable-sysvshm --enable-shmop  --with-jpeg-dir=/usr --with-freetype-dir=/usr --with-png-dir=/usr --with-zlib-dir=/usr --with-gd --with-openssl --enable-opcache --enable-zip --enable-bcmath --enable-pcntl --enable-ftp --with-curl</div><div class=\"line\"></div><div class=\"line\">./configure --prefix=/usr/local/php7 --sysconfdir=/usr/local/php7/etc --with-config-file-scan-dir=/usr/local/php7/etc --enable-fpm --with-fpm-user=www --with-fpm-group=www --enable-mbstring --enable-sockets --enable-pcntl --enable-pdo --enable-mysqlnd --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --enable-sysvshm --enable-shmop  --with-jpeg-dir=/usr --with-freetype-dir=/usr --with-png-dir=/usr --with-zlib-dir=/usr --with-iconv=/usr/lib --with-gd --with-openssl --enable-opcache=no --enable-zip --enable-bcmath --enable-pcntl --enable-ftp --with-curl</div><div class=\"line\"></div><div class=\"line\">make</div><div class=\"line\">make install</div><div class=\"line\">cp php.ini-production /usr/local/php7/etc/php.ini</div><div class=\"line\">cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm </div><div class=\"line\">cp sapi/fpm/php-fpm.conf /usr/local/php7/etc/php-fpm.conf  </div><div class=\"line\">cp sapi/fpm/www.conf /usr/local/php7/etc/php-fpm.d/www.conf</div><div class=\"line\">cd ..</div><div class=\"line\"></div><div class=\"line\">sed -i &apos;s#short_open_tag = Off#short_open_tag = On#g&apos; /usr/local/php7/etc/php.ini</div><div class=\"line\">chmod +x /etc/init.d/php-fpm</div><div class=\"line\"></div><div class=\"line\">#安装nginx</div><div class=\"line\">wget http://nginx.org/download/nginx-1.9.11.tar.gz</div><div class=\"line\">tar -zxvf nginx-1.9.11.tar.gz</div><div class=\"line\">cd nginx-1.9.11</div><div class=\"line\">./configure --user=www --group=www --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</div><div class=\"line\">make;make install</div><div class=\"line\">cd ..</div><div class=\"line\"></div><div class=\"line\">#配置nginx</div><div class=\"line\">#vi /usr/local/nginx/conf/nginx.conf</div><div class=\"line\">#...</div><div class=\"line\">#       location ~ \\.php$ &#123;</div><div class=\"line\">#            root           html;</div><div class=\"line\">#           fastcgi_pass   127.0.0.1:9000;</div><div class=\"line\">#            fastcgi_index  index.php;</div><div class=\"line\">#           fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class=\"line\">#            include        fastcgi_params;</div><div class=\"line\">#        &#125;</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>php7和nginx1.9安装脚本:</p>\n<p>这里记录php7和nginx 1.9,安装脚本.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#创建user</div><div class=\"line\">useradd www</div><div class=\"line\">#安装编译工具和需要的库包</div><div class=\"line\">yum install epel-* -y</div><div class=\"line\">yum install -y wget unzip gcc gcc-c++  make zlib zlib-devel pcre pcre-devel  libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers</div><div class=\"line\"></div><div class=\"line\">#编译安装libiconv库</div><div class=\"line\">wget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz</div><div class=\"line\">tar zxf libiconv-1.14.tar.gz</div><div class=\"line\">cd libiconv-1.14</div><div class=\"line\">./configure --prefix=/usr</div><div class=\"line\">make</div><div class=\"line\">make install</div><div class=\"line\">cd ..</div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"></div><div class=\"line\">#安装php7</div><div class=\"line\">wget http://php.net/distributions/php-7.0.3.tar.bz2</div><div class=\"line\">tar -jxvf php-7.0.3.tar.bz2</div><div class=\"line\">cd php-7.0.3</div><div class=\"line\">#./configure --prefix=/usr/local/php7 --sysconfdir=/usr/local/php7/etc --with-config-file-scan-dir=/usr/local/php7/etc --enable-fpm --with-fpm-user=www --with-fpm-group=www --enable-mbstring --enable-sockets --enable-pcntl --enable-pdo --enable-mysqlnd --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --enable-sysvshm --enable-shmop  --with-jpeg-dir=/usr --with-freetype-dir=/usr --with-png-dir=/usr --with-zlib-dir=/usr --with-gd --with-openssl --enable-opcache --enable-zip --enable-bcmath --enable-pcntl --enable-ftp --with-curl</div><div class=\"line\"></div><div class=\"line\">./configure --prefix=/usr/local/php7 --sysconfdir=/usr/local/php7/etc --with-config-file-scan-dir=/usr/local/php7/etc --enable-fpm --with-fpm-user=www --with-fpm-group=www --enable-mbstring --enable-sockets --enable-pcntl --enable-pdo --enable-mysqlnd --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --enable-sysvshm --enable-shmop  --with-jpeg-dir=/usr --with-freetype-dir=/usr --with-png-dir=/usr --with-zlib-dir=/usr --with-iconv=/usr/lib --with-gd --with-openssl --enable-opcache=no --enable-zip --enable-bcmath --enable-pcntl --enable-ftp --with-curl</div><div class=\"line\"></div><div class=\"line\">make</div><div class=\"line\">make install</div><div class=\"line\">cp php.ini-production /usr/local/php7/etc/php.ini</div><div class=\"line\">cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm </div><div class=\"line\">cp sapi/fpm/php-fpm.conf /usr/local/php7/etc/php-fpm.conf  </div><div class=\"line\">cp sapi/fpm/www.conf /usr/local/php7/etc/php-fpm.d/www.conf</div><div class=\"line\">cd ..</div><div class=\"line\"></div><div class=\"line\">sed -i &apos;s#short_open_tag = Off#short_open_tag = On#g&apos; /usr/local/php7/etc/php.ini</div><div class=\"line\">chmod +x /etc/init.d/php-fpm</div><div class=\"line\"></div><div class=\"line\">#安装nginx</div><div class=\"line\">wget http://nginx.org/download/nginx-1.9.11.tar.gz</div><div class=\"line\">tar -zxvf nginx-1.9.11.tar.gz</div><div class=\"line\">cd nginx-1.9.11</div><div class=\"line\">./configure --user=www --group=www --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</div><div class=\"line\">make;make install</div><div class=\"line\">cd ..</div><div class=\"line\"></div><div class=\"line\">#配置nginx</div><div class=\"line\">#vi /usr/local/nginx/conf/nginx.conf</div><div class=\"line\">#...</div><div class=\"line\">#       location ~ \\.php$ &#123;</div><div class=\"line\">#            root           html;</div><div class=\"line\">#           fastcgi_pass   127.0.0.1:9000;</div><div class=\"line\">#            fastcgi_index  index.php;</div><div class=\"line\">#           fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class=\"line\">#            include        fastcgi_params;</div><div class=\"line\">#        &#125;</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n"},{"title":"php7扩展开发之初见","date":"2016-12-28T14:12:56.000Z","_content":"\n作为一名php程序猿，再次申明php是世界上最好的语言（骄傲脸）。\n本来以PHP7作为基础，记录如何从零开始创建一个PHP扩展，分析php扩展基本骨架组成。认识如果开发一个php7的扩展。\n\nPHP 扩展由几个文件组成，这些文件对所有扩展来说都是通用的。不同扩展之间，这些文件的很多细节是相似的，只是要费力去复制每个文件的内容。\n所以提供php官方提供一个脚本做所有的初始化工作，名为 ext_skel，在php7源码的./ext目录下\n该工具的使用如下：\n{% codeblock %}\n./ext_skel\n./ext_skel --extname=module [--proto=file] [--stubs=file] [--xml[=file]]\n           [--skel=dir] [--full-xml] [--no-help]\n\n  --extname=module   module is the name of your extension\n  --proto=file       file contains prototypes of functions to create\n  --stubs=file       generate only function stubs in file\n  --xml              generate xml documentation to be added to phpdoc-svn\n  --skel=dir         path to the skeleton directory\n  --full-xml         generate xml documentation for a self-contained extension\n                     (not yet implemented)\n  --no-help          don't try to be nice and create comments in the code\n                     and helper functions to test if the module compiled\n{% endcodeblock %}\n其中比较重要的参数是--extname 会将扩展的名称传给 ext_skel\n而--no-help，会使ext_skel 不会在生成的文件里省略很多有用的注释。\n\n接下来创建个名cayley的php扩展\n{% codeblock %}\n./ext_skel --extname=cayley\nCreating directory cayley\nCreating basic files: config.m4 config.w32 .gitignore cayley.c php_cayley.h CREDITS EXPERIMENTAL tests/001.phpt cayley.php [done].\n\nTo use your new extension, you will have to execute the following steps:\n\n1.  $ cd ..\n2.  $ vi ext/cayley/config.m4\n3.  $ ./buildconf\n4.  $ ./configure --[with|enable]-cayley\n5.  $ make\n6.  $ ./sapi/cli/php -f ext/cayley/cayley.php\n7.  $ vi ext/cayley/cayley.c\n8.  $ make\n\nRepeat steps 3-6 until you are satisfied with ext/cayley/config.m4 and\nstep 6 confirms that your module is compiled into PHP. Then, start writing\ncode and repeat the last two steps as often as necessary.\n{% endcodeblock %}\n\n现在来看下cayley扩展的结构：\n{% codeblock %}\n ls -al\ntotal 64\ndrwxr-xr-x  12 cayley  staff   408 12 28 22:30 .\ndrwxr-xr-x@ 78 cayley  staff  2652 12 28 16:45 ..\n-rw-r--r--   1 cayley  staff   398 12 28 16:45 .gitignore\n-rw-r--r--   1 cayley  staff     7 12 28 16:45 CREDITS\n-rw-r--r--   1 cayley  staff     0 12 28 16:45 EXPERIMENTAL\n-rw-r--r--   1 cayley  staff  5298 12 28 21:32 cayley.c\n-rw-r--r--   1 cayley  staff   518 12 28 21:58 cayley.php\n-rw-r--r--   1 cayley  staff  2076 12 28 17:06 config.m4\n-rw-r--r--   1 cayley  staff   355 12 28 16:45 config.w32\ndrwxr-xr-x   2 cayley  staff    68 12 28 21:40 include\n-rw-r--r--   1 cayley  staff  2316 12 28 16:45 php_cayley.h\ndrwxr-xr-x   3 cayley  staff   102 12 28 16:45 tests\n{% endcodeblock %}\n\nconfig.m4 ： 是与UNIX构建的系统交互的文件，文件告诉 UNIX 构建系统哪些扩展 configure 选项是支持的，你需要哪些扩展库，以及哪些源文件要编译成它的一部分。\nconfig.m4 文件使用 GNU autoconf 语法编写。注释用字符串 dnl 分隔，字符串则放在左右方括号中间（例如，[ 和 ]）。字符串可按需要多次嵌套引用\n关于config.m4更多说明，请参考官方的 {% link 与UNIX构建系统交互:config.m4  http://php.net/manual/en/internals2.buildsys.configunix.php %}\n\ncofig.w32 : 顾名思义它是用于 Windows 构建的 扩展的 ，用法与 config.m4 文件类似，但它是使用 JavaScript 编写的。更多请参数官方的{% link 使用Windows 构建系统:config.w32  http://php.net/manual/en/internals2.buildsys.configwin.php %}\n\nphp_cayely.h : 当将扩展作为静态模块构建并放入 PHP 二进制包时，构建系统要求用 php_ 加扩展的名称命名的头文件包含一个对扩展模块结构的指针定义。就象其他头文件，此文件经常包含附加的宏、原型和全局量。\n\ncayley.c : 主要的扩展源文件。此文件包含模块结构定义、INI 条目、管理函数、用户空间函数和其它扩展所需的内容。\n\nCREDITS :  说明该扩展的开发者和贡献者资料\n\npackage.xml ：  文件是基于PECL 的扩展特有的，是一个元信息文件，记录了扩展的信赖关系、作者、安装需求和其他有价值的信息。对于不是基于 PECL 的扩展来说，此文件就无关紧要了\n\n更多文件结构信息请参考官方文档{% link 扩展的结构 http://php.net/manual/zh/internals2.structure.php %}\n\n\n下面开发一个简单的php7扩展步骤\n\n一）要修改config.m4文件\n{% codeblock %}\n\nvim ./config.m4\n\ndnl 看到注释说明，如果你所编写的扩展如果依赖其它的扩展或者lib库，需要去掉PHP_ARG_WITH相关代码的注释，否则去掉PHP_ARG_ENABLE注释\ndnl 所以我们简单的php扩展不需要依赖其他的扩展库，所以去掉PHP_ARG_ENABLE注释\n\ndnl If your extension references something external, use with:\n\ndnl PHP_ARG_WITH(cayley, for cayley support,\ndnl Make sure that the comment is aligned:\ndnl [  --with-cayley             Include cayley support])\n\ndnl Otherwise use enable:\n\ndnl 取消了这里的注释\nPHP_ARG_ENABLE(cayley, whether to enable cayley support,\nMake sure that the comment is aligned:\n[  --enable-cayley           Enable cayley support])\n{% endcodeblock %}\n\n上面PHP_ARG_ENABLE函数有三个参数，第一个参数是我们的扩展名(注意不用加引号)，第二个参数是当我们运行./configure脚本时显示的内容，最后一个参数则是我们在调用./configure --help时显示的帮助信息\n\n还有config.m4：\n{% codeblock %}\n  dnl  PHP_NEW_EXTENSION函数申明\n  PHP_NEW_EXTENSION(cayley, cayley.c, $ext_shared,, -DZEND_ENABLE_STATIC_TSRMLS_CACHE=1)\n{% endcodeblock %}\n\nPHP_NEW_EXTENSION函数声明了这个扩展的名称、需要的源文件名、此扩展的编译形式。如果我们的扩展使用了多个文件，便可以将这多个文件名罗列在函数的参数里，用空格分开\n\nPHP_NEW_EXTENSION(cayley, cayley.c cayley2.c cayley3.c, $ext_shared)\n\n最后的$ext_shared参数用来声明这个扩展不是一个静态模块，而是在php运行时动态加载的\n\n\n\n二）实现代码\n\n至于开发语言是C,所以要使用C语言的编码标准，例如注释要用 /*  */，而不用C++的//\n更多标准请查看官方的 {% link PECL/PHP编码标准 http://git.php.net/?p=php-src.git;a=blob_plain;f=CODING_STANDARDS;hb=HEAD %}\n \n主要是修改caylye.c文件\n{% codeblock %}\nvim cayley.c\n{% endcodeblock %}\n\n找到PHP_FUNCTION(confirm_say_compiled)，在其上面增加如下代码：\n{% codeblock %}\nPHP_FUNCTION(cayley)\n{\n        zend_string *strg;\n        strg = strpprintf(0, \"hello word\");\n        RETURN_STR(strg);\n}\n{% endcodeblock %}\n在const zend_function_entry cayley_functions 里面添加代码\nPHP_FE(cayley, NULL)\n{% codeblock %}\nconst zend_function_entry cayley_functions[] = {\n\tPHP_FE(cayley, NULL) \t\t\t\t\t\t/* 插入的代码 */\n\tPHP_FE(confirm_cayley_compiled,\tNULL)\t\t/* For testing, remove later. */\n\tPHP_FE_END\t/* Must be the last line in cayley_functions[] */\n};\n{% endcodeblock %}\n\n三）编译\n\nphpize\n\n{% codeblock %}\nphpize\n\nConfiguring for:\nPHP Api Version:         20151012\nZend Module Api No:      20151012\nZend Extension Api No:   320151012\ncp: /Users/cayley/src/php7/php-7.0.14/ext/cayley/build/\n\n{% endcodeblock %}\n\n\n./configure\n{% codeblock %}\n\n./configure\nchecking for grep that handles long lines and -e... /usr/bin/grep\nchecking for egrep... /usr/bin/grep -E\nchecking for a sed that does not truncate output... /usr/bin/sed\nchecking for cc... cc\n......\n.....\ncreating libtool\nappending configuration tag \"CXX\" to libtool\nconfigure: creating ./config.status\nconfig.status: creating config.h\n\n\n{% endcodeblock %}\n\n\nmake && make install\n\n{% codeblock %}\n\n  make\n\n........\n/bin/sh /Users/cayley/src/php7/php-7.0.14/ext/cayley/libtool --mode=install cp ./cayley.la /Users/cayley/src/php7/php-7.0.14/ext/cayley/modules\ncp ./.libs/cayley.so /Users/cayley/src/php7/php-7.0.14/ext/cayley/modules/cayley.so\ncp ./.libs/cayley.lai /Users/cayley/src/php7/php-7.0.14/ext/cayley/modules/cayley.la\n----------------------------------------------------------------------\nLibraries have been installed in:\n   /Users/cayley/src/php7/php-7.0.14/ext/cayley/modules\n.....\n\ninstall\nInstalling shared extensions:     /usr/local/Cellar/php70/7.0.12_5/lib/php/extensions/no-debug-non-zts-20151012/\n cayley@cayley  ~/src/php7/php-7.0.14/ext/cayley  ll /usr/local/Cellar/php70/7.0.12_5/lib/php/extensions/no-debug-non-zts-20151012/\ntotal 24\n-rwxr-xr-x  1 cayley  admin    10K 12 28 21:40 cayley.so\n\n{% endcodeblock %}\n\n\n还有一种编译和使用扩展的方式，就是静态扩展，也就是说将我们的扩展编译到PHP主程序中\n\n直接使用 ./configure --help 是不会出现扩展cayley,需要选使用php源码的buildconf命令生成新的configure脚本\n\n{% codeblock %}\n ./configure --help |grep cayley\n\n ./buildconf --force\nForcing buildconf\nRemoving configure caches\nbuildconf: checking installation...\nbuildconf: autoconf version 2.69 (ok)\nrebuilding aclocal.m4\nrebuilding configure\nrebuilding main/php_config.h.in\n\n./configure --help |grep cayley\n  --enable-cayley           Enable cayley support\n\n{% endcodeblock %}\n\n就像help所说，我们编译php的，使用configure --enable-cayley就可以将cayley扩展编译到php主程序中了\n\n\n\n四）使用扩展\n\n修改php.ini 添加代码\n{% codeblock %}\n[cayley]\nextension = cayey.so\n{% endcodeblock %}\n\n查看是否安装成功\n{% codeblock %}\nphp -m |grep cayley\ncayley\n{% endcodeblock %}\n\n测试\n\nvim cayley.php添加如下代码\n{% codeblock %}\n\necho cayley();\n\n{% endcodeblock %}\n\n运行\n\n{% codeblock %}\nphp cayley.php\nFunctions available in the test extension:\ncayley\nconfirm_cayley_compiled\n\nhello word%                                                                                                                                            \n{% endcodeblock %}\n\n到这里一个简单的php7的扩展就完成，可见改扩展只提供了一个cayley()函数而已，而该函数只是输出了“hello word”\n\n\n现在来看看写这个扩展，我们做了啥\n\n其实使用ZEND_FUNCTION宏弄了个函数cayley\n\n这时候的只是我在C中实现了它，但是php还不知道有这个函数\n\n所以让php知道它，扩展定义的zend_module_entry cayley_module_entry（它是联系扩展与PHP的重要纽带）\n{% codeblock %}\n\n/*  cayley_module_entry\n */\nzend_module_entry cayley_module_entry = {\n\tSTANDARD_MODULE_HEADER,\t\n\t\"cayley\",\t\t\t\t/* 这个是扩展的名称 */\n\tcayley_functions,\t\t/* 扩展的函数  */\n\tPHP_MINIT(cayley),\n\tPHP_MSHUTDOWN(cayley),\n\tPHP_RINIT(cayley),\t\t/* Replace with NULL if there's nothing to do at request start */\n\tPHP_RSHUTDOWN(cayley),\t/* Replace with NULL if there's nothing to do at request end */\n\tPHP_MINFO(cayley),\n\tPHP_CAYLEY_VERSION,\t\t/* 扩展的版本 */\n\tSTANDARD_MODULE_PROPERTIES\n};\n\n{% endcodeblock %}\n然后使用ZEND_FE()宏函数是对我们walu_hello函数的一个声明，如果我们有多个函数，可以直接以类似的形式添加到PHP_FE(confirm_cayley_compiled,\tNULL)之前\n\n{% codeblock %}\nconst zend_function_entry cayley_functions[] = {\n\tPHP_FE(cayley, NULL)\t\t\t\t\t\t/* cayley函数的申明 */\n\tPHP_FE(confirm_cayley_compiled,\tNULL)\t\t/* For testing, remove later. */\n\tPHP_FE_END\t/* Must be the last line in cayley_functions[] */\n};\n{% endcodeblock %}\n","source":"_posts/php7扩展开发之初见.md","raw":"---\ntitle: php7扩展开发之初见\ndate: 2016-12-28 22:12:56\ntags:\tphp\n---\n\n作为一名php程序猿，再次申明php是世界上最好的语言（骄傲脸）。\n本来以PHP7作为基础，记录如何从零开始创建一个PHP扩展，分析php扩展基本骨架组成。认识如果开发一个php7的扩展。\n\nPHP 扩展由几个文件组成，这些文件对所有扩展来说都是通用的。不同扩展之间，这些文件的很多细节是相似的，只是要费力去复制每个文件的内容。\n所以提供php官方提供一个脚本做所有的初始化工作，名为 ext_skel，在php7源码的./ext目录下\n该工具的使用如下：\n{% codeblock %}\n./ext_skel\n./ext_skel --extname=module [--proto=file] [--stubs=file] [--xml[=file]]\n           [--skel=dir] [--full-xml] [--no-help]\n\n  --extname=module   module is the name of your extension\n  --proto=file       file contains prototypes of functions to create\n  --stubs=file       generate only function stubs in file\n  --xml              generate xml documentation to be added to phpdoc-svn\n  --skel=dir         path to the skeleton directory\n  --full-xml         generate xml documentation for a self-contained extension\n                     (not yet implemented)\n  --no-help          don't try to be nice and create comments in the code\n                     and helper functions to test if the module compiled\n{% endcodeblock %}\n其中比较重要的参数是--extname 会将扩展的名称传给 ext_skel\n而--no-help，会使ext_skel 不会在生成的文件里省略很多有用的注释。\n\n接下来创建个名cayley的php扩展\n{% codeblock %}\n./ext_skel --extname=cayley\nCreating directory cayley\nCreating basic files: config.m4 config.w32 .gitignore cayley.c php_cayley.h CREDITS EXPERIMENTAL tests/001.phpt cayley.php [done].\n\nTo use your new extension, you will have to execute the following steps:\n\n1.  $ cd ..\n2.  $ vi ext/cayley/config.m4\n3.  $ ./buildconf\n4.  $ ./configure --[with|enable]-cayley\n5.  $ make\n6.  $ ./sapi/cli/php -f ext/cayley/cayley.php\n7.  $ vi ext/cayley/cayley.c\n8.  $ make\n\nRepeat steps 3-6 until you are satisfied with ext/cayley/config.m4 and\nstep 6 confirms that your module is compiled into PHP. Then, start writing\ncode and repeat the last two steps as often as necessary.\n{% endcodeblock %}\n\n现在来看下cayley扩展的结构：\n{% codeblock %}\n ls -al\ntotal 64\ndrwxr-xr-x  12 cayley  staff   408 12 28 22:30 .\ndrwxr-xr-x@ 78 cayley  staff  2652 12 28 16:45 ..\n-rw-r--r--   1 cayley  staff   398 12 28 16:45 .gitignore\n-rw-r--r--   1 cayley  staff     7 12 28 16:45 CREDITS\n-rw-r--r--   1 cayley  staff     0 12 28 16:45 EXPERIMENTAL\n-rw-r--r--   1 cayley  staff  5298 12 28 21:32 cayley.c\n-rw-r--r--   1 cayley  staff   518 12 28 21:58 cayley.php\n-rw-r--r--   1 cayley  staff  2076 12 28 17:06 config.m4\n-rw-r--r--   1 cayley  staff   355 12 28 16:45 config.w32\ndrwxr-xr-x   2 cayley  staff    68 12 28 21:40 include\n-rw-r--r--   1 cayley  staff  2316 12 28 16:45 php_cayley.h\ndrwxr-xr-x   3 cayley  staff   102 12 28 16:45 tests\n{% endcodeblock %}\n\nconfig.m4 ： 是与UNIX构建的系统交互的文件，文件告诉 UNIX 构建系统哪些扩展 configure 选项是支持的，你需要哪些扩展库，以及哪些源文件要编译成它的一部分。\nconfig.m4 文件使用 GNU autoconf 语法编写。注释用字符串 dnl 分隔，字符串则放在左右方括号中间（例如，[ 和 ]）。字符串可按需要多次嵌套引用\n关于config.m4更多说明，请参考官方的 {% link 与UNIX构建系统交互:config.m4  http://php.net/manual/en/internals2.buildsys.configunix.php %}\n\ncofig.w32 : 顾名思义它是用于 Windows 构建的 扩展的 ，用法与 config.m4 文件类似，但它是使用 JavaScript 编写的。更多请参数官方的{% link 使用Windows 构建系统:config.w32  http://php.net/manual/en/internals2.buildsys.configwin.php %}\n\nphp_cayely.h : 当将扩展作为静态模块构建并放入 PHP 二进制包时，构建系统要求用 php_ 加扩展的名称命名的头文件包含一个对扩展模块结构的指针定义。就象其他头文件，此文件经常包含附加的宏、原型和全局量。\n\ncayley.c : 主要的扩展源文件。此文件包含模块结构定义、INI 条目、管理函数、用户空间函数和其它扩展所需的内容。\n\nCREDITS :  说明该扩展的开发者和贡献者资料\n\npackage.xml ：  文件是基于PECL 的扩展特有的，是一个元信息文件，记录了扩展的信赖关系、作者、安装需求和其他有价值的信息。对于不是基于 PECL 的扩展来说，此文件就无关紧要了\n\n更多文件结构信息请参考官方文档{% link 扩展的结构 http://php.net/manual/zh/internals2.structure.php %}\n\n\n下面开发一个简单的php7扩展步骤\n\n一）要修改config.m4文件\n{% codeblock %}\n\nvim ./config.m4\n\ndnl 看到注释说明，如果你所编写的扩展如果依赖其它的扩展或者lib库，需要去掉PHP_ARG_WITH相关代码的注释，否则去掉PHP_ARG_ENABLE注释\ndnl 所以我们简单的php扩展不需要依赖其他的扩展库，所以去掉PHP_ARG_ENABLE注释\n\ndnl If your extension references something external, use with:\n\ndnl PHP_ARG_WITH(cayley, for cayley support,\ndnl Make sure that the comment is aligned:\ndnl [  --with-cayley             Include cayley support])\n\ndnl Otherwise use enable:\n\ndnl 取消了这里的注释\nPHP_ARG_ENABLE(cayley, whether to enable cayley support,\nMake sure that the comment is aligned:\n[  --enable-cayley           Enable cayley support])\n{% endcodeblock %}\n\n上面PHP_ARG_ENABLE函数有三个参数，第一个参数是我们的扩展名(注意不用加引号)，第二个参数是当我们运行./configure脚本时显示的内容，最后一个参数则是我们在调用./configure --help时显示的帮助信息\n\n还有config.m4：\n{% codeblock %}\n  dnl  PHP_NEW_EXTENSION函数申明\n  PHP_NEW_EXTENSION(cayley, cayley.c, $ext_shared,, -DZEND_ENABLE_STATIC_TSRMLS_CACHE=1)\n{% endcodeblock %}\n\nPHP_NEW_EXTENSION函数声明了这个扩展的名称、需要的源文件名、此扩展的编译形式。如果我们的扩展使用了多个文件，便可以将这多个文件名罗列在函数的参数里，用空格分开\n\nPHP_NEW_EXTENSION(cayley, cayley.c cayley2.c cayley3.c, $ext_shared)\n\n最后的$ext_shared参数用来声明这个扩展不是一个静态模块，而是在php运行时动态加载的\n\n\n\n二）实现代码\n\n至于开发语言是C,所以要使用C语言的编码标准，例如注释要用 /*  */，而不用C++的//\n更多标准请查看官方的 {% link PECL/PHP编码标准 http://git.php.net/?p=php-src.git;a=blob_plain;f=CODING_STANDARDS;hb=HEAD %}\n \n主要是修改caylye.c文件\n{% codeblock %}\nvim cayley.c\n{% endcodeblock %}\n\n找到PHP_FUNCTION(confirm_say_compiled)，在其上面增加如下代码：\n{% codeblock %}\nPHP_FUNCTION(cayley)\n{\n        zend_string *strg;\n        strg = strpprintf(0, \"hello word\");\n        RETURN_STR(strg);\n}\n{% endcodeblock %}\n在const zend_function_entry cayley_functions 里面添加代码\nPHP_FE(cayley, NULL)\n{% codeblock %}\nconst zend_function_entry cayley_functions[] = {\n\tPHP_FE(cayley, NULL) \t\t\t\t\t\t/* 插入的代码 */\n\tPHP_FE(confirm_cayley_compiled,\tNULL)\t\t/* For testing, remove later. */\n\tPHP_FE_END\t/* Must be the last line in cayley_functions[] */\n};\n{% endcodeblock %}\n\n三）编译\n\nphpize\n\n{% codeblock %}\nphpize\n\nConfiguring for:\nPHP Api Version:         20151012\nZend Module Api No:      20151012\nZend Extension Api No:   320151012\ncp: /Users/cayley/src/php7/php-7.0.14/ext/cayley/build/\n\n{% endcodeblock %}\n\n\n./configure\n{% codeblock %}\n\n./configure\nchecking for grep that handles long lines and -e... /usr/bin/grep\nchecking for egrep... /usr/bin/grep -E\nchecking for a sed that does not truncate output... /usr/bin/sed\nchecking for cc... cc\n......\n.....\ncreating libtool\nappending configuration tag \"CXX\" to libtool\nconfigure: creating ./config.status\nconfig.status: creating config.h\n\n\n{% endcodeblock %}\n\n\nmake && make install\n\n{% codeblock %}\n\n  make\n\n........\n/bin/sh /Users/cayley/src/php7/php-7.0.14/ext/cayley/libtool --mode=install cp ./cayley.la /Users/cayley/src/php7/php-7.0.14/ext/cayley/modules\ncp ./.libs/cayley.so /Users/cayley/src/php7/php-7.0.14/ext/cayley/modules/cayley.so\ncp ./.libs/cayley.lai /Users/cayley/src/php7/php-7.0.14/ext/cayley/modules/cayley.la\n----------------------------------------------------------------------\nLibraries have been installed in:\n   /Users/cayley/src/php7/php-7.0.14/ext/cayley/modules\n.....\n\ninstall\nInstalling shared extensions:     /usr/local/Cellar/php70/7.0.12_5/lib/php/extensions/no-debug-non-zts-20151012/\n cayley@cayley  ~/src/php7/php-7.0.14/ext/cayley  ll /usr/local/Cellar/php70/7.0.12_5/lib/php/extensions/no-debug-non-zts-20151012/\ntotal 24\n-rwxr-xr-x  1 cayley  admin    10K 12 28 21:40 cayley.so\n\n{% endcodeblock %}\n\n\n还有一种编译和使用扩展的方式，就是静态扩展，也就是说将我们的扩展编译到PHP主程序中\n\n直接使用 ./configure --help 是不会出现扩展cayley,需要选使用php源码的buildconf命令生成新的configure脚本\n\n{% codeblock %}\n ./configure --help |grep cayley\n\n ./buildconf --force\nForcing buildconf\nRemoving configure caches\nbuildconf: checking installation...\nbuildconf: autoconf version 2.69 (ok)\nrebuilding aclocal.m4\nrebuilding configure\nrebuilding main/php_config.h.in\n\n./configure --help |grep cayley\n  --enable-cayley           Enable cayley support\n\n{% endcodeblock %}\n\n就像help所说，我们编译php的，使用configure --enable-cayley就可以将cayley扩展编译到php主程序中了\n\n\n\n四）使用扩展\n\n修改php.ini 添加代码\n{% codeblock %}\n[cayley]\nextension = cayey.so\n{% endcodeblock %}\n\n查看是否安装成功\n{% codeblock %}\nphp -m |grep cayley\ncayley\n{% endcodeblock %}\n\n测试\n\nvim cayley.php添加如下代码\n{% codeblock %}\n\necho cayley();\n\n{% endcodeblock %}\n\n运行\n\n{% codeblock %}\nphp cayley.php\nFunctions available in the test extension:\ncayley\nconfirm_cayley_compiled\n\nhello word%                                                                                                                                            \n{% endcodeblock %}\n\n到这里一个简单的php7的扩展就完成，可见改扩展只提供了一个cayley()函数而已，而该函数只是输出了“hello word”\n\n\n现在来看看写这个扩展，我们做了啥\n\n其实使用ZEND_FUNCTION宏弄了个函数cayley\n\n这时候的只是我在C中实现了它，但是php还不知道有这个函数\n\n所以让php知道它，扩展定义的zend_module_entry cayley_module_entry（它是联系扩展与PHP的重要纽带）\n{% codeblock %}\n\n/*  cayley_module_entry\n */\nzend_module_entry cayley_module_entry = {\n\tSTANDARD_MODULE_HEADER,\t\n\t\"cayley\",\t\t\t\t/* 这个是扩展的名称 */\n\tcayley_functions,\t\t/* 扩展的函数  */\n\tPHP_MINIT(cayley),\n\tPHP_MSHUTDOWN(cayley),\n\tPHP_RINIT(cayley),\t\t/* Replace with NULL if there's nothing to do at request start */\n\tPHP_RSHUTDOWN(cayley),\t/* Replace with NULL if there's nothing to do at request end */\n\tPHP_MINFO(cayley),\n\tPHP_CAYLEY_VERSION,\t\t/* 扩展的版本 */\n\tSTANDARD_MODULE_PROPERTIES\n};\n\n{% endcodeblock %}\n然后使用ZEND_FE()宏函数是对我们walu_hello函数的一个声明，如果我们有多个函数，可以直接以类似的形式添加到PHP_FE(confirm_cayley_compiled,\tNULL)之前\n\n{% codeblock %}\nconst zend_function_entry cayley_functions[] = {\n\tPHP_FE(cayley, NULL)\t\t\t\t\t\t/* cayley函数的申明 */\n\tPHP_FE(confirm_cayley_compiled,\tNULL)\t\t/* For testing, remove later. */\n\tPHP_FE_END\t/* Must be the last line in cayley_functions[] */\n};\n{% endcodeblock %}\n","slug":"php7扩展开发之初见","published":1,"updated":"2017-03-01T03:47:01.000Z","_id":"cizqeiemx000uznz4r0xyq3t1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>作为一名php程序猿，再次申明php是世界上最好的语言（骄傲脸）。<br>本来以PHP7作为基础，记录如何从零开始创建一个PHP扩展，分析php扩展基本骨架组成。认识如果开发一个php7的扩展。</p>\n<p>PHP 扩展由几个文件组成，这些文件对所有扩展来说都是通用的。不同扩展之间，这些文件的很多细节是相似的，只是要费力去复制每个文件的内容。<br>所以提供php官方提供一个脚本做所有的初始化工作，名为 ext_skel，在php7源码的./ext目录下<br>该工具的使用如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">./ext_skel</div><div class=\"line\">./ext_skel --extname=module [--proto=file] [--stubs=file] [--xml[=file]]</div><div class=\"line\">           [--skel=dir] [--full-xml] [--no-help]</div><div class=\"line\"></div><div class=\"line\">  --extname=module   module is the name of your extension</div><div class=\"line\">  --proto=file       file contains prototypes of functions to create</div><div class=\"line\">  --stubs=file       generate only function stubs in file</div><div class=\"line\">  --xml              generate xml documentation to be added to phpdoc-svn</div><div class=\"line\">  --skel=dir         path to the skeleton directory</div><div class=\"line\">  --full-xml         generate xml documentation for a self-contained extension</div><div class=\"line\">                     (not yet implemented)</div><div class=\"line\">  --no-help          don&apos;t try to be nice and create comments in the code</div><div class=\"line\">                     and helper functions to test if the module compiled</div></pre></td></tr></table></figure><br>其中比较重要的参数是–extname 会将扩展的名称传给 ext_skel<br>而–no-help，会使ext_skel 不会在生成的文件里省略很多有用的注释。</p>\n<p>接下来创建个名cayley的php扩展<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">./ext_skel --extname=cayley</div><div class=\"line\">Creating directory cayley</div><div class=\"line\">Creating basic files: config.m4 config.w32 .gitignore cayley.c php_cayley.h CREDITS EXPERIMENTAL tests/001.phpt cayley.php [done].</div><div class=\"line\"></div><div class=\"line\">To use your new extension, you will have to execute the following steps:</div><div class=\"line\"></div><div class=\"line\">1.  $ cd ..</div><div class=\"line\">2.  $ vi ext/cayley/config.m4</div><div class=\"line\">3.  $ ./buildconf</div><div class=\"line\">4.  $ ./configure --[with|enable]-cayley</div><div class=\"line\">5.  $ make</div><div class=\"line\">6.  $ ./sapi/cli/php -f ext/cayley/cayley.php</div><div class=\"line\">7.  $ vi ext/cayley/cayley.c</div><div class=\"line\">8.  $ make</div><div class=\"line\"></div><div class=\"line\">Repeat steps 3-6 until you are satisfied with ext/cayley/config.m4 and</div><div class=\"line\">step 6 confirms that your module is compiled into PHP. Then, start writing</div><div class=\"line\">code and repeat the last two steps as often as necessary.</div></pre></td></tr></table></figure></p>\n<p>现在来看下cayley扩展的结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ls -al</div><div class=\"line\">total 64</div><div class=\"line\">drwxr-xr-x  12 cayley  staff   408 12 28 22:30 .</div><div class=\"line\">drwxr-xr-x@ 78 cayley  staff  2652 12 28 16:45 ..</div><div class=\"line\">-rw-r--r--   1 cayley  staff   398 12 28 16:45 .gitignore</div><div class=\"line\">-rw-r--r--   1 cayley  staff     7 12 28 16:45 CREDITS</div><div class=\"line\">-rw-r--r--   1 cayley  staff     0 12 28 16:45 EXPERIMENTAL</div><div class=\"line\">-rw-r--r--   1 cayley  staff  5298 12 28 21:32 cayley.c</div><div class=\"line\">-rw-r--r--   1 cayley  staff   518 12 28 21:58 cayley.php</div><div class=\"line\">-rw-r--r--   1 cayley  staff  2076 12 28 17:06 config.m4</div><div class=\"line\">-rw-r--r--   1 cayley  staff   355 12 28 16:45 config.w32</div><div class=\"line\">drwxr-xr-x   2 cayley  staff    68 12 28 21:40 include</div><div class=\"line\">-rw-r--r--   1 cayley  staff  2316 12 28 16:45 php_cayley.h</div><div class=\"line\">drwxr-xr-x   3 cayley  staff   102 12 28 16:45 tests</div></pre></td></tr></table></figure></p>\n<p>config.m4 ： 是与UNIX构建的系统交互的文件，文件告诉 UNIX 构建系统哪些扩展 configure 选项是支持的，你需要哪些扩展库，以及哪些源文件要编译成它的一部分。<br>config.m4 文件使用 GNU autoconf 语法编写。注释用字符串 dnl 分隔，字符串则放在左右方括号中间（例如，[ 和 ]）。字符串可按需要多次嵌套引用<br>关于config.m4更多说明，请参考官方的 <a href=\"http://php.net/manual/en/internals2.buildsys.configunix.php\" target=\"_blank\" rel=\"external\">与UNIX构建系统交互:config.m4</a></p>\n<p>cofig.w32 : 顾名思义它是用于 Windows 构建的 扩展的 ，用法与 config.m4 文件类似，但它是使用 JavaScript 编写的。更多请参数官方的<a href=\"http://php.net/manual/en/internals2.buildsys.configwin.php\" target=\"_blank\" rel=\"external\">使用Windows 构建系统:config.w32</a></p>\n<p>php<em>cayely.h : 当将扩展作为静态模块构建并放入 PHP 二进制包时，构建系统要求用 php</em> 加扩展的名称命名的头文件包含一个对扩展模块结构的指针定义。就象其他头文件，此文件经常包含附加的宏、原型和全局量。</p>\n<p>cayley.c : 主要的扩展源文件。此文件包含模块结构定义、INI 条目、管理函数、用户空间函数和其它扩展所需的内容。</p>\n<p>CREDITS :  说明该扩展的开发者和贡献者资料</p>\n<p>package.xml ：  文件是基于PECL 的扩展特有的，是一个元信息文件，记录了扩展的信赖关系、作者、安装需求和其他有价值的信息。对于不是基于 PECL 的扩展来说，此文件就无关紧要了</p>\n<p>更多文件结构信息请参考官方文档<a href=\"http://php.net/manual/zh/internals2.structure.php\" target=\"_blank\" rel=\"external\">扩展的结构</a></p>\n<p>下面开发一个简单的php7扩展步骤</p>\n<p>一）要修改config.m4文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">vim ./config.m4</div><div class=\"line\"></div><div class=\"line\">dnl 看到注释说明，如果你所编写的扩展如果依赖其它的扩展或者lib库，需要去掉PHP_ARG_WITH相关代码的注释，否则去掉PHP_ARG_ENABLE注释</div><div class=\"line\">dnl 所以我们简单的php扩展不需要依赖其他的扩展库，所以去掉PHP_ARG_ENABLE注释</div><div class=\"line\"></div><div class=\"line\">dnl If your extension references something external, use with:</div><div class=\"line\"></div><div class=\"line\">dnl PHP_ARG_WITH(cayley, for cayley support,</div><div class=\"line\">dnl Make sure that the comment is aligned:</div><div class=\"line\">dnl [  --with-cayley             Include cayley support])</div><div class=\"line\"></div><div class=\"line\">dnl Otherwise use enable:</div><div class=\"line\"></div><div class=\"line\">dnl 取消了这里的注释</div><div class=\"line\">PHP_ARG_ENABLE(cayley, whether to enable cayley support,</div><div class=\"line\">Make sure that the comment is aligned:</div><div class=\"line\">[  --enable-cayley           Enable cayley support])</div></pre></td></tr></table></figure></p>\n<p>上面PHP_ARG_ENABLE函数有三个参数，第一个参数是我们的扩展名(注意不用加引号)，第二个参数是当我们运行./configure脚本时显示的内容，最后一个参数则是我们在调用./configure –help时显示的帮助信息</p>\n<p>还有config.m4：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">dnl  PHP_NEW_EXTENSION函数申明</div><div class=\"line\">PHP_NEW_EXTENSION(cayley, cayley.c, $ext_shared,, -DZEND_ENABLE_STATIC_TSRMLS_CACHE=1)</div></pre></td></tr></table></figure></p>\n<p>PHP_NEW_EXTENSION函数声明了这个扩展的名称、需要的源文件名、此扩展的编译形式。如果我们的扩展使用了多个文件，便可以将这多个文件名罗列在函数的参数里，用空格分开</p>\n<p>PHP_NEW_EXTENSION(cayley, cayley.c cayley2.c cayley3.c, $ext_shared)</p>\n<p>最后的$ext_shared参数用来声明这个扩展不是一个静态模块，而是在php运行时动态加载的</p>\n<p>二）实现代码</p>\n<p>至于开发语言是C,所以要使用C语言的编码标准，例如注释要用 /<em>  </em>/，而不用C++的//<br>更多标准请查看官方的 <a href=\"http://git.php.net/?p=php-src.git;a=blob_plain;f=CODING_STANDARDS;hb=HEAD\" target=\"_blank\" rel=\"external\">PECL/PHP编码标准</a></p>\n<p>主要是修改caylye.c文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim cayley.c</div></pre></td></tr></table></figure></p>\n<p>找到PHP_FUNCTION(confirm_say_compiled)，在其上面增加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">PHP_FUNCTION(cayley)</div><div class=\"line\">&#123;</div><div class=\"line\">        zend_string *strg;</div><div class=\"line\">        strg = strpprintf(0, &quot;hello word&quot;);</div><div class=\"line\">        RETURN_STR(strg);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>在const zend_function_entry cayley_functions 里面添加代码<br>PHP_FE(cayley, NULL)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const zend_function_entry cayley_functions[] = &#123;</div><div class=\"line\">\tPHP_FE(cayley, NULL) \t\t\t\t\t\t/* 插入的代码 */</div><div class=\"line\">\tPHP_FE(confirm_cayley_compiled,\tNULL)\t\t/* For testing, remove later. */</div><div class=\"line\">\tPHP_FE_END\t/* Must be the last line in cayley_functions[] */</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>三）编译</p>\n<p>phpize</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">phpize</div><div class=\"line\"></div><div class=\"line\">Configuring for:</div><div class=\"line\">PHP Api Version:         20151012</div><div class=\"line\">Zend Module Api No:      20151012</div><div class=\"line\">Zend Extension Api No:   320151012</div><div class=\"line\">cp: /Users/cayley/src/php7/php-7.0.14/ext/cayley/build/</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>./configure<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">./configure</div><div class=\"line\">checking for grep that handles long lines and -e... /usr/bin/grep</div><div class=\"line\">checking for egrep... /usr/bin/grep -E</div><div class=\"line\">checking for a sed that does not truncate output... /usr/bin/sed</div><div class=\"line\">checking for cc... cc</div><div class=\"line\">......</div><div class=\"line\">.....</div><div class=\"line\">creating libtool</div><div class=\"line\">appending configuration tag &quot;CXX&quot; to libtool</div><div class=\"line\">configure: creating ./config.status</div><div class=\"line\">config.status: creating config.h</div><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>make &amp;&amp; make install</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  make</div><div class=\"line\"></div><div class=\"line\">........</div><div class=\"line\">/bin/sh /Users/cayley/src/php7/php-7.0.14/ext/cayley/libtool --mode=install cp ./cayley.la /Users/cayley/src/php7/php-7.0.14/ext/cayley/modules</div><div class=\"line\">cp ./.libs/cayley.so /Users/cayley/src/php7/php-7.0.14/ext/cayley/modules/cayley.so</div><div class=\"line\">cp ./.libs/cayley.lai /Users/cayley/src/php7/php-7.0.14/ext/cayley/modules/cayley.la</div><div class=\"line\">----------------------------------------------------------------------</div><div class=\"line\">Libraries have been installed in:</div><div class=\"line\">   /Users/cayley/src/php7/php-7.0.14/ext/cayley/modules</div><div class=\"line\">.....</div><div class=\"line\"></div><div class=\"line\">install</div><div class=\"line\">Installing shared extensions:     /usr/local/Cellar/php70/7.0.12_5/lib/php/extensions/no-debug-non-zts-20151012/</div><div class=\"line\"> cayley@cayley  ~/src/php7/php-7.0.14/ext/cayley  ll /usr/local/Cellar/php70/7.0.12_5/lib/php/extensions/no-debug-non-zts-20151012/</div><div class=\"line\">total 24</div><div class=\"line\">-rwxr-xr-x  1 cayley  admin    10K 12 28 21:40 cayley.so</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>还有一种编译和使用扩展的方式，就是静态扩展，也就是说将我们的扩展编译到PHP主程序中</p>\n<p>直接使用 ./configure –help 是不会出现扩展cayley,需要选使用php源码的buildconf命令生成新的configure脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ./configure --help |grep cayley</div><div class=\"line\"></div><div class=\"line\"> ./buildconf --force</div><div class=\"line\">Forcing buildconf</div><div class=\"line\">Removing configure caches</div><div class=\"line\">buildconf: checking installation...</div><div class=\"line\">buildconf: autoconf version 2.69 (ok)</div><div class=\"line\">rebuilding aclocal.m4</div><div class=\"line\">rebuilding configure</div><div class=\"line\">rebuilding main/php_config.h.in</div><div class=\"line\"></div><div class=\"line\">./configure --help |grep cayley</div><div class=\"line\">  --enable-cayley           Enable cayley support</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>就像help所说，我们编译php的，使用configure –enable-cayley就可以将cayley扩展编译到php主程序中了</p>\n<p>四）使用扩展</p>\n<p>修改php.ini 添加代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[cayley]</div><div class=\"line\">extension = cayey.so</div></pre></td></tr></table></figure></p>\n<p>查看是否安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">php -m |grep cayley</div><div class=\"line\">cayley</div></pre></td></tr></table></figure></p>\n<p>测试</p>\n<p>vim cayley.php添加如下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">echo cayley();</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">php cayley.php</div><div class=\"line\">Functions available in the test extension:</div><div class=\"line\">cayley</div><div class=\"line\">confirm_cayley_compiled</div><div class=\"line\"></div><div class=\"line\">hello word%                                                                                                                                            </div></pre></td></tr></table></figure>\n<p>到这里一个简单的php7的扩展就完成，可见改扩展只提供了一个cayley()函数而已，而该函数只是输出了“hello word”</p>\n<p>现在来看看写这个扩展，我们做了啥</p>\n<p>其实使用ZEND_FUNCTION宏弄了个函数cayley</p>\n<p>这时候的只是我在C中实现了它，但是php还不知道有这个函数</p>\n<p>所以让php知道它，扩展定义的zend_module_entry cayley_module_entry（它是联系扩展与PHP的重要纽带）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/*  cayley_module_entry</div><div class=\"line\"> */</div><div class=\"line\">zend_module_entry cayley_module_entry = &#123;</div><div class=\"line\">\tSTANDARD_MODULE_HEADER,\t</div><div class=\"line\">\t&quot;cayley&quot;,\t\t\t\t/* 这个是扩展的名称 */</div><div class=\"line\">\tcayley_functions,\t\t/* 扩展的函数  */</div><div class=\"line\">\tPHP_MINIT(cayley),</div><div class=\"line\">\tPHP_MSHUTDOWN(cayley),</div><div class=\"line\">\tPHP_RINIT(cayley),\t\t/* Replace with NULL if there&apos;s nothing to do at request start */</div><div class=\"line\">\tPHP_RSHUTDOWN(cayley),\t/* Replace with NULL if there&apos;s nothing to do at request end */</div><div class=\"line\">\tPHP_MINFO(cayley),</div><div class=\"line\">\tPHP_CAYLEY_VERSION,\t\t/* 扩展的版本 */</div><div class=\"line\">\tSTANDARD_MODULE_PROPERTIES</div><div class=\"line\">&#125;;</div><div class=\"line\"></div></pre></td></tr></table></figure><br>然后使用ZEND_FE()宏函数是对我们walu_hello函数的一个声明，如果我们有多个函数，可以直接以类似的形式添加到PHP_FE(confirm_cayley_compiled,    NULL)之前</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const zend_function_entry cayley_functions[] = &#123;</div><div class=\"line\">\tPHP_FE(cayley, NULL)\t\t\t\t\t\t/* cayley函数的申明 */</div><div class=\"line\">\tPHP_FE(confirm_cayley_compiled,\tNULL)\t\t/* For testing, remove later. */</div><div class=\"line\">\tPHP_FE_END\t/* Must be the last line in cayley_functions[] */</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>作为一名php程序猿，再次申明php是世界上最好的语言（骄傲脸）。<br>本来以PHP7作为基础，记录如何从零开始创建一个PHP扩展，分析php扩展基本骨架组成。认识如果开发一个php7的扩展。</p>\n<p>PHP 扩展由几个文件组成，这些文件对所有扩展来说都是通用的。不同扩展之间，这些文件的很多细节是相似的，只是要费力去复制每个文件的内容。<br>所以提供php官方提供一个脚本做所有的初始化工作，名为 ext_skel，在php7源码的./ext目录下<br>该工具的使用如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">./ext_skel</div><div class=\"line\">./ext_skel --extname=module [--proto=file] [--stubs=file] [--xml[=file]]</div><div class=\"line\">           [--skel=dir] [--full-xml] [--no-help]</div><div class=\"line\"></div><div class=\"line\">  --extname=module   module is the name of your extension</div><div class=\"line\">  --proto=file       file contains prototypes of functions to create</div><div class=\"line\">  --stubs=file       generate only function stubs in file</div><div class=\"line\">  --xml              generate xml documentation to be added to phpdoc-svn</div><div class=\"line\">  --skel=dir         path to the skeleton directory</div><div class=\"line\">  --full-xml         generate xml documentation for a self-contained extension</div><div class=\"line\">                     (not yet implemented)</div><div class=\"line\">  --no-help          don&apos;t try to be nice and create comments in the code</div><div class=\"line\">                     and helper functions to test if the module compiled</div></pre></td></tr></table></figure><br>其中比较重要的参数是–extname 会将扩展的名称传给 ext_skel<br>而–no-help，会使ext_skel 不会在生成的文件里省略很多有用的注释。</p>\n<p>接下来创建个名cayley的php扩展<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">./ext_skel --extname=cayley</div><div class=\"line\">Creating directory cayley</div><div class=\"line\">Creating basic files: config.m4 config.w32 .gitignore cayley.c php_cayley.h CREDITS EXPERIMENTAL tests/001.phpt cayley.php [done].</div><div class=\"line\"></div><div class=\"line\">To use your new extension, you will have to execute the following steps:</div><div class=\"line\"></div><div class=\"line\">1.  $ cd ..</div><div class=\"line\">2.  $ vi ext/cayley/config.m4</div><div class=\"line\">3.  $ ./buildconf</div><div class=\"line\">4.  $ ./configure --[with|enable]-cayley</div><div class=\"line\">5.  $ make</div><div class=\"line\">6.  $ ./sapi/cli/php -f ext/cayley/cayley.php</div><div class=\"line\">7.  $ vi ext/cayley/cayley.c</div><div class=\"line\">8.  $ make</div><div class=\"line\"></div><div class=\"line\">Repeat steps 3-6 until you are satisfied with ext/cayley/config.m4 and</div><div class=\"line\">step 6 confirms that your module is compiled into PHP. Then, start writing</div><div class=\"line\">code and repeat the last two steps as often as necessary.</div></pre></td></tr></table></figure></p>\n<p>现在来看下cayley扩展的结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ls -al</div><div class=\"line\">total 64</div><div class=\"line\">drwxr-xr-x  12 cayley  staff   408 12 28 22:30 .</div><div class=\"line\">drwxr-xr-x@ 78 cayley  staff  2652 12 28 16:45 ..</div><div class=\"line\">-rw-r--r--   1 cayley  staff   398 12 28 16:45 .gitignore</div><div class=\"line\">-rw-r--r--   1 cayley  staff     7 12 28 16:45 CREDITS</div><div class=\"line\">-rw-r--r--   1 cayley  staff     0 12 28 16:45 EXPERIMENTAL</div><div class=\"line\">-rw-r--r--   1 cayley  staff  5298 12 28 21:32 cayley.c</div><div class=\"line\">-rw-r--r--   1 cayley  staff   518 12 28 21:58 cayley.php</div><div class=\"line\">-rw-r--r--   1 cayley  staff  2076 12 28 17:06 config.m4</div><div class=\"line\">-rw-r--r--   1 cayley  staff   355 12 28 16:45 config.w32</div><div class=\"line\">drwxr-xr-x   2 cayley  staff    68 12 28 21:40 include</div><div class=\"line\">-rw-r--r--   1 cayley  staff  2316 12 28 16:45 php_cayley.h</div><div class=\"line\">drwxr-xr-x   3 cayley  staff   102 12 28 16:45 tests</div></pre></td></tr></table></figure></p>\n<p>config.m4 ： 是与UNIX构建的系统交互的文件，文件告诉 UNIX 构建系统哪些扩展 configure 选项是支持的，你需要哪些扩展库，以及哪些源文件要编译成它的一部分。<br>config.m4 文件使用 GNU autoconf 语法编写。注释用字符串 dnl 分隔，字符串则放在左右方括号中间（例如，[ 和 ]）。字符串可按需要多次嵌套引用<br>关于config.m4更多说明，请参考官方的 <a href=\"http://php.net/manual/en/internals2.buildsys.configunix.php\">与UNIX构建系统交互:config.m4</a></p>\n<p>cofig.w32 : 顾名思义它是用于 Windows 构建的 扩展的 ，用法与 config.m4 文件类似，但它是使用 JavaScript 编写的。更多请参数官方的<a href=\"http://php.net/manual/en/internals2.buildsys.configwin.php\">使用Windows 构建系统:config.w32</a></p>\n<p>php<em>cayely.h : 当将扩展作为静态模块构建并放入 PHP 二进制包时，构建系统要求用 php</em> 加扩展的名称命名的头文件包含一个对扩展模块结构的指针定义。就象其他头文件，此文件经常包含附加的宏、原型和全局量。</p>\n<p>cayley.c : 主要的扩展源文件。此文件包含模块结构定义、INI 条目、管理函数、用户空间函数和其它扩展所需的内容。</p>\n<p>CREDITS :  说明该扩展的开发者和贡献者资料</p>\n<p>package.xml ：  文件是基于PECL 的扩展特有的，是一个元信息文件，记录了扩展的信赖关系、作者、安装需求和其他有价值的信息。对于不是基于 PECL 的扩展来说，此文件就无关紧要了</p>\n<p>更多文件结构信息请参考官方文档<a href=\"http://php.net/manual/zh/internals2.structure.php\">扩展的结构</a></p>\n<p>下面开发一个简单的php7扩展步骤</p>\n<p>一）要修改config.m4文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">vim ./config.m4</div><div class=\"line\"></div><div class=\"line\">dnl 看到注释说明，如果你所编写的扩展如果依赖其它的扩展或者lib库，需要去掉PHP_ARG_WITH相关代码的注释，否则去掉PHP_ARG_ENABLE注释</div><div class=\"line\">dnl 所以我们简单的php扩展不需要依赖其他的扩展库，所以去掉PHP_ARG_ENABLE注释</div><div class=\"line\"></div><div class=\"line\">dnl If your extension references something external, use with:</div><div class=\"line\"></div><div class=\"line\">dnl PHP_ARG_WITH(cayley, for cayley support,</div><div class=\"line\">dnl Make sure that the comment is aligned:</div><div class=\"line\">dnl [  --with-cayley             Include cayley support])</div><div class=\"line\"></div><div class=\"line\">dnl Otherwise use enable:</div><div class=\"line\"></div><div class=\"line\">dnl 取消了这里的注释</div><div class=\"line\">PHP_ARG_ENABLE(cayley, whether to enable cayley support,</div><div class=\"line\">Make sure that the comment is aligned:</div><div class=\"line\">[  --enable-cayley           Enable cayley support])</div></pre></td></tr></table></figure></p>\n<p>上面PHP_ARG_ENABLE函数有三个参数，第一个参数是我们的扩展名(注意不用加引号)，第二个参数是当我们运行./configure脚本时显示的内容，最后一个参数则是我们在调用./configure –help时显示的帮助信息</p>\n<p>还有config.m4：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">dnl  PHP_NEW_EXTENSION函数申明</div><div class=\"line\">PHP_NEW_EXTENSION(cayley, cayley.c, $ext_shared,, -DZEND_ENABLE_STATIC_TSRMLS_CACHE=1)</div></pre></td></tr></table></figure></p>\n<p>PHP_NEW_EXTENSION函数声明了这个扩展的名称、需要的源文件名、此扩展的编译形式。如果我们的扩展使用了多个文件，便可以将这多个文件名罗列在函数的参数里，用空格分开</p>\n<p>PHP_NEW_EXTENSION(cayley, cayley.c cayley2.c cayley3.c, $ext_shared)</p>\n<p>最后的$ext_shared参数用来声明这个扩展不是一个静态模块，而是在php运行时动态加载的</p>\n<p>二）实现代码</p>\n<p>至于开发语言是C,所以要使用C语言的编码标准，例如注释要用 /<em>  </em>/，而不用C++的//<br>更多标准请查看官方的 <a href=\"http://git.php.net/?p=php-src.git;a=blob_plain;f=CODING_STANDARDS;hb=HEAD\">PECL/PHP编码标准</a></p>\n<p>主要是修改caylye.c文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim cayley.c</div></pre></td></tr></table></figure></p>\n<p>找到PHP_FUNCTION(confirm_say_compiled)，在其上面增加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">PHP_FUNCTION(cayley)</div><div class=\"line\">&#123;</div><div class=\"line\">        zend_string *strg;</div><div class=\"line\">        strg = strpprintf(0, &quot;hello word&quot;);</div><div class=\"line\">        RETURN_STR(strg);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>在const zend_function_entry cayley_functions 里面添加代码<br>PHP_FE(cayley, NULL)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const zend_function_entry cayley_functions[] = &#123;</div><div class=\"line\">\tPHP_FE(cayley, NULL) \t\t\t\t\t\t/* 插入的代码 */</div><div class=\"line\">\tPHP_FE(confirm_cayley_compiled,\tNULL)\t\t/* For testing, remove later. */</div><div class=\"line\">\tPHP_FE_END\t/* Must be the last line in cayley_functions[] */</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>三）编译</p>\n<p>phpize</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">phpize</div><div class=\"line\"></div><div class=\"line\">Configuring for:</div><div class=\"line\">PHP Api Version:         20151012</div><div class=\"line\">Zend Module Api No:      20151012</div><div class=\"line\">Zend Extension Api No:   320151012</div><div class=\"line\">cp: /Users/cayley/src/php7/php-7.0.14/ext/cayley/build/</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>./configure<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">./configure</div><div class=\"line\">checking for grep that handles long lines and -e... /usr/bin/grep</div><div class=\"line\">checking for egrep... /usr/bin/grep -E</div><div class=\"line\">checking for a sed that does not truncate output... /usr/bin/sed</div><div class=\"line\">checking for cc... cc</div><div class=\"line\">......</div><div class=\"line\">.....</div><div class=\"line\">creating libtool</div><div class=\"line\">appending configuration tag &quot;CXX&quot; to libtool</div><div class=\"line\">configure: creating ./config.status</div><div class=\"line\">config.status: creating config.h</div><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>make &amp;&amp; make install</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  make</div><div class=\"line\"></div><div class=\"line\">........</div><div class=\"line\">/bin/sh /Users/cayley/src/php7/php-7.0.14/ext/cayley/libtool --mode=install cp ./cayley.la /Users/cayley/src/php7/php-7.0.14/ext/cayley/modules</div><div class=\"line\">cp ./.libs/cayley.so /Users/cayley/src/php7/php-7.0.14/ext/cayley/modules/cayley.so</div><div class=\"line\">cp ./.libs/cayley.lai /Users/cayley/src/php7/php-7.0.14/ext/cayley/modules/cayley.la</div><div class=\"line\">----------------------------------------------------------------------</div><div class=\"line\">Libraries have been installed in:</div><div class=\"line\">   /Users/cayley/src/php7/php-7.0.14/ext/cayley/modules</div><div class=\"line\">.....</div><div class=\"line\"></div><div class=\"line\">install</div><div class=\"line\">Installing shared extensions:     /usr/local/Cellar/php70/7.0.12_5/lib/php/extensions/no-debug-non-zts-20151012/</div><div class=\"line\"> cayley@cayley  ~/src/php7/php-7.0.14/ext/cayley  ll /usr/local/Cellar/php70/7.0.12_5/lib/php/extensions/no-debug-non-zts-20151012/</div><div class=\"line\">total 24</div><div class=\"line\">-rwxr-xr-x  1 cayley  admin    10K 12 28 21:40 cayley.so</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>还有一种编译和使用扩展的方式，就是静态扩展，也就是说将我们的扩展编译到PHP主程序中</p>\n<p>直接使用 ./configure –help 是不会出现扩展cayley,需要选使用php源码的buildconf命令生成新的configure脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ./configure --help |grep cayley</div><div class=\"line\"></div><div class=\"line\"> ./buildconf --force</div><div class=\"line\">Forcing buildconf</div><div class=\"line\">Removing configure caches</div><div class=\"line\">buildconf: checking installation...</div><div class=\"line\">buildconf: autoconf version 2.69 (ok)</div><div class=\"line\">rebuilding aclocal.m4</div><div class=\"line\">rebuilding configure</div><div class=\"line\">rebuilding main/php_config.h.in</div><div class=\"line\"></div><div class=\"line\">./configure --help |grep cayley</div><div class=\"line\">  --enable-cayley           Enable cayley support</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>就像help所说，我们编译php的，使用configure –enable-cayley就可以将cayley扩展编译到php主程序中了</p>\n<p>四）使用扩展</p>\n<p>修改php.ini 添加代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[cayley]</div><div class=\"line\">extension = cayey.so</div></pre></td></tr></table></figure></p>\n<p>查看是否安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">php -m |grep cayley</div><div class=\"line\">cayley</div></pre></td></tr></table></figure></p>\n<p>测试</p>\n<p>vim cayley.php添加如下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">echo cayley();</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">php cayley.php</div><div class=\"line\">Functions available in the test extension:</div><div class=\"line\">cayley</div><div class=\"line\">confirm_cayley_compiled</div><div class=\"line\"></div><div class=\"line\">hello word%                                                                                                                                            </div></pre></td></tr></table></figure>\n<p>到这里一个简单的php7的扩展就完成，可见改扩展只提供了一个cayley()函数而已，而该函数只是输出了“hello word”</p>\n<p>现在来看看写这个扩展，我们做了啥</p>\n<p>其实使用ZEND_FUNCTION宏弄了个函数cayley</p>\n<p>这时候的只是我在C中实现了它，但是php还不知道有这个函数</p>\n<p>所以让php知道它，扩展定义的zend_module_entry cayley_module_entry（它是联系扩展与PHP的重要纽带）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/*  cayley_module_entry</div><div class=\"line\"> */</div><div class=\"line\">zend_module_entry cayley_module_entry = &#123;</div><div class=\"line\">\tSTANDARD_MODULE_HEADER,\t</div><div class=\"line\">\t&quot;cayley&quot;,\t\t\t\t/* 这个是扩展的名称 */</div><div class=\"line\">\tcayley_functions,\t\t/* 扩展的函数  */</div><div class=\"line\">\tPHP_MINIT(cayley),</div><div class=\"line\">\tPHP_MSHUTDOWN(cayley),</div><div class=\"line\">\tPHP_RINIT(cayley),\t\t/* Replace with NULL if there&apos;s nothing to do at request start */</div><div class=\"line\">\tPHP_RSHUTDOWN(cayley),\t/* Replace with NULL if there&apos;s nothing to do at request end */</div><div class=\"line\">\tPHP_MINFO(cayley),</div><div class=\"line\">\tPHP_CAYLEY_VERSION,\t\t/* 扩展的版本 */</div><div class=\"line\">\tSTANDARD_MODULE_PROPERTIES</div><div class=\"line\">&#125;;</div><div class=\"line\"></div></pre></td></tr></table></figure><br>然后使用ZEND_FE()宏函数是对我们walu_hello函数的一个声明，如果我们有多个函数，可以直接以类似的形式添加到PHP_FE(confirm_cayley_compiled,    NULL)之前</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const zend_function_entry cayley_functions[] = &#123;</div><div class=\"line\">\tPHP_FE(cayley, NULL)\t\t\t\t\t\t/* cayley函数的申明 */</div><div class=\"line\">\tPHP_FE(confirm_cayley_compiled,\tNULL)\t\t/* For testing, remove later. */</div><div class=\"line\">\tPHP_FE_END\t/* Must be the last line in cayley_functions[] */</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n"},{"title":"php杂记-弱类型总结","date":"2016-08-05T06:36:43.000Z","_content":"php是个弱类型的语言,这是众所周知的事情,所谓的弱类型就是php不严格检查变量的类型.\nPHP 支持 8 种原始数据类型。\n四种标量类型：\nboolean（布尔型）\ninteger（整型）\nfloat（浮点型，也称作 double)\nstring（字符串）\n两种复合类型：\narray（数组）\nobject（对象）\n最后是两种特殊类型：\nresource（资源）\nNULL（无类型）\n\n在验证变量类型的时候,可以使用var_dump()|| gettype()php内置函数,开查看.或者使用is_{type}函数(is_int(),is_string(),is_array(),is_object())来判断\n\n\n{% codeblock %}\n<?php\n$var = 1;\nvar_dump($var);\n$var = 1.11;\nvar_dump($var);\n$var = array();\nvar_dump($var);\n$var = \"string\";\nvar_dump($var);\n$var = new stdClass();\nvar_dump($var);\n?>\n{% endcodeblock %}\n\n看下执行结果:\n{% codeblock %}\nhuangchengkaideMacBook-Air:www kai$ php test.php \nint(1)\narray(0) {\n}\nstring(6) \"string\"\nhuangchengkaideMacBook-Air:www kai$ \nhuangchengkaideMacBook-Air:www kai$ \nhuangchengkaideMacBook-Air:www kai$ php test.php \nint(1)\nfloat(1.11)\narray(0) {\n}\nstring(6) \"string\"\nobject(stdClass)#1 (0) {\n}\n{% endcodeblock %}\n\n弱类型的语言对变量的数据类型没有限制，所以我们可以在任何地时候将变量赋值给任意的其他类型的变量，同时变量也可以转换成任意地其他类型的数据。\n\n\nphp怎样实现弱类型的呢?\nphp是c语言来实现,我们现在看下zend引擎,中类型定义文件 zend_types.h (php7)\n{% codeblock %}\n\ntypedef struct _zval_struct     zval;\nstruct _zval_struct {\n        zend_value        value;                        /* value */\n        union {\n                struct {\n                        ZEND_ENDIAN_LOHI_4(\n                                zend_uchar    type,                     /* active type */\n                                zend_uchar    type_flags,\n                                zend_uchar    const_flags,\n                                zend_uchar    reserved)     /* call info for EX(This) */\n                } v;\n                uint32_t type_info;\n        } u1;\n        union {\n                uint32_t     var_flags;\n                uint32_t     next;                 /* hash collision chain */\n                uint32_t     cache_slot;           /* literal cache slot */\n                uint32_t     lineno;               /* line number (for ast nodes) */\n                uint32_t     num_args;             /* arguments number for EX(This) */\n                uint32_t     fe_pos;               /* foreach position */\n                uint32_t     fe_iter_idx;          /* foreach iterator index */\n        } u2;\n};\n\n{% endcodeblock %}\n\n通过类型定义的代码,可以知道,php所有的变量结果都是用zval结构体来保存的,而zaval结果体中的zend_value结构体又是真正保存数据的\n\n现在继续看下zend_value结构体\n\n{% codeblock %}\n\ntypedef union _zend_value {\n        zend_long         lval;                         /* long value */\n        double            dval;                         /* double value */\n        zend_refcounted  *counted;\n        zend_string      *str;\n        zend_array       *arr;\n        zend_object      *obj;\n        zend_resource    *res;\n        zend_reference   *ref;\n        zend_ast_ref     *ast;\n        zval             *zv;\n        void             *ptr;\n        zend_class_entry *ce;\n        zend_function    *func;\n        struct {\n                uint32_t w1;\n                uint32_t w2;\n        } ww;\n} zend_value;\n\n\n{% endcodeblock %}\n\nzend_value是一个联合体。对于小于64位的简单类型，会直接存储值。对于其他比较复杂的类型，如字符串，数组，对象等，是存储的指针。这样，对于简单类型来说，变得简单高效\n\n引发的问题:\n\n\n1.类型装换问题\n自动类型转换:\nFALSE 会转为0，TRUE 会转为 1\n1)如果该字符串没有包含 '.'，'e' 或 'E' 并且其数字值在整型的范围之内（由 PHP_INT_MAX 所定义），该字符串将被当成 integer 来取值。其它所有情况下都被作为 float 来取值\n2)该字符串的开始部分决定了它的值。如果该字符串以合法的数值开始，则使用该数值。否则其值为 0（零）。合法数值由可选的正负号，后面跟着一个或多个数字（可能有小数点），再跟着可选的指数部分。指数部分由 'e' 或 'E' 后面跟着一个或多个数字构成。\n{% codeblock %}\n<?php\n$foo = \"0\";  // $foo 是字符串 (ASCII 48)\n$foo += 2;   // $foo 现在是一个整数 (2)\n$foo = $foo + 1.3;  // $foo 现在是一个浮点数 (3.3)\n$foo = 5 + \"10 Little Piggies\"; // $foo 是整数 (15)\n$foo = 5 + \"10 Small Pigs\";     // $foo 是整数 (15)\n?>\n{% endcodeblock %}\n\n\n如果要将某类型强制转换为某类型,可以对其使用强制类型转换||settype()函数\n强制转换:\n(bool), (boolean) - 转换为布尔类型 boolean:\n\n\n当转换为 boolean 时，以下值被认为是 FALSE：\n布尔值 FALSE 本身\n整型值 0（零）\n浮点型值 0.0（零）\n空字符串，以及字符串 \"0\"\n不包括任何元素的数组\n特殊类型 NULL（包括尚未赋值的变量）\n从空标记生成的 SimpleXML 对象\n\n当转换为 boolean 时,-1 和其它非零值（不论正负）一样，被认为是 TRUE\n所有其它值都被认为是 TRUE（包括任何资源）。\n{% codeblock %}\n<?php\nvar_dump((bool) \"\");        // bool(false)\nvar_dump((bool) 1);         // bool(true)\nvar_dump((bool) -2);        // bool(true)\nvar_dump((bool) \"foo\");     // bool(true)\nvar_dump((bool) 2.3e5);     // bool(true)\nvar_dump((bool) [12]); // bool(true)\nvar_dump((bool) []);   // bool(false)\nvar_dump((bool) \"false\");   // bool(true)\nvar_dump((bool) \"0\");   // bool(false)\nvar_dump((bool) 0.0);   // bool(false)\nvar_dump((bool) null);   // bool(false)\nvar_dump((bool) new stdClass());   // bool(true)\n\n?>\n{% endcodeblock %}\n\n(int), (integer) - 转换为整形 integer\n\nboolean转换时: FALSE 会转为0，TRUE 会转为 1,\n浮点型转换时: 会向下取整,不要将未知的分数强制转换为 integer，这样有时会导致不可预料的结果\narray转换时:空数组会转为 0 ,非空数组转为1\nstring类型转换时: \n使用强制转换时不会解析'.'，'e' 或 'E'为float类型,而且直接采用该字符串是否已合法的数字开始,则使用该值,否则其值为0;\n其他类型转换时:会导致未知错误\n{% codeblock %}\n<?php\necho (int) true ; // 1\necho (int) false; //0\necho (int) 0.1; //0\necho (int) 1.5; //1\necho (int) ( (0.1+0.7) * 10 ); // 显示 7,其中内部的表示其实是类似 7.9999999999999991118...。\necho (int) []; //0\necho (int) [2,1,2,4,'222'=>11]; //1\necho (int)\"10.5\";                // 10 , 10.5被当成浮点数,向下取整为10\necho (int)\"-10.5\";                // -10 , -10是合法,为-10\necho (int)\"-1.3e3\";               // -1,-1是合法的数字\n?>\n{% endcodeblock %}\n\n(float), (double), (real) - 转换为浮点型 float\nstring转换时:\n如果该字符串包含 '.'，'e' 或 'E',会当做float来取值 ,而且采用该字符串是否已合法的数字开始,则使用该值,否则其值为0\n其他的跟转换为int类似\n{% codeblock %}\n\n<?php\necho (float) 10;                                 //10\necho (float) '10.1';                            //10.1\necho (float) '-1.3e3';                          //-1300\necho (float) '-1.3e3abc';                       //-1300\necho (float) true;                              //1\necho (float) false;                             //0\necho (float) [];                                //0\necho (float) [1,2];                             //1\n?>\n\n{% endcodeblock %}\n\n(string) - 转换为字符串 string\n一个值可以通过在其前面加上 (string) 或用 strval() 函数来转变成字符串.\n boolean 的 TRUE 被转换成 string 的 \"1\"。Boolean 的 FALSE 被转换成 \"\"（空字符串）\n 整数 integer 或浮点数 float 被转换为数字的字面样式的 string\n 数组 array 总是转换成字符串 \"Array\"\n 对象 object 总是被转换成字符串 \"Object\",自 PHP 5 起，适当时可以用 __toString 方法\n 资源 resource 总会被转变成 \"Resource id #1\" 这种结构的字符串\n NULL 总是被转变成空字符串\n {% codeblock %}\n\n <?php\necho (string) 10;                                //'10'\necho (string) 10.1;                             //'10.1'\necho (string) -1.3e3;                           //-1300\necho (string) 1.3e3;                //-1300\necho (string) true;                             //1\necho (string) false;                            //0\n$arr = [1,2,4];\n        echo \"{$arr}\";                          //array\n       echo strval($arr);              //array\n\n?>\n{% endcodeblock %}\n\n\n(array) - 转换为数组 array\n对于任意 integer，float，string，boolean 和 resource 类型，如果将一个值转换为数组，将得到一个仅有一个元素的数组，其下标为 0，该元素即为此标量的值。换句话说，(array)$scalarValue 与 array($scalarValue) 完全一样。\n\n如果一个 object 类型转换为 array，则结果为一个数组，其单元为该对象的属性。键名将为成员变量名，不过有几点例外：整数属性不可访问；私有变量前会加上类名作前缀；保护变量前会加上一个 '*' 做前缀。这些前缀的前后都各有一个 NULL 字符。这会导致一些不可预知的行为：\n\n将 NULL 转换为 array 会得到一个空的数组\n{% codeblock %}\n\n<?php\n\nvar_dump((array) 1);\nvar_dump((array) 1.1);\nvar_dump((array) 1.3e3);\nvar_dump((array) (new stdClass()));\nvar_dump((array) 'is array');\nvar_dump((array) null);\nclass A {\n    private $A; // 输出 '\\0A\\0A'\n}\n\nclass B extends A {\n    private $A; // 输出 '\\0B\\0A'\n    public $AA; // 输出 'AA'\n}\n\nvar_dump((array) new B());\n?>\nhuangchengkaideMacBook-Air:www kai$ php test.php \narray(1) {\n  [0]=>\n  int(1)\n}\narray(1) {\n  [0]=>\n  float(1.1)\n}\narray(1) {\n  [0]=>\n  float(1300)\n}\narray(0) {\n}\narray(1) {\n  [0]=>\n  string(8) \"is array\"\n}\narray(0) {\n}\narray(3) {\n  [\"BA\"]=>\n  NULL\n  [\"AA\"]=>\n  NULL\n  [\"AA\"]=>\n  NULL\n}\nhuangchengkaideMacBook-Air:www kai$ \n{% endcodeblock %}\n\n有两个键名为 'AA'，不过其中一个实际上是 '\\0A\\0A' \n\n\n(object) - 转换为对象 object\n如果将一个对象转换成对象，它将不会有任何变化。如果其它任何类型的值被转换成对象，将会创建一个内置类 stdClass 的实例。如果该值为 NULL，则新的实例为空。数组转换成对象将使键名成为属性名并具有相对应的值。对于任何其它的值，名为 scalar 的成员变量将包含该值。\n{% codeblock %}\n\n\n<?php\n$obj = (object) 'string';\necho $obj->scalar.\"\\n\";  // 'string'\n$obj = (object) 1;\necho $obj->scalar.\"\\n\";  // 1\n$obj = (object) 1.1;\necho $obj->scalar.\"\\n\";  // 1.1\n$obj = (object) 1.3e3;\necho $obj->scalar.\"\\n\";  // 1300\n$obj = (object) [];\nvar_dump($obj);\n$obj = (object) [1,2,3,5];\nvar_dump($obj);\n$obj = (object) ['b'=>1,'c'=>2];\nvar_dump($obj);\n?>\n\nhuangchengkaideMacBook-Air:www kai$ php test.php \n\nstring\n1\n1.1\n1300\nobject(stdClass)#1 (0) {\n}\nobject(stdClass)#2 (4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  int(5)\n}\nobject(stdClass)#1 (2) {\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n  int(2)\n}\nhuangchengkaideMacBook-Air:www kai$ \n{% endcodeblock %}\n\n(unset) - 转换为 NULL (PHP 5)\n特殊的 NULL 值表示一个变量没有值。NULL 类型唯一可能的值就是 NULL。\n\n在下列情况下一个变量被认为是 NULL：\n\n被赋值为 NULL。\n\n尚未被赋值。\n\n被 unset()。\n\n使用 (unset) $var 将一个变量转换为 null 将不会删除该变量或 unset 其值。仅是返回 NULL 值而已。\n\n{% codeblock %}\n\n{% endcodeblock %}\n\n以上内容参考自官方文档\n\n2.类型比较\n\n类型比较表的官方文档地址:\nhttps://secure.php.net/manual/zh/types.comparisons.php\n\n特别要注意,有时候比较的时候,会涉及类型转换问题:\n\n松散型(==)和严格型(===)比较问题等\n<?php\n\nif(0=='0'){ //true\n    echo 'true';\n} else{\n    echo 'false';\n}\n\nif(0 == 'abcdefg'){ //true\n    echo 'true';\n} else{\n    echo 'false';\n}\n\nif(0 === 'abcdefg'){ //true\n    echo 'true';\n} else{\n    echo 'false';\n}\n\nif(1 == '1abcdef'){ //true\n    echo 'true';\n} else{\n    echo 'false';\n}\n\n?>\n\n\n3.内置函数的参数的松散\n\nmd5()\n\n$array1[] = array(\n    \"foo\" => \"bar\",\n    \"bar\" => \"foo\",\n);\n$array2 = array(\"foo\", \"bar\", \"hello\", \"world\");\nvar_dump(md5($array1)==var_dump($array2)); //true\n\nPHP手册中的md5()函数的描述是string md5 ( string $str [, bool $raw_output = false ] )，md5()中的需要是一个string类型的参数。但是当你传递一个array时，md5()不会报错，知识会无法正确地求出array的md5值，这样就会导致任意2个array的md5值都会相等。这个md5()的特性在攻防平台中的bypass again同样有考到。\n\nstrcmp()\n\nstrcmp()函数在PHP官方手册中的描述是int strcmp ( string $str1 , string $str2 ),需要给strcmp()传递2个string类型的参数。如果str1小于str2,返回-1，相等返回0，否则返回1。strcmp函数比较字符串的本质是将两个变量转换为ascii，然后进行减法运算，然后根据运算结果来决定返回值。\n如果传入给出strcmp()的参数是数字呢？\n\n$array=[1,2,3];\nvar_dump(strcmp($array,'123')); //null,在某种意义上null也就是相当于false。\n\nstrcmp这种特性在攻防平台中的pass check有考到。\n\nswitch()\n\n如果switch是数字类型的case的判断时，switch会将其中的参数转换为int类型。如下：\n\n\n$i =\"2abc\";\nswitch ($i) {\ncase 0:\ncase 1:\ncase 2:\n    echo \"i is less than 3 but not negative\";\n    break;\ncase 3:\n    echo \"i is 3\";\n}\n\n这个时候程序输出的是i is less than 3 but not negative，是由于switch()函数将$i进行了类型转换，转换结果为2。\n\nin_array()\n\n在PHP手册中，in_array()函数的解释是bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ),如果strict参数没有提供，那么in_array就会使用松散比较来判断$needle是否在$haystack中。当strince的值为true时，in_array()会比较needls的类型和haystack中的类型是否相同。\n\n\n$array=[0,1,2,'3'];\nvar_dump(in_array('abc', $array));  //true\nvar_dump(in_array('1bc', $array)); //true\n\n可以看到上面的情况返回的都是true,因为’abc’会转换为0，’1bc’转换为1。\narray_search()与in_array()也是一样的问题。","source":"_posts/php杂记-弱类型总结.md","raw":"---\ntitle: php杂记-弱类型总结\ndate: 2016-08-05 14:36:43\ntags:\n---\nphp是个弱类型的语言,这是众所周知的事情,所谓的弱类型就是php不严格检查变量的类型.\nPHP 支持 8 种原始数据类型。\n四种标量类型：\nboolean（布尔型）\ninteger（整型）\nfloat（浮点型，也称作 double)\nstring（字符串）\n两种复合类型：\narray（数组）\nobject（对象）\n最后是两种特殊类型：\nresource（资源）\nNULL（无类型）\n\n在验证变量类型的时候,可以使用var_dump()|| gettype()php内置函数,开查看.或者使用is_{type}函数(is_int(),is_string(),is_array(),is_object())来判断\n\n\n{% codeblock %}\n<?php\n$var = 1;\nvar_dump($var);\n$var = 1.11;\nvar_dump($var);\n$var = array();\nvar_dump($var);\n$var = \"string\";\nvar_dump($var);\n$var = new stdClass();\nvar_dump($var);\n?>\n{% endcodeblock %}\n\n看下执行结果:\n{% codeblock %}\nhuangchengkaideMacBook-Air:www kai$ php test.php \nint(1)\narray(0) {\n}\nstring(6) \"string\"\nhuangchengkaideMacBook-Air:www kai$ \nhuangchengkaideMacBook-Air:www kai$ \nhuangchengkaideMacBook-Air:www kai$ php test.php \nint(1)\nfloat(1.11)\narray(0) {\n}\nstring(6) \"string\"\nobject(stdClass)#1 (0) {\n}\n{% endcodeblock %}\n\n弱类型的语言对变量的数据类型没有限制，所以我们可以在任何地时候将变量赋值给任意的其他类型的变量，同时变量也可以转换成任意地其他类型的数据。\n\n\nphp怎样实现弱类型的呢?\nphp是c语言来实现,我们现在看下zend引擎,中类型定义文件 zend_types.h (php7)\n{% codeblock %}\n\ntypedef struct _zval_struct     zval;\nstruct _zval_struct {\n        zend_value        value;                        /* value */\n        union {\n                struct {\n                        ZEND_ENDIAN_LOHI_4(\n                                zend_uchar    type,                     /* active type */\n                                zend_uchar    type_flags,\n                                zend_uchar    const_flags,\n                                zend_uchar    reserved)     /* call info for EX(This) */\n                } v;\n                uint32_t type_info;\n        } u1;\n        union {\n                uint32_t     var_flags;\n                uint32_t     next;                 /* hash collision chain */\n                uint32_t     cache_slot;           /* literal cache slot */\n                uint32_t     lineno;               /* line number (for ast nodes) */\n                uint32_t     num_args;             /* arguments number for EX(This) */\n                uint32_t     fe_pos;               /* foreach position */\n                uint32_t     fe_iter_idx;          /* foreach iterator index */\n        } u2;\n};\n\n{% endcodeblock %}\n\n通过类型定义的代码,可以知道,php所有的变量结果都是用zval结构体来保存的,而zaval结果体中的zend_value结构体又是真正保存数据的\n\n现在继续看下zend_value结构体\n\n{% codeblock %}\n\ntypedef union _zend_value {\n        zend_long         lval;                         /* long value */\n        double            dval;                         /* double value */\n        zend_refcounted  *counted;\n        zend_string      *str;\n        zend_array       *arr;\n        zend_object      *obj;\n        zend_resource    *res;\n        zend_reference   *ref;\n        zend_ast_ref     *ast;\n        zval             *zv;\n        void             *ptr;\n        zend_class_entry *ce;\n        zend_function    *func;\n        struct {\n                uint32_t w1;\n                uint32_t w2;\n        } ww;\n} zend_value;\n\n\n{% endcodeblock %}\n\nzend_value是一个联合体。对于小于64位的简单类型，会直接存储值。对于其他比较复杂的类型，如字符串，数组，对象等，是存储的指针。这样，对于简单类型来说，变得简单高效\n\n引发的问题:\n\n\n1.类型装换问题\n自动类型转换:\nFALSE 会转为0，TRUE 会转为 1\n1)如果该字符串没有包含 '.'，'e' 或 'E' 并且其数字值在整型的范围之内（由 PHP_INT_MAX 所定义），该字符串将被当成 integer 来取值。其它所有情况下都被作为 float 来取值\n2)该字符串的开始部分决定了它的值。如果该字符串以合法的数值开始，则使用该数值。否则其值为 0（零）。合法数值由可选的正负号，后面跟着一个或多个数字（可能有小数点），再跟着可选的指数部分。指数部分由 'e' 或 'E' 后面跟着一个或多个数字构成。\n{% codeblock %}\n<?php\n$foo = \"0\";  // $foo 是字符串 (ASCII 48)\n$foo += 2;   // $foo 现在是一个整数 (2)\n$foo = $foo + 1.3;  // $foo 现在是一个浮点数 (3.3)\n$foo = 5 + \"10 Little Piggies\"; // $foo 是整数 (15)\n$foo = 5 + \"10 Small Pigs\";     // $foo 是整数 (15)\n?>\n{% endcodeblock %}\n\n\n如果要将某类型强制转换为某类型,可以对其使用强制类型转换||settype()函数\n强制转换:\n(bool), (boolean) - 转换为布尔类型 boolean:\n\n\n当转换为 boolean 时，以下值被认为是 FALSE：\n布尔值 FALSE 本身\n整型值 0（零）\n浮点型值 0.0（零）\n空字符串，以及字符串 \"0\"\n不包括任何元素的数组\n特殊类型 NULL（包括尚未赋值的变量）\n从空标记生成的 SimpleXML 对象\n\n当转换为 boolean 时,-1 和其它非零值（不论正负）一样，被认为是 TRUE\n所有其它值都被认为是 TRUE（包括任何资源）。\n{% codeblock %}\n<?php\nvar_dump((bool) \"\");        // bool(false)\nvar_dump((bool) 1);         // bool(true)\nvar_dump((bool) -2);        // bool(true)\nvar_dump((bool) \"foo\");     // bool(true)\nvar_dump((bool) 2.3e5);     // bool(true)\nvar_dump((bool) [12]); // bool(true)\nvar_dump((bool) []);   // bool(false)\nvar_dump((bool) \"false\");   // bool(true)\nvar_dump((bool) \"0\");   // bool(false)\nvar_dump((bool) 0.0);   // bool(false)\nvar_dump((bool) null);   // bool(false)\nvar_dump((bool) new stdClass());   // bool(true)\n\n?>\n{% endcodeblock %}\n\n(int), (integer) - 转换为整形 integer\n\nboolean转换时: FALSE 会转为0，TRUE 会转为 1,\n浮点型转换时: 会向下取整,不要将未知的分数强制转换为 integer，这样有时会导致不可预料的结果\narray转换时:空数组会转为 0 ,非空数组转为1\nstring类型转换时: \n使用强制转换时不会解析'.'，'e' 或 'E'为float类型,而且直接采用该字符串是否已合法的数字开始,则使用该值,否则其值为0;\n其他类型转换时:会导致未知错误\n{% codeblock %}\n<?php\necho (int) true ; // 1\necho (int) false; //0\necho (int) 0.1; //0\necho (int) 1.5; //1\necho (int) ( (0.1+0.7) * 10 ); // 显示 7,其中内部的表示其实是类似 7.9999999999999991118...。\necho (int) []; //0\necho (int) [2,1,2,4,'222'=>11]; //1\necho (int)\"10.5\";                // 10 , 10.5被当成浮点数,向下取整为10\necho (int)\"-10.5\";                // -10 , -10是合法,为-10\necho (int)\"-1.3e3\";               // -1,-1是合法的数字\n?>\n{% endcodeblock %}\n\n(float), (double), (real) - 转换为浮点型 float\nstring转换时:\n如果该字符串包含 '.'，'e' 或 'E',会当做float来取值 ,而且采用该字符串是否已合法的数字开始,则使用该值,否则其值为0\n其他的跟转换为int类似\n{% codeblock %}\n\n<?php\necho (float) 10;                                 //10\necho (float) '10.1';                            //10.1\necho (float) '-1.3e3';                          //-1300\necho (float) '-1.3e3abc';                       //-1300\necho (float) true;                              //1\necho (float) false;                             //0\necho (float) [];                                //0\necho (float) [1,2];                             //1\n?>\n\n{% endcodeblock %}\n\n(string) - 转换为字符串 string\n一个值可以通过在其前面加上 (string) 或用 strval() 函数来转变成字符串.\n boolean 的 TRUE 被转换成 string 的 \"1\"。Boolean 的 FALSE 被转换成 \"\"（空字符串）\n 整数 integer 或浮点数 float 被转换为数字的字面样式的 string\n 数组 array 总是转换成字符串 \"Array\"\n 对象 object 总是被转换成字符串 \"Object\",自 PHP 5 起，适当时可以用 __toString 方法\n 资源 resource 总会被转变成 \"Resource id #1\" 这种结构的字符串\n NULL 总是被转变成空字符串\n {% codeblock %}\n\n <?php\necho (string) 10;                                //'10'\necho (string) 10.1;                             //'10.1'\necho (string) -1.3e3;                           //-1300\necho (string) 1.3e3;                //-1300\necho (string) true;                             //1\necho (string) false;                            //0\n$arr = [1,2,4];\n        echo \"{$arr}\";                          //array\n       echo strval($arr);              //array\n\n?>\n{% endcodeblock %}\n\n\n(array) - 转换为数组 array\n对于任意 integer，float，string，boolean 和 resource 类型，如果将一个值转换为数组，将得到一个仅有一个元素的数组，其下标为 0，该元素即为此标量的值。换句话说，(array)$scalarValue 与 array($scalarValue) 完全一样。\n\n如果一个 object 类型转换为 array，则结果为一个数组，其单元为该对象的属性。键名将为成员变量名，不过有几点例外：整数属性不可访问；私有变量前会加上类名作前缀；保护变量前会加上一个 '*' 做前缀。这些前缀的前后都各有一个 NULL 字符。这会导致一些不可预知的行为：\n\n将 NULL 转换为 array 会得到一个空的数组\n{% codeblock %}\n\n<?php\n\nvar_dump((array) 1);\nvar_dump((array) 1.1);\nvar_dump((array) 1.3e3);\nvar_dump((array) (new stdClass()));\nvar_dump((array) 'is array');\nvar_dump((array) null);\nclass A {\n    private $A; // 输出 '\\0A\\0A'\n}\n\nclass B extends A {\n    private $A; // 输出 '\\0B\\0A'\n    public $AA; // 输出 'AA'\n}\n\nvar_dump((array) new B());\n?>\nhuangchengkaideMacBook-Air:www kai$ php test.php \narray(1) {\n  [0]=>\n  int(1)\n}\narray(1) {\n  [0]=>\n  float(1.1)\n}\narray(1) {\n  [0]=>\n  float(1300)\n}\narray(0) {\n}\narray(1) {\n  [0]=>\n  string(8) \"is array\"\n}\narray(0) {\n}\narray(3) {\n  [\"BA\"]=>\n  NULL\n  [\"AA\"]=>\n  NULL\n  [\"AA\"]=>\n  NULL\n}\nhuangchengkaideMacBook-Air:www kai$ \n{% endcodeblock %}\n\n有两个键名为 'AA'，不过其中一个实际上是 '\\0A\\0A' \n\n\n(object) - 转换为对象 object\n如果将一个对象转换成对象，它将不会有任何变化。如果其它任何类型的值被转换成对象，将会创建一个内置类 stdClass 的实例。如果该值为 NULL，则新的实例为空。数组转换成对象将使键名成为属性名并具有相对应的值。对于任何其它的值，名为 scalar 的成员变量将包含该值。\n{% codeblock %}\n\n\n<?php\n$obj = (object) 'string';\necho $obj->scalar.\"\\n\";  // 'string'\n$obj = (object) 1;\necho $obj->scalar.\"\\n\";  // 1\n$obj = (object) 1.1;\necho $obj->scalar.\"\\n\";  // 1.1\n$obj = (object) 1.3e3;\necho $obj->scalar.\"\\n\";  // 1300\n$obj = (object) [];\nvar_dump($obj);\n$obj = (object) [1,2,3,5];\nvar_dump($obj);\n$obj = (object) ['b'=>1,'c'=>2];\nvar_dump($obj);\n?>\n\nhuangchengkaideMacBook-Air:www kai$ php test.php \n\nstring\n1\n1.1\n1300\nobject(stdClass)#1 (0) {\n}\nobject(stdClass)#2 (4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  int(5)\n}\nobject(stdClass)#1 (2) {\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n  int(2)\n}\nhuangchengkaideMacBook-Air:www kai$ \n{% endcodeblock %}\n\n(unset) - 转换为 NULL (PHP 5)\n特殊的 NULL 值表示一个变量没有值。NULL 类型唯一可能的值就是 NULL。\n\n在下列情况下一个变量被认为是 NULL：\n\n被赋值为 NULL。\n\n尚未被赋值。\n\n被 unset()。\n\n使用 (unset) $var 将一个变量转换为 null 将不会删除该变量或 unset 其值。仅是返回 NULL 值而已。\n\n{% codeblock %}\n\n{% endcodeblock %}\n\n以上内容参考自官方文档\n\n2.类型比较\n\n类型比较表的官方文档地址:\nhttps://secure.php.net/manual/zh/types.comparisons.php\n\n特别要注意,有时候比较的时候,会涉及类型转换问题:\n\n松散型(==)和严格型(===)比较问题等\n<?php\n\nif(0=='0'){ //true\n    echo 'true';\n} else{\n    echo 'false';\n}\n\nif(0 == 'abcdefg'){ //true\n    echo 'true';\n} else{\n    echo 'false';\n}\n\nif(0 === 'abcdefg'){ //true\n    echo 'true';\n} else{\n    echo 'false';\n}\n\nif(1 == '1abcdef'){ //true\n    echo 'true';\n} else{\n    echo 'false';\n}\n\n?>\n\n\n3.内置函数的参数的松散\n\nmd5()\n\n$array1[] = array(\n    \"foo\" => \"bar\",\n    \"bar\" => \"foo\",\n);\n$array2 = array(\"foo\", \"bar\", \"hello\", \"world\");\nvar_dump(md5($array1)==var_dump($array2)); //true\n\nPHP手册中的md5()函数的描述是string md5 ( string $str [, bool $raw_output = false ] )，md5()中的需要是一个string类型的参数。但是当你传递一个array时，md5()不会报错，知识会无法正确地求出array的md5值，这样就会导致任意2个array的md5值都会相等。这个md5()的特性在攻防平台中的bypass again同样有考到。\n\nstrcmp()\n\nstrcmp()函数在PHP官方手册中的描述是int strcmp ( string $str1 , string $str2 ),需要给strcmp()传递2个string类型的参数。如果str1小于str2,返回-1，相等返回0，否则返回1。strcmp函数比较字符串的本质是将两个变量转换为ascii，然后进行减法运算，然后根据运算结果来决定返回值。\n如果传入给出strcmp()的参数是数字呢？\n\n$array=[1,2,3];\nvar_dump(strcmp($array,'123')); //null,在某种意义上null也就是相当于false。\n\nstrcmp这种特性在攻防平台中的pass check有考到。\n\nswitch()\n\n如果switch是数字类型的case的判断时，switch会将其中的参数转换为int类型。如下：\n\n\n$i =\"2abc\";\nswitch ($i) {\ncase 0:\ncase 1:\ncase 2:\n    echo \"i is less than 3 but not negative\";\n    break;\ncase 3:\n    echo \"i is 3\";\n}\n\n这个时候程序输出的是i is less than 3 but not negative，是由于switch()函数将$i进行了类型转换，转换结果为2。\n\nin_array()\n\n在PHP手册中，in_array()函数的解释是bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ),如果strict参数没有提供，那么in_array就会使用松散比较来判断$needle是否在$haystack中。当strince的值为true时，in_array()会比较needls的类型和haystack中的类型是否相同。\n\n\n$array=[0,1,2,'3'];\nvar_dump(in_array('abc', $array));  //true\nvar_dump(in_array('1bc', $array)); //true\n\n可以看到上面的情况返回的都是true,因为’abc’会转换为0，’1bc’转换为1。\narray_search()与in_array()也是一样的问题。","slug":"php杂记-弱类型总结","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeien0000xznz4zw69p3e2","content":"<p>php是个弱类型的语言,这是众所周知的事情,所谓的弱类型就是php不严格检查变量的类型.<br>PHP 支持 8 种原始数据类型。<br>四种标量类型：<br>boolean（布尔型）<br>integer（整型）<br>float（浮点型，也称作 double)<br>string（字符串）<br>两种复合类型：<br>array（数组）<br>object（对象）<br>最后是两种特殊类型：<br>resource（资源）<br>NULL（无类型）</p>\n<p>在验证变量类型的时候,可以使用var<em>dump()|| gettype()php内置函数,开查看.或者使用is</em>{type}函数(is_int(),is_string(),is_array(),is_object())来判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$var = 1;</div><div class=\"line\">var_dump($var);</div><div class=\"line\">$var = 1.11;</div><div class=\"line\">var_dump($var);</div><div class=\"line\">$var = array();</div><div class=\"line\">var_dump($var);</div><div class=\"line\">$var = &quot;string&quot;;</div><div class=\"line\">var_dump($var);</div><div class=\"line\">$var = new stdClass();</div><div class=\"line\">var_dump($var);</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure>\n<p>看下执行结果:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchengkaideMacBook-Air:www kai$ php test.php </div><div class=\"line\">int(1)</div><div class=\"line\">array(0) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\">string(6) &quot;string&quot;</div><div class=\"line\">huangchengkaideMacBook-Air:www kai$ </div><div class=\"line\">huangchengkaideMacBook-Air:www kai$ </div><div class=\"line\">huangchengkaideMacBook-Air:www kai$ php test.php </div><div class=\"line\">int(1)</div><div class=\"line\">float(1.11)</div><div class=\"line\">array(0) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\">string(6) &quot;string&quot;</div><div class=\"line\">object(stdClass)#1 (0) &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>弱类型的语言对变量的数据类型没有限制，所以我们可以在任何地时候将变量赋值给任意的其他类型的变量，同时变量也可以转换成任意地其他类型的数据。</p>\n<p>php怎样实现弱类型的呢?<br>php是c语言来实现,我们现在看下zend引擎,中类型定义文件 zend_types.h (php7)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">typedef struct _zval_struct     zval;</div><div class=\"line\">struct _zval_struct &#123;</div><div class=\"line\">        zend_value        value;                        /* value */</div><div class=\"line\">        union &#123;</div><div class=\"line\">                struct &#123;</div><div class=\"line\">                        ZEND_ENDIAN_LOHI_4(</div><div class=\"line\">                                zend_uchar    type,                     /* active type */</div><div class=\"line\">                                zend_uchar    type_flags,</div><div class=\"line\">                                zend_uchar    const_flags,</div><div class=\"line\">                                zend_uchar    reserved)     /* call info for EX(This) */</div><div class=\"line\">                &#125; v;</div><div class=\"line\">                uint32_t type_info;</div><div class=\"line\">        &#125; u1;</div><div class=\"line\">        union &#123;</div><div class=\"line\">                uint32_t     var_flags;</div><div class=\"line\">                uint32_t     next;                 /* hash collision chain */</div><div class=\"line\">                uint32_t     cache_slot;           /* literal cache slot */</div><div class=\"line\">                uint32_t     lineno;               /* line number (for ast nodes) */</div><div class=\"line\">                uint32_t     num_args;             /* arguments number for EX(This) */</div><div class=\"line\">                uint32_t     fe_pos;               /* foreach position */</div><div class=\"line\">                uint32_t     fe_iter_idx;          /* foreach iterator index */</div><div class=\"line\">        &#125; u2;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>通过类型定义的代码,可以知道,php所有的变量结果都是用zval结构体来保存的,而zaval结果体中的zend_value结构体又是真正保存数据的</p>\n<p>现在继续看下zend_value结构体</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">typedef union _zend_value &#123;</div><div class=\"line\">        zend_long         lval;                         /* long value */</div><div class=\"line\">        double            dval;                         /* double value */</div><div class=\"line\">        zend_refcounted  *counted;</div><div class=\"line\">        zend_string      *str;</div><div class=\"line\">        zend_array       *arr;</div><div class=\"line\">        zend_object      *obj;</div><div class=\"line\">        zend_resource    *res;</div><div class=\"line\">        zend_reference   *ref;</div><div class=\"line\">        zend_ast_ref     *ast;</div><div class=\"line\">        zval             *zv;</div><div class=\"line\">        void             *ptr;</div><div class=\"line\">        zend_class_entry *ce;</div><div class=\"line\">        zend_function    *func;</div><div class=\"line\">        struct &#123;</div><div class=\"line\">                uint32_t w1;</div><div class=\"line\">                uint32_t w2;</div><div class=\"line\">        &#125; ww;</div><div class=\"line\">&#125; zend_value;</div><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>zend_value是一个联合体。对于小于64位的简单类型，会直接存储值。对于其他比较复杂的类型，如字符串，数组，对象等，是存储的指针。这样，对于简单类型来说，变得简单高效</p>\n<p>引发的问题:</p>\n<p>1.类型装换问题<br>自动类型转换:<br>FALSE 会转为0，TRUE 会转为 1<br>1)如果该字符串没有包含 ‘.’，’e’ 或 ‘E’ 并且其数字值在整型的范围之内（由 PHP_INT_MAX 所定义），该字符串将被当成 integer 来取值。其它所有情况下都被作为 float 来取值<br>2)该字符串的开始部分决定了它的值。如果该字符串以合法的数值开始，则使用该数值。否则其值为 0（零）。合法数值由可选的正负号，后面跟着一个或多个数字（可能有小数点），再跟着可选的指数部分。指数部分由 ‘e’ 或 ‘E’ 后面跟着一个或多个数字构成。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$foo = &quot;0&quot;;  // $foo 是字符串 (ASCII 48)</div><div class=\"line\">$foo += 2;   // $foo 现在是一个整数 (2)</div><div class=\"line\">$foo = $foo + 1.3;  // $foo 现在是一个浮点数 (3.3)</div><div class=\"line\">$foo = 5 + &quot;10 Little Piggies&quot;; // $foo 是整数 (15)</div><div class=\"line\">$foo = 5 + &quot;10 Small Pigs&quot;;     // $foo 是整数 (15)</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p>如果要将某类型强制转换为某类型,可以对其使用强制类型转换||settype()函数<br>强制转换:<br>(bool), (boolean) - 转换为布尔类型 boolean:</p>\n<p>当转换为 boolean 时，以下值被认为是 FALSE：<br>布尔值 FALSE 本身<br>整型值 0（零）<br>浮点型值 0.0（零）<br>空字符串，以及字符串 “0”<br>不包括任何元素的数组<br>特殊类型 NULL（包括尚未赋值的变量）<br>从空标记生成的 SimpleXML 对象</p>\n<p>当转换为 boolean 时,-1 和其它非零值（不论正负）一样，被认为是 TRUE<br>所有其它值都被认为是 TRUE（包括任何资源）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">var_dump((bool) &quot;&quot;);        // bool(false)</div><div class=\"line\">var_dump((bool) 1);         // bool(true)</div><div class=\"line\">var_dump((bool) -2);        // bool(true)</div><div class=\"line\">var_dump((bool) &quot;foo&quot;);     // bool(true)</div><div class=\"line\">var_dump((bool) 2.3e5);     // bool(true)</div><div class=\"line\">var_dump((bool) [12]); // bool(true)</div><div class=\"line\">var_dump((bool) []);   // bool(false)</div><div class=\"line\">var_dump((bool) &quot;false&quot;);   // bool(true)</div><div class=\"line\">var_dump((bool) &quot;0&quot;);   // bool(false)</div><div class=\"line\">var_dump((bool) 0.0);   // bool(false)</div><div class=\"line\">var_dump((bool) null);   // bool(false)</div><div class=\"line\">var_dump((bool) new stdClass());   // bool(true)</div><div class=\"line\"></div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p>(int), (integer) - 转换为整形 integer</p>\n<p>boolean转换时: FALSE 会转为0，TRUE 会转为 1,<br>浮点型转换时: 会向下取整,不要将未知的分数强制转换为 integer，这样有时会导致不可预料的结果<br>array转换时:空数组会转为 0 ,非空数组转为1<br>string类型转换时:<br>使用强制转换时不会解析’.’，’e’ 或 ‘E’为float类型,而且直接采用该字符串是否已合法的数字开始,则使用该值,否则其值为0;<br>其他类型转换时:会导致未知错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">echo (int) true ; // 1</div><div class=\"line\">echo (int) false; //0</div><div class=\"line\">echo (int) 0.1; //0</div><div class=\"line\">echo (int) 1.5; //1</div><div class=\"line\">echo (int) ( (0.1+0.7) * 10 ); // 显示 7,其中内部的表示其实是类似 7.9999999999999991118...。</div><div class=\"line\">echo (int) []; //0</div><div class=\"line\">echo (int) [2,1,2,4,&apos;222&apos;=&gt;11]; //1</div><div class=\"line\">echo (int)&quot;10.5&quot;;                // 10 , 10.5被当成浮点数,向下取整为10</div><div class=\"line\">echo (int)&quot;-10.5&quot;;                // -10 , -10是合法,为-10</div><div class=\"line\">echo (int)&quot;-1.3e3&quot;;               // -1,-1是合法的数字</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p>(float), (double), (real) - 转换为浮点型 float<br>string转换时:<br>如果该字符串包含 ‘.’，’e’ 或 ‘E’,会当做float来取值 ,而且采用该字符串是否已合法的数字开始,则使用该值,否则其值为0<br>其他的跟转换为int类似<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;?php</div><div class=\"line\">echo (float) 10;                                 //10</div><div class=\"line\">echo (float) &apos;10.1&apos;;                            //10.1</div><div class=\"line\">echo (float) &apos;-1.3e3&apos;;                          //-1300</div><div class=\"line\">echo (float) &apos;-1.3e3abc&apos;;                       //-1300</div><div class=\"line\">echo (float) true;                              //1</div><div class=\"line\">echo (float) false;                             //0</div><div class=\"line\">echo (float) [];                                //0</div><div class=\"line\">echo (float) [1,2];                             //1</div><div class=\"line\">?&gt;</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>(string) - 转换为字符串 string<br>一个值可以通过在其前面加上 (string) 或用 strval() 函数来转变成字符串.<br> boolean 的 TRUE 被转换成 string 的 “1”。Boolean 的 FALSE 被转换成 “”（空字符串）<br> 整数 integer 或浮点数 float 被转换为数字的字面样式的 string<br> 数组 array 总是转换成字符串 “Array”<br> 对象 object 总是被转换成字符串 “Object”,自 PHP 5 起，适当时可以用 __toString 方法<br> 资源 resource 总会被转变成 “Resource id #1” 这种结构的字符串<br> NULL 总是被转变成空字符串<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> &lt;?php</div><div class=\"line\">echo (string) 10;                                //&apos;10&apos;</div><div class=\"line\">echo (string) 10.1;                             //&apos;10.1&apos;</div><div class=\"line\">echo (string) -1.3e3;                           //-1300</div><div class=\"line\">echo (string) 1.3e3;                //-1300</div><div class=\"line\">echo (string) true;                             //1</div><div class=\"line\">echo (string) false;                            //0</div><div class=\"line\">$arr = [1,2,4];</div><div class=\"line\">        echo &quot;&#123;$arr&#125;&quot;;                          //array</div><div class=\"line\">       echo strval($arr);              //array</div><div class=\"line\"></div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p>(array) - 转换为数组 array<br>对于任意 integer，float，string，boolean 和 resource 类型，如果将一个值转换为数组，将得到一个仅有一个元素的数组，其下标为 0，该元素即为此标量的值。换句话说，(array)$scalarValue 与 array($scalarValue) 完全一样。</p>\n<p>如果一个 object 类型转换为 array，则结果为一个数组，其单元为该对象的属性。键名将为成员变量名，不过有几点例外：整数属性不可访问；私有变量前会加上类名作前缀；保护变量前会加上一个 ‘*’ 做前缀。这些前缀的前后都各有一个 NULL 字符。这会导致一些不可预知的行为：</p>\n<p>将 NULL 转换为 array 会得到一个空的数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">var_dump((array) 1);</div><div class=\"line\">var_dump((array) 1.1);</div><div class=\"line\">var_dump((array) 1.3e3);</div><div class=\"line\">var_dump((array) (new stdClass()));</div><div class=\"line\">var_dump((array) &apos;is array&apos;);</div><div class=\"line\">var_dump((array) null);</div><div class=\"line\">class A &#123;</div><div class=\"line\">    private $A; // 输出 &apos;\\0A\\0A&apos;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class B extends A &#123;</div><div class=\"line\">    private $A; // 输出 &apos;\\0B\\0A&apos;</div><div class=\"line\">    public $AA; // 输出 &apos;AA&apos;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var_dump((array) new B());</div><div class=\"line\">?&gt;</div><div class=\"line\">huangchengkaideMacBook-Air:www kai$ php test.php </div><div class=\"line\">array(1) &#123;</div><div class=\"line\">  [0]=&gt;</div><div class=\"line\">  int(1)</div><div class=\"line\">&#125;</div><div class=\"line\">array(1) &#123;</div><div class=\"line\">  [0]=&gt;</div><div class=\"line\">  float(1.1)</div><div class=\"line\">&#125;</div><div class=\"line\">array(1) &#123;</div><div class=\"line\">  [0]=&gt;</div><div class=\"line\">  float(1300)</div><div class=\"line\">&#125;</div><div class=\"line\">array(0) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\">array(1) &#123;</div><div class=\"line\">  [0]=&gt;</div><div class=\"line\">  string(8) &quot;is array&quot;</div><div class=\"line\">&#125;</div><div class=\"line\">array(0) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\">array(3) &#123;</div><div class=\"line\">  [&quot;BA&quot;]=&gt;</div><div class=\"line\">  NULL</div><div class=\"line\">  [&quot;AA&quot;]=&gt;</div><div class=\"line\">  NULL</div><div class=\"line\">  [&quot;AA&quot;]=&gt;</div><div class=\"line\">  NULL</div><div class=\"line\">&#125;</div><div class=\"line\">huangchengkaideMacBook-Air:www kai$ </div></pre></td></tr></table></figure></p>\n<p>有两个键名为 ‘AA’，不过其中一个实际上是 ‘\\0A\\0A’ </p>\n<p>(object) - 转换为对象 object<br>如果将一个对象转换成对象，它将不会有任何变化。如果其它任何类型的值被转换成对象，将会创建一个内置类 stdClass 的实例。如果该值为 NULL，则新的实例为空。数组转换成对象将使键名成为属性名并具有相对应的值。对于任何其它的值，名为 scalar 的成员变量将包含该值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;?php</div><div class=\"line\">$obj = (object) &apos;string&apos;;</div><div class=\"line\">echo $obj-&gt;scalar.&quot;\\n&quot;;  // &apos;string&apos;</div><div class=\"line\">$obj = (object) 1;</div><div class=\"line\">echo $obj-&gt;scalar.&quot;\\n&quot;;  // 1</div><div class=\"line\">$obj = (object) 1.1;</div><div class=\"line\">echo $obj-&gt;scalar.&quot;\\n&quot;;  // 1.1</div><div class=\"line\">$obj = (object) 1.3e3;</div><div class=\"line\">echo $obj-&gt;scalar.&quot;\\n&quot;;  // 1300</div><div class=\"line\">$obj = (object) [];</div><div class=\"line\">var_dump($obj);</div><div class=\"line\">$obj = (object) [1,2,3,5];</div><div class=\"line\">var_dump($obj);</div><div class=\"line\">$obj = (object) [&apos;b&apos;=&gt;1,&apos;c&apos;=&gt;2];</div><div class=\"line\">var_dump($obj);</div><div class=\"line\">?&gt;</div><div class=\"line\"></div><div class=\"line\">huangchengkaideMacBook-Air:www kai$ php test.php </div><div class=\"line\"></div><div class=\"line\">string</div><div class=\"line\">1</div><div class=\"line\">1.1</div><div class=\"line\">1300</div><div class=\"line\">object(stdClass)#1 (0) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\">object(stdClass)#2 (4) &#123;</div><div class=\"line\">  [0]=&gt;</div><div class=\"line\">  int(1)</div><div class=\"line\">  [1]=&gt;</div><div class=\"line\">  int(2)</div><div class=\"line\">  [2]=&gt;</div><div class=\"line\">  int(3)</div><div class=\"line\">  [3]=&gt;</div><div class=\"line\">  int(5)</div><div class=\"line\">&#125;</div><div class=\"line\">object(stdClass)#1 (2) &#123;</div><div class=\"line\">  [&quot;b&quot;]=&gt;</div><div class=\"line\">  int(1)</div><div class=\"line\">  [&quot;c&quot;]=&gt;</div><div class=\"line\">  int(2)</div><div class=\"line\">&#125;</div><div class=\"line\">huangchengkaideMacBook-Air:www kai$ </div></pre></td></tr></table></figure></p>\n<p>(unset) - 转换为 NULL (PHP 5)<br>特殊的 NULL 值表示一个变量没有值。NULL 类型唯一可能的值就是 NULL。</p>\n<p>在下列情况下一个变量被认为是 NULL：</p>\n<p>被赋值为 NULL。</p>\n<p>尚未被赋值。</p>\n<p>被 unset()。</p>\n<p>使用 (unset) $var 将一个变量转换为 null 将不会删除该变量或 unset 其值。仅是返回 NULL 值而已。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>以上内容参考自官方文档</p>\n<p>2.类型比较</p>\n<p>类型比较表的官方文档地址:<br><a href=\"https://secure.php.net/manual/zh/types.comparisons.php\" target=\"_blank\" rel=\"external\">https://secure.php.net/manual/zh/types.comparisons.php</a></p>\n<p>特别要注意,有时候比较的时候,会涉及类型转换问题:</p>\n<p>松散型(==)和严格型(===)比较问题等<br>&lt;?php</p>\n<p>if(0==’0’){ //true<br>    echo ‘true’;<br>} else{<br>    echo ‘false’;<br>}</p>\n<p>if(0 == ‘abcdefg’){ //true<br>    echo ‘true’;<br>} else{<br>    echo ‘false’;<br>}</p>\n<p>if(0 === ‘abcdefg’){ //true<br>    echo ‘true’;<br>} else{<br>    echo ‘false’;<br>}</p>\n<p>if(1 == ‘1abcdef’){ //true<br>    echo ‘true’;<br>} else{<br>    echo ‘false’;<br>}</p>\n<p>?&gt;</p>\n<p>3.内置函数的参数的松散</p>\n<p>md5()</p>\n<p>$array1[] = array(<br>    “foo” =&gt; “bar”,<br>    “bar” =&gt; “foo”,<br>);<br>$array2 = array(“foo”, “bar”, “hello”, “world”);<br>var_dump(md5($array1)==var_dump($array2)); //true</p>\n<p>PHP手册中的md5()函数的描述是string md5 ( string $str [, bool $raw_output = false ] )，md5()中的需要是一个string类型的参数。但是当你传递一个array时，md5()不会报错，知识会无法正确地求出array的md5值，这样就会导致任意2个array的md5值都会相等。这个md5()的特性在攻防平台中的bypass again同样有考到。</p>\n<p>strcmp()</p>\n<p>strcmp()函数在PHP官方手册中的描述是int strcmp ( string $str1 , string $str2 ),需要给strcmp()传递2个string类型的参数。如果str1小于str2,返回-1，相等返回0，否则返回1。strcmp函数比较字符串的本质是将两个变量转换为ascii，然后进行减法运算，然后根据运算结果来决定返回值。<br>如果传入给出strcmp()的参数是数字呢？</p>\n<p>$array=[1,2,3];<br>var_dump(strcmp($array,’123’)); //null,在某种意义上null也就是相当于false。</p>\n<p>strcmp这种特性在攻防平台中的pass check有考到。</p>\n<p>switch()</p>\n<p>如果switch是数字类型的case的判断时，switch会将其中的参数转换为int类型。如下：</p>\n<p>$i =”2abc”;<br>switch ($i) {<br>case 0:<br>case 1:<br>case 2:<br>    echo “i is less than 3 but not negative”;<br>    break;<br>case 3:<br>    echo “i is 3”;<br>}</p>\n<p>这个时候程序输出的是i is less than 3 but not negative，是由于switch()函数将$i进行了类型转换，转换结果为2。</p>\n<p>in_array()</p>\n<p>在PHP手册中，in_array()函数的解释是bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ),如果strict参数没有提供，那么in_array就会使用松散比较来判断$needle是否在$haystack中。当strince的值为true时，in_array()会比较needls的类型和haystack中的类型是否相同。</p>\n<p>$array=[0,1,2,’3’];<br>var_dump(in_array(‘abc’, $array));  //true<br>var_dump(in_array(‘1bc’, $array)); //true</p>\n<p>可以看到上面的情况返回的都是true,因为’abc’会转换为0，’1bc’转换为1。<br>array_search()与in_array()也是一样的问题。</p>\n","excerpt":"","more":"<p>php是个弱类型的语言,这是众所周知的事情,所谓的弱类型就是php不严格检查变量的类型.<br>PHP 支持 8 种原始数据类型。<br>四种标量类型：<br>boolean（布尔型）<br>integer（整型）<br>float（浮点型，也称作 double)<br>string（字符串）<br>两种复合类型：<br>array（数组）<br>object（对象）<br>最后是两种特殊类型：<br>resource（资源）<br>NULL（无类型）</p>\n<p>在验证变量类型的时候,可以使用var<em>dump()|| gettype()php内置函数,开查看.或者使用is</em>{type}函数(is_int(),is_string(),is_array(),is_object())来判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$var = 1;</div><div class=\"line\">var_dump($var);</div><div class=\"line\">$var = 1.11;</div><div class=\"line\">var_dump($var);</div><div class=\"line\">$var = array();</div><div class=\"line\">var_dump($var);</div><div class=\"line\">$var = &quot;string&quot;;</div><div class=\"line\">var_dump($var);</div><div class=\"line\">$var = new stdClass();</div><div class=\"line\">var_dump($var);</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure>\n<p>看下执行结果:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchengkaideMacBook-Air:www kai$ php test.php </div><div class=\"line\">int(1)</div><div class=\"line\">array(0) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\">string(6) &quot;string&quot;</div><div class=\"line\">huangchengkaideMacBook-Air:www kai$ </div><div class=\"line\">huangchengkaideMacBook-Air:www kai$ </div><div class=\"line\">huangchengkaideMacBook-Air:www kai$ php test.php </div><div class=\"line\">int(1)</div><div class=\"line\">float(1.11)</div><div class=\"line\">array(0) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\">string(6) &quot;string&quot;</div><div class=\"line\">object(stdClass)#1 (0) &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>弱类型的语言对变量的数据类型没有限制，所以我们可以在任何地时候将变量赋值给任意的其他类型的变量，同时变量也可以转换成任意地其他类型的数据。</p>\n<p>php怎样实现弱类型的呢?<br>php是c语言来实现,我们现在看下zend引擎,中类型定义文件 zend_types.h (php7)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">typedef struct _zval_struct     zval;</div><div class=\"line\">struct _zval_struct &#123;</div><div class=\"line\">        zend_value        value;                        /* value */</div><div class=\"line\">        union &#123;</div><div class=\"line\">                struct &#123;</div><div class=\"line\">                        ZEND_ENDIAN_LOHI_4(</div><div class=\"line\">                                zend_uchar    type,                     /* active type */</div><div class=\"line\">                                zend_uchar    type_flags,</div><div class=\"line\">                                zend_uchar    const_flags,</div><div class=\"line\">                                zend_uchar    reserved)     /* call info for EX(This) */</div><div class=\"line\">                &#125; v;</div><div class=\"line\">                uint32_t type_info;</div><div class=\"line\">        &#125; u1;</div><div class=\"line\">        union &#123;</div><div class=\"line\">                uint32_t     var_flags;</div><div class=\"line\">                uint32_t     next;                 /* hash collision chain */</div><div class=\"line\">                uint32_t     cache_slot;           /* literal cache slot */</div><div class=\"line\">                uint32_t     lineno;               /* line number (for ast nodes) */</div><div class=\"line\">                uint32_t     num_args;             /* arguments number for EX(This) */</div><div class=\"line\">                uint32_t     fe_pos;               /* foreach position */</div><div class=\"line\">                uint32_t     fe_iter_idx;          /* foreach iterator index */</div><div class=\"line\">        &#125; u2;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>通过类型定义的代码,可以知道,php所有的变量结果都是用zval结构体来保存的,而zaval结果体中的zend_value结构体又是真正保存数据的</p>\n<p>现在继续看下zend_value结构体</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">typedef union _zend_value &#123;</div><div class=\"line\">        zend_long         lval;                         /* long value */</div><div class=\"line\">        double            dval;                         /* double value */</div><div class=\"line\">        zend_refcounted  *counted;</div><div class=\"line\">        zend_string      *str;</div><div class=\"line\">        zend_array       *arr;</div><div class=\"line\">        zend_object      *obj;</div><div class=\"line\">        zend_resource    *res;</div><div class=\"line\">        zend_reference   *ref;</div><div class=\"line\">        zend_ast_ref     *ast;</div><div class=\"line\">        zval             *zv;</div><div class=\"line\">        void             *ptr;</div><div class=\"line\">        zend_class_entry *ce;</div><div class=\"line\">        zend_function    *func;</div><div class=\"line\">        struct &#123;</div><div class=\"line\">                uint32_t w1;</div><div class=\"line\">                uint32_t w2;</div><div class=\"line\">        &#125; ww;</div><div class=\"line\">&#125; zend_value;</div><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>zend_value是一个联合体。对于小于64位的简单类型，会直接存储值。对于其他比较复杂的类型，如字符串，数组，对象等，是存储的指针。这样，对于简单类型来说，变得简单高效</p>\n<p>引发的问题:</p>\n<p>1.类型装换问题<br>自动类型转换:<br>FALSE 会转为0，TRUE 会转为 1<br>1)如果该字符串没有包含 ‘.’，’e’ 或 ‘E’ 并且其数字值在整型的范围之内（由 PHP_INT_MAX 所定义），该字符串将被当成 integer 来取值。其它所有情况下都被作为 float 来取值<br>2)该字符串的开始部分决定了它的值。如果该字符串以合法的数值开始，则使用该数值。否则其值为 0（零）。合法数值由可选的正负号，后面跟着一个或多个数字（可能有小数点），再跟着可选的指数部分。指数部分由 ‘e’ 或 ‘E’ 后面跟着一个或多个数字构成。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$foo = &quot;0&quot;;  // $foo 是字符串 (ASCII 48)</div><div class=\"line\">$foo += 2;   // $foo 现在是一个整数 (2)</div><div class=\"line\">$foo = $foo + 1.3;  // $foo 现在是一个浮点数 (3.3)</div><div class=\"line\">$foo = 5 + &quot;10 Little Piggies&quot;; // $foo 是整数 (15)</div><div class=\"line\">$foo = 5 + &quot;10 Small Pigs&quot;;     // $foo 是整数 (15)</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p>如果要将某类型强制转换为某类型,可以对其使用强制类型转换||settype()函数<br>强制转换:<br>(bool), (boolean) - 转换为布尔类型 boolean:</p>\n<p>当转换为 boolean 时，以下值被认为是 FALSE：<br>布尔值 FALSE 本身<br>整型值 0（零）<br>浮点型值 0.0（零）<br>空字符串，以及字符串 “0”<br>不包括任何元素的数组<br>特殊类型 NULL（包括尚未赋值的变量）<br>从空标记生成的 SimpleXML 对象</p>\n<p>当转换为 boolean 时,-1 和其它非零值（不论正负）一样，被认为是 TRUE<br>所有其它值都被认为是 TRUE（包括任何资源）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">var_dump((bool) &quot;&quot;);        // bool(false)</div><div class=\"line\">var_dump((bool) 1);         // bool(true)</div><div class=\"line\">var_dump((bool) -2);        // bool(true)</div><div class=\"line\">var_dump((bool) &quot;foo&quot;);     // bool(true)</div><div class=\"line\">var_dump((bool) 2.3e5);     // bool(true)</div><div class=\"line\">var_dump((bool) [12]); // bool(true)</div><div class=\"line\">var_dump((bool) []);   // bool(false)</div><div class=\"line\">var_dump((bool) &quot;false&quot;);   // bool(true)</div><div class=\"line\">var_dump((bool) &quot;0&quot;);   // bool(false)</div><div class=\"line\">var_dump((bool) 0.0);   // bool(false)</div><div class=\"line\">var_dump((bool) null);   // bool(false)</div><div class=\"line\">var_dump((bool) new stdClass());   // bool(true)</div><div class=\"line\"></div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p>(int), (integer) - 转换为整形 integer</p>\n<p>boolean转换时: FALSE 会转为0，TRUE 会转为 1,<br>浮点型转换时: 会向下取整,不要将未知的分数强制转换为 integer，这样有时会导致不可预料的结果<br>array转换时:空数组会转为 0 ,非空数组转为1<br>string类型转换时:<br>使用强制转换时不会解析’.’，’e’ 或 ‘E’为float类型,而且直接采用该字符串是否已合法的数字开始,则使用该值,否则其值为0;<br>其他类型转换时:会导致未知错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">echo (int) true ; // 1</div><div class=\"line\">echo (int) false; //0</div><div class=\"line\">echo (int) 0.1; //0</div><div class=\"line\">echo (int) 1.5; //1</div><div class=\"line\">echo (int) ( (0.1+0.7) * 10 ); // 显示 7,其中内部的表示其实是类似 7.9999999999999991118...。</div><div class=\"line\">echo (int) []; //0</div><div class=\"line\">echo (int) [2,1,2,4,&apos;222&apos;=&gt;11]; //1</div><div class=\"line\">echo (int)&quot;10.5&quot;;                // 10 , 10.5被当成浮点数,向下取整为10</div><div class=\"line\">echo (int)&quot;-10.5&quot;;                // -10 , -10是合法,为-10</div><div class=\"line\">echo (int)&quot;-1.3e3&quot;;               // -1,-1是合法的数字</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p>(float), (double), (real) - 转换为浮点型 float<br>string转换时:<br>如果该字符串包含 ‘.’，’e’ 或 ‘E’,会当做float来取值 ,而且采用该字符串是否已合法的数字开始,则使用该值,否则其值为0<br>其他的跟转换为int类似<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;?php</div><div class=\"line\">echo (float) 10;                                 //10</div><div class=\"line\">echo (float) &apos;10.1&apos;;                            //10.1</div><div class=\"line\">echo (float) &apos;-1.3e3&apos;;                          //-1300</div><div class=\"line\">echo (float) &apos;-1.3e3abc&apos;;                       //-1300</div><div class=\"line\">echo (float) true;                              //1</div><div class=\"line\">echo (float) false;                             //0</div><div class=\"line\">echo (float) [];                                //0</div><div class=\"line\">echo (float) [1,2];                             //1</div><div class=\"line\">?&gt;</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>(string) - 转换为字符串 string<br>一个值可以通过在其前面加上 (string) 或用 strval() 函数来转变成字符串.<br> boolean 的 TRUE 被转换成 string 的 “1”。Boolean 的 FALSE 被转换成 “”（空字符串）<br> 整数 integer 或浮点数 float 被转换为数字的字面样式的 string<br> 数组 array 总是转换成字符串 “Array”<br> 对象 object 总是被转换成字符串 “Object”,自 PHP 5 起，适当时可以用 __toString 方法<br> 资源 resource 总会被转变成 “Resource id #1” 这种结构的字符串<br> NULL 总是被转变成空字符串<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> &lt;?php</div><div class=\"line\">echo (string) 10;                                //&apos;10&apos;</div><div class=\"line\">echo (string) 10.1;                             //&apos;10.1&apos;</div><div class=\"line\">echo (string) -1.3e3;                           //-1300</div><div class=\"line\">echo (string) 1.3e3;                //-1300</div><div class=\"line\">echo (string) true;                             //1</div><div class=\"line\">echo (string) false;                            //0</div><div class=\"line\">$arr = [1,2,4];</div><div class=\"line\">        echo &quot;&#123;$arr&#125;&quot;;                          //array</div><div class=\"line\">       echo strval($arr);              //array</div><div class=\"line\"></div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p>(array) - 转换为数组 array<br>对于任意 integer，float，string，boolean 和 resource 类型，如果将一个值转换为数组，将得到一个仅有一个元素的数组，其下标为 0，该元素即为此标量的值。换句话说，(array)$scalarValue 与 array($scalarValue) 完全一样。</p>\n<p>如果一个 object 类型转换为 array，则结果为一个数组，其单元为该对象的属性。键名将为成员变量名，不过有几点例外：整数属性不可访问；私有变量前会加上类名作前缀；保护变量前会加上一个 ‘*’ 做前缀。这些前缀的前后都各有一个 NULL 字符。这会导致一些不可预知的行为：</p>\n<p>将 NULL 转换为 array 会得到一个空的数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">var_dump((array) 1);</div><div class=\"line\">var_dump((array) 1.1);</div><div class=\"line\">var_dump((array) 1.3e3);</div><div class=\"line\">var_dump((array) (new stdClass()));</div><div class=\"line\">var_dump((array) &apos;is array&apos;);</div><div class=\"line\">var_dump((array) null);</div><div class=\"line\">class A &#123;</div><div class=\"line\">    private $A; // 输出 &apos;\\0A\\0A&apos;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class B extends A &#123;</div><div class=\"line\">    private $A; // 输出 &apos;\\0B\\0A&apos;</div><div class=\"line\">    public $AA; // 输出 &apos;AA&apos;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var_dump((array) new B());</div><div class=\"line\">?&gt;</div><div class=\"line\">huangchengkaideMacBook-Air:www kai$ php test.php </div><div class=\"line\">array(1) &#123;</div><div class=\"line\">  [0]=&gt;</div><div class=\"line\">  int(1)</div><div class=\"line\">&#125;</div><div class=\"line\">array(1) &#123;</div><div class=\"line\">  [0]=&gt;</div><div class=\"line\">  float(1.1)</div><div class=\"line\">&#125;</div><div class=\"line\">array(1) &#123;</div><div class=\"line\">  [0]=&gt;</div><div class=\"line\">  float(1300)</div><div class=\"line\">&#125;</div><div class=\"line\">array(0) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\">array(1) &#123;</div><div class=\"line\">  [0]=&gt;</div><div class=\"line\">  string(8) &quot;is array&quot;</div><div class=\"line\">&#125;</div><div class=\"line\">array(0) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\">array(3) &#123;</div><div class=\"line\">  [&quot;BA&quot;]=&gt;</div><div class=\"line\">  NULL</div><div class=\"line\">  [&quot;AA&quot;]=&gt;</div><div class=\"line\">  NULL</div><div class=\"line\">  [&quot;AA&quot;]=&gt;</div><div class=\"line\">  NULL</div><div class=\"line\">&#125;</div><div class=\"line\">huangchengkaideMacBook-Air:www kai$ </div></pre></td></tr></table></figure></p>\n<p>有两个键名为 ‘AA’，不过其中一个实际上是 ‘\\0A\\0A’ </p>\n<p>(object) - 转换为对象 object<br>如果将一个对象转换成对象，它将不会有任何变化。如果其它任何类型的值被转换成对象，将会创建一个内置类 stdClass 的实例。如果该值为 NULL，则新的实例为空。数组转换成对象将使键名成为属性名并具有相对应的值。对于任何其它的值，名为 scalar 的成员变量将包含该值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;?php</div><div class=\"line\">$obj = (object) &apos;string&apos;;</div><div class=\"line\">echo $obj-&gt;scalar.&quot;\\n&quot;;  // &apos;string&apos;</div><div class=\"line\">$obj = (object) 1;</div><div class=\"line\">echo $obj-&gt;scalar.&quot;\\n&quot;;  // 1</div><div class=\"line\">$obj = (object) 1.1;</div><div class=\"line\">echo $obj-&gt;scalar.&quot;\\n&quot;;  // 1.1</div><div class=\"line\">$obj = (object) 1.3e3;</div><div class=\"line\">echo $obj-&gt;scalar.&quot;\\n&quot;;  // 1300</div><div class=\"line\">$obj = (object) [];</div><div class=\"line\">var_dump($obj);</div><div class=\"line\">$obj = (object) [1,2,3,5];</div><div class=\"line\">var_dump($obj);</div><div class=\"line\">$obj = (object) [&apos;b&apos;=&gt;1,&apos;c&apos;=&gt;2];</div><div class=\"line\">var_dump($obj);</div><div class=\"line\">?&gt;</div><div class=\"line\"></div><div class=\"line\">huangchengkaideMacBook-Air:www kai$ php test.php </div><div class=\"line\"></div><div class=\"line\">string</div><div class=\"line\">1</div><div class=\"line\">1.1</div><div class=\"line\">1300</div><div class=\"line\">object(stdClass)#1 (0) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\">object(stdClass)#2 (4) &#123;</div><div class=\"line\">  [0]=&gt;</div><div class=\"line\">  int(1)</div><div class=\"line\">  [1]=&gt;</div><div class=\"line\">  int(2)</div><div class=\"line\">  [2]=&gt;</div><div class=\"line\">  int(3)</div><div class=\"line\">  [3]=&gt;</div><div class=\"line\">  int(5)</div><div class=\"line\">&#125;</div><div class=\"line\">object(stdClass)#1 (2) &#123;</div><div class=\"line\">  [&quot;b&quot;]=&gt;</div><div class=\"line\">  int(1)</div><div class=\"line\">  [&quot;c&quot;]=&gt;</div><div class=\"line\">  int(2)</div><div class=\"line\">&#125;</div><div class=\"line\">huangchengkaideMacBook-Air:www kai$ </div></pre></td></tr></table></figure></p>\n<p>(unset) - 转换为 NULL (PHP 5)<br>特殊的 NULL 值表示一个变量没有值。NULL 类型唯一可能的值就是 NULL。</p>\n<p>在下列情况下一个变量被认为是 NULL：</p>\n<p>被赋值为 NULL。</p>\n<p>尚未被赋值。</p>\n<p>被 unset()。</p>\n<p>使用 (unset) $var 将一个变量转换为 null 将不会删除该变量或 unset 其值。仅是返回 NULL 值而已。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>以上内容参考自官方文档</p>\n<p>2.类型比较</p>\n<p>类型比较表的官方文档地址:<br><a href=\"https://secure.php.net/manual/zh/types.comparisons.php\">https://secure.php.net/manual/zh/types.comparisons.php</a></p>\n<p>特别要注意,有时候比较的时候,会涉及类型转换问题:</p>\n<p>松散型(==)和严格型(===)比较问题等<br>&lt;?php</p>\n<p>if(0==’0’){ //true<br>    echo ‘true’;<br>} else{<br>    echo ‘false’;<br>}</p>\n<p>if(0 == ‘abcdefg’){ //true<br>    echo ‘true’;<br>} else{<br>    echo ‘false’;<br>}</p>\n<p>if(0 === ‘abcdefg’){ //true<br>    echo ‘true’;<br>} else{<br>    echo ‘false’;<br>}</p>\n<p>if(1 == ‘1abcdef’){ //true<br>    echo ‘true’;<br>} else{<br>    echo ‘false’;<br>}</p>\n<p>?&gt;</p>\n<p>3.内置函数的参数的松散</p>\n<p>md5()</p>\n<p>$array1[] = array(<br>    “foo” =&gt; “bar”,<br>    “bar” =&gt; “foo”,<br>);<br>$array2 = array(“foo”, “bar”, “hello”, “world”);<br>var_dump(md5($array1)==var_dump($array2)); //true</p>\n<p>PHP手册中的md5()函数的描述是string md5 ( string $str [, bool $raw_output = false ] )，md5()中的需要是一个string类型的参数。但是当你传递一个array时，md5()不会报错，知识会无法正确地求出array的md5值，这样就会导致任意2个array的md5值都会相等。这个md5()的特性在攻防平台中的bypass again同样有考到。</p>\n<p>strcmp()</p>\n<p>strcmp()函数在PHP官方手册中的描述是int strcmp ( string $str1 , string $str2 ),需要给strcmp()传递2个string类型的参数。如果str1小于str2,返回-1，相等返回0，否则返回1。strcmp函数比较字符串的本质是将两个变量转换为ascii，然后进行减法运算，然后根据运算结果来决定返回值。<br>如果传入给出strcmp()的参数是数字呢？</p>\n<p>$array=[1,2,3];<br>var_dump(strcmp($array,’123’)); //null,在某种意义上null也就是相当于false。</p>\n<p>strcmp这种特性在攻防平台中的pass check有考到。</p>\n<p>switch()</p>\n<p>如果switch是数字类型的case的判断时，switch会将其中的参数转换为int类型。如下：</p>\n<p>$i =”2abc”;<br>switch ($i) {<br>case 0:<br>case 1:<br>case 2:<br>    echo “i is less than 3 but not negative”;<br>    break;<br>case 3:<br>    echo “i is 3”;<br>}</p>\n<p>这个时候程序输出的是i is less than 3 but not negative，是由于switch()函数将$i进行了类型转换，转换结果为2。</p>\n<p>in_array()</p>\n<p>在PHP手册中，in_array()函数的解释是bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ),如果strict参数没有提供，那么in_array就会使用松散比较来判断$needle是否在$haystack中。当strince的值为true时，in_array()会比较needls的类型和haystack中的类型是否相同。</p>\n<p>$array=[0,1,2,’3’];<br>var_dump(in_array(‘abc’, $array));  //true<br>var_dump(in_array(‘1bc’, $array)); //true</p>\n<p>可以看到上面的情况返回的都是true,因为’abc’会转换为0，’1bc’转换为1。<br>array_search()与in_array()也是一样的问题。</p>\n"},{"title":"php设计模式-委托","date":"2016-09-07T09:18:12.000Z","_content":"委托是对一个类的功能进行扩展和复用的方法。通过分配或委托其他对象，委托设计模式能够去除核心对象中的判决和复杂的功能性。\n它的做法是：写一个附加的类提供附加的功能，并使用原来的类的实例提供原有的功能。\n\n解决问题:\n  当一个对象包含复杂单独立的，必须基于判决执行的功能性的若干部分时，最佳的方法是适用基于委托设计模式的对象。 \n\n实例:\n","source":"_posts/php设计模式-委托.md","raw":"---\ntitle: php设计模式-委托\ndate: 2016-09-07 17:18:12\ntags:\n---\n委托是对一个类的功能进行扩展和复用的方法。通过分配或委托其他对象，委托设计模式能够去除核心对象中的判决和复杂的功能性。\n它的做法是：写一个附加的类提供附加的功能，并使用原来的类的实例提供原有的功能。\n\n解决问题:\n  当一个对象包含复杂单独立的，必须基于判决执行的功能性的若干部分时，最佳的方法是适用基于委托设计模式的对象。 \n\n实例:\n","slug":"php设计模式-委托","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeien40011znz4j9m83r4v","content":"<p>委托是对一个类的功能进行扩展和复用的方法。通过分配或委托其他对象，委托设计模式能够去除核心对象中的判决和复杂的功能性。<br>它的做法是：写一个附加的类提供附加的功能，并使用原来的类的实例提供原有的功能。</p>\n<p>解决问题:<br>  当一个对象包含复杂单独立的，必须基于判决执行的功能性的若干部分时，最佳的方法是适用基于委托设计模式的对象。 </p>\n<p>实例:</p>\n","excerpt":"","more":"<p>委托是对一个类的功能进行扩展和复用的方法。通过分配或委托其他对象，委托设计模式能够去除核心对象中的判决和复杂的功能性。<br>它的做法是：写一个附加的类提供附加的功能，并使用原来的类的实例提供原有的功能。</p>\n<p>解决问题:<br>  当一个对象包含复杂单独立的，必须基于判决执行的功能性的若干部分时，最佳的方法是适用基于委托设计模式的对象。 </p>\n<p>实例:</p>\n"},{"title":"php设计模式-建造者","date":"2016-09-06T13:59:49.000Z","_content":"建造者模式也称生成器模式，将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。\n\n解决问题:\n 消除其他对象的复杂创建过程，这是最佳做法，而且在对象的构造和配置方法改变时，可以尽可能的减少重复更改代码。\n\n组成:\n\n产品角色：建造中的复杂对象。它要包含那些定义组件的类，包括将这些组件装配成产品的接口。\n\n抽象建造者：为创建一个Product对象的各个部件指定抽象接口，以规范产品对象的各个组成成分的建造。一般而言，此角色规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建。\n\n具体建造者:\n\n1）实现抽象建造者角色的抽象方法。\n\n2）定义并明确它所创建的表示，即针对不同的业务逻辑，具体化复杂对象的各部分的创建\n\n3) 提供一个检索产品的接口\n\n4) 构造一个使用Builder接口的对象即在指导者的调用下创建产品实例\n\n指导者：调用具体建造者角色以创建产品对象的各个部分。指导者并没有涉及具体产品类的信息，真正拥有具体产品的信息是具体建造者对象。它只负责保证对象各部分完整创建或按某种顺序创建。\n\n\n实现:\n{% codeblock %} \n<?php\n//产品\nclass product\n{\n    protected $_type = \"\";\n    protected $_size = \"\";\n    protected $_color = \"\";\n    \n    //假设有三个复杂的创建过程\n    public function setType($type)\n    {\n        $this->_type = $type;\n    }\n    public function setSize($size)\n    {\n        $this->_size = $size;\n    }\n    public function setColor($color)\n    {\n        $this->_color = $color;\n    }\n}\n$productConfigs = array('type'=>'shirt','size'=>'XL','color'=>'red');\n$product = new product();\n//创建对象时分别调用每个方法不是最佳做法，扩展和可适应性低\n$product->setType($productConfigs['type']);\n$product->setSize($productConfigs['size']);\n$product->setColor($productConfigs['color']);\n//如果使用复杂的创建过程中使用构造函数来实现更不可取。\n\n\n//下面使用建造者模式,进行重写\n\n//抽象建造者\nabstract Builder{\n\t//建造部分\n\tpublic abstract function build();\n\t//提交返回产品接口\n\tpublic abstract function getProduct();  \n\n}\n\n//具体建造者\nclass productBuilder\n{\n    protected $_product = null;\n    protected $_configs = array();\n    public function __construct($configs)\n    {\n        $this->_product = new product();\n        $this->_configs = $configs; \n    }\n    public function build()\n    {\n        $this->_product->setSize($this->_configs['size']);\n        $this->_product->setType($this->_configs['type']);\n        $this->_product->setColor($this->_configs['color']);\n    }\n    public function getProduct()\n    {\n        return $this->_product;\n    }\n}\n\n//指导者\n$builder = new productBuilder($productConfigs);\n$builder->build();\n$product = $builder->getProduct();\n?>\n{% endcodeblock %}","source":"_posts/php设计模式-建造者.md","raw":"---\ntitle: php设计模式-建造者\ndate: 2016-09-06 21:59:49\ntags:\n---\n建造者模式也称生成器模式，将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。\n\n解决问题:\n 消除其他对象的复杂创建过程，这是最佳做法，而且在对象的构造和配置方法改变时，可以尽可能的减少重复更改代码。\n\n组成:\n\n产品角色：建造中的复杂对象。它要包含那些定义组件的类，包括将这些组件装配成产品的接口。\n\n抽象建造者：为创建一个Product对象的各个部件指定抽象接口，以规范产品对象的各个组成成分的建造。一般而言，此角色规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建。\n\n具体建造者:\n\n1）实现抽象建造者角色的抽象方法。\n\n2）定义并明确它所创建的表示，即针对不同的业务逻辑，具体化复杂对象的各部分的创建\n\n3) 提供一个检索产品的接口\n\n4) 构造一个使用Builder接口的对象即在指导者的调用下创建产品实例\n\n指导者：调用具体建造者角色以创建产品对象的各个部分。指导者并没有涉及具体产品类的信息，真正拥有具体产品的信息是具体建造者对象。它只负责保证对象各部分完整创建或按某种顺序创建。\n\n\n实现:\n{% codeblock %} \n<?php\n//产品\nclass product\n{\n    protected $_type = \"\";\n    protected $_size = \"\";\n    protected $_color = \"\";\n    \n    //假设有三个复杂的创建过程\n    public function setType($type)\n    {\n        $this->_type = $type;\n    }\n    public function setSize($size)\n    {\n        $this->_size = $size;\n    }\n    public function setColor($color)\n    {\n        $this->_color = $color;\n    }\n}\n$productConfigs = array('type'=>'shirt','size'=>'XL','color'=>'red');\n$product = new product();\n//创建对象时分别调用每个方法不是最佳做法，扩展和可适应性低\n$product->setType($productConfigs['type']);\n$product->setSize($productConfigs['size']);\n$product->setColor($productConfigs['color']);\n//如果使用复杂的创建过程中使用构造函数来实现更不可取。\n\n\n//下面使用建造者模式,进行重写\n\n//抽象建造者\nabstract Builder{\n\t//建造部分\n\tpublic abstract function build();\n\t//提交返回产品接口\n\tpublic abstract function getProduct();  \n\n}\n\n//具体建造者\nclass productBuilder\n{\n    protected $_product = null;\n    protected $_configs = array();\n    public function __construct($configs)\n    {\n        $this->_product = new product();\n        $this->_configs = $configs; \n    }\n    public function build()\n    {\n        $this->_product->setSize($this->_configs['size']);\n        $this->_product->setType($this->_configs['type']);\n        $this->_product->setColor($this->_configs['color']);\n    }\n    public function getProduct()\n    {\n        return $this->_product;\n    }\n}\n\n//指导者\n$builder = new productBuilder($productConfigs);\n$builder->build();\n$product = $builder->getProduct();\n?>\n{% endcodeblock %}","slug":"php设计模式-建造者","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeien60013znz450bjj0gb","content":"<p>建造者模式也称生成器模式，将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。</p>\n<p>解决问题:<br> 消除其他对象的复杂创建过程，这是最佳做法，而且在对象的构造和配置方法改变时，可以尽可能的减少重复更改代码。</p>\n<p>组成:</p>\n<p>产品角色：建造中的复杂对象。它要包含那些定义组件的类，包括将这些组件装配成产品的接口。</p>\n<p>抽象建造者：为创建一个Product对象的各个部件指定抽象接口，以规范产品对象的各个组成成分的建造。一般而言，此角色规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建。</p>\n<p>具体建造者:</p>\n<p>1）实现抽象建造者角色的抽象方法。</p>\n<p>2）定义并明确它所创建的表示，即针对不同的业务逻辑，具体化复杂对象的各部分的创建</p>\n<p>3) 提供一个检索产品的接口</p>\n<p>4) 构造一个使用Builder接口的对象即在指导者的调用下创建产品实例</p>\n<p>指导者：调用具体建造者角色以创建产品对象的各个部分。指导者并没有涉及具体产品类的信息，真正拥有具体产品的信息是具体建造者对象。它只负责保证对象各部分完整创建或按某种顺序创建。</p>\n<p>实现:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\">&lt;?php</div><div class=\"line\">//产品</div><div class=\"line\">class product</div><div class=\"line\">&#123;</div><div class=\"line\">    protected $_type = &quot;&quot;;</div><div class=\"line\">    protected $_size = &quot;&quot;;</div><div class=\"line\">    protected $_color = &quot;&quot;;</div><div class=\"line\">    </div><div class=\"line\">    //假设有三个复杂的创建过程</div><div class=\"line\">    public function setType($type)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $this-&gt;_type = $type;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public function setSize($size)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $this-&gt;_size = $size;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public function setColor($color)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $this-&gt;_color = $color;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">$productConfigs = array(&apos;type&apos;=&gt;&apos;shirt&apos;,&apos;size&apos;=&gt;&apos;XL&apos;,&apos;color&apos;=&gt;&apos;red&apos;);</div><div class=\"line\">$product = new product();</div><div class=\"line\">//创建对象时分别调用每个方法不是最佳做法，扩展和可适应性低</div><div class=\"line\">$product-&gt;setType($productConfigs[&apos;type&apos;]);</div><div class=\"line\">$product-&gt;setSize($productConfigs[&apos;size&apos;]);</div><div class=\"line\">$product-&gt;setColor($productConfigs[&apos;color&apos;]);</div><div class=\"line\">//如果使用复杂的创建过程中使用构造函数来实现更不可取。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//下面使用建造者模式,进行重写</div><div class=\"line\"></div><div class=\"line\">//抽象建造者</div><div class=\"line\">abstract Builder&#123;</div><div class=\"line\">\t//建造部分</div><div class=\"line\">\tpublic abstract function build();</div><div class=\"line\">\t//提交返回产品接口</div><div class=\"line\">\tpublic abstract function getProduct();  </div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//具体建造者</div><div class=\"line\">class productBuilder</div><div class=\"line\">&#123;</div><div class=\"line\">    protected $_product = null;</div><div class=\"line\">    protected $_configs = array();</div><div class=\"line\">    public function __construct($configs)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $this-&gt;_product = new product();</div><div class=\"line\">        $this-&gt;_configs = $configs; </div><div class=\"line\">    &#125;</div><div class=\"line\">    public function build()</div><div class=\"line\">    &#123;</div><div class=\"line\">        $this-&gt;_product-&gt;setSize($this-&gt;_configs[&apos;size&apos;]);</div><div class=\"line\">        $this-&gt;_product-&gt;setType($this-&gt;_configs[&apos;type&apos;]);</div><div class=\"line\">        $this-&gt;_product-&gt;setColor($this-&gt;_configs[&apos;color&apos;]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    public function getProduct()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return $this-&gt;_product;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//指导者</div><div class=\"line\">$builder = new productBuilder($productConfigs);</div><div class=\"line\">$builder-&gt;build();</div><div class=\"line\">$product = $builder-&gt;getProduct();</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>建造者模式也称生成器模式，将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。</p>\n<p>解决问题:<br> 消除其他对象的复杂创建过程，这是最佳做法，而且在对象的构造和配置方法改变时，可以尽可能的减少重复更改代码。</p>\n<p>组成:</p>\n<p>产品角色：建造中的复杂对象。它要包含那些定义组件的类，包括将这些组件装配成产品的接口。</p>\n<p>抽象建造者：为创建一个Product对象的各个部件指定抽象接口，以规范产品对象的各个组成成分的建造。一般而言，此角色规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建。</p>\n<p>具体建造者:</p>\n<p>1）实现抽象建造者角色的抽象方法。</p>\n<p>2）定义并明确它所创建的表示，即针对不同的业务逻辑，具体化复杂对象的各部分的创建</p>\n<p>3) 提供一个检索产品的接口</p>\n<p>4) 构造一个使用Builder接口的对象即在指导者的调用下创建产品实例</p>\n<p>指导者：调用具体建造者角色以创建产品对象的各个部分。指导者并没有涉及具体产品类的信息，真正拥有具体产品的信息是具体建造者对象。它只负责保证对象各部分完整创建或按某种顺序创建。</p>\n<p>实现:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\">&lt;?php</div><div class=\"line\">//产品</div><div class=\"line\">class product</div><div class=\"line\">&#123;</div><div class=\"line\">    protected $_type = &quot;&quot;;</div><div class=\"line\">    protected $_size = &quot;&quot;;</div><div class=\"line\">    protected $_color = &quot;&quot;;</div><div class=\"line\">    </div><div class=\"line\">    //假设有三个复杂的创建过程</div><div class=\"line\">    public function setType($type)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $this-&gt;_type = $type;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public function setSize($size)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $this-&gt;_size = $size;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public function setColor($color)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $this-&gt;_color = $color;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">$productConfigs = array(&apos;type&apos;=&gt;&apos;shirt&apos;,&apos;size&apos;=&gt;&apos;XL&apos;,&apos;color&apos;=&gt;&apos;red&apos;);</div><div class=\"line\">$product = new product();</div><div class=\"line\">//创建对象时分别调用每个方法不是最佳做法，扩展和可适应性低</div><div class=\"line\">$product-&gt;setType($productConfigs[&apos;type&apos;]);</div><div class=\"line\">$product-&gt;setSize($productConfigs[&apos;size&apos;]);</div><div class=\"line\">$product-&gt;setColor($productConfigs[&apos;color&apos;]);</div><div class=\"line\">//如果使用复杂的创建过程中使用构造函数来实现更不可取。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//下面使用建造者模式,进行重写</div><div class=\"line\"></div><div class=\"line\">//抽象建造者</div><div class=\"line\">abstract Builder&#123;</div><div class=\"line\">\t//建造部分</div><div class=\"line\">\tpublic abstract function build();</div><div class=\"line\">\t//提交返回产品接口</div><div class=\"line\">\tpublic abstract function getProduct();  </div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//具体建造者</div><div class=\"line\">class productBuilder</div><div class=\"line\">&#123;</div><div class=\"line\">    protected $_product = null;</div><div class=\"line\">    protected $_configs = array();</div><div class=\"line\">    public function __construct($configs)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $this-&gt;_product = new product();</div><div class=\"line\">        $this-&gt;_configs = $configs; </div><div class=\"line\">    &#125;</div><div class=\"line\">    public function build()</div><div class=\"line\">    &#123;</div><div class=\"line\">        $this-&gt;_product-&gt;setSize($this-&gt;_configs[&apos;size&apos;]);</div><div class=\"line\">        $this-&gt;_product-&gt;setType($this-&gt;_configs[&apos;type&apos;]);</div><div class=\"line\">        $this-&gt;_product-&gt;setColor($this-&gt;_configs[&apos;color&apos;]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    public function getProduct()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return $this-&gt;_product;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//指导者</div><div class=\"line\">$builder = new productBuilder($productConfigs);</div><div class=\"line\">$builder-&gt;build();</div><div class=\"line\">$product = $builder-&gt;getProduct();</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n"},{"title":"php设计模式-数据访问对象模式","date":"2016-09-06T14:27:10.000Z","_content":" 数据访问对象模式, 描述了如何创建提供透明访问任何对象源的对象。\n 采用这种设计模式,数据库连接的初始化，数据库选择，数据获取等操作。这种对数据的访问的操作的封装就是数据访问对象模式。\n 其实数据访问对象模式除了用在数据库访问上。还可以用在很多地方，例如：我们要建立一个文件缓存系统，就涉及到缓存的创建，读取，更新等操作，我们也可以把这些操作抽象出来，方便操作，而且不用重复书写代码大量代码，有时候也能起到让调用者无需关心实现细节的目的\n\n 解决问题：如何创建透明访问任何数据源的对象(重复和数据源抽象化)\n\n\n{% codeblock %}\n\n\n<?php\n\n/**\n*这是一个抽象类，为了能够使用该类必须扩展该类。因为很可能会同时打开多个数据库连接，所以在数据访问对象类中存储内部的数据库连接并且每个查询都进行引用是十分重要的。这个数据访问对象类应\n*当唯一地引用自其自己的连接。通常，在更多可拓展的模型中，接口被创建用于共享连接。\n*/\n\nabstract class baseDAO\n{\n    private $__connection;\n    public function __construct()\n    {\n        $this->__connectToDB(DB_USER, DB_PASS, DB_HOST, DB_DATABASE);\n    }\n    private function __connectToDB($user, $pass, $host, $database)\n    {\n        $this->__connection = mysqli::_connect($host, $user, $pass, $database);\n    }\n    public function fetch($value, $key = NULL)\n    {\n        if(is_null($key))\n        {\n            $key = $this->_primaryKey;\n        }\n        $sql = \"select * from {$this->_tableName} where {$key}='{$value}'\";\n        $results = mysqli_query($sql, $this->__connection);\n        $rows = array();\n        while ($result = mysqli_fetch_array($results))\n        {\n            $rows[] = $result;\n        }\n        return $rows;\n    }\n    public function update($keyedArray)\n    {\n        $sql = \"update {$this->_tableName} set \";\n        foreach ($keyedArray as $column=>$value)\n        {\n            $updates[] = \"{$column} = '{$value}' \";\n        }\n        $sql .= implode(\",\",$updates);\n        $sql .= \"where {$this->_primaryKey}='{$keyedArray[$this->_primaryKey]}'\";\n        mysqli:_query($sql, $this->__connection);\n    }\n}\n\n/**\n* 具体实现子类\n*/\nclass userDAO extends baseDAO\n{\n    protected $_tableName = \"userTable\";\n    protected $_primaryKey = \"id\";\n    public function getUserByFirstName($name)\n    {\n        $result = $this->fetch($name, 'firstName');\n        return $result;\n    }\n}\n\n/**\n*该对象的使用者不会知道实际使用的表结构和数据库引擎\n*/\n\ndefine('DB_USER','user'); \ndefine('DB_PASS','pass');\ndefine('DB_HOST','localhost');\ndefine('DB_DATABASE','test');\n\n$user = new userDAO();\n$id = 1;\n$userInfo = $user->fetch($id);\n$updates = array('id'=>1, 'firstName'=>'arlon');\n$user->update($updates);\n$all = $user->getUserByFirstName('arlon');\n\nphp?>\n\n{% endcodeblock %}","source":"_posts/php设计模式-数据访问对象模式.md","raw":"---\ntitle: php设计模式-数据访问对象模式\ndate: 2016-09-06 22:27:10\ntags:\n---\n 数据访问对象模式, 描述了如何创建提供透明访问任何对象源的对象。\n 采用这种设计模式,数据库连接的初始化，数据库选择，数据获取等操作。这种对数据的访问的操作的封装就是数据访问对象模式。\n 其实数据访问对象模式除了用在数据库访问上。还可以用在很多地方，例如：我们要建立一个文件缓存系统，就涉及到缓存的创建，读取，更新等操作，我们也可以把这些操作抽象出来，方便操作，而且不用重复书写代码大量代码，有时候也能起到让调用者无需关心实现细节的目的\n\n 解决问题：如何创建透明访问任何数据源的对象(重复和数据源抽象化)\n\n\n{% codeblock %}\n\n\n<?php\n\n/**\n*这是一个抽象类，为了能够使用该类必须扩展该类。因为很可能会同时打开多个数据库连接，所以在数据访问对象类中存储内部的数据库连接并且每个查询都进行引用是十分重要的。这个数据访问对象类应\n*当唯一地引用自其自己的连接。通常，在更多可拓展的模型中，接口被创建用于共享连接。\n*/\n\nabstract class baseDAO\n{\n    private $__connection;\n    public function __construct()\n    {\n        $this->__connectToDB(DB_USER, DB_PASS, DB_HOST, DB_DATABASE);\n    }\n    private function __connectToDB($user, $pass, $host, $database)\n    {\n        $this->__connection = mysqli::_connect($host, $user, $pass, $database);\n    }\n    public function fetch($value, $key = NULL)\n    {\n        if(is_null($key))\n        {\n            $key = $this->_primaryKey;\n        }\n        $sql = \"select * from {$this->_tableName} where {$key}='{$value}'\";\n        $results = mysqli_query($sql, $this->__connection);\n        $rows = array();\n        while ($result = mysqli_fetch_array($results))\n        {\n            $rows[] = $result;\n        }\n        return $rows;\n    }\n    public function update($keyedArray)\n    {\n        $sql = \"update {$this->_tableName} set \";\n        foreach ($keyedArray as $column=>$value)\n        {\n            $updates[] = \"{$column} = '{$value}' \";\n        }\n        $sql .= implode(\",\",$updates);\n        $sql .= \"where {$this->_primaryKey}='{$keyedArray[$this->_primaryKey]}'\";\n        mysqli:_query($sql, $this->__connection);\n    }\n}\n\n/**\n* 具体实现子类\n*/\nclass userDAO extends baseDAO\n{\n    protected $_tableName = \"userTable\";\n    protected $_primaryKey = \"id\";\n    public function getUserByFirstName($name)\n    {\n        $result = $this->fetch($name, 'firstName');\n        return $result;\n    }\n}\n\n/**\n*该对象的使用者不会知道实际使用的表结构和数据库引擎\n*/\n\ndefine('DB_USER','user'); \ndefine('DB_PASS','pass');\ndefine('DB_HOST','localhost');\ndefine('DB_DATABASE','test');\n\n$user = new userDAO();\n$id = 1;\n$userInfo = $user->fetch($id);\n$updates = array('id'=>1, 'firstName'=>'arlon');\n$user->update($updates);\n$all = $user->getUserByFirstName('arlon');\n\nphp?>\n\n{% endcodeblock %}","slug":"php设计模式-数据访问对象模式","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeien90017znz4o61mwgu1","content":"<p> 数据访问对象模式, 描述了如何创建提供透明访问任何对象源的对象。<br> 采用这种设计模式,数据库连接的初始化，数据库选择，数据获取等操作。这种对数据的访问的操作的封装就是数据访问对象模式。<br> 其实数据访问对象模式除了用在数据库访问上。还可以用在很多地方，例如：我们要建立一个文件缓存系统，就涉及到缓存的创建，读取，更新等操作，我们也可以把这些操作抽象出来，方便操作，而且不用重复书写代码大量代码，有时候也能起到让调用者无需关心实现细节的目的</p>\n<p> 解决问题：如何创建透明访问任何数据源的对象(重复和数据源抽象化)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">*这是一个抽象类，为了能够使用该类必须扩展该类。因为很可能会同时打开多个数据库连接，所以在数据访问对象类中存储内部的数据库连接并且每个查询都进行引用是十分重要的。这个数据访问对象类应</div><div class=\"line\">*当唯一地引用自其自己的连接。通常，在更多可拓展的模型中，接口被创建用于共享连接。</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">abstract class baseDAO</div><div class=\"line\">&#123;</div><div class=\"line\">    private $__connection;</div><div class=\"line\">    public function __construct()</div><div class=\"line\">    &#123;</div><div class=\"line\">        $this-&gt;__connectToDB(DB_USER, DB_PASS, DB_HOST, DB_DATABASE);</div><div class=\"line\">    &#125;</div><div class=\"line\">    private function __connectToDB($user, $pass, $host, $database)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $this-&gt;__connection = mysqli::_connect($host, $user, $pass, $database);</div><div class=\"line\">    &#125;</div><div class=\"line\">    public function fetch($value, $key = NULL)</div><div class=\"line\">    &#123;</div><div class=\"line\">        if(is_null($key))</div><div class=\"line\">        &#123;</div><div class=\"line\">            $key = $this-&gt;_primaryKey;</div><div class=\"line\">        &#125;</div><div class=\"line\">        $sql = &quot;select * from &#123;$this-&gt;_tableName&#125; where &#123;$key&#125;=&apos;&#123;$value&#125;&apos;&quot;;</div><div class=\"line\">        $results = mysqli_query($sql, $this-&gt;__connection);</div><div class=\"line\">        $rows = array();</div><div class=\"line\">        while ($result = mysqli_fetch_array($results))</div><div class=\"line\">        &#123;</div><div class=\"line\">            $rows[] = $result;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return $rows;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public function update($keyedArray)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $sql = &quot;update &#123;$this-&gt;_tableName&#125; set &quot;;</div><div class=\"line\">        foreach ($keyedArray as $column=&gt;$value)</div><div class=\"line\">        &#123;</div><div class=\"line\">            $updates[] = &quot;&#123;$column&#125; = &apos;&#123;$value&#125;&apos; &quot;;</div><div class=\"line\">        &#125;</div><div class=\"line\">        $sql .= implode(&quot;,&quot;,$updates);</div><div class=\"line\">        $sql .= &quot;where &#123;$this-&gt;_primaryKey&#125;=&apos;&#123;$keyedArray[$this-&gt;_primaryKey]&#125;&apos;&quot;;</div><div class=\"line\">        mysqli:_query($sql, $this-&gt;__connection);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">* 具体实现子类</div><div class=\"line\">*/</div><div class=\"line\">class userDAO extends baseDAO</div><div class=\"line\">&#123;</div><div class=\"line\">    protected $_tableName = &quot;userTable&quot;;</div><div class=\"line\">    protected $_primaryKey = &quot;id&quot;;</div><div class=\"line\">    public function getUserByFirstName($name)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $result = $this-&gt;fetch($name, &apos;firstName&apos;);</div><div class=\"line\">        return $result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">*该对象的使用者不会知道实际使用的表结构和数据库引擎</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">define(&apos;DB_USER&apos;,&apos;user&apos;); </div><div class=\"line\">define(&apos;DB_PASS&apos;,&apos;pass&apos;);</div><div class=\"line\">define(&apos;DB_HOST&apos;,&apos;localhost&apos;);</div><div class=\"line\">define(&apos;DB_DATABASE&apos;,&apos;test&apos;);</div><div class=\"line\"></div><div class=\"line\">$user = new userDAO();</div><div class=\"line\">$id = 1;</div><div class=\"line\">$userInfo = $user-&gt;fetch($id);</div><div class=\"line\">$updates = array(&apos;id&apos;=&gt;1, &apos;firstName&apos;=&gt;&apos;arlon&apos;);</div><div class=\"line\">$user-&gt;update($updates);</div><div class=\"line\">$all = $user-&gt;getUserByFirstName(&apos;arlon&apos;);</div><div class=\"line\"></div><div class=\"line\">php?&gt;</div><div class=\"line\"></div></pre></td></tr></table></figure>","excerpt":"","more":"<p> 数据访问对象模式, 描述了如何创建提供透明访问任何对象源的对象。<br> 采用这种设计模式,数据库连接的初始化，数据库选择，数据获取等操作。这种对数据的访问的操作的封装就是数据访问对象模式。<br> 其实数据访问对象模式除了用在数据库访问上。还可以用在很多地方，例如：我们要建立一个文件缓存系统，就涉及到缓存的创建，读取，更新等操作，我们也可以把这些操作抽象出来，方便操作，而且不用重复书写代码大量代码，有时候也能起到让调用者无需关心实现细节的目的</p>\n<p> 解决问题：如何创建透明访问任何数据源的对象(重复和数据源抽象化)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">*这是一个抽象类，为了能够使用该类必须扩展该类。因为很可能会同时打开多个数据库连接，所以在数据访问对象类中存储内部的数据库连接并且每个查询都进行引用是十分重要的。这个数据访问对象类应</div><div class=\"line\">*当唯一地引用自其自己的连接。通常，在更多可拓展的模型中，接口被创建用于共享连接。</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">abstract class baseDAO</div><div class=\"line\">&#123;</div><div class=\"line\">    private $__connection;</div><div class=\"line\">    public function __construct()</div><div class=\"line\">    &#123;</div><div class=\"line\">        $this-&gt;__connectToDB(DB_USER, DB_PASS, DB_HOST, DB_DATABASE);</div><div class=\"line\">    &#125;</div><div class=\"line\">    private function __connectToDB($user, $pass, $host, $database)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $this-&gt;__connection = mysqli::_connect($host, $user, $pass, $database);</div><div class=\"line\">    &#125;</div><div class=\"line\">    public function fetch($value, $key = NULL)</div><div class=\"line\">    &#123;</div><div class=\"line\">        if(is_null($key))</div><div class=\"line\">        &#123;</div><div class=\"line\">            $key = $this-&gt;_primaryKey;</div><div class=\"line\">        &#125;</div><div class=\"line\">        $sql = &quot;select * from &#123;$this-&gt;_tableName&#125; where &#123;$key&#125;=&apos;&#123;$value&#125;&apos;&quot;;</div><div class=\"line\">        $results = mysqli_query($sql, $this-&gt;__connection);</div><div class=\"line\">        $rows = array();</div><div class=\"line\">        while ($result = mysqli_fetch_array($results))</div><div class=\"line\">        &#123;</div><div class=\"line\">            $rows[] = $result;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return $rows;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public function update($keyedArray)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $sql = &quot;update &#123;$this-&gt;_tableName&#125; set &quot;;</div><div class=\"line\">        foreach ($keyedArray as $column=&gt;$value)</div><div class=\"line\">        &#123;</div><div class=\"line\">            $updates[] = &quot;&#123;$column&#125; = &apos;&#123;$value&#125;&apos; &quot;;</div><div class=\"line\">        &#125;</div><div class=\"line\">        $sql .= implode(&quot;,&quot;,$updates);</div><div class=\"line\">        $sql .= &quot;where &#123;$this-&gt;_primaryKey&#125;=&apos;&#123;$keyedArray[$this-&gt;_primaryKey]&#125;&apos;&quot;;</div><div class=\"line\">        mysqli:_query($sql, $this-&gt;__connection);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">* 具体实现子类</div><div class=\"line\">*/</div><div class=\"line\">class userDAO extends baseDAO</div><div class=\"line\">&#123;</div><div class=\"line\">    protected $_tableName = &quot;userTable&quot;;</div><div class=\"line\">    protected $_primaryKey = &quot;id&quot;;</div><div class=\"line\">    public function getUserByFirstName($name)</div><div class=\"line\">    &#123;</div><div class=\"line\">        $result = $this-&gt;fetch($name, &apos;firstName&apos;);</div><div class=\"line\">        return $result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">*该对象的使用者不会知道实际使用的表结构和数据库引擎</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">define(&apos;DB_USER&apos;,&apos;user&apos;); </div><div class=\"line\">define(&apos;DB_PASS&apos;,&apos;pass&apos;);</div><div class=\"line\">define(&apos;DB_HOST&apos;,&apos;localhost&apos;);</div><div class=\"line\">define(&apos;DB_DATABASE&apos;,&apos;test&apos;);</div><div class=\"line\"></div><div class=\"line\">$user = new userDAO();</div><div class=\"line\">$id = 1;</div><div class=\"line\">$userInfo = $user-&gt;fetch($id);</div><div class=\"line\">$updates = array(&apos;id&apos;=&gt;1, &apos;firstName&apos;=&gt;&apos;arlon&apos;);</div><div class=\"line\">$user-&gt;update($updates);</div><div class=\"line\">$all = $user-&gt;getUserByFirstName(&apos;arlon&apos;);</div><div class=\"line\"></div><div class=\"line\">php?&gt;</div><div class=\"line\"></div></pre></td></tr></table></figure>"},{"title":"php设计模式-适配器","date":"2016-09-06T07:33:10.000Z","_content":" 适配器模式（Adapter Pattern）, 主要使用适配器来更新接口,而不需要去改动公共接口的标准。把一个类的接口变换成客户端所期待的另一种接口， 使原本因接口不匹或者不兼容,而无法在一起工作的两个类能够在一起工作。又称为转换器模式、变压器模式、包装（Wrapper）器模式,\n 在转换一个对象的接口用于另一个对象时，实现Adapter对象不仅是最佳做法，而且也能减少很多麻烦,适配器模式利用继承或组件来进行模式设计。\n相比继承，组件可用性高，低耦合，冗余度低，因此推荐采用组件的模式来进行设计\n\n\n适用条件:\n\n当你的实现和需要的接口，都无法修改的时候。\n例如，你需要给甲方已有的系统做标准的兼容，标准不可修改，甲方的系统也不可修改，这个时候你就需要适配器的设计模式了。\n对于web编程来说，将你现有的实现，和三方库结合起来，就需要使用适配器模式。\n\n\n\n组成:\nTarget(目标)：— 定义Client使用的与特定领域相关的接口。\nClient(客户端)：与符合Target接口的对象协同。\nAdaptee(被适配者)：定义一个已经存在并已经使用的接口，这个接口需要适配。\nAdapte(适配器) ：适配器模式的核心。它将对被适配Adaptee角色已有的接口转换为目标角色Target匹配的接口。对Adaptee的接口与Target接口进行适配\n\n适配器模式在不修改现有代码的基础上，保留了架构。使用继承的适配器和使用组件的适配器各有利弊，继承的类冗余度/空间复杂度偏高，组件的调用栈/时间复杂度偏高，应该结合实际情况选择。\n\n\n实现:\n\n假设我们有两个类,但我们不能够修改这两个类实现\n\n{% codeblock %}\n<?php\n//adpatee\nclass AdapteeOne {\n  protected $name;\n  public function __construct() {\n    $this->name = \"One\";\n  }\n  public function doOne() {\n    echo \"{$this->name} eat fish.\\n\";\n  }\n}\n\nclass AdapteeOne {\n  protected $name;\n  public function __construct() {\n    $this->name = \"Two\";\n  }\n  public function doTwo() {\n    echo \"{$this->name} eat moss.\\n\";\n  }\n}\n?>\n{% endcodeblock %}\n\n我们现在有个需要，实现一个do接口,需要使用adapteeOne的doOne方法来实现 ||adapteeTwo的doTwo方法\n{% codeblock %}\n<?php\n//traget\ninterface Target {\n  function do();\n}\n?>\n{% endcodeblock %}\n\n但是我们不能修改AdapteeOne和AdapteeTwo类，这里就需要使用适配器了，创建两个适配器：\n\n1.使用继承的适配器模式\n\n{% codeblock %}\n<?php\n//adapter\nclass OneAdapter extends AdapteeOne implements Target {\n  public function __construct() {\n    $this->name = \"One\";\n  }\n  public function do() {\n    $this->doOne();\n  }\n}\n\nclass TwoAdapter extends AdapteeTwo implements Target {\n  public function __construct() {\n    $this->name = \"Two\";\n  }\n  public function do() {\n    $this->doTwo();\n  }\n}\n?>\n{% endcodeblock %}\n\n然后是调用代码：\n{% codeblock %}\n\n<?php\n//client\n$oneAdapter = new OneAdapter();\n$oneAdapter->do();\n\n$twoAdapter = new TwoAdapter();\n$twoAdapter->do();\n\n?>\n{% endcodeblock %}\n\n\n2.使用组件的适配器模式\n{% codeblock %}\n<?php\n//adapter\nclass OneAdapter  implements Target {\n  protected $obj;\n  public function __construct() {\n    $this->obj = new AdapteeOne();\n  }\n  public function do() {\n    $this->obj->doOne();\n  }\n}\n\nclass TwoAdapter implements Target {\n  protected $obj;\n  public function __construct() {\n    $this->obj = new AdapteeTwo;\n  }\n  public function do() {\n    $this->obj->doTwo();\n  }\n}\n?>\n{% endcodeblock %}\n\n然后是调用代码：\n{% codeblock %}\n<?php\n//client\n$oneAdapter = new OneAdapter();\n$oneAdapter->do();\n\n$twoAdapter = new TwoAdapter();\n$twoAdapter->do();\n\n?>\n{% endcodeblock %}\n\n\n\n\n\n\n","source":"_posts/php设计模式-适配器.md","raw":"---\ntitle: php设计模式-适配器\ndate: 2016-09-06 15:33:10\ntags:\n---\n 适配器模式（Adapter Pattern）, 主要使用适配器来更新接口,而不需要去改动公共接口的标准。把一个类的接口变换成客户端所期待的另一种接口， 使原本因接口不匹或者不兼容,而无法在一起工作的两个类能够在一起工作。又称为转换器模式、变压器模式、包装（Wrapper）器模式,\n 在转换一个对象的接口用于另一个对象时，实现Adapter对象不仅是最佳做法，而且也能减少很多麻烦,适配器模式利用继承或组件来进行模式设计。\n相比继承，组件可用性高，低耦合，冗余度低，因此推荐采用组件的模式来进行设计\n\n\n适用条件:\n\n当你的实现和需要的接口，都无法修改的时候。\n例如，你需要给甲方已有的系统做标准的兼容，标准不可修改，甲方的系统也不可修改，这个时候你就需要适配器的设计模式了。\n对于web编程来说，将你现有的实现，和三方库结合起来，就需要使用适配器模式。\n\n\n\n组成:\nTarget(目标)：— 定义Client使用的与特定领域相关的接口。\nClient(客户端)：与符合Target接口的对象协同。\nAdaptee(被适配者)：定义一个已经存在并已经使用的接口，这个接口需要适配。\nAdapte(适配器) ：适配器模式的核心。它将对被适配Adaptee角色已有的接口转换为目标角色Target匹配的接口。对Adaptee的接口与Target接口进行适配\n\n适配器模式在不修改现有代码的基础上，保留了架构。使用继承的适配器和使用组件的适配器各有利弊，继承的类冗余度/空间复杂度偏高，组件的调用栈/时间复杂度偏高，应该结合实际情况选择。\n\n\n实现:\n\n假设我们有两个类,但我们不能够修改这两个类实现\n\n{% codeblock %}\n<?php\n//adpatee\nclass AdapteeOne {\n  protected $name;\n  public function __construct() {\n    $this->name = \"One\";\n  }\n  public function doOne() {\n    echo \"{$this->name} eat fish.\\n\";\n  }\n}\n\nclass AdapteeOne {\n  protected $name;\n  public function __construct() {\n    $this->name = \"Two\";\n  }\n  public function doTwo() {\n    echo \"{$this->name} eat moss.\\n\";\n  }\n}\n?>\n{% endcodeblock %}\n\n我们现在有个需要，实现一个do接口,需要使用adapteeOne的doOne方法来实现 ||adapteeTwo的doTwo方法\n{% codeblock %}\n<?php\n//traget\ninterface Target {\n  function do();\n}\n?>\n{% endcodeblock %}\n\n但是我们不能修改AdapteeOne和AdapteeTwo类，这里就需要使用适配器了，创建两个适配器：\n\n1.使用继承的适配器模式\n\n{% codeblock %}\n<?php\n//adapter\nclass OneAdapter extends AdapteeOne implements Target {\n  public function __construct() {\n    $this->name = \"One\";\n  }\n  public function do() {\n    $this->doOne();\n  }\n}\n\nclass TwoAdapter extends AdapteeTwo implements Target {\n  public function __construct() {\n    $this->name = \"Two\";\n  }\n  public function do() {\n    $this->doTwo();\n  }\n}\n?>\n{% endcodeblock %}\n\n然后是调用代码：\n{% codeblock %}\n\n<?php\n//client\n$oneAdapter = new OneAdapter();\n$oneAdapter->do();\n\n$twoAdapter = new TwoAdapter();\n$twoAdapter->do();\n\n?>\n{% endcodeblock %}\n\n\n2.使用组件的适配器模式\n{% codeblock %}\n<?php\n//adapter\nclass OneAdapter  implements Target {\n  protected $obj;\n  public function __construct() {\n    $this->obj = new AdapteeOne();\n  }\n  public function do() {\n    $this->obj->doOne();\n  }\n}\n\nclass TwoAdapter implements Target {\n  protected $obj;\n  public function __construct() {\n    $this->obj = new AdapteeTwo;\n  }\n  public function do() {\n    $this->obj->doTwo();\n  }\n}\n?>\n{% endcodeblock %}\n\n然后是调用代码：\n{% codeblock %}\n<?php\n//client\n$oneAdapter = new OneAdapter();\n$oneAdapter->do();\n\n$twoAdapter = new TwoAdapter();\n$twoAdapter->do();\n\n?>\n{% endcodeblock %}\n\n\n\n\n\n\n","slug":"php设计模式-适配器","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeienc0019znz4rb98vwda","content":"<p> 适配器模式（Adapter Pattern）, 主要使用适配器来更新接口,而不需要去改动公共接口的标准。把一个类的接口变换成客户端所期待的另一种接口， 使原本因接口不匹或者不兼容,而无法在一起工作的两个类能够在一起工作。又称为转换器模式、变压器模式、包装（Wrapper）器模式,<br> 在转换一个对象的接口用于另一个对象时，实现Adapter对象不仅是最佳做法，而且也能减少很多麻烦,适配器模式利用继承或组件来进行模式设计。<br>相比继承，组件可用性高，低耦合，冗余度低，因此推荐采用组件的模式来进行设计</p>\n<p>适用条件:</p>\n<p>当你的实现和需要的接口，都无法修改的时候。<br>例如，你需要给甲方已有的系统做标准的兼容，标准不可修改，甲方的系统也不可修改，这个时候你就需要适配器的设计模式了。<br>对于web编程来说，将你现有的实现，和三方库结合起来，就需要使用适配器模式。</p>\n<p>组成:<br>Target(目标)：— 定义Client使用的与特定领域相关的接口。<br>Client(客户端)：与符合Target接口的对象协同。<br>Adaptee(被适配者)：定义一个已经存在并已经使用的接口，这个接口需要适配。<br>Adapte(适配器) ：适配器模式的核心。它将对被适配Adaptee角色已有的接口转换为目标角色Target匹配的接口。对Adaptee的接口与Target接口进行适配</p>\n<p>适配器模式在不修改现有代码的基础上，保留了架构。使用继承的适配器和使用组件的适配器各有利弊，继承的类冗余度/空间复杂度偏高，组件的调用栈/时间复杂度偏高，应该结合实际情况选择。</p>\n<p>实现:</p>\n<p>假设我们有两个类,但我们不能够修改这两个类实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">//adpatee</div><div class=\"line\">class AdapteeOne &#123;</div><div class=\"line\">  protected $name;</div><div class=\"line\">  public function __construct() &#123;</div><div class=\"line\">    $this-&gt;name = &quot;One&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  public function doOne() &#123;</div><div class=\"line\">    echo &quot;&#123;$this-&gt;name&#125; eat fish.\\n&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class AdapteeOne &#123;</div><div class=\"line\">  protected $name;</div><div class=\"line\">  public function __construct() &#123;</div><div class=\"line\">    $this-&gt;name = &quot;Two&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  public function doTwo() &#123;</div><div class=\"line\">    echo &quot;&#123;$this-&gt;name&#125; eat moss.\\n&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure>\n<p>我们现在有个需要，实现一个do接口,需要使用adapteeOne的doOne方法来实现 ||adapteeTwo的doTwo方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">//traget</div><div class=\"line\">interface Target &#123;</div><div class=\"line\">  function do();</div><div class=\"line\">&#125;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p>但是我们不能修改AdapteeOne和AdapteeTwo类，这里就需要使用适配器了，创建两个适配器：</p>\n<p>1.使用继承的适配器模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">//adapter</div><div class=\"line\">class OneAdapter extends AdapteeOne implements Target &#123;</div><div class=\"line\">  public function __construct() &#123;</div><div class=\"line\">    $this-&gt;name = &quot;One&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  public function do() &#123;</div><div class=\"line\">    $this-&gt;doOne();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class TwoAdapter extends AdapteeTwo implements Target &#123;</div><div class=\"line\">  public function __construct() &#123;</div><div class=\"line\">    $this-&gt;name = &quot;Two&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  public function do() &#123;</div><div class=\"line\">    $this-&gt;doTwo();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure>\n<p>然后是调用代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;?php</div><div class=\"line\">//client</div><div class=\"line\">$oneAdapter = new OneAdapter();</div><div class=\"line\">$oneAdapter-&gt;do();</div><div class=\"line\"></div><div class=\"line\">$twoAdapter = new TwoAdapter();</div><div class=\"line\">$twoAdapter-&gt;do();</div><div class=\"line\"></div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p>2.使用组件的适配器模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">//adapter</div><div class=\"line\">class OneAdapter  implements Target &#123;</div><div class=\"line\">  protected $obj;</div><div class=\"line\">  public function __construct() &#123;</div><div class=\"line\">    $this-&gt;obj = new AdapteeOne();</div><div class=\"line\">  &#125;</div><div class=\"line\">  public function do() &#123;</div><div class=\"line\">    $this-&gt;obj-&gt;doOne();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class TwoAdapter implements Target &#123;</div><div class=\"line\">  protected $obj;</div><div class=\"line\">  public function __construct() &#123;</div><div class=\"line\">    $this-&gt;obj = new AdapteeTwo;</div><div class=\"line\">  &#125;</div><div class=\"line\">  public function do() &#123;</div><div class=\"line\">    $this-&gt;obj-&gt;doTwo();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p>然后是调用代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">//client</div><div class=\"line\">$oneAdapter = new OneAdapter();</div><div class=\"line\">$oneAdapter-&gt;do();</div><div class=\"line\"></div><div class=\"line\">$twoAdapter = new TwoAdapter();</div><div class=\"line\">$twoAdapter-&gt;do();</div><div class=\"line\"></div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p> 适配器模式（Adapter Pattern）, 主要使用适配器来更新接口,而不需要去改动公共接口的标准。把一个类的接口变换成客户端所期待的另一种接口， 使原本因接口不匹或者不兼容,而无法在一起工作的两个类能够在一起工作。又称为转换器模式、变压器模式、包装（Wrapper）器模式,<br> 在转换一个对象的接口用于另一个对象时，实现Adapter对象不仅是最佳做法，而且也能减少很多麻烦,适配器模式利用继承或组件来进行模式设计。<br>相比继承，组件可用性高，低耦合，冗余度低，因此推荐采用组件的模式来进行设计</p>\n<p>适用条件:</p>\n<p>当你的实现和需要的接口，都无法修改的时候。<br>例如，你需要给甲方已有的系统做标准的兼容，标准不可修改，甲方的系统也不可修改，这个时候你就需要适配器的设计模式了。<br>对于web编程来说，将你现有的实现，和三方库结合起来，就需要使用适配器模式。</p>\n<p>组成:<br>Target(目标)：— 定义Client使用的与特定领域相关的接口。<br>Client(客户端)：与符合Target接口的对象协同。<br>Adaptee(被适配者)：定义一个已经存在并已经使用的接口，这个接口需要适配。<br>Adapte(适配器) ：适配器模式的核心。它将对被适配Adaptee角色已有的接口转换为目标角色Target匹配的接口。对Adaptee的接口与Target接口进行适配</p>\n<p>适配器模式在不修改现有代码的基础上，保留了架构。使用继承的适配器和使用组件的适配器各有利弊，继承的类冗余度/空间复杂度偏高，组件的调用栈/时间复杂度偏高，应该结合实际情况选择。</p>\n<p>实现:</p>\n<p>假设我们有两个类,但我们不能够修改这两个类实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">//adpatee</div><div class=\"line\">class AdapteeOne &#123;</div><div class=\"line\">  protected $name;</div><div class=\"line\">  public function __construct() &#123;</div><div class=\"line\">    $this-&gt;name = &quot;One&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  public function doOne() &#123;</div><div class=\"line\">    echo &quot;&#123;$this-&gt;name&#125; eat fish.\\n&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class AdapteeOne &#123;</div><div class=\"line\">  protected $name;</div><div class=\"line\">  public function __construct() &#123;</div><div class=\"line\">    $this-&gt;name = &quot;Two&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  public function doTwo() &#123;</div><div class=\"line\">    echo &quot;&#123;$this-&gt;name&#125; eat moss.\\n&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure>\n<p>我们现在有个需要，实现一个do接口,需要使用adapteeOne的doOne方法来实现 ||adapteeTwo的doTwo方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">//traget</div><div class=\"line\">interface Target &#123;</div><div class=\"line\">  function do();</div><div class=\"line\">&#125;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p>但是我们不能修改AdapteeOne和AdapteeTwo类，这里就需要使用适配器了，创建两个适配器：</p>\n<p>1.使用继承的适配器模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">//adapter</div><div class=\"line\">class OneAdapter extends AdapteeOne implements Target &#123;</div><div class=\"line\">  public function __construct() &#123;</div><div class=\"line\">    $this-&gt;name = &quot;One&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  public function do() &#123;</div><div class=\"line\">    $this-&gt;doOne();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class TwoAdapter extends AdapteeTwo implements Target &#123;</div><div class=\"line\">  public function __construct() &#123;</div><div class=\"line\">    $this-&gt;name = &quot;Two&quot;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  public function do() &#123;</div><div class=\"line\">    $this-&gt;doTwo();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure>\n<p>然后是调用代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;?php</div><div class=\"line\">//client</div><div class=\"line\">$oneAdapter = new OneAdapter();</div><div class=\"line\">$oneAdapter-&gt;do();</div><div class=\"line\"></div><div class=\"line\">$twoAdapter = new TwoAdapter();</div><div class=\"line\">$twoAdapter-&gt;do();</div><div class=\"line\"></div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p>2.使用组件的适配器模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">//adapter</div><div class=\"line\">class OneAdapter  implements Target &#123;</div><div class=\"line\">  protected $obj;</div><div class=\"line\">  public function __construct() &#123;</div><div class=\"line\">    $this-&gt;obj = new AdapteeOne();</div><div class=\"line\">  &#125;</div><div class=\"line\">  public function do() &#123;</div><div class=\"line\">    $this-&gt;obj-&gt;doOne();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class TwoAdapter implements Target &#123;</div><div class=\"line\">  protected $obj;</div><div class=\"line\">  public function __construct() &#123;</div><div class=\"line\">    $this-&gt;obj = new AdapteeTwo;</div><div class=\"line\">  &#125;</div><div class=\"line\">  public function do() &#123;</div><div class=\"line\">    $this-&gt;obj-&gt;doTwo();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p>然后是调用代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">//client</div><div class=\"line\">$oneAdapter = new OneAdapter();</div><div class=\"line\">$oneAdapter-&gt;do();</div><div class=\"line\"></div><div class=\"line\">$twoAdapter = new TwoAdapter();</div><div class=\"line\">$twoAdapter-&gt;do();</div><div class=\"line\"></div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n"},{"title":"php设计模式-装饰器","date":"2016-09-06T14:51:31.000Z","_content":"\n装饰器模式,动态地给一个对象添加一些额外的职责或者行为。在不必改变原类代码和使用继承的情况下，动态的扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。这比使用子类更加灵活.\n当用于一组子类时，装饰器模式更加有用。如果你拥有一族子类，你需要在与子类独立使用情况下添加额外的特性，你可以使用装饰器模式，以避免代码重复和具体子类数量的增加\n\n解决问题: \n\n不必重写任何已有的功能性代码，而是对某个基于对象应用增量变化。在主代码流中应该能够直接插入一个或多个更改或“装饰”目标对象的装饰器，同时不影响其他代码流。\n\n\n组成:\n\n抽象组件：定义一个对象接口，以规范准备接受附加责任的对象，即可以给这些对象动态地添加职责,可忽略.\n\n具体组件 :被装饰者，定义一个将要被装饰增加功能的类。可以给这个类的对象添加一些职责\n\n抽象装饰器:维持一个指向构件组件抽象的实例，并定义一个与抽象组件接口一致的接口,可忽略\n\n具体装饰器角色:向组件添加职责\n\n实现:\n{% codeblock %}\n\n<?php   \n  \n/** \n * 抽象组件\n */  \nclass widget {  \n    function paint() {  \n        return $this->_asHtml();  \n    }  \n}  \n  \n/** \n *  \n * 具体组件 ,testinput对象  \n */  \nclass TextInput extends widget {  \n  \n    protected $_name;  \n    protected $_value;  \n  \n    function TextInput($name, $value='') {  \n        $this->_name = $name;  \n        $this->_value = $value;  \n    }  \n  \n    function _asHtml() {  \n        return '<input type=\"text\" name=\"'.$this->_name.'\" value=\"'.$this->_value.'\">';  \n  \n    }  \n  \n}  \n\n/**\n* 如果我们要在input前面加上提示文字,lable ,这样子,都要加,那就要好多个子类了\n* 那是不是都要继承widget类,然后实现其具体标签的类,那会产生大量的子类,而已每个子类只是做些小改变而已\n* 这种情况就要使用到装饰器的设计模式\n*/\n\n/** \n * 抽象装饰器（Decorator)\n *  \n */  \nclass LableWidgetDecorator {  \n  \n    protected $_widget;  \n    function __construct( &$widget) {  \n        $this->_widget = $widget;  \n    }  \n    function paint() {  \n        return $this->_widget->paint();  \n    }  \n  \n}\n\n\n/** \n * 具体装饰器角色: \n * 为建立一个标签,需要传入其的内容，以及原始的组件 \n * 也需要重写paint（）方法 \n * \n */  \n  \n  \nclass LableDecorator extends LableWidgetDecorator {  \n  \n    protected $_label;  \n  \n    function __construct($label, &$widget) {  \n        $this->_label = $label;  \n        parent::__construct($widget);  \n    }  \n  \n    function paint() {  \n        return '<b>'.$this->_label.':</b> '.$this->_widget->paint();  \n    }  \n  \n}  \n  \n  \n/** \n * 使用\n */  \n\n$label =  new LableDecorator('姓名', new TextInput('name', '');\necho $lable->paint(); \t\n\n$label =  new LableDecorator('昵称', new TextInput('nickname', '');  \necho $lable->paint(); \t\n\n$label =  new LableDecorator('年龄', new TextInput('age', '');  \necho $lable->paint(); \t\n\n?>  \n{% endcodeblock %}\n\n总结:\n\n1）使用装饰器设计模式设计类的目标是：\n 不必重写任何已有的功能性代码，而是对某个基于对象应用增量变化。 \n\n2)\n 装饰器设计模式采用这样的构建方式： 在主代码流中应该能够直接插入一个或多个更改或“装饰”目标对象的装饰器，同时不影响其他代码流。\n\n3)\n 装饰器模式采用对象组合而非继承的手法，实现了在运行时动态的扩展对象功能的能力，\n 而且可以根据需要扩展多个功能，避免了单独使用继承带来的“灵活性差”和“多子类衍生问题”。\n 同时它很好地符合面向对象设计原则中“优先使用对象组合而非继承”和“开放-封闭”原则。\n\n","source":"_posts/php设计模式-装饰器.md","raw":"---\ntitle: php设计模式-装饰器\ndate: 2016-09-06 22:51:31\ntags:\n---\n\n装饰器模式,动态地给一个对象添加一些额外的职责或者行为。在不必改变原类代码和使用继承的情况下，动态的扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。这比使用子类更加灵活.\n当用于一组子类时，装饰器模式更加有用。如果你拥有一族子类，你需要在与子类独立使用情况下添加额外的特性，你可以使用装饰器模式，以避免代码重复和具体子类数量的增加\n\n解决问题: \n\n不必重写任何已有的功能性代码，而是对某个基于对象应用增量变化。在主代码流中应该能够直接插入一个或多个更改或“装饰”目标对象的装饰器，同时不影响其他代码流。\n\n\n组成:\n\n抽象组件：定义一个对象接口，以规范准备接受附加责任的对象，即可以给这些对象动态地添加职责,可忽略.\n\n具体组件 :被装饰者，定义一个将要被装饰增加功能的类。可以给这个类的对象添加一些职责\n\n抽象装饰器:维持一个指向构件组件抽象的实例，并定义一个与抽象组件接口一致的接口,可忽略\n\n具体装饰器角色:向组件添加职责\n\n实现:\n{% codeblock %}\n\n<?php   \n  \n/** \n * 抽象组件\n */  \nclass widget {  \n    function paint() {  \n        return $this->_asHtml();  \n    }  \n}  \n  \n/** \n *  \n * 具体组件 ,testinput对象  \n */  \nclass TextInput extends widget {  \n  \n    protected $_name;  \n    protected $_value;  \n  \n    function TextInput($name, $value='') {  \n        $this->_name = $name;  \n        $this->_value = $value;  \n    }  \n  \n    function _asHtml() {  \n        return '<input type=\"text\" name=\"'.$this->_name.'\" value=\"'.$this->_value.'\">';  \n  \n    }  \n  \n}  \n\n/**\n* 如果我们要在input前面加上提示文字,lable ,这样子,都要加,那就要好多个子类了\n* 那是不是都要继承widget类,然后实现其具体标签的类,那会产生大量的子类,而已每个子类只是做些小改变而已\n* 这种情况就要使用到装饰器的设计模式\n*/\n\n/** \n * 抽象装饰器（Decorator)\n *  \n */  \nclass LableWidgetDecorator {  \n  \n    protected $_widget;  \n    function __construct( &$widget) {  \n        $this->_widget = $widget;  \n    }  \n    function paint() {  \n        return $this->_widget->paint();  \n    }  \n  \n}\n\n\n/** \n * 具体装饰器角色: \n * 为建立一个标签,需要传入其的内容，以及原始的组件 \n * 也需要重写paint（）方法 \n * \n */  \n  \n  \nclass LableDecorator extends LableWidgetDecorator {  \n  \n    protected $_label;  \n  \n    function __construct($label, &$widget) {  \n        $this->_label = $label;  \n        parent::__construct($widget);  \n    }  \n  \n    function paint() {  \n        return '<b>'.$this->_label.':</b> '.$this->_widget->paint();  \n    }  \n  \n}  \n  \n  \n/** \n * 使用\n */  \n\n$label =  new LableDecorator('姓名', new TextInput('name', '');\necho $lable->paint(); \t\n\n$label =  new LableDecorator('昵称', new TextInput('nickname', '');  \necho $lable->paint(); \t\n\n$label =  new LableDecorator('年龄', new TextInput('age', '');  \necho $lable->paint(); \t\n\n?>  \n{% endcodeblock %}\n\n总结:\n\n1）使用装饰器设计模式设计类的目标是：\n 不必重写任何已有的功能性代码，而是对某个基于对象应用增量变化。 \n\n2)\n 装饰器设计模式采用这样的构建方式： 在主代码流中应该能够直接插入一个或多个更改或“装饰”目标对象的装饰器，同时不影响其他代码流。\n\n3)\n 装饰器模式采用对象组合而非继承的手法，实现了在运行时动态的扩展对象功能的能力，\n 而且可以根据需要扩展多个功能，避免了单独使用继承带来的“灵活性差”和“多子类衍生问题”。\n 同时它很好地符合面向对象设计原则中“优先使用对象组合而非继承”和“开放-封闭”原则。\n\n","slug":"php设计模式-装饰器","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeiend001cznz4bxcoituk","content":"<p>装饰器模式,动态地给一个对象添加一些额外的职责或者行为。在不必改变原类代码和使用继承的情况下，动态的扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。这比使用子类更加灵活.<br>当用于一组子类时，装饰器模式更加有用。如果你拥有一族子类，你需要在与子类独立使用情况下添加额外的特性，你可以使用装饰器模式，以避免代码重复和具体子类数量的增加</p>\n<p>解决问题: </p>\n<p>不必重写任何已有的功能性代码，而是对某个基于对象应用增量变化。在主代码流中应该能够直接插入一个或多个更改或“装饰”目标对象的装饰器，同时不影响其他代码流。</p>\n<p>组成:</p>\n<p>抽象组件：定义一个对象接口，以规范准备接受附加责任的对象，即可以给这些对象动态地添加职责,可忽略.</p>\n<p>具体组件 :被装饰者，定义一个将要被装饰增加功能的类。可以给这个类的对象添加一些职责</p>\n<p>抽象装饰器:维持一个指向构件组件抽象的实例，并定义一个与抽象组件接口一致的接口,可忽略</p>\n<p>具体装饰器角色:向组件添加职责</p>\n<p>实现:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;?php   </div><div class=\"line\">  </div><div class=\"line\">/** </div><div class=\"line\"> * 抽象组件</div><div class=\"line\"> */  </div><div class=\"line\">class widget &#123;  </div><div class=\"line\">    function paint() &#123;  </div><div class=\"line\">        return $this-&gt;_asHtml();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">/** </div><div class=\"line\"> *  </div><div class=\"line\"> * 具体组件 ,testinput对象  </div><div class=\"line\"> */  </div><div class=\"line\">class TextInput extends widget &#123;  </div><div class=\"line\">  </div><div class=\"line\">    protected $_name;  </div><div class=\"line\">    protected $_value;  </div><div class=\"line\">  </div><div class=\"line\">    function TextInput($name, $value=&apos;&apos;) &#123;  </div><div class=\"line\">        $this-&gt;_name = $name;  </div><div class=\"line\">        $this-&gt;_value = $value;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    function _asHtml() &#123;  </div><div class=\"line\">        return &apos;&lt;input type=&quot;text&quot; name=&quot;&apos;.$this-&gt;_name.&apos;&quot; value=&quot;&apos;.$this-&gt;_value.&apos;&quot;&gt;&apos;;  </div><div class=\"line\">  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">* 如果我们要在input前面加上提示文字,lable ,这样子,都要加,那就要好多个子类了</div><div class=\"line\">* 那是不是都要继承widget类,然后实现其具体标签的类,那会产生大量的子类,而已每个子类只是做些小改变而已</div><div class=\"line\">* 这种情况就要使用到装饰器的设计模式</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">/** </div><div class=\"line\"> * 抽象装饰器（Decorator)</div><div class=\"line\"> *  </div><div class=\"line\"> */  </div><div class=\"line\">class LableWidgetDecorator &#123;  </div><div class=\"line\">  </div><div class=\"line\">    protected $_widget;  </div><div class=\"line\">    function __construct( &amp;$widget) &#123;  </div><div class=\"line\">        $this-&gt;_widget = $widget;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    function paint() &#123;  </div><div class=\"line\">        return $this-&gt;_widget-&gt;paint();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/** </div><div class=\"line\"> * 具体装饰器角色: </div><div class=\"line\"> * 为建立一个标签,需要传入其的内容，以及原始的组件 </div><div class=\"line\"> * 也需要重写paint（）方法 </div><div class=\"line\"> * </div><div class=\"line\"> */  </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">class LableDecorator extends LableWidgetDecorator &#123;  </div><div class=\"line\">  </div><div class=\"line\">    protected $_label;  </div><div class=\"line\">  </div><div class=\"line\">    function __construct($label, &amp;$widget) &#123;  </div><div class=\"line\">        $this-&gt;_label = $label;  </div><div class=\"line\">        parent::__construct($widget);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    function paint() &#123;  </div><div class=\"line\">        return &apos;&lt;b&gt;&apos;.$this-&gt;_label.&apos;:&lt;/b&gt; &apos;.$this-&gt;_widget-&gt;paint();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">/** </div><div class=\"line\"> * 使用</div><div class=\"line\"> */  </div><div class=\"line\"></div><div class=\"line\">$label =  new LableDecorator(&apos;姓名&apos;, new TextInput(&apos;name&apos;, &apos;&apos;);</div><div class=\"line\">echo $lable-&gt;paint(); \t</div><div class=\"line\"></div><div class=\"line\">$label =  new LableDecorator(&apos;昵称&apos;, new TextInput(&apos;nickname&apos;, &apos;&apos;);  </div><div class=\"line\">echo $lable-&gt;paint(); \t</div><div class=\"line\"></div><div class=\"line\">$label =  new LableDecorator(&apos;年龄&apos;, new TextInput(&apos;age&apos;, &apos;&apos;);  </div><div class=\"line\">echo $lable-&gt;paint(); \t</div><div class=\"line\"></div><div class=\"line\">?&gt;  </div></pre></td></tr></table></figure></p>\n<p>总结:</p>\n<p>1）使用装饰器设计模式设计类的目标是：<br> 不必重写任何已有的功能性代码，而是对某个基于对象应用增量变化。 </p>\n<p>2)<br> 装饰器设计模式采用这样的构建方式： 在主代码流中应该能够直接插入一个或多个更改或“装饰”目标对象的装饰器，同时不影响其他代码流。</p>\n<p>3)<br> 装饰器模式采用对象组合而非继承的手法，实现了在运行时动态的扩展对象功能的能力，<br> 而且可以根据需要扩展多个功能，避免了单独使用继承带来的“灵活性差”和“多子类衍生问题”。<br> 同时它很好地符合面向对象设计原则中“优先使用对象组合而非继承”和“开放-封闭”原则。</p>\n","excerpt":"","more":"<p>装饰器模式,动态地给一个对象添加一些额外的职责或者行为。在不必改变原类代码和使用继承的情况下，动态的扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。这比使用子类更加灵活.<br>当用于一组子类时，装饰器模式更加有用。如果你拥有一族子类，你需要在与子类独立使用情况下添加额外的特性，你可以使用装饰器模式，以避免代码重复和具体子类数量的增加</p>\n<p>解决问题: </p>\n<p>不必重写任何已有的功能性代码，而是对某个基于对象应用增量变化。在主代码流中应该能够直接插入一个或多个更改或“装饰”目标对象的装饰器，同时不影响其他代码流。</p>\n<p>组成:</p>\n<p>抽象组件：定义一个对象接口，以规范准备接受附加责任的对象，即可以给这些对象动态地添加职责,可忽略.</p>\n<p>具体组件 :被装饰者，定义一个将要被装饰增加功能的类。可以给这个类的对象添加一些职责</p>\n<p>抽象装饰器:维持一个指向构件组件抽象的实例，并定义一个与抽象组件接口一致的接口,可忽略</p>\n<p>具体装饰器角色:向组件添加职责</p>\n<p>实现:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;?php   </div><div class=\"line\">  </div><div class=\"line\">/** </div><div class=\"line\"> * 抽象组件</div><div class=\"line\"> */  </div><div class=\"line\">class widget &#123;  </div><div class=\"line\">    function paint() &#123;  </div><div class=\"line\">        return $this-&gt;_asHtml();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">/** </div><div class=\"line\"> *  </div><div class=\"line\"> * 具体组件 ,testinput对象  </div><div class=\"line\"> */  </div><div class=\"line\">class TextInput extends widget &#123;  </div><div class=\"line\">  </div><div class=\"line\">    protected $_name;  </div><div class=\"line\">    protected $_value;  </div><div class=\"line\">  </div><div class=\"line\">    function TextInput($name, $value=&apos;&apos;) &#123;  </div><div class=\"line\">        $this-&gt;_name = $name;  </div><div class=\"line\">        $this-&gt;_value = $value;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    function _asHtml() &#123;  </div><div class=\"line\">        return &apos;&lt;input type=&quot;text&quot; name=&quot;&apos;.$this-&gt;_name.&apos;&quot; value=&quot;&apos;.$this-&gt;_value.&apos;&quot;&gt;&apos;;  </div><div class=\"line\">  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">* 如果我们要在input前面加上提示文字,lable ,这样子,都要加,那就要好多个子类了</div><div class=\"line\">* 那是不是都要继承widget类,然后实现其具体标签的类,那会产生大量的子类,而已每个子类只是做些小改变而已</div><div class=\"line\">* 这种情况就要使用到装饰器的设计模式</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">/** </div><div class=\"line\"> * 抽象装饰器（Decorator)</div><div class=\"line\"> *  </div><div class=\"line\"> */  </div><div class=\"line\">class LableWidgetDecorator &#123;  </div><div class=\"line\">  </div><div class=\"line\">    protected $_widget;  </div><div class=\"line\">    function __construct( &amp;$widget) &#123;  </div><div class=\"line\">        $this-&gt;_widget = $widget;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    function paint() &#123;  </div><div class=\"line\">        return $this-&gt;_widget-&gt;paint();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/** </div><div class=\"line\"> * 具体装饰器角色: </div><div class=\"line\"> * 为建立一个标签,需要传入其的内容，以及原始的组件 </div><div class=\"line\"> * 也需要重写paint（）方法 </div><div class=\"line\"> * </div><div class=\"line\"> */  </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">class LableDecorator extends LableWidgetDecorator &#123;  </div><div class=\"line\">  </div><div class=\"line\">    protected $_label;  </div><div class=\"line\">  </div><div class=\"line\">    function __construct($label, &amp;$widget) &#123;  </div><div class=\"line\">        $this-&gt;_label = $label;  </div><div class=\"line\">        parent::__construct($widget);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    function paint() &#123;  </div><div class=\"line\">        return &apos;&lt;b&gt;&apos;.$this-&gt;_label.&apos;:&lt;/b&gt; &apos;.$this-&gt;_widget-&gt;paint();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">/** </div><div class=\"line\"> * 使用</div><div class=\"line\"> */  </div><div class=\"line\"></div><div class=\"line\">$label =  new LableDecorator(&apos;姓名&apos;, new TextInput(&apos;name&apos;, &apos;&apos;);</div><div class=\"line\">echo $lable-&gt;paint(); \t</div><div class=\"line\"></div><div class=\"line\">$label =  new LableDecorator(&apos;昵称&apos;, new TextInput(&apos;nickname&apos;, &apos;&apos;);  </div><div class=\"line\">echo $lable-&gt;paint(); \t</div><div class=\"line\"></div><div class=\"line\">$label =  new LableDecorator(&apos;年龄&apos;, new TextInput(&apos;age&apos;, &apos;&apos;);  </div><div class=\"line\">echo $lable-&gt;paint(); \t</div><div class=\"line\"></div><div class=\"line\">?&gt;  </div></pre></td></tr></table></figure></p>\n<p>总结:</p>\n<p>1）使用装饰器设计模式设计类的目标是：<br> 不必重写任何已有的功能性代码，而是对某个基于对象应用增量变化。 </p>\n<p>2)<br> 装饰器设计模式采用这样的构建方式： 在主代码流中应该能够直接插入一个或多个更改或“装饰”目标对象的装饰器，同时不影响其他代码流。</p>\n<p>3)<br> 装饰器模式采用对象组合而非继承的手法，实现了在运行时动态的扩展对象功能的能力，<br> 而且可以根据需要扩展多个功能，避免了单独使用继承带来的“灵活性差”和“多子类衍生问题”。<br> 同时它很好地符合面向对象设计原则中“优先使用对象组合而非继承”和“开放-封闭”原则。</p>\n"},{"title":"php设计模式学习总结","date":"2016-09-06T07:32:55.000Z","_content":"PHP设计模式\n\n面向对象的目标\n\n高内聚，低耦合\n面向对象设计的基本原则\n\n单一职责：一个类只做一件事\n开闭原则：对扩展开放对修改关闭\n里氏替换：子类必须能替换所有父类的使用\n依赖倒置：设计依赖于抽象而不是实现\n最少知识：对象应当尽可能少的去了解其他对象\n接口隔离：接口倾向于小而多\n组合优先：优先使用类的组合而不是继承\n抽象类和接口的使用\n\n当类中有共同的行为或属性时,可以考虑使用 abstract calss\n当类别中有共同的操作界面,但是在实现上有所差别,可以考虑使用 interface","source":"_posts/php设计模式学习总结.md","raw":"---\ntitle: php设计模式学习总结\ndate: 2016-09-06 15:32:55\ntags:\n---\nPHP设计模式\n\n面向对象的目标\n\n高内聚，低耦合\n面向对象设计的基本原则\n\n单一职责：一个类只做一件事\n开闭原则：对扩展开放对修改关闭\n里氏替换：子类必须能替换所有父类的使用\n依赖倒置：设计依赖于抽象而不是实现\n最少知识：对象应当尽可能少的去了解其他对象\n接口隔离：接口倾向于小而多\n组合优先：优先使用类的组合而不是继承\n抽象类和接口的使用\n\n当类中有共同的行为或属性时,可以考虑使用 abstract calss\n当类别中有共同的操作界面,但是在实现上有所差别,可以考虑使用 interface","slug":"php设计模式学习总结","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeieng001eznz4d0xaodfq","content":"<p>PHP设计模式</p>\n<p>面向对象的目标</p>\n<p>高内聚，低耦合<br>面向对象设计的基本原则</p>\n<p>单一职责：一个类只做一件事<br>开闭原则：对扩展开放对修改关闭<br>里氏替换：子类必须能替换所有父类的使用<br>依赖倒置：设计依赖于抽象而不是实现<br>最少知识：对象应当尽可能少的去了解其他对象<br>接口隔离：接口倾向于小而多<br>组合优先：优先使用类的组合而不是继承<br>抽象类和接口的使用</p>\n<p>当类中有共同的行为或属性时,可以考虑使用 abstract calss<br>当类别中有共同的操作界面,但是在实现上有所差别,可以考虑使用 interface</p>\n","excerpt":"","more":"<p>PHP设计模式</p>\n<p>面向对象的目标</p>\n<p>高内聚，低耦合<br>面向对象设计的基本原则</p>\n<p>单一职责：一个类只做一件事<br>开闭原则：对扩展开放对修改关闭<br>里氏替换：子类必须能替换所有父类的使用<br>依赖倒置：设计依赖于抽象而不是实现<br>最少知识：对象应当尽可能少的去了解其他对象<br>接口隔离：接口倾向于小而多<br>组合优先：优先使用类的组合而不是继承<br>抽象类和接口的使用</p>\n<p>当类中有共同的行为或属性时,可以考虑使用 abstract calss<br>当类别中有共同的操作界面,但是在实现上有所差别,可以考虑使用 interface</p>\n"},{"title":"redis安全","date":"2016-07-03T10:53:43.000Z","_content":"redis 安全：\n\n密码：\nRedis数据库可以设置安全，所以做出相关的任何客户端都需要在执行命令之前进行身份验证。为了确保Redis需要设置在配置文件中的密码验证一致。\n例子\n下面给出的例子显示的步骤，以确保Redis实例。\n127.0.0.1:6379> CONFIG get requires\n1) \"requirepass\"\n2) \"\"\n默认情况下，此属性为空，表示没有设置密码，此实例。您可以通过执行以下命令来更改这个属性\n\n127.0.0.1:6379> CONFIG set requirepass \"yiibai\"\nOK\n127.0.0.1:6379> CONFIG get requirepass\n1) \"requirepass\"\n2) “kai\"\n\n或者修改redis配置文件项  requirepass  ‘kai’,重启服务器\n设置密码，如果任何客户端运行命令没有验证后，再(错误)NOAUTH需要验证。错误将再回到这点。因此，客户端需要使用AUTH命令进行认证。\n\n语法\nAUTH命令的基本语法如下所示：\n\n127.0.0.1:6379> AUTH password\n语法\n127.0.0.1:6379> AUTH \"yiibai\"\nOK\n127.0.0.1:6379> SET mykey \"Test value\"\nOK\n127.0.0.1:6379> GET mykey\n\"Test value\"\n\n备份：\n\nRedis SAVE命令用来创建备份当前Redis数据库。\n\n语法\nRedis SAVE命令的基本语法如下所示：\n\n127.0.0.1:6379> SAVE\n例子\n下面给出的例子创建备份当前的数据库。\n\n127.0.0.1:6379> SAVE\n\nOK\n\n这个命令将创建dump.rdb文件在Redis目录。\n还原Redis数据\n要恢复Redis数据只是移动Redis备份文件(dump.rdb)到Redis目录，然后启动服务器。为了让Redis读取到Redis目录，使用CONFIG命令如下所示：\n \n127.0.0.1:6379> CONFIG get dir\n\n1) \"dir\"\n2) \"/user/yiibai/redis-2.8.13/src\"\n\n在上述的输出命令/user/yiibai/redis-2.8.13/src是目录，在安装redis服务器。\n\nBgsave\n要创建Redis备份备用命令BGSAVE也可以的。这个命令将开始备份过程，并在后台运行。\n\n例子\n127.0.0.1:6379> BGSAVE\n\nBackground saving started\n\nAOF 持久化：\n\nAOF 持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。AOF 文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾。Redis 还可以在后台对 AOF 文件进行重写（rewrite），使得 AOF 文件的体积不会超出保存数据集状态所需的实际大小\n\n通过config get appendonly 命令查看是否开启aof\n通过修改配置文件来打开 AOF 功能：\n\nappendonly yes  \n或者通过\n127.0.0.1:6379> CONFIG set appendonly yes\nOK\n\n启动aof后，每当 Redis 执行一个改变数据集的命令时（比如 SET），这个命令就会被追加到 AOF 文件的末尾。\n这样的话，当 Redis 重新启时，程序就可以通过重新执行 AOF 文件中的命令来达到重建数据集的目的。\n\n当aof文件大到一定程度，可以通过bgrewriteaof 命令重写aof文件，也可以通过配置文件设置自动触发aof重写\n\n\n\nRDB 持久化切换到 AOF 持久化:\n\n\n\n1.为最新的 dump.rdb 文件创建一个备份。\n\n2.将备份放到一个安全的地方。\n\n3.执行以下两条命令：\n\nredis-cli> CONFIG SET appendonly yes\n\nredis-cli> CONFIG SET save \"\"\n\n4.确保命令执行之后，数据库的键的数量没有改变。\n\n5.确保写命令会被正确地追加到 AOF 文件的末尾。\n\n步骤 3 执行的第一条命令开启了 AOF 功能：Redis 会阻塞直到初始 AOF 文件创建完成为止，之后 Redis 会继续处理命令请求，并开始将写入命令追加到 AOF 文件末尾。\n\n步骤 3 执行的第二条命令用于关闭 RDB 功能。这一步是可选的，如果你愿意的话，也可以同时使用 RDB 和 AOF 这两种持久化功能。\n\n别忘了在 redis.conf 中打开 AOF 功能！否则的话，服务器重启之后，之前通过 CONFIG SET 设置的配置就会被遗忘，程序会按原来的配置来启动服务器。\n\n\n\nRDB 和 AOF 之间的相互作用:\n\n在版本号大于等于 2.4 的 Redis 中，BGSAVE 执行的过程中，不可以执行 BGREWRITEAOF 。反过来说，在 BGREWRITEAOF 执行的过程中，也不可以执行 BGSAVE 。\n\n这可以防止两个 Redis 后台进程同时对磁盘进行大量的 I/O 操作。\n\n如果 BGSAVE 正在执行，并且用户显示地调用 BGREWRITEAOF 命令，那么服务器将向用户回复一个 OK 状态，并告知用户，BGREWRITEAOF 已经被预定执行：一旦 BGSAVE 执行完毕，BGREWRITEAOF 就会正式开始。\n\n当 Redis 启动时，如果 RDB 持久化和 AOF 持久化都被打开了，那么程序会优先使用 AOF 文件来恢复数据集，因为 AOF 文件所保存的数据通常是最完整的。","source":"_posts/redis安全.md","raw":"---\ntitle: redis安全\ndate: 2016-07-03 18:53:43\ntags:\n---\nredis 安全：\n\n密码：\nRedis数据库可以设置安全，所以做出相关的任何客户端都需要在执行命令之前进行身份验证。为了确保Redis需要设置在配置文件中的密码验证一致。\n例子\n下面给出的例子显示的步骤，以确保Redis实例。\n127.0.0.1:6379> CONFIG get requires\n1) \"requirepass\"\n2) \"\"\n默认情况下，此属性为空，表示没有设置密码，此实例。您可以通过执行以下命令来更改这个属性\n\n127.0.0.1:6379> CONFIG set requirepass \"yiibai\"\nOK\n127.0.0.1:6379> CONFIG get requirepass\n1) \"requirepass\"\n2) “kai\"\n\n或者修改redis配置文件项  requirepass  ‘kai’,重启服务器\n设置密码，如果任何客户端运行命令没有验证后，再(错误)NOAUTH需要验证。错误将再回到这点。因此，客户端需要使用AUTH命令进行认证。\n\n语法\nAUTH命令的基本语法如下所示：\n\n127.0.0.1:6379> AUTH password\n语法\n127.0.0.1:6379> AUTH \"yiibai\"\nOK\n127.0.0.1:6379> SET mykey \"Test value\"\nOK\n127.0.0.1:6379> GET mykey\n\"Test value\"\n\n备份：\n\nRedis SAVE命令用来创建备份当前Redis数据库。\n\n语法\nRedis SAVE命令的基本语法如下所示：\n\n127.0.0.1:6379> SAVE\n例子\n下面给出的例子创建备份当前的数据库。\n\n127.0.0.1:6379> SAVE\n\nOK\n\n这个命令将创建dump.rdb文件在Redis目录。\n还原Redis数据\n要恢复Redis数据只是移动Redis备份文件(dump.rdb)到Redis目录，然后启动服务器。为了让Redis读取到Redis目录，使用CONFIG命令如下所示：\n \n127.0.0.1:6379> CONFIG get dir\n\n1) \"dir\"\n2) \"/user/yiibai/redis-2.8.13/src\"\n\n在上述的输出命令/user/yiibai/redis-2.8.13/src是目录，在安装redis服务器。\n\nBgsave\n要创建Redis备份备用命令BGSAVE也可以的。这个命令将开始备份过程，并在后台运行。\n\n例子\n127.0.0.1:6379> BGSAVE\n\nBackground saving started\n\nAOF 持久化：\n\nAOF 持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。AOF 文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾。Redis 还可以在后台对 AOF 文件进行重写（rewrite），使得 AOF 文件的体积不会超出保存数据集状态所需的实际大小\n\n通过config get appendonly 命令查看是否开启aof\n通过修改配置文件来打开 AOF 功能：\n\nappendonly yes  \n或者通过\n127.0.0.1:6379> CONFIG set appendonly yes\nOK\n\n启动aof后，每当 Redis 执行一个改变数据集的命令时（比如 SET），这个命令就会被追加到 AOF 文件的末尾。\n这样的话，当 Redis 重新启时，程序就可以通过重新执行 AOF 文件中的命令来达到重建数据集的目的。\n\n当aof文件大到一定程度，可以通过bgrewriteaof 命令重写aof文件，也可以通过配置文件设置自动触发aof重写\n\n\n\nRDB 持久化切换到 AOF 持久化:\n\n\n\n1.为最新的 dump.rdb 文件创建一个备份。\n\n2.将备份放到一个安全的地方。\n\n3.执行以下两条命令：\n\nredis-cli> CONFIG SET appendonly yes\n\nredis-cli> CONFIG SET save \"\"\n\n4.确保命令执行之后，数据库的键的数量没有改变。\n\n5.确保写命令会被正确地追加到 AOF 文件的末尾。\n\n步骤 3 执行的第一条命令开启了 AOF 功能：Redis 会阻塞直到初始 AOF 文件创建完成为止，之后 Redis 会继续处理命令请求，并开始将写入命令追加到 AOF 文件末尾。\n\n步骤 3 执行的第二条命令用于关闭 RDB 功能。这一步是可选的，如果你愿意的话，也可以同时使用 RDB 和 AOF 这两种持久化功能。\n\n别忘了在 redis.conf 中打开 AOF 功能！否则的话，服务器重启之后，之前通过 CONFIG SET 设置的配置就会被遗忘，程序会按原来的配置来启动服务器。\n\n\n\nRDB 和 AOF 之间的相互作用:\n\n在版本号大于等于 2.4 的 Redis 中，BGSAVE 执行的过程中，不可以执行 BGREWRITEAOF 。反过来说，在 BGREWRITEAOF 执行的过程中，也不可以执行 BGSAVE 。\n\n这可以防止两个 Redis 后台进程同时对磁盘进行大量的 I/O 操作。\n\n如果 BGSAVE 正在执行，并且用户显示地调用 BGREWRITEAOF 命令，那么服务器将向用户回复一个 OK 状态，并告知用户，BGREWRITEAOF 已经被预定执行：一旦 BGSAVE 执行完毕，BGREWRITEAOF 就会正式开始。\n\n当 Redis 启动时，如果 RDB 持久化和 AOF 持久化都被打开了，那么程序会优先使用 AOF 文件来恢复数据集，因为 AOF 文件所保存的数据通常是最完整的。","slug":"redis安全","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeienj001hznz4kbx7goae","content":"<p>redis 安全：</p>\n<p>密码：<br>Redis数据库可以设置安全，所以做出相关的任何客户端都需要在执行命令之前进行身份验证。为了确保Redis需要设置在配置文件中的密码验证一致。<br>例子<br>下面给出的例子显示的步骤，以确保Redis实例。<br>127.0.0.1:6379&gt; CONFIG get requires<br>1) “requirepass”<br>2) “”<br>默认情况下，此属性为空，表示没有设置密码，此实例。您可以通过执行以下命令来更改这个属性</p>\n<p>127.0.0.1:6379&gt; CONFIG set requirepass “yiibai”<br>OK<br>127.0.0.1:6379&gt; CONFIG get requirepass<br>1) “requirepass”<br>2) “kai”</p>\n<p>或者修改redis配置文件项  requirepass  ‘kai’,重启服务器<br>设置密码，如果任何客户端运行命令没有验证后，再(错误)NOAUTH需要验证。错误将再回到这点。因此，客户端需要使用AUTH命令进行认证。</p>\n<p>语法<br>AUTH命令的基本语法如下所示：</p>\n<p>127.0.0.1:6379&gt; AUTH password<br>语法<br>127.0.0.1:6379&gt; AUTH “yiibai”<br>OK<br>127.0.0.1:6379&gt; SET mykey “Test value”<br>OK<br>127.0.0.1:6379&gt; GET mykey<br>“Test value”</p>\n<p>备份：</p>\n<p>Redis SAVE命令用来创建备份当前Redis数据库。</p>\n<p>语法<br>Redis SAVE命令的基本语法如下所示：</p>\n<p>127.0.0.1:6379&gt; SAVE<br>例子<br>下面给出的例子创建备份当前的数据库。</p>\n<p>127.0.0.1:6379&gt; SAVE</p>\n<p>OK</p>\n<p>这个命令将创建dump.rdb文件在Redis目录。<br>还原Redis数据<br>要恢复Redis数据只是移动Redis备份文件(dump.rdb)到Redis目录，然后启动服务器。为了让Redis读取到Redis目录，使用CONFIG命令如下所示：</p>\n<p>127.0.0.1:6379&gt; CONFIG get dir</p>\n<p>1) “dir”<br>2) “/user/yiibai/redis-2.8.13/src”</p>\n<p>在上述的输出命令/user/yiibai/redis-2.8.13/src是目录，在安装redis服务器。</p>\n<p>Bgsave<br>要创建Redis备份备用命令BGSAVE也可以的。这个命令将开始备份过程，并在后台运行。</p>\n<p>例子<br>127.0.0.1:6379&gt; BGSAVE</p>\n<p>Background saving started</p>\n<p>AOF 持久化：</p>\n<p>AOF 持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。AOF 文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾。Redis 还可以在后台对 AOF 文件进行重写（rewrite），使得 AOF 文件的体积不会超出保存数据集状态所需的实际大小</p>\n<p>通过config get appendonly 命令查看是否开启aof<br>通过修改配置文件来打开 AOF 功能：</p>\n<p>appendonly yes<br>或者通过<br>127.0.0.1:6379&gt; CONFIG set appendonly yes<br>OK</p>\n<p>启动aof后，每当 Redis 执行一个改变数据集的命令时（比如 SET），这个命令就会被追加到 AOF 文件的末尾。<br>这样的话，当 Redis 重新启时，程序就可以通过重新执行 AOF 文件中的命令来达到重建数据集的目的。</p>\n<p>当aof文件大到一定程度，可以通过bgrewriteaof 命令重写aof文件，也可以通过配置文件设置自动触发aof重写</p>\n<p>RDB 持久化切换到 AOF 持久化:</p>\n<p>1.为最新的 dump.rdb 文件创建一个备份。</p>\n<p>2.将备份放到一个安全的地方。</p>\n<p>3.执行以下两条命令：</p>\n<p>redis-cli&gt; CONFIG SET appendonly yes</p>\n<p>redis-cli&gt; CONFIG SET save “”</p>\n<p>4.确保命令执行之后，数据库的键的数量没有改变。</p>\n<p>5.确保写命令会被正确地追加到 AOF 文件的末尾。</p>\n<p>步骤 3 执行的第一条命令开启了 AOF 功能：Redis 会阻塞直到初始 AOF 文件创建完成为止，之后 Redis 会继续处理命令请求，并开始将写入命令追加到 AOF 文件末尾。</p>\n<p>步骤 3 执行的第二条命令用于关闭 RDB 功能。这一步是可选的，如果你愿意的话，也可以同时使用 RDB 和 AOF 这两种持久化功能。</p>\n<p>别忘了在 redis.conf 中打开 AOF 功能！否则的话，服务器重启之后，之前通过 CONFIG SET 设置的配置就会被遗忘，程序会按原来的配置来启动服务器。</p>\n<p>RDB 和 AOF 之间的相互作用:</p>\n<p>在版本号大于等于 2.4 的 Redis 中，BGSAVE 执行的过程中，不可以执行 BGREWRITEAOF 。反过来说，在 BGREWRITEAOF 执行的过程中，也不可以执行 BGSAVE 。</p>\n<p>这可以防止两个 Redis 后台进程同时对磁盘进行大量的 I/O 操作。</p>\n<p>如果 BGSAVE 正在执行，并且用户显示地调用 BGREWRITEAOF 命令，那么服务器将向用户回复一个 OK 状态，并告知用户，BGREWRITEAOF 已经被预定执行：一旦 BGSAVE 执行完毕，BGREWRITEAOF 就会正式开始。</p>\n<p>当 Redis 启动时，如果 RDB 持久化和 AOF 持久化都被打开了，那么程序会优先使用 AOF 文件来恢复数据集，因为 AOF 文件所保存的数据通常是最完整的。</p>\n","excerpt":"","more":"<p>redis 安全：</p>\n<p>密码：<br>Redis数据库可以设置安全，所以做出相关的任何客户端都需要在执行命令之前进行身份验证。为了确保Redis需要设置在配置文件中的密码验证一致。<br>例子<br>下面给出的例子显示的步骤，以确保Redis实例。<br>127.0.0.1:6379&gt; CONFIG get requires<br>1) “requirepass”<br>2) “”<br>默认情况下，此属性为空，表示没有设置密码，此实例。您可以通过执行以下命令来更改这个属性</p>\n<p>127.0.0.1:6379&gt; CONFIG set requirepass “yiibai”<br>OK<br>127.0.0.1:6379&gt; CONFIG get requirepass<br>1) “requirepass”<br>2) “kai”</p>\n<p>或者修改redis配置文件项  requirepass  ‘kai’,重启服务器<br>设置密码，如果任何客户端运行命令没有验证后，再(错误)NOAUTH需要验证。错误将再回到这点。因此，客户端需要使用AUTH命令进行认证。</p>\n<p>语法<br>AUTH命令的基本语法如下所示：</p>\n<p>127.0.0.1:6379&gt; AUTH password<br>语法<br>127.0.0.1:6379&gt; AUTH “yiibai”<br>OK<br>127.0.0.1:6379&gt; SET mykey “Test value”<br>OK<br>127.0.0.1:6379&gt; GET mykey<br>“Test value”</p>\n<p>备份：</p>\n<p>Redis SAVE命令用来创建备份当前Redis数据库。</p>\n<p>语法<br>Redis SAVE命令的基本语法如下所示：</p>\n<p>127.0.0.1:6379&gt; SAVE<br>例子<br>下面给出的例子创建备份当前的数据库。</p>\n<p>127.0.0.1:6379&gt; SAVE</p>\n<p>OK</p>\n<p>这个命令将创建dump.rdb文件在Redis目录。<br>还原Redis数据<br>要恢复Redis数据只是移动Redis备份文件(dump.rdb)到Redis目录，然后启动服务器。为了让Redis读取到Redis目录，使用CONFIG命令如下所示：</p>\n<p>127.0.0.1:6379&gt; CONFIG get dir</p>\n<p>1) “dir”<br>2) “/user/yiibai/redis-2.8.13/src”</p>\n<p>在上述的输出命令/user/yiibai/redis-2.8.13/src是目录，在安装redis服务器。</p>\n<p>Bgsave<br>要创建Redis备份备用命令BGSAVE也可以的。这个命令将开始备份过程，并在后台运行。</p>\n<p>例子<br>127.0.0.1:6379&gt; BGSAVE</p>\n<p>Background saving started</p>\n<p>AOF 持久化：</p>\n<p>AOF 持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。AOF 文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾。Redis 还可以在后台对 AOF 文件进行重写（rewrite），使得 AOF 文件的体积不会超出保存数据集状态所需的实际大小</p>\n<p>通过config get appendonly 命令查看是否开启aof<br>通过修改配置文件来打开 AOF 功能：</p>\n<p>appendonly yes<br>或者通过<br>127.0.0.1:6379&gt; CONFIG set appendonly yes<br>OK</p>\n<p>启动aof后，每当 Redis 执行一个改变数据集的命令时（比如 SET），这个命令就会被追加到 AOF 文件的末尾。<br>这样的话，当 Redis 重新启时，程序就可以通过重新执行 AOF 文件中的命令来达到重建数据集的目的。</p>\n<p>当aof文件大到一定程度，可以通过bgrewriteaof 命令重写aof文件，也可以通过配置文件设置自动触发aof重写</p>\n<p>RDB 持久化切换到 AOF 持久化:</p>\n<p>1.为最新的 dump.rdb 文件创建一个备份。</p>\n<p>2.将备份放到一个安全的地方。</p>\n<p>3.执行以下两条命令：</p>\n<p>redis-cli&gt; CONFIG SET appendonly yes</p>\n<p>redis-cli&gt; CONFIG SET save “”</p>\n<p>4.确保命令执行之后，数据库的键的数量没有改变。</p>\n<p>5.确保写命令会被正确地追加到 AOF 文件的末尾。</p>\n<p>步骤 3 执行的第一条命令开启了 AOF 功能：Redis 会阻塞直到初始 AOF 文件创建完成为止，之后 Redis 会继续处理命令请求，并开始将写入命令追加到 AOF 文件末尾。</p>\n<p>步骤 3 执行的第二条命令用于关闭 RDB 功能。这一步是可选的，如果你愿意的话，也可以同时使用 RDB 和 AOF 这两种持久化功能。</p>\n<p>别忘了在 redis.conf 中打开 AOF 功能！否则的话，服务器重启之后，之前通过 CONFIG SET 设置的配置就会被遗忘，程序会按原来的配置来启动服务器。</p>\n<p>RDB 和 AOF 之间的相互作用:</p>\n<p>在版本号大于等于 2.4 的 Redis 中，BGSAVE 执行的过程中，不可以执行 BGREWRITEAOF 。反过来说，在 BGREWRITEAOF 执行的过程中，也不可以执行 BGSAVE 。</p>\n<p>这可以防止两个 Redis 后台进程同时对磁盘进行大量的 I/O 操作。</p>\n<p>如果 BGSAVE 正在执行，并且用户显示地调用 BGREWRITEAOF 命令，那么服务器将向用户回复一个 OK 状态，并告知用户，BGREWRITEAOF 已经被预定执行：一旦 BGSAVE 执行完毕，BGREWRITEAOF 就会正式开始。</p>\n<p>当 Redis 启动时，如果 RDB 持久化和 AOF 持久化都被打开了，那么程序会优先使用 AOF 文件来恢复数据集，因为 AOF 文件所保存的数据通常是最完整的。</p>\n"},{"title":"redis基本命令","date":"2016-07-03T10:53:23.000Z","_content":"redi基本命令:\n连接redis:\n$redis-cli -h host -p port -a password\n\n判断本机是否安装redis服务：使用ping命令\n\n$redis-cli\nredis 127.0.0.1:6379>\nredis 127.0.0.1:6379> PING\n\nPONG\n1 auth password \n验证密码是否正确\n2 echo message \n打印字符串\n3 ping \n查看服务是否运行\n4 quit \n关闭当前连接\n5 select index \n切换到指定的数据库\n\n1）redis键命令\n\n1\tdel key\n此命令删除键，如果存在\n2\tdump key \n该命令返回存储在指定键的值的序列化版本。\n3\texists key \n此命令检查该键是否存在。\n4\texpire key seconds\n指定键的过期时间\n5\texpireat key timestamp \n指定的键过期时间。在这里，时间是在Unix时间戳格式\n6\tpexpire key milliseconds \n设置键以毫秒为单位到期\n7\tpexpireat key milliseconds-timestamp \n设置键在Unix时间戳指定为毫秒到期\n8\tkeys pattern \n查找与指定模式匹配的所有键\n9\tmove key db \n移动键到另一个数据库\n10\tpersist key \n移除过期的键\n11\tpttl key \n以毫秒为单位获取剩余时间的到期键。\n12\tttl key \n获取键到期的剩余时间。\n13\trandomkey\n从Redis返回随机键\n14\trename key newkey \n更改键的名称\n15\trenamenx key newkey \n重命名键，如果新的键不存在\n16\ttype key \n返回存储在键的数据类型的值。\n\n2）字符串命令\n1 set key value \n此命令用于在指定键设置值\n2 get key \n键对应的值。\n3\tgetrange key start end \n得到字符串的子字符串\n4 getset key value\n设置键的字符串值，并返回旧值\n5 getbit key offset\n返回存储在键位值的字符串值的偏移\n6 mget key1 [key2..]\n得到所有的给定键的值\n7 stet key offset value\n设置或清除该位在存储在键的字符串值偏移\n8 setex key seconds value\n设置值和到期时间\n9 setnt key value\n设置键的值，只有当该键不存在\n10 strange key offset value\n覆盖字符串的一部分从指定键的偏移\n11 strlen key\n得到存储在键的值的长度\n12 mset key value [key value ...]\n设置多个键和多个值\n13 msetnx key value [key value ...] \n设置多个键多个值，只有在当没有按键的存在时\n14 psetex key milliseconds value\n设置键的毫秒值和到期时间\n15\tincr key\n增加键的整数值一次\n16\tincrbykey increment\n由给定的数量递增键的整数值\n17 incrbyfloat key increment\n由给定的数量递增键的浮点值\n18 decr key\n递减键一次的整数值\n19 decr key decrement\n由给定数目递减键的整数值\n20\tappend key value\n追加值到一个键  字符\n\n3）哈希命令\n1 hdel key field2 [field2] \n删除一个或多个哈希字段\n2 hexists key field \n判断一个哈希字段存在与否\n3 hget key field \n获取存储在指定的键散列字段的值\n4 hgetall key \n让所有的字段和值在指定的键存储在一个哈希\n5\thincrby  key field increment \n由给定数量增加的哈希字段的整数值\n6\thincrbyfloat key field increment \n由给定的递增量哈希字段的浮点值\n7\tkeys key \n获取所有在哈希字段\n8\thlen key \n获取哈希字段数\n9\thmget key field1 [field2] \n获得所有给定的哈希字段的值\n10\thmset key field1 value1 [field2 value2 ] \n设置多个哈希字段的多个值\n11 hset key field value \n设置哈希字段的字符串值\n12 hsetnx key field value \n设置哈希字段的值，仅当该字段不存在\n13 hvals key \n获取在哈希中的所有值\n14 hscan key cursor [MATCH pattern] [COUNT count] \n增量迭代哈希字段及相关值\n\n4)列表\n1\tblpop key1 [key2 ] timeout \n取出并获取列表中的第一个元素，或阻塞，直到有可用\n2 brpop key1 [key2 ] timeout \n取出并获取列表中的最后一个元素，或阻塞，直到有可用\n3\tbrpopLpush source destination timeout \n从列表中弹出一个值，它推到另一个列表并返回它;或阻塞，直到有可用\n4 lindex key index \n从一个列表其索引获取对应的元素\n5\tLINSERT key BEFORE|AFTER pivot value \n在列表中的其他元素之后或之前插入一个元素\n6 llen key \n获取列表的长度\n7\tpop key \n获取并取出列表中的第一个元素\n8 lpush key value1 [value2] \n在前面加上一个或多个值的列表\n9 lpushx key value \n在前面加上一个值列表，仅当列表中存在\n10 lrange key start stop \n从一个列表获取各种元素\n11 lrem key count value \n时间复杂度中N表示链表中元素的数量。在指定Key关联的链表中，删除前count个值等于value的元素。如果count大于0，从头向尾遍历并删除，如果count小于0，则从尾向头遍历并删除。如果count等于0，则删除链表中所有等于value的元素。如果指定的Key不存在，则直接返回0。\n从列表中删除元素\n12 lset key index value \n在列表中的索引设置一个元素的值\n13\tltrim key start stop \n修剪列表到指定的范围内\n14 rpop key \n取出并获取列表中的最后一个元素\n15\trpoplpush source destination \n删除最后一个元素的列表，将其附加到另一个列表并返回它\n16 rpush key value1 [value2] \n添加一个或多个值到列表\n17 rpushx key value \n添加一个值列表，仅当列表中存在\n\n\n4)集合\n1 sadd key member1 [member2] \n向集合添加一个或多个成员\n2\tscard key \n获取集合的成员数\n3\tsdiff key1 [key2] \n返回给定所有集合的差集\n4\tsdiffstore destination key1 [key2] \n返回给定所有集合的差集并存储在 destination 中\n5\tsinter key1 [key2] \n返回给定所有集合的交集\n6 sinterstore destination key1 [key2] \n返回给定所有集合的交集并存储在 destination 中\n7\tsismember key member \n判断 member 元素是否是集合 key 的成员\n8 smembers key \n返回集合中的所有成员\n9\tsmove source destination member \n将 member 元素从 source 集合移动到 destination 集合\n10 spop key \n移除并返回集合中的一个随机元素\n11\tsrandmember key [count] \n返回集合中一个或多个随机数\n12\tsrem key member1 [member2] \n移除集合中一个或多个成员\n13 sunion key1 [key2] \n返回所有给定集合的并集\n14 sunionstore destination key1 [key2] \n所有给定集合的并集存储在 destination 集合中\n15\tSSCAN key cursor [MATCH pattern] [COUNT count] \n迭代集合中的元素\n\n有序集合：\n1 zadd key score1 member1 [score2 member2] \n向有序集合添加一个或多个成员，或者更新已存在成员的分数\n2 zcrad key \n获取有序集合的成员数\n3  zcount key min max \n计算在有序集合中指定区间分数的成员数\n4\tzincrby key increment member \n有序集合中对指定成员的分数加上增量 increment\n5\tzinterstore destination numkeys key [key ...] \n计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中\n6\tzlexcount  key min max \n在有序集合中计算指定字典区间内成员数量\n7\tzrange key start stop [WITHSCORES] \n通过索引区间返回有序集合成指定区间内的成员\n8\t zrangebylex key min max [LIMIT offset count] \n通过字典区间返回有序集合的成员\n9\t zrangebyscore key min max [WITHSCORES] [LIMIT] \n通过分数返回有序集合指定区间内的成员\n10\t  zrank key member \n返回有序集合中指定成员的索引\n11 zrem key member [member ...] \n移除有序集合中的一个或多个成员\n12 zremrangebylex    key min max \n移除有序集合中给定的字典区间的所有成员\n13\tzremrangebyrank  key start stop \n移除有序集合中给定的排名区间的所有成员\n14\tzremrangebyscore  key min max \n移除有序集合中给定的分数区间的所有成员\n15  zrevrange key start stop [WITHSCORES] \n返回有序集中指定区间内的成员，通过索引，分数从高到底\n16\tzrevrangebyscore  key max min [WITHSCORES] \n返回有序集中指定分数区间内的成员，分数从高到低排序\n17  zrevrank key member \n返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序\n18\tzscore key member \n返回有序集中，成员的分数值\n19\tzunionstore destination numkeys key [key ...] \n计算给定的一个或多个有序集的并集，并存储在新的 key 中\n20\tZSCAN key cursor [MATCH pattern] [COUNT count] \n迭代有序集合中的元素（包括元素成员和元素分值）","source":"_posts/redis基本命令.md","raw":"---\ntitle: redis基本命令\ndate: 2016-07-03 18:53:23\ntags:\n---\nredi基本命令:\n连接redis:\n$redis-cli -h host -p port -a password\n\n判断本机是否安装redis服务：使用ping命令\n\n$redis-cli\nredis 127.0.0.1:6379>\nredis 127.0.0.1:6379> PING\n\nPONG\n1 auth password \n验证密码是否正确\n2 echo message \n打印字符串\n3 ping \n查看服务是否运行\n4 quit \n关闭当前连接\n5 select index \n切换到指定的数据库\n\n1）redis键命令\n\n1\tdel key\n此命令删除键，如果存在\n2\tdump key \n该命令返回存储在指定键的值的序列化版本。\n3\texists key \n此命令检查该键是否存在。\n4\texpire key seconds\n指定键的过期时间\n5\texpireat key timestamp \n指定的键过期时间。在这里，时间是在Unix时间戳格式\n6\tpexpire key milliseconds \n设置键以毫秒为单位到期\n7\tpexpireat key milliseconds-timestamp \n设置键在Unix时间戳指定为毫秒到期\n8\tkeys pattern \n查找与指定模式匹配的所有键\n9\tmove key db \n移动键到另一个数据库\n10\tpersist key \n移除过期的键\n11\tpttl key \n以毫秒为单位获取剩余时间的到期键。\n12\tttl key \n获取键到期的剩余时间。\n13\trandomkey\n从Redis返回随机键\n14\trename key newkey \n更改键的名称\n15\trenamenx key newkey \n重命名键，如果新的键不存在\n16\ttype key \n返回存储在键的数据类型的值。\n\n2）字符串命令\n1 set key value \n此命令用于在指定键设置值\n2 get key \n键对应的值。\n3\tgetrange key start end \n得到字符串的子字符串\n4 getset key value\n设置键的字符串值，并返回旧值\n5 getbit key offset\n返回存储在键位值的字符串值的偏移\n6 mget key1 [key2..]\n得到所有的给定键的值\n7 stet key offset value\n设置或清除该位在存储在键的字符串值偏移\n8 setex key seconds value\n设置值和到期时间\n9 setnt key value\n设置键的值，只有当该键不存在\n10 strange key offset value\n覆盖字符串的一部分从指定键的偏移\n11 strlen key\n得到存储在键的值的长度\n12 mset key value [key value ...]\n设置多个键和多个值\n13 msetnx key value [key value ...] \n设置多个键多个值，只有在当没有按键的存在时\n14 psetex key milliseconds value\n设置键的毫秒值和到期时间\n15\tincr key\n增加键的整数值一次\n16\tincrbykey increment\n由给定的数量递增键的整数值\n17 incrbyfloat key increment\n由给定的数量递增键的浮点值\n18 decr key\n递减键一次的整数值\n19 decr key decrement\n由给定数目递减键的整数值\n20\tappend key value\n追加值到一个键  字符\n\n3）哈希命令\n1 hdel key field2 [field2] \n删除一个或多个哈希字段\n2 hexists key field \n判断一个哈希字段存在与否\n3 hget key field \n获取存储在指定的键散列字段的值\n4 hgetall key \n让所有的字段和值在指定的键存储在一个哈希\n5\thincrby  key field increment \n由给定数量增加的哈希字段的整数值\n6\thincrbyfloat key field increment \n由给定的递增量哈希字段的浮点值\n7\tkeys key \n获取所有在哈希字段\n8\thlen key \n获取哈希字段数\n9\thmget key field1 [field2] \n获得所有给定的哈希字段的值\n10\thmset key field1 value1 [field2 value2 ] \n设置多个哈希字段的多个值\n11 hset key field value \n设置哈希字段的字符串值\n12 hsetnx key field value \n设置哈希字段的值，仅当该字段不存在\n13 hvals key \n获取在哈希中的所有值\n14 hscan key cursor [MATCH pattern] [COUNT count] \n增量迭代哈希字段及相关值\n\n4)列表\n1\tblpop key1 [key2 ] timeout \n取出并获取列表中的第一个元素，或阻塞，直到有可用\n2 brpop key1 [key2 ] timeout \n取出并获取列表中的最后一个元素，或阻塞，直到有可用\n3\tbrpopLpush source destination timeout \n从列表中弹出一个值，它推到另一个列表并返回它;或阻塞，直到有可用\n4 lindex key index \n从一个列表其索引获取对应的元素\n5\tLINSERT key BEFORE|AFTER pivot value \n在列表中的其他元素之后或之前插入一个元素\n6 llen key \n获取列表的长度\n7\tpop key \n获取并取出列表中的第一个元素\n8 lpush key value1 [value2] \n在前面加上一个或多个值的列表\n9 lpushx key value \n在前面加上一个值列表，仅当列表中存在\n10 lrange key start stop \n从一个列表获取各种元素\n11 lrem key count value \n时间复杂度中N表示链表中元素的数量。在指定Key关联的链表中，删除前count个值等于value的元素。如果count大于0，从头向尾遍历并删除，如果count小于0，则从尾向头遍历并删除。如果count等于0，则删除链表中所有等于value的元素。如果指定的Key不存在，则直接返回0。\n从列表中删除元素\n12 lset key index value \n在列表中的索引设置一个元素的值\n13\tltrim key start stop \n修剪列表到指定的范围内\n14 rpop key \n取出并获取列表中的最后一个元素\n15\trpoplpush source destination \n删除最后一个元素的列表，将其附加到另一个列表并返回它\n16 rpush key value1 [value2] \n添加一个或多个值到列表\n17 rpushx key value \n添加一个值列表，仅当列表中存在\n\n\n4)集合\n1 sadd key member1 [member2] \n向集合添加一个或多个成员\n2\tscard key \n获取集合的成员数\n3\tsdiff key1 [key2] \n返回给定所有集合的差集\n4\tsdiffstore destination key1 [key2] \n返回给定所有集合的差集并存储在 destination 中\n5\tsinter key1 [key2] \n返回给定所有集合的交集\n6 sinterstore destination key1 [key2] \n返回给定所有集合的交集并存储在 destination 中\n7\tsismember key member \n判断 member 元素是否是集合 key 的成员\n8 smembers key \n返回集合中的所有成员\n9\tsmove source destination member \n将 member 元素从 source 集合移动到 destination 集合\n10 spop key \n移除并返回集合中的一个随机元素\n11\tsrandmember key [count] \n返回集合中一个或多个随机数\n12\tsrem key member1 [member2] \n移除集合中一个或多个成员\n13 sunion key1 [key2] \n返回所有给定集合的并集\n14 sunionstore destination key1 [key2] \n所有给定集合的并集存储在 destination 集合中\n15\tSSCAN key cursor [MATCH pattern] [COUNT count] \n迭代集合中的元素\n\n有序集合：\n1 zadd key score1 member1 [score2 member2] \n向有序集合添加一个或多个成员，或者更新已存在成员的分数\n2 zcrad key \n获取有序集合的成员数\n3  zcount key min max \n计算在有序集合中指定区间分数的成员数\n4\tzincrby key increment member \n有序集合中对指定成员的分数加上增量 increment\n5\tzinterstore destination numkeys key [key ...] \n计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中\n6\tzlexcount  key min max \n在有序集合中计算指定字典区间内成员数量\n7\tzrange key start stop [WITHSCORES] \n通过索引区间返回有序集合成指定区间内的成员\n8\t zrangebylex key min max [LIMIT offset count] \n通过字典区间返回有序集合的成员\n9\t zrangebyscore key min max [WITHSCORES] [LIMIT] \n通过分数返回有序集合指定区间内的成员\n10\t  zrank key member \n返回有序集合中指定成员的索引\n11 zrem key member [member ...] \n移除有序集合中的一个或多个成员\n12 zremrangebylex    key min max \n移除有序集合中给定的字典区间的所有成员\n13\tzremrangebyrank  key start stop \n移除有序集合中给定的排名区间的所有成员\n14\tzremrangebyscore  key min max \n移除有序集合中给定的分数区间的所有成员\n15  zrevrange key start stop [WITHSCORES] \n返回有序集中指定区间内的成员，通过索引，分数从高到底\n16\tzrevrangebyscore  key max min [WITHSCORES] \n返回有序集中指定分数区间内的成员，分数从高到低排序\n17  zrevrank key member \n返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序\n18\tzscore key member \n返回有序集中，成员的分数值\n19\tzunionstore destination numkeys key [key ...] \n计算给定的一个或多个有序集的并集，并存储在新的 key 中\n20\tZSCAN key cursor [MATCH pattern] [COUNT count] \n迭代有序集合中的元素（包括元素成员和元素分值）","slug":"redis基本命令","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeienm001jznz4xs68x1vg","content":"<p>redi基本命令:<br>连接redis:<br>$redis-cli -h host -p port -a password</p>\n<p>判断本机是否安装redis服务：使用ping命令</p>\n<p>$redis-cli<br>redis 127.0.0.1:6379&gt;<br>redis 127.0.0.1:6379&gt; PING</p>\n<p>PONG<br>1 auth password<br>验证密码是否正确<br>2 echo message<br>打印字符串<br>3 ping<br>查看服务是否运行<br>4 quit<br>关闭当前连接<br>5 select index<br>切换到指定的数据库</p>\n<p>1）redis键命令</p>\n<p>1    del key<br>此命令删除键，如果存在<br>2    dump key<br>该命令返回存储在指定键的值的序列化版本。<br>3    exists key<br>此命令检查该键是否存在。<br>4    expire key seconds<br>指定键的过期时间<br>5    expireat key timestamp<br>指定的键过期时间。在这里，时间是在Unix时间戳格式<br>6    pexpire key milliseconds<br>设置键以毫秒为单位到期<br>7    pexpireat key milliseconds-timestamp<br>设置键在Unix时间戳指定为毫秒到期<br>8    keys pattern<br>查找与指定模式匹配的所有键<br>9    move key db<br>移动键到另一个数据库<br>10    persist key<br>移除过期的键<br>11    pttl key<br>以毫秒为单位获取剩余时间的到期键。<br>12    ttl key<br>获取键到期的剩余时间。<br>13    randomkey<br>从Redis返回随机键<br>14    rename key newkey<br>更改键的名称<br>15    renamenx key newkey<br>重命名键，如果新的键不存在<br>16    type key<br>返回存储在键的数据类型的值。</p>\n<p>2）字符串命令<br>1 set key value<br>此命令用于在指定键设置值<br>2 get key<br>键对应的值。<br>3    getrange key start end<br>得到字符串的子字符串<br>4 getset key value<br>设置键的字符串值，并返回旧值<br>5 getbit key offset<br>返回存储在键位值的字符串值的偏移<br>6 mget key1 [key2..]<br>得到所有的给定键的值<br>7 stet key offset value<br>设置或清除该位在存储在键的字符串值偏移<br>8 setex key seconds value<br>设置值和到期时间<br>9 setnt key value<br>设置键的值，只有当该键不存在<br>10 strange key offset value<br>覆盖字符串的一部分从指定键的偏移<br>11 strlen key<br>得到存储在键的值的长度<br>12 mset key value [key value …]<br>设置多个键和多个值<br>13 msetnx key value [key value …]<br>设置多个键多个值，只有在当没有按键的存在时<br>14 psetex key milliseconds value<br>设置键的毫秒值和到期时间<br>15    incr key<br>增加键的整数值一次<br>16    incrbykey increment<br>由给定的数量递增键的整数值<br>17 incrbyfloat key increment<br>由给定的数量递增键的浮点值<br>18 decr key<br>递减键一次的整数值<br>19 decr key decrement<br>由给定数目递减键的整数值<br>20    append key value<br>追加值到一个键  字符</p>\n<p>3）哈希命令<br>1 hdel key field2 [field2]<br>删除一个或多个哈希字段<br>2 hexists key field<br>判断一个哈希字段存在与否<br>3 hget key field<br>获取存储在指定的键散列字段的值<br>4 hgetall key<br>让所有的字段和值在指定的键存储在一个哈希<br>5    hincrby  key field increment<br>由给定数量增加的哈希字段的整数值<br>6    hincrbyfloat key field increment<br>由给定的递增量哈希字段的浮点值<br>7    keys key<br>获取所有在哈希字段<br>8    hlen key<br>获取哈希字段数<br>9    hmget key field1 [field2]<br>获得所有给定的哈希字段的值<br>10    hmset key field1 value1 [field2 value2 ]<br>设置多个哈希字段的多个值<br>11 hset key field value<br>设置哈希字段的字符串值<br>12 hsetnx key field value<br>设置哈希字段的值，仅当该字段不存在<br>13 hvals key<br>获取在哈希中的所有值<br>14 hscan key cursor [MATCH pattern] [COUNT count]<br>增量迭代哈希字段及相关值</p>\n<p>4)列表<br>1    blpop key1 [key2 ] timeout<br>取出并获取列表中的第一个元素，或阻塞，直到有可用<br>2 brpop key1 [key2 ] timeout<br>取出并获取列表中的最后一个元素，或阻塞，直到有可用<br>3    brpopLpush source destination timeout<br>从列表中弹出一个值，它推到另一个列表并返回它;或阻塞，直到有可用<br>4 lindex key index<br>从一个列表其索引获取对应的元素<br>5    LINSERT key BEFORE|AFTER pivot value<br>在列表中的其他元素之后或之前插入一个元素<br>6 llen key<br>获取列表的长度<br>7    pop key<br>获取并取出列表中的第一个元素<br>8 lpush key value1 [value2]<br>在前面加上一个或多个值的列表<br>9 lpushx key value<br>在前面加上一个值列表，仅当列表中存在<br>10 lrange key start stop<br>从一个列表获取各种元素<br>11 lrem key count value<br>时间复杂度中N表示链表中元素的数量。在指定Key关联的链表中，删除前count个值等于value的元素。如果count大于0，从头向尾遍历并删除，如果count小于0，则从尾向头遍历并删除。如果count等于0，则删除链表中所有等于value的元素。如果指定的Key不存在，则直接返回0。<br>从列表中删除元素<br>12 lset key index value<br>在列表中的索引设置一个元素的值<br>13    ltrim key start stop<br>修剪列表到指定的范围内<br>14 rpop key<br>取出并获取列表中的最后一个元素<br>15    rpoplpush source destination<br>删除最后一个元素的列表，将其附加到另一个列表并返回它<br>16 rpush key value1 [value2]<br>添加一个或多个值到列表<br>17 rpushx key value<br>添加一个值列表，仅当列表中存在</p>\n<p>4)集合<br>1 sadd key member1 [member2]<br>向集合添加一个或多个成员<br>2    scard key<br>获取集合的成员数<br>3    sdiff key1 [key2]<br>返回给定所有集合的差集<br>4    sdiffstore destination key1 [key2]<br>返回给定所有集合的差集并存储在 destination 中<br>5    sinter key1 [key2]<br>返回给定所有集合的交集<br>6 sinterstore destination key1 [key2]<br>返回给定所有集合的交集并存储在 destination 中<br>7    sismember key member<br>判断 member 元素是否是集合 key 的成员<br>8 smembers key<br>返回集合中的所有成员<br>9    smove source destination member<br>将 member 元素从 source 集合移动到 destination 集合<br>10 spop key<br>移除并返回集合中的一个随机元素<br>11    srandmember key [count]<br>返回集合中一个或多个随机数<br>12    srem key member1 [member2]<br>移除集合中一个或多个成员<br>13 sunion key1 [key2]<br>返回所有给定集合的并集<br>14 sunionstore destination key1 [key2]<br>所有给定集合的并集存储在 destination 集合中<br>15    SSCAN key cursor [MATCH pattern] [COUNT count]<br>迭代集合中的元素</p>\n<p>有序集合：<br>1 zadd key score1 member1 [score2 member2]<br>向有序集合添加一个或多个成员，或者更新已存在成员的分数<br>2 zcrad key<br>获取有序集合的成员数<br>3  zcount key min max<br>计算在有序集合中指定区间分数的成员数<br>4    zincrby key increment member<br>有序集合中对指定成员的分数加上增量 increment<br>5    zinterstore destination numkeys key [key …]<br>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中<br>6    zlexcount  key min max<br>在有序集合中计算指定字典区间内成员数量<br>7    zrange key start stop [WITHSCORES]<br>通过索引区间返回有序集合成指定区间内的成员<br>8     zrangebylex key min max [LIMIT offset count]<br>通过字典区间返回有序集合的成员<br>9     zrangebyscore key min max [WITHSCORES] [LIMIT]<br>通过分数返回有序集合指定区间内的成员<br>10      zrank key member<br>返回有序集合中指定成员的索引<br>11 zrem key member [member …]<br>移除有序集合中的一个或多个成员<br>12 zremrangebylex    key min max<br>移除有序集合中给定的字典区间的所有成员<br>13    zremrangebyrank  key start stop<br>移除有序集合中给定的排名区间的所有成员<br>14    zremrangebyscore  key min max<br>移除有序集合中给定的分数区间的所有成员<br>15  zrevrange key start stop [WITHSCORES]<br>返回有序集中指定区间内的成员，通过索引，分数从高到底<br>16    zrevrangebyscore  key max min [WITHSCORES]<br>返回有序集中指定分数区间内的成员，分数从高到低排序<br>17  zrevrank key member<br>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序<br>18    zscore key member<br>返回有序集中，成员的分数值<br>19    zunionstore destination numkeys key [key …]<br>计算给定的一个或多个有序集的并集，并存储在新的 key 中<br>20    ZSCAN key cursor [MATCH pattern] [COUNT count]<br>迭代有序集合中的元素（包括元素成员和元素分值）</p>\n","excerpt":"","more":"<p>redi基本命令:<br>连接redis:<br>$redis-cli -h host -p port -a password</p>\n<p>判断本机是否安装redis服务：使用ping命令</p>\n<p>$redis-cli<br>redis 127.0.0.1:6379&gt;<br>redis 127.0.0.1:6379&gt; PING</p>\n<p>PONG<br>1 auth password<br>验证密码是否正确<br>2 echo message<br>打印字符串<br>3 ping<br>查看服务是否运行<br>4 quit<br>关闭当前连接<br>5 select index<br>切换到指定的数据库</p>\n<p>1）redis键命令</p>\n<p>1    del key<br>此命令删除键，如果存在<br>2    dump key<br>该命令返回存储在指定键的值的序列化版本。<br>3    exists key<br>此命令检查该键是否存在。<br>4    expire key seconds<br>指定键的过期时间<br>5    expireat key timestamp<br>指定的键过期时间。在这里，时间是在Unix时间戳格式<br>6    pexpire key milliseconds<br>设置键以毫秒为单位到期<br>7    pexpireat key milliseconds-timestamp<br>设置键在Unix时间戳指定为毫秒到期<br>8    keys pattern<br>查找与指定模式匹配的所有键<br>9    move key db<br>移动键到另一个数据库<br>10    persist key<br>移除过期的键<br>11    pttl key<br>以毫秒为单位获取剩余时间的到期键。<br>12    ttl key<br>获取键到期的剩余时间。<br>13    randomkey<br>从Redis返回随机键<br>14    rename key newkey<br>更改键的名称<br>15    renamenx key newkey<br>重命名键，如果新的键不存在<br>16    type key<br>返回存储在键的数据类型的值。</p>\n<p>2）字符串命令<br>1 set key value<br>此命令用于在指定键设置值<br>2 get key<br>键对应的值。<br>3    getrange key start end<br>得到字符串的子字符串<br>4 getset key value<br>设置键的字符串值，并返回旧值<br>5 getbit key offset<br>返回存储在键位值的字符串值的偏移<br>6 mget key1 [key2..]<br>得到所有的给定键的值<br>7 stet key offset value<br>设置或清除该位在存储在键的字符串值偏移<br>8 setex key seconds value<br>设置值和到期时间<br>9 setnt key value<br>设置键的值，只有当该键不存在<br>10 strange key offset value<br>覆盖字符串的一部分从指定键的偏移<br>11 strlen key<br>得到存储在键的值的长度<br>12 mset key value [key value …]<br>设置多个键和多个值<br>13 msetnx key value [key value …]<br>设置多个键多个值，只有在当没有按键的存在时<br>14 psetex key milliseconds value<br>设置键的毫秒值和到期时间<br>15    incr key<br>增加键的整数值一次<br>16    incrbykey increment<br>由给定的数量递增键的整数值<br>17 incrbyfloat key increment<br>由给定的数量递增键的浮点值<br>18 decr key<br>递减键一次的整数值<br>19 decr key decrement<br>由给定数目递减键的整数值<br>20    append key value<br>追加值到一个键  字符</p>\n<p>3）哈希命令<br>1 hdel key field2 [field2]<br>删除一个或多个哈希字段<br>2 hexists key field<br>判断一个哈希字段存在与否<br>3 hget key field<br>获取存储在指定的键散列字段的值<br>4 hgetall key<br>让所有的字段和值在指定的键存储在一个哈希<br>5    hincrby  key field increment<br>由给定数量增加的哈希字段的整数值<br>6    hincrbyfloat key field increment<br>由给定的递增量哈希字段的浮点值<br>7    keys key<br>获取所有在哈希字段<br>8    hlen key<br>获取哈希字段数<br>9    hmget key field1 [field2]<br>获得所有给定的哈希字段的值<br>10    hmset key field1 value1 [field2 value2 ]<br>设置多个哈希字段的多个值<br>11 hset key field value<br>设置哈希字段的字符串值<br>12 hsetnx key field value<br>设置哈希字段的值，仅当该字段不存在<br>13 hvals key<br>获取在哈希中的所有值<br>14 hscan key cursor [MATCH pattern] [COUNT count]<br>增量迭代哈希字段及相关值</p>\n<p>4)列表<br>1    blpop key1 [key2 ] timeout<br>取出并获取列表中的第一个元素，或阻塞，直到有可用<br>2 brpop key1 [key2 ] timeout<br>取出并获取列表中的最后一个元素，或阻塞，直到有可用<br>3    brpopLpush source destination timeout<br>从列表中弹出一个值，它推到另一个列表并返回它;或阻塞，直到有可用<br>4 lindex key index<br>从一个列表其索引获取对应的元素<br>5    LINSERT key BEFORE|AFTER pivot value<br>在列表中的其他元素之后或之前插入一个元素<br>6 llen key<br>获取列表的长度<br>7    pop key<br>获取并取出列表中的第一个元素<br>8 lpush key value1 [value2]<br>在前面加上一个或多个值的列表<br>9 lpushx key value<br>在前面加上一个值列表，仅当列表中存在<br>10 lrange key start stop<br>从一个列表获取各种元素<br>11 lrem key count value<br>时间复杂度中N表示链表中元素的数量。在指定Key关联的链表中，删除前count个值等于value的元素。如果count大于0，从头向尾遍历并删除，如果count小于0，则从尾向头遍历并删除。如果count等于0，则删除链表中所有等于value的元素。如果指定的Key不存在，则直接返回0。<br>从列表中删除元素<br>12 lset key index value<br>在列表中的索引设置一个元素的值<br>13    ltrim key start stop<br>修剪列表到指定的范围内<br>14 rpop key<br>取出并获取列表中的最后一个元素<br>15    rpoplpush source destination<br>删除最后一个元素的列表，将其附加到另一个列表并返回它<br>16 rpush key value1 [value2]<br>添加一个或多个值到列表<br>17 rpushx key value<br>添加一个值列表，仅当列表中存在</p>\n<p>4)集合<br>1 sadd key member1 [member2]<br>向集合添加一个或多个成员<br>2    scard key<br>获取集合的成员数<br>3    sdiff key1 [key2]<br>返回给定所有集合的差集<br>4    sdiffstore destination key1 [key2]<br>返回给定所有集合的差集并存储在 destination 中<br>5    sinter key1 [key2]<br>返回给定所有集合的交集<br>6 sinterstore destination key1 [key2]<br>返回给定所有集合的交集并存储在 destination 中<br>7    sismember key member<br>判断 member 元素是否是集合 key 的成员<br>8 smembers key<br>返回集合中的所有成员<br>9    smove source destination member<br>将 member 元素从 source 集合移动到 destination 集合<br>10 spop key<br>移除并返回集合中的一个随机元素<br>11    srandmember key [count]<br>返回集合中一个或多个随机数<br>12    srem key member1 [member2]<br>移除集合中一个或多个成员<br>13 sunion key1 [key2]<br>返回所有给定集合的并集<br>14 sunionstore destination key1 [key2]<br>所有给定集合的并集存储在 destination 集合中<br>15    SSCAN key cursor [MATCH pattern] [COUNT count]<br>迭代集合中的元素</p>\n<p>有序集合：<br>1 zadd key score1 member1 [score2 member2]<br>向有序集合添加一个或多个成员，或者更新已存在成员的分数<br>2 zcrad key<br>获取有序集合的成员数<br>3  zcount key min max<br>计算在有序集合中指定区间分数的成员数<br>4    zincrby key increment member<br>有序集合中对指定成员的分数加上增量 increment<br>5    zinterstore destination numkeys key [key …]<br>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中<br>6    zlexcount  key min max<br>在有序集合中计算指定字典区间内成员数量<br>7    zrange key start stop [WITHSCORES]<br>通过索引区间返回有序集合成指定区间内的成员<br>8     zrangebylex key min max [LIMIT offset count]<br>通过字典区间返回有序集合的成员<br>9     zrangebyscore key min max [WITHSCORES] [LIMIT]<br>通过分数返回有序集合指定区间内的成员<br>10      zrank key member<br>返回有序集合中指定成员的索引<br>11 zrem key member [member …]<br>移除有序集合中的一个或多个成员<br>12 zremrangebylex    key min max<br>移除有序集合中给定的字典区间的所有成员<br>13    zremrangebyrank  key start stop<br>移除有序集合中给定的排名区间的所有成员<br>14    zremrangebyscore  key min max<br>移除有序集合中给定的分数区间的所有成员<br>15  zrevrange key start stop [WITHSCORES]<br>返回有序集中指定区间内的成员，通过索引，分数从高到底<br>16    zrevrangebyscore  key max min [WITHSCORES]<br>返回有序集中指定分数区间内的成员，分数从高到低排序<br>17  zrevrank key member<br>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序<br>18    zscore key member<br>返回有序集中，成员的分数值<br>19    zunionstore destination numkeys key [key …]<br>计算给定的一个或多个有序集的并集，并存储在新的 key 中<br>20    ZSCAN key cursor [MATCH pattern] [COUNT count]<br>迭代有序集合中的元素（包括元素成员和元素分值）</p>\n"},{"title":"redis安装","date":"2016-07-03T10:53:00.000Z","_content":"Linux下redis的安装\n\n1.liunx\n1)安装redis \n将redis安装到此目录 \n/usr/local/redis\n将安装包下载到此目录 \n/usr/local/src\n\n命令如下： \n可能要先安装gcc:\n{% codeblock %}\nyum install gcc\n{% endcodeblock %}\n\n{% codeblock %}\n$ mkdir /usr/local/redis  \n$ cd /usr/local/src  \n$ wget http://redis.googlecode.com/files/redis-2.6.14.tar.gz  \n$ tar xzf redis-2.6.14.tar.gz   \n$ ln -s redis-2.6.14 redis #建立一个链接  \n$ cd redis  \n$ make PREFIX=/usr/local/redis install #安装到指定目录中\n#注意上面的最后一行，我们通过PREFIX指定了安装的目录。如果make失败，一般是你们系统中还未安装gcc,那么可以通过yum安装： \n{% endcodeblock %}\n<!-- more -->\n\n\n在安装redis成功后，你将可以在/usr/local/redis看到一个bin的目录，里面包括了以下文件： \n\nredis-benchmark  redis-check-aof  redis-check-dump  redis-cli  redis-server\n\n2)将redis做成一个服务 \n\na.复制脚本到/etc/rc.d/init.d目录 \n\n安装Redis时，其服务脚本位于：\n/usr/local/src/redis/utils/redis_init_script \n必须将其复制到/etc/rc.d/init.d的目录下： \n{% codeblock %}\ncp /usr/local/src/redis/utils/redis_init_script /etc/rc.d/init.d/redis\n#将redis_init_script复制到/etc/rc.d/init.d/，同时易名为redis。\n{% endcodeblock %}\n\n添加注册服务：\n{% codeblock %}\nchkconfig --add redis\n{% endcodeblock %}\n\n如果报错话：redis脚本格式不支持chkconfig\n需要修改redis脚本。 \n\nb.修改redis脚本 \n打开使用vi打开脚本，查看脚本信息： \n{% codeblock %}\nvim /etc/rc.d/init.d/redis\n看到的内容如下(下内容是更改好的信息)： \n\n#!/bin/sh \n#chkconfig: 2345 80 90 \n# Simple Redis init.d script conceived to work on Linux systems \n# as it does use of the /proc filesystem. \nREDISPORT=6379 \nEXEC=/usr/local/redis/bin/redis-server \nCLIEXEC=/usr/local/redis/bin/redis-cli \nPIDFILE=/var/run/redis_${REDISPORT}.pid \nCONF=\"/etc/redis/${REDISPORT}.conf\" \ncase \"$1\" in \nstart) \nif [ -f $PIDFILE ] \nthen \necho \"$PIDFILE exists, process is already running or crashed\" \nelse \necho \"Starting Redis server...\" \n$EXEC $CONF & \nfi \n;; \nstop) \nif [ ! -f $PIDFILE ] \nthen \necho \"$PIDFILE does not exist, process is not running\" \nelse \nPID=$(cat $PIDFILE) \necho \"Stopping ...\" \n$CLIEXEC -p $REDISPORT shutdown \nwhile [ -x /proc/${PID} ] \ndo \necho \"Waiting for Redis to shutdown ...\" \nsleep 1 \ndone \necho \"Redis stopped\" \nfi \n;; \n*) \necho \"Please use start or stop as first argument\" \n;; \nesac \n{% endcodeblock %}\n\n和原配置文件相比： \n\n1.原文件是没有以下第2行的内容的，\n\n#chkconfig: 2345 80 90 \n2.原文件EXEC、CLIEXEC参数，也是有所更改。 \n\nEXEC=/usr/local/redis/bin/redis-server   \nCLIEXEC=/usr/local/redis/bin/redis-cli \n\n3.redis开启的命令，以后台运行的方式执行。\n\n$EXEC $CONF & \nps:注意后面的那个“&”，即是将服务转到后面运行的意思，否则启动服务时，Redis服务将 \n\n占据在前台，占用了主用户界面，造成其它的命令执行不了。 \n4.将redis配置文件拷贝到/etc/redis/${REDISPORT}.conf \n{% codeblock %}\nmkdir /etc/redis    \ncp /usr/local/src/redis/redis.conf /etc/redis/6379.conf\n{% endcodeblock %}\n\n这样，redis服务脚本指定的CONF就存在了。默认情况下，Redis未启用认证，可以通过开启6379.conf的requirepass 指定一个验证密码。 \n\n以上操作完成后，即可注册yedis服务：\n{% codeblock %}\nchkconfig --add redis\n{% endcodeblock %}\n\n3.启动redis服务 \n{% codeblock %}\nservice redis start \n{% endcodeblock %}\n\n第三，将Redis的命令所在目录添加到系统参数PATH中 \n\n修改profile文件：\n{% codeblock %}\nvi /etc/profile\n#在最后行追加: \n\nexport PATH=\"$PATH:/usr/local/redis/bin\"\n然后马上应用这个文件： \n\n. /etc/profile  \n{% endcodeblock %}\n\n这样就可以直接调用redis-cli的命令了，如下所示： \n{% codeblock %}\n$ redis-cli   \nredis 127.0.0.1:6379> auth superman   \nOK   \nredis 127.0.0.1:6379> ping   \nPONG   \nredis 127.0.0.1:6379>\n{% endcodeblock %}\n至此，redis 就成功安装了。 \n\n\n","source":"_posts/redis安装.md","raw":"---\ntitle: redis安装\ndate: 2016-07-03 18:53:00\ntags: redis\ncategories: redis\n---\nLinux下redis的安装\n\n1.liunx\n1)安装redis \n将redis安装到此目录 \n/usr/local/redis\n将安装包下载到此目录 \n/usr/local/src\n\n命令如下： \n可能要先安装gcc:\n{% codeblock %}\nyum install gcc\n{% endcodeblock %}\n\n{% codeblock %}\n$ mkdir /usr/local/redis  \n$ cd /usr/local/src  \n$ wget http://redis.googlecode.com/files/redis-2.6.14.tar.gz  \n$ tar xzf redis-2.6.14.tar.gz   \n$ ln -s redis-2.6.14 redis #建立一个链接  \n$ cd redis  \n$ make PREFIX=/usr/local/redis install #安装到指定目录中\n#注意上面的最后一行，我们通过PREFIX指定了安装的目录。如果make失败，一般是你们系统中还未安装gcc,那么可以通过yum安装： \n{% endcodeblock %}\n<!-- more -->\n\n\n在安装redis成功后，你将可以在/usr/local/redis看到一个bin的目录，里面包括了以下文件： \n\nredis-benchmark  redis-check-aof  redis-check-dump  redis-cli  redis-server\n\n2)将redis做成一个服务 \n\na.复制脚本到/etc/rc.d/init.d目录 \n\n安装Redis时，其服务脚本位于：\n/usr/local/src/redis/utils/redis_init_script \n必须将其复制到/etc/rc.d/init.d的目录下： \n{% codeblock %}\ncp /usr/local/src/redis/utils/redis_init_script /etc/rc.d/init.d/redis\n#将redis_init_script复制到/etc/rc.d/init.d/，同时易名为redis。\n{% endcodeblock %}\n\n添加注册服务：\n{% codeblock %}\nchkconfig --add redis\n{% endcodeblock %}\n\n如果报错话：redis脚本格式不支持chkconfig\n需要修改redis脚本。 \n\nb.修改redis脚本 \n打开使用vi打开脚本，查看脚本信息： \n{% codeblock %}\nvim /etc/rc.d/init.d/redis\n看到的内容如下(下内容是更改好的信息)： \n\n#!/bin/sh \n#chkconfig: 2345 80 90 \n# Simple Redis init.d script conceived to work on Linux systems \n# as it does use of the /proc filesystem. \nREDISPORT=6379 \nEXEC=/usr/local/redis/bin/redis-server \nCLIEXEC=/usr/local/redis/bin/redis-cli \nPIDFILE=/var/run/redis_${REDISPORT}.pid \nCONF=\"/etc/redis/${REDISPORT}.conf\" \ncase \"$1\" in \nstart) \nif [ -f $PIDFILE ] \nthen \necho \"$PIDFILE exists, process is already running or crashed\" \nelse \necho \"Starting Redis server...\" \n$EXEC $CONF & \nfi \n;; \nstop) \nif [ ! -f $PIDFILE ] \nthen \necho \"$PIDFILE does not exist, process is not running\" \nelse \nPID=$(cat $PIDFILE) \necho \"Stopping ...\" \n$CLIEXEC -p $REDISPORT shutdown \nwhile [ -x /proc/${PID} ] \ndo \necho \"Waiting for Redis to shutdown ...\" \nsleep 1 \ndone \necho \"Redis stopped\" \nfi \n;; \n*) \necho \"Please use start or stop as first argument\" \n;; \nesac \n{% endcodeblock %}\n\n和原配置文件相比： \n\n1.原文件是没有以下第2行的内容的，\n\n#chkconfig: 2345 80 90 \n2.原文件EXEC、CLIEXEC参数，也是有所更改。 \n\nEXEC=/usr/local/redis/bin/redis-server   \nCLIEXEC=/usr/local/redis/bin/redis-cli \n\n3.redis开启的命令，以后台运行的方式执行。\n\n$EXEC $CONF & \nps:注意后面的那个“&”，即是将服务转到后面运行的意思，否则启动服务时，Redis服务将 \n\n占据在前台，占用了主用户界面，造成其它的命令执行不了。 \n4.将redis配置文件拷贝到/etc/redis/${REDISPORT}.conf \n{% codeblock %}\nmkdir /etc/redis    \ncp /usr/local/src/redis/redis.conf /etc/redis/6379.conf\n{% endcodeblock %}\n\n这样，redis服务脚本指定的CONF就存在了。默认情况下，Redis未启用认证，可以通过开启6379.conf的requirepass 指定一个验证密码。 \n\n以上操作完成后，即可注册yedis服务：\n{% codeblock %}\nchkconfig --add redis\n{% endcodeblock %}\n\n3.启动redis服务 \n{% codeblock %}\nservice redis start \n{% endcodeblock %}\n\n第三，将Redis的命令所在目录添加到系统参数PATH中 \n\n修改profile文件：\n{% codeblock %}\nvi /etc/profile\n#在最后行追加: \n\nexport PATH=\"$PATH:/usr/local/redis/bin\"\n然后马上应用这个文件： \n\n. /etc/profile  \n{% endcodeblock %}\n\n这样就可以直接调用redis-cli的命令了，如下所示： \n{% codeblock %}\n$ redis-cli   \nredis 127.0.0.1:6379> auth superman   \nOK   \nredis 127.0.0.1:6379> ping   \nPONG   \nredis 127.0.0.1:6379>\n{% endcodeblock %}\n至此，redis 就成功安装了。 \n\n\n","slug":"redis安装","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeieno001kznz4smhhicqu","content":"<p>Linux下redis的安装</p>\n<p>1.liunx<br>1)安装redis<br>将redis安装到此目录<br>/usr/local/redis<br>将安装包下载到此目录<br>/usr/local/src</p>\n<p>命令如下：<br>可能要先安装gcc:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install gcc</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir /usr/local/redis  </div><div class=\"line\">$ cd /usr/local/src  </div><div class=\"line\">$ wget http://redis.googlecode.com/files/redis-2.6.14.tar.gz  </div><div class=\"line\">$ tar xzf redis-2.6.14.tar.gz   </div><div class=\"line\">$ ln -s redis-2.6.14 redis #建立一个链接  </div><div class=\"line\">$ cd redis  </div><div class=\"line\">$ make PREFIX=/usr/local/redis install #安装到指定目录中</div><div class=\"line\">#注意上面的最后一行，我们通过PREFIX指定了安装的目录。如果make失败，一般是你们系统中还未安装gcc,那么可以通过yum安装： </div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>在安装redis成功后，你将可以在/usr/local/redis看到一个bin的目录，里面包括了以下文件： </p>\n<p>redis-benchmark  redis-check-aof  redis-check-dump  redis-cli  redis-server</p>\n<p>2)将redis做成一个服务 </p>\n<p>a.复制脚本到/etc/rc.d/init.d目录 </p>\n<p>安装Redis时，其服务脚本位于：<br>/usr/local/src/redis/utils/redis_init_script<br>必须将其复制到/etc/rc.d/init.d的目录下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp /usr/local/src/redis/utils/redis_init_script /etc/rc.d/init.d/redis</div><div class=\"line\">#将redis_init_script复制到/etc/rc.d/init.d/，同时易名为redis。</div></pre></td></tr></table></figure></p>\n<p>添加注册服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig --add redis</div></pre></td></tr></table></figure></p>\n<p>如果报错话：redis脚本格式不支持chkconfig<br>需要修改redis脚本。 </p>\n<p>b.修改redis脚本<br>打开使用vi打开脚本，查看脚本信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/rc.d/init.d/redis</div><div class=\"line\">看到的内容如下(下内容是更改好的信息)： </div><div class=\"line\"></div><div class=\"line\">#!/bin/sh </div><div class=\"line\">#chkconfig: 2345 80 90 </div><div class=\"line\"># Simple Redis init.d script conceived to work on Linux systems </div><div class=\"line\"># as it does use of the /proc filesystem. </div><div class=\"line\">REDISPORT=6379 </div><div class=\"line\">EXEC=/usr/local/redis/bin/redis-server </div><div class=\"line\">CLIEXEC=/usr/local/redis/bin/redis-cli </div><div class=\"line\">PIDFILE=/var/run/redis_$&#123;REDISPORT&#125;.pid </div><div class=\"line\">CONF=&quot;/etc/redis/$&#123;REDISPORT&#125;.conf&quot; </div><div class=\"line\">case &quot;$1&quot; in </div><div class=\"line\">start) </div><div class=\"line\">if [ -f $PIDFILE ] </div><div class=\"line\">then </div><div class=\"line\">echo &quot;$PIDFILE exists, process is already running or crashed&quot; </div><div class=\"line\">else </div><div class=\"line\">echo &quot;Starting Redis server...&quot; </div><div class=\"line\">$EXEC $CONF &amp; </div><div class=\"line\">fi </div><div class=\"line\">;; </div><div class=\"line\">stop) </div><div class=\"line\">if [ ! -f $PIDFILE ] </div><div class=\"line\">then </div><div class=\"line\">echo &quot;$PIDFILE does not exist, process is not running&quot; </div><div class=\"line\">else </div><div class=\"line\">PID=$(cat $PIDFILE) </div><div class=\"line\">echo &quot;Stopping ...&quot; </div><div class=\"line\">$CLIEXEC -p $REDISPORT shutdown </div><div class=\"line\">while [ -x /proc/$&#123;PID&#125; ] </div><div class=\"line\">do </div><div class=\"line\">echo &quot;Waiting for Redis to shutdown ...&quot; </div><div class=\"line\">sleep 1 </div><div class=\"line\">done </div><div class=\"line\">echo &quot;Redis stopped&quot; </div><div class=\"line\">fi </div><div class=\"line\">;; </div><div class=\"line\">*) </div><div class=\"line\">echo &quot;Please use start or stop as first argument&quot; </div><div class=\"line\">;; </div><div class=\"line\">esac </div></pre></td></tr></table></figure></p>\n<p>和原配置文件相比： </p>\n<p>1.原文件是没有以下第2行的内容的，</p>\n<p>#chkconfig: 2345 80 90<br>2.原文件EXEC、CLIEXEC参数，也是有所更改。 </p>\n<p>EXEC=/usr/local/redis/bin/redis-server<br>CLIEXEC=/usr/local/redis/bin/redis-cli </p>\n<p>3.redis开启的命令，以后台运行的方式执行。</p>\n<p>$EXEC $CONF &amp;<br>ps:注意后面的那个“&amp;”，即是将服务转到后面运行的意思，否则启动服务时，Redis服务将 </p>\n<p>占据在前台，占用了主用户界面，造成其它的命令执行不了。<br>4.将redis配置文件拷贝到/etc/redis/${REDISPORT}.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /etc/redis    </div><div class=\"line\">cp /usr/local/src/redis/redis.conf /etc/redis/6379.conf</div></pre></td></tr></table></figure></p>\n<p>这样，redis服务脚本指定的CONF就存在了。默认情况下，Redis未启用认证，可以通过开启6379.conf的requirepass 指定一个验证密码。 </p>\n<p>以上操作完成后，即可注册yedis服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig --add redis</div></pre></td></tr></table></figure></p>\n<p>3.启动redis服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service redis start </div></pre></td></tr></table></figure></p>\n<p>第三，将Redis的命令所在目录添加到系统参数PATH中 </p>\n<p>修改profile文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/profile</div><div class=\"line\">#在最后行追加: </div><div class=\"line\"></div><div class=\"line\">export PATH=&quot;$PATH:/usr/local/redis/bin&quot;</div><div class=\"line\">然后马上应用这个文件： </div><div class=\"line\"></div><div class=\"line\">. /etc/profile  </div></pre></td></tr></table></figure></p>\n<p>这样就可以直接调用redis-cli的命令了，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ redis-cli   </div><div class=\"line\">redis 127.0.0.1:6379&gt; auth superman   </div><div class=\"line\">OK   </div><div class=\"line\">redis 127.0.0.1:6379&gt; ping   </div><div class=\"line\">PONG   </div><div class=\"line\">redis 127.0.0.1:6379&gt;</div></pre></td></tr></table></figure><br>至此，redis 就成功安装了。 </p>\n","excerpt":"<p>Linux下redis的安装</p>\n<p>1.liunx<br>1)安装redis<br>将redis安装到此目录<br>/usr/local/redis<br>将安装包下载到此目录<br>/usr/local/src</p>\n<p>命令如下：<br>可能要先安装gcc:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install gcc</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir /usr/local/redis  </div><div class=\"line\">$ cd /usr/local/src  </div><div class=\"line\">$ wget http://redis.googlecode.com/files/redis-2.6.14.tar.gz  </div><div class=\"line\">$ tar xzf redis-2.6.14.tar.gz   </div><div class=\"line\">$ ln -s redis-2.6.14 redis #建立一个链接  </div><div class=\"line\">$ cd redis  </div><div class=\"line\">$ make PREFIX=/usr/local/redis install #安装到指定目录中</div><div class=\"line\">#注意上面的最后一行，我们通过PREFIX指定了安装的目录。如果make失败，一般是你们系统中还未安装gcc,那么可以通过yum安装： </div></pre></td></tr></table></figure>","more":"<p>在安装redis成功后，你将可以在/usr/local/redis看到一个bin的目录，里面包括了以下文件： </p>\n<p>redis-benchmark  redis-check-aof  redis-check-dump  redis-cli  redis-server</p>\n<p>2)将redis做成一个服务 </p>\n<p>a.复制脚本到/etc/rc.d/init.d目录 </p>\n<p>安装Redis时，其服务脚本位于：<br>/usr/local/src/redis/utils/redis_init_script<br>必须将其复制到/etc/rc.d/init.d的目录下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp /usr/local/src/redis/utils/redis_init_script /etc/rc.d/init.d/redis</div><div class=\"line\">#将redis_init_script复制到/etc/rc.d/init.d/，同时易名为redis。</div></pre></td></tr></table></figure></p>\n<p>添加注册服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig --add redis</div></pre></td></tr></table></figure></p>\n<p>如果报错话：redis脚本格式不支持chkconfig<br>需要修改redis脚本。 </p>\n<p>b.修改redis脚本<br>打开使用vi打开脚本，查看脚本信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/rc.d/init.d/redis</div><div class=\"line\">看到的内容如下(下内容是更改好的信息)： </div><div class=\"line\"></div><div class=\"line\">#!/bin/sh </div><div class=\"line\">#chkconfig: 2345 80 90 </div><div class=\"line\"># Simple Redis init.d script conceived to work on Linux systems </div><div class=\"line\"># as it does use of the /proc filesystem. </div><div class=\"line\">REDISPORT=6379 </div><div class=\"line\">EXEC=/usr/local/redis/bin/redis-server </div><div class=\"line\">CLIEXEC=/usr/local/redis/bin/redis-cli </div><div class=\"line\">PIDFILE=/var/run/redis_$&#123;REDISPORT&#125;.pid </div><div class=\"line\">CONF=&quot;/etc/redis/$&#123;REDISPORT&#125;.conf&quot; </div><div class=\"line\">case &quot;$1&quot; in </div><div class=\"line\">start) </div><div class=\"line\">if [ -f $PIDFILE ] </div><div class=\"line\">then </div><div class=\"line\">echo &quot;$PIDFILE exists, process is already running or crashed&quot; </div><div class=\"line\">else </div><div class=\"line\">echo &quot;Starting Redis server...&quot; </div><div class=\"line\">$EXEC $CONF &amp; </div><div class=\"line\">fi </div><div class=\"line\">;; </div><div class=\"line\">stop) </div><div class=\"line\">if [ ! -f $PIDFILE ] </div><div class=\"line\">then </div><div class=\"line\">echo &quot;$PIDFILE does not exist, process is not running&quot; </div><div class=\"line\">else </div><div class=\"line\">PID=$(cat $PIDFILE) </div><div class=\"line\">echo &quot;Stopping ...&quot; </div><div class=\"line\">$CLIEXEC -p $REDISPORT shutdown </div><div class=\"line\">while [ -x /proc/$&#123;PID&#125; ] </div><div class=\"line\">do </div><div class=\"line\">echo &quot;Waiting for Redis to shutdown ...&quot; </div><div class=\"line\">sleep 1 </div><div class=\"line\">done </div><div class=\"line\">echo &quot;Redis stopped&quot; </div><div class=\"line\">fi </div><div class=\"line\">;; </div><div class=\"line\">*) </div><div class=\"line\">echo &quot;Please use start or stop as first argument&quot; </div><div class=\"line\">;; </div><div class=\"line\">esac </div></pre></td></tr></table></figure></p>\n<p>和原配置文件相比： </p>\n<p>1.原文件是没有以下第2行的内容的，</p>\n<p>#chkconfig: 2345 80 90<br>2.原文件EXEC、CLIEXEC参数，也是有所更改。 </p>\n<p>EXEC=/usr/local/redis/bin/redis-server<br>CLIEXEC=/usr/local/redis/bin/redis-cli </p>\n<p>3.redis开启的命令，以后台运行的方式执行。</p>\n<p>$EXEC $CONF &amp;<br>ps:注意后面的那个“&amp;”，即是将服务转到后面运行的意思，否则启动服务时，Redis服务将 </p>\n<p>占据在前台，占用了主用户界面，造成其它的命令执行不了。<br>4.将redis配置文件拷贝到/etc/redis/${REDISPORT}.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /etc/redis    </div><div class=\"line\">cp /usr/local/src/redis/redis.conf /etc/redis/6379.conf</div></pre></td></tr></table></figure></p>\n<p>这样，redis服务脚本指定的CONF就存在了。默认情况下，Redis未启用认证，可以通过开启6379.conf的requirepass 指定一个验证密码。 </p>\n<p>以上操作完成后，即可注册yedis服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig --add redis</div></pre></td></tr></table></figure></p>\n<p>3.启动redis服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service redis start </div></pre></td></tr></table></figure></p>\n<p>第三，将Redis的命令所在目录添加到系统参数PATH中 </p>\n<p>修改profile文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/profile</div><div class=\"line\">#在最后行追加: </div><div class=\"line\"></div><div class=\"line\">export PATH=&quot;$PATH:/usr/local/redis/bin&quot;</div><div class=\"line\">然后马上应用这个文件： </div><div class=\"line\"></div><div class=\"line\">. /etc/profile  </div></pre></td></tr></table></figure></p>\n<p>这样就可以直接调用redis-cli的命令了，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ redis-cli   </div><div class=\"line\">redis 127.0.0.1:6379&gt; auth superman   </div><div class=\"line\">OK   </div><div class=\"line\">redis 127.0.0.1:6379&gt; ping   </div><div class=\"line\">PONG   </div><div class=\"line\">redis 127.0.0.1:6379&gt;</div></pre></td></tr></table></figure><br>至此，redis 就成功安装了。 </p>"},{"title":"redis配置","date":"2016-07-03T10:53:13.000Z","_content":"redis配置：\n\n使用方法：\n\n1）使用文件：在启动service是使用文件 \n{% codeblock %}\n/usr/local/redis/bin/redis-server /config.conf\n{% endcodeblock %}\n\n2）启动redis后在程序中配置\n通过config set config_name  config_value 设置\n通过config get config_name :(*表示所有)\n\n配置说明：\n\n常用\n1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程\n{% codeblock %}\n    daemonize \n {% endcodeblock %}\n\n2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定\n{% codeblock %}\n    pidfile /var/run/redis.pid\n {% endcodeblock %}\n3. 指定Redis监听端口，默认端口为6379，如果你设为 0 ，redis 将不在 socket 上监听任何客户端连接\n{% codeblock %}\n    port 6379\n {% endcodeblock %}\n4. 绑定的主机地址  示例，多个IP用空格隔开:\n{% codeblock %}\n    bind 127.0.0.1 \n {% endcodeblock %}\n5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能 \n{% codeblock %}\n    timeout 300\n {% endcodeblock %}\n\n6. 指定日志记录级别，Redis总共支持四个级别：debug（测试环境）、verbose、notice（生产环境）、warning（仅一些重要的信息），默认为verbose\n{% codeblock %}\n    loglevel verbose\n {% endcodeblock %}\n\n7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null\n{% codeblock %}\n    logfile stdout\n {% endcodeblock %}\n\n 要想把日志记录到系统日志，就把它改成 yes，\n 也可以可选择性的更新其他的syslog 参数以达到你的要求\n syslog-enabled no\n \n 设置 syslog 的 identity。\n{% codeblock %}\n\n<!-- more -->\n\n syslog-ident redis\n  {% endcodeblock %}\n 设置 syslog 的 facility，必须是 USER 或者是 LOCAL0-LOCAL7 之间的值。\n syslog-facility local0\n8. 设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id\n{% codeblock %}\n    databases 16\n {% endcodeblock %}\n\n\n快照备份：\n\n9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合\n{% codeblock %}\n    save <seconds> <changes>\n\n    Redis默认配置文件中提供了三个条件：\n\n    save 900 1\n\n    save 300 10\n\n    save 60 10000\n {% endcodeblock %}\n    分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。\n\n   注意：你可以注释掉所有的 save 行来停用保存功能。\n   也可以直接一个空字符串来实现停用：\n\n\n10. 默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，\n\n 这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，\n 否则就会没人注意到灾难的发生。\n\n 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。\n\n 然而你要是安装了靠谱的监控，你可能不希望 redis 这样做，那你就改成 no 好了。\n{% codeblock %}\nstop-writes-on-bgsave-error yes\n {% endcodeblock %}\n12. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大\n{% codeblock %}\n    rdbcompression yes\n {% endcodeblock %}\n13. 指定本地数据库文件名，默认值为dump.rdb\n{% codeblock %}\n    dbfilename dump.rdb\n {% endcodeblock %}\n13. 指定本地数据库存放目录\n{% codeblock %}\n    dir ./\n {% endcodeblock %}\n主从复制\n\n 主从复制。使用 slaveof 来让一个 redis 实例成为另一个reids 实例的副本。\n 注意这个只需要在 slave 上配置。\n14. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步\n{% codeblock %}\n    slaveof <masterip> <masterport>\n {% endcodeblock %}\n15. 当master服务设置了密码保护时，slav服务连接master的密码\n{% codeblock %}\n    masterauth <master-password>\n {% endcodeblock %}\n16.是否返回同步不及时的时候的信息 \n 当一个 slave 与 master 失去联系，或者复制正在进行的时候，\n slave 可能会有两种表现：\n\n 1) 如果为 yes ，slave 仍然会应答客户端请求，但返回的数据可能是过时，\n    或者数据可能是空的在第一次同步的时候\n\n 2) 如果为 no ，在你执行除了 info he salveof 之外的其他命令时，\n    slave 都将返回一个 \"SYNC with master in progress\" 的错误，\n\n{% codeblock %}\nslave-serve-stale-data yes\n  {% endcodeblock %}\n17.配置一个 slave 实体是否接受写入操作。\n 通过写入操作来存储一些短暂的数据对于一个 slave 实例来说可能是有用的，\n 因为相对从 master 重新同步数而言，据数据写入到 slave 会更容易被删除。\n 但是如果客户端因为一个错误的配置写入，也可能会导致一些问题。\n 从 redis 2.6 版起，默认 slaves 都是只读的。\n 注意：只读的 slaves 没有被设计成在 internet 上暴露给不受信任的客户端。\n 它仅仅是一个针对误用实例的一个保护层。\nslave-read-only yes\n \n18.Slaves 在一个预定义的时间间隔内发送 ping 命令到 server 。\n 你可以改变这个时间间隔。默认为 10 秒。\n 为确认主库是否可用\n{% codeblock %}\n repl-ping-slave-period 10\n  {% endcodeblock %}\n19. 设置主从复制过期时间\n 这个值一定要比 repl-ping-slave-period 大\n\n# repl-timeout 60\n \n20。  Disable TCP_NODELAY on the slave socket after SYNC?\n{% codeblock %}\n\n#\n# If you select \"yes\" Redis will use a smaller number of TCP packets and\n# less bandwidth to send data to slaves. But this can add a delay for\n# the data to appear on the slave side, up to 40 milliseconds with\n# Linux kernels using a default configuration.\n#\n# If you select \"no\" the delay for data to appear on the slave side will\n# be reduced but more bandwidth will be used for replication.\n#\n# By default we optimize for low latency, but in very high traffic conditions\n# or when the master and slaves are many hops away, turning this to \"yes\" may\n# be a good idea.\nrepl-disable-tcp-nodelay no\n  {% endcodeblock %}\n21.设置主从复制容量大小。这个 backlog 是一个用来在 slaves 被断开连接时\n 存放 slave 数据的 buffer，所以当一个 slave 想要重新连接，通常不希望全部重新同步，\n 只是部分同步就够了，仅仅传递 slave 在断开连接时丢失的这部分数据。\n 这个值越大，salve 可以断开连接的时间就越长。\n\n# repl-backlog-size 1mb\n \n22.在某些时候，master 不再连接 slaves，backlog 将被释放\n{% codeblock %}\n# A value of 0 means to never release the backlog.\n# 如果设置为 0 ，意味着绝不释放 backlog 。\n#\n# repl-backlog-ttl 3600\n  {% endcodeblock %}\n23当 master 不能正常工作的时候，Redis Sentinel 会从 slaves 中选出一个新的 master，\n 这个值越小，就越会被优先选中，但是如果是 0 ， 那是意味着这个 slave 不可能被选中。\n 默认优先级为 100。\nslave-priority 100\n安全：\n24. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭\n{% codeblock %}\n    requirepass foobared\n {% endcodeblock %}\n限制：\n\n25. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息\n{% codeblock %}\n    maxclients 128\n {% endcodeblock %}\n26. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区\n{% codeblock %}\n    maxmemory <bytes>\n {% endcodeblock %}\n27. 最大内存策略，你有 5 个选择。\n{% codeblock %}\n# \n# volatile-lru -> 使用 LRU 算法移除包含过期设置的 key 。\n# allkeys-lru -> 根据 LRU 算法移除所有的 key 。\n# volatile-random -> remove a random key with an expire set：移除随机包含过期设置的key\n# allkeys-random -> remove a random key, any key:移除随机所有过期设置的key\n# volatile-ttl -> remove the key with the nearest expire time (minor TTL)移除随机最近过期的key\n# noeviction -> 不让任何 key 过期，只是给写入操作返回一个错误\n#\n# The default is:\n#\n# maxmemory-policy noeviction\n {% endcodeblock %}\n28. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no\n{% codeblock %}\n    appendonly no\n {% endcodeblock %}\n39. 指定更新日志文件名，默认为appendonly.aof\n{% codeblock %}\n     appendfilename appendonly.aof\n {% endcodeblock %}\n30. 指定更新日志条件，共有3个可选值： \n    no：表示等操作系统进行数据缓存同步到磁盘（快） \n    always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） \n    everysec：表示每秒同步一次（折衷，默认值）\n{% codeblock %}\n    appendfsync everysec\n {% endcodeblock %}\n\n31.AOF策略设置为always或者everysec时，后台处理进程(后台保存或者AOF日志重写)会执行大量的I/O操作\n在某些Linux配置中会阻止过长的fsync()请求。注意现在没有任何修复，即使fsync在另外一个线程进行处理\n为了减缓这个问题，可以设置下面这个参数no-appendfsync-on-rewrite\n{% codeblock %}\n no-appendfsync-on-rewrite no\n {% endcodeblock %}\n32.AOF 自动重写\n\n当AOF文件增长到一定大小的时候Redis能够调用 BGREWRITEAOF 对日志文件进行重写\n它是这样工作的：Redis会记住上次进行些日志后文件的大小(如果从开机以来还没进行过重写，那日子大小在开机的时候确定)\n基础大小会同现在的大小进行比较。如果现在的大小比基础大小大制定的百分比，重写功能将启动\n同时需要指定一个最小大小用于AOF重写，这个用于阻止即使文件很小但是增长幅度很大也去重写AOF文件的情况\n# 设置 percentage \n为0就关闭这个特性\n{% codeblock %}\nauto-aof-rewrite-percentage 100\n\nauto-aof-rewrite-min-size 64mb\n {% endcodeblock %}\n日志：\n\n Redis Slow Log 记录超过特定执行时间的命令。执行时间不包括I/O计算比如连接客户端，返回结果等，只是命令执行时间\n\n可以通过两个参数设置slow log：一个是告诉Redis执行超过多少时间被记录的参数slowlog-log-slower-than(微妙)， \n另一个是slow log 的长度。当一个新命令被记录的时候最早的命令将被从队列中移除\n 下面的时间以微妙微单位，因此1000000代表一分钟。\n \n33注意制定一个负数将关闭慢日志，而设置为0将强制每个命令都会记录\n{% codeblock %}\nslowlog-log-slower-than 10000\n {% endcodeblock %}\n34对日志长度没有限制，只是要注意它会消耗内存\n{% codeblock %}\n# 可以通过 SLOWLOG RESET \n回收被慢日志消耗的内存\nslowlog-max-len 1024\n {% endcodeblock %}\nVM:\n35. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）\n{% codeblock %}\n     vm-enabled no\n {% endcodeblock %}\n36. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享\n{% codeblock %}\n     vm-swap-file /tmp/redis.swap\n {% endcodeblock %}\n37. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0\n{% codeblock %}\n     vm-max-memory 0\n {% endcodeblock %}\n38. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值\n{% codeblock %}\n     vm-page-size 32\n {% endcodeblock %}\n39. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。\n{% codeblock %}\n     vm-pages 134217728\n {% endcodeblock %}\n40. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4\n{% codeblock %}\n     vm-max-threads 4\n\n {% endcodeblock %}\n\nlua脚本：\n\n41.执行lua脚本的超时时间\nlua-time-limit 5000\n\n集群：\n42.启用或停用集群\n# cluster-enabled yes\n43.集群配置文件\n# cluster-config-file nodes-6379.conf\n44.节点超时时间\n {% codeblock %}\n# cluster-node-timeout 15000\n \n# A slave of a failing master will avoid to start a failover if its data\n# looks too old.\n#\n# There is no simple way for a slave to actually have a exact measure of\n# its \"data age\", so the following two checks are performed:\n#\n# 1) If there are multiple slaves able to failover, they exchange messages\n#    in order to try to give an advantage to the slave with the best\n#    replication offset (more data from the master processed).\n#    Slaves will try to get their rank by offset, and apply to the start\n#    of the failover a delay proportional to their rank.\n#\n# 2) Every single slave computes the time of the last interaction with\n#    its master. This can be the last ping or command received (if the master\n#    is still in the \"connected\" state), or the time that elapsed since the\n#    disconnection with the master (if the replication link is currently down).\n#    If the last interaction is too old, the slave will not try to failover\n#    at all.\n#\n# The point \"2\" can be tuned by user. Specifically a slave will not perform\n# the failover if, since the last interaction with the master, the time\n# elapsed is greater than:\n#\n#   (node-timeout * slave-validity-factor) + repl-ping-slave-period\n#\n# So for example if node-timeout is 30 seconds, and the slave-validity-factor\n# is 10, and assuming a default repl-ping-slave-period of 10 seconds, the\n# slave will not try to failover if it was not able to talk with the master\n# for longer than 310 seconds.\n#\n# A large slave-validity-factor may allow slaves with too old data to failover\n# a master, while a too small value may prevent the cluster from being able to\n# elect a slave at all.\n#\n# For maximum availability, it is possible to set the slave-validity-factor\n# to a value of 0, which means, that slaves will always try to failover the\n# master regardless of the last time they interacted with the master.\n# (However they'll always try to apply a delay proportional to their\n# offset rank).\n#\n# Zero is the only value able to guarantee that when all the partitions heal\n# the cluster will always be able to continue.\n#\n# cluster-slave-validity-factor 10\n \n# Cluster slaves are able to migrate to orphaned masters, that are masters\n# that are left without working slaves. This improves the cluster ability\n# to resist to failures as otherwise an orphaned master can't be failed over\n# in case of failure if it has no working slaves.\n#\n# Slaves migrate to orphaned masters only if there are still at least a\n# given number of other working slaves for their old master. This number\n# is the \"migration barrier\". A migration barrier of 1 means that a slave\n# will migrate only if there is at least 1 other working slave for its master\n# and so forth. It usually reflects the number of slaves you want for every\n# master in your cluster.\n#\n# Default is 1 (slaves migrate only if their masters remain with at least\n# one slave). To disable migration just set it to a very large value.\n# A value of 0 can be set but is useful only for debugging and dangerous\n# in production.\n#\n# cluster-migration-barrier 1\n \n# In order to setup your cluster make sure to read the documentation\n# available at http://redis.io web site.\n\n {% endcodeblock %}\n\n其它：\n\n41. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启\n{% codeblock %}\n    glueoutputbuf yes\n {% endcodeblock %}\n42. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法\n{% codeblock %}\n    hash-max-zipmap-entries 64\n\n    hash-max-zipmap-value 512\n {% endcodeblock %}\n43. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）\n{% codeblock %}\n    activerehashing yes\n {% endcodeblock %}\n44. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件\n{% codeblock %}\n    include /path/to/local.conf\n {% endcodeblock %}","source":"_posts/redis配置.md","raw":"---\ntitle: redis配置\ndate: 2016-07-03 18:53:13\ntags:\n---\nredis配置：\n\n使用方法：\n\n1）使用文件：在启动service是使用文件 \n{% codeblock %}\n/usr/local/redis/bin/redis-server /config.conf\n{% endcodeblock %}\n\n2）启动redis后在程序中配置\n通过config set config_name  config_value 设置\n通过config get config_name :(*表示所有)\n\n配置说明：\n\n常用\n1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程\n{% codeblock %}\n    daemonize \n {% endcodeblock %}\n\n2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定\n{% codeblock %}\n    pidfile /var/run/redis.pid\n {% endcodeblock %}\n3. 指定Redis监听端口，默认端口为6379，如果你设为 0 ，redis 将不在 socket 上监听任何客户端连接\n{% codeblock %}\n    port 6379\n {% endcodeblock %}\n4. 绑定的主机地址  示例，多个IP用空格隔开:\n{% codeblock %}\n    bind 127.0.0.1 \n {% endcodeblock %}\n5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能 \n{% codeblock %}\n    timeout 300\n {% endcodeblock %}\n\n6. 指定日志记录级别，Redis总共支持四个级别：debug（测试环境）、verbose、notice（生产环境）、warning（仅一些重要的信息），默认为verbose\n{% codeblock %}\n    loglevel verbose\n {% endcodeblock %}\n\n7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null\n{% codeblock %}\n    logfile stdout\n {% endcodeblock %}\n\n 要想把日志记录到系统日志，就把它改成 yes，\n 也可以可选择性的更新其他的syslog 参数以达到你的要求\n syslog-enabled no\n \n 设置 syslog 的 identity。\n{% codeblock %}\n\n<!-- more -->\n\n syslog-ident redis\n  {% endcodeblock %}\n 设置 syslog 的 facility，必须是 USER 或者是 LOCAL0-LOCAL7 之间的值。\n syslog-facility local0\n8. 设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id\n{% codeblock %}\n    databases 16\n {% endcodeblock %}\n\n\n快照备份：\n\n9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合\n{% codeblock %}\n    save <seconds> <changes>\n\n    Redis默认配置文件中提供了三个条件：\n\n    save 900 1\n\n    save 300 10\n\n    save 60 10000\n {% endcodeblock %}\n    分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。\n\n   注意：你可以注释掉所有的 save 行来停用保存功能。\n   也可以直接一个空字符串来实现停用：\n\n\n10. 默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，\n\n 这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，\n 否则就会没人注意到灾难的发生。\n\n 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。\n\n 然而你要是安装了靠谱的监控，你可能不希望 redis 这样做，那你就改成 no 好了。\n{% codeblock %}\nstop-writes-on-bgsave-error yes\n {% endcodeblock %}\n12. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大\n{% codeblock %}\n    rdbcompression yes\n {% endcodeblock %}\n13. 指定本地数据库文件名，默认值为dump.rdb\n{% codeblock %}\n    dbfilename dump.rdb\n {% endcodeblock %}\n13. 指定本地数据库存放目录\n{% codeblock %}\n    dir ./\n {% endcodeblock %}\n主从复制\n\n 主从复制。使用 slaveof 来让一个 redis 实例成为另一个reids 实例的副本。\n 注意这个只需要在 slave 上配置。\n14. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步\n{% codeblock %}\n    slaveof <masterip> <masterport>\n {% endcodeblock %}\n15. 当master服务设置了密码保护时，slav服务连接master的密码\n{% codeblock %}\n    masterauth <master-password>\n {% endcodeblock %}\n16.是否返回同步不及时的时候的信息 \n 当一个 slave 与 master 失去联系，或者复制正在进行的时候，\n slave 可能会有两种表现：\n\n 1) 如果为 yes ，slave 仍然会应答客户端请求，但返回的数据可能是过时，\n    或者数据可能是空的在第一次同步的时候\n\n 2) 如果为 no ，在你执行除了 info he salveof 之外的其他命令时，\n    slave 都将返回一个 \"SYNC with master in progress\" 的错误，\n\n{% codeblock %}\nslave-serve-stale-data yes\n  {% endcodeblock %}\n17.配置一个 slave 实体是否接受写入操作。\n 通过写入操作来存储一些短暂的数据对于一个 slave 实例来说可能是有用的，\n 因为相对从 master 重新同步数而言，据数据写入到 slave 会更容易被删除。\n 但是如果客户端因为一个错误的配置写入，也可能会导致一些问题。\n 从 redis 2.6 版起，默认 slaves 都是只读的。\n 注意：只读的 slaves 没有被设计成在 internet 上暴露给不受信任的客户端。\n 它仅仅是一个针对误用实例的一个保护层。\nslave-read-only yes\n \n18.Slaves 在一个预定义的时间间隔内发送 ping 命令到 server 。\n 你可以改变这个时间间隔。默认为 10 秒。\n 为确认主库是否可用\n{% codeblock %}\n repl-ping-slave-period 10\n  {% endcodeblock %}\n19. 设置主从复制过期时间\n 这个值一定要比 repl-ping-slave-period 大\n\n# repl-timeout 60\n \n20。  Disable TCP_NODELAY on the slave socket after SYNC?\n{% codeblock %}\n\n#\n# If you select \"yes\" Redis will use a smaller number of TCP packets and\n# less bandwidth to send data to slaves. But this can add a delay for\n# the data to appear on the slave side, up to 40 milliseconds with\n# Linux kernels using a default configuration.\n#\n# If you select \"no\" the delay for data to appear on the slave side will\n# be reduced but more bandwidth will be used for replication.\n#\n# By default we optimize for low latency, but in very high traffic conditions\n# or when the master and slaves are many hops away, turning this to \"yes\" may\n# be a good idea.\nrepl-disable-tcp-nodelay no\n  {% endcodeblock %}\n21.设置主从复制容量大小。这个 backlog 是一个用来在 slaves 被断开连接时\n 存放 slave 数据的 buffer，所以当一个 slave 想要重新连接，通常不希望全部重新同步，\n 只是部分同步就够了，仅仅传递 slave 在断开连接时丢失的这部分数据。\n 这个值越大，salve 可以断开连接的时间就越长。\n\n# repl-backlog-size 1mb\n \n22.在某些时候，master 不再连接 slaves，backlog 将被释放\n{% codeblock %}\n# A value of 0 means to never release the backlog.\n# 如果设置为 0 ，意味着绝不释放 backlog 。\n#\n# repl-backlog-ttl 3600\n  {% endcodeblock %}\n23当 master 不能正常工作的时候，Redis Sentinel 会从 slaves 中选出一个新的 master，\n 这个值越小，就越会被优先选中，但是如果是 0 ， 那是意味着这个 slave 不可能被选中。\n 默认优先级为 100。\nslave-priority 100\n安全：\n24. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭\n{% codeblock %}\n    requirepass foobared\n {% endcodeblock %}\n限制：\n\n25. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息\n{% codeblock %}\n    maxclients 128\n {% endcodeblock %}\n26. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区\n{% codeblock %}\n    maxmemory <bytes>\n {% endcodeblock %}\n27. 最大内存策略，你有 5 个选择。\n{% codeblock %}\n# \n# volatile-lru -> 使用 LRU 算法移除包含过期设置的 key 。\n# allkeys-lru -> 根据 LRU 算法移除所有的 key 。\n# volatile-random -> remove a random key with an expire set：移除随机包含过期设置的key\n# allkeys-random -> remove a random key, any key:移除随机所有过期设置的key\n# volatile-ttl -> remove the key with the nearest expire time (minor TTL)移除随机最近过期的key\n# noeviction -> 不让任何 key 过期，只是给写入操作返回一个错误\n#\n# The default is:\n#\n# maxmemory-policy noeviction\n {% endcodeblock %}\n28. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no\n{% codeblock %}\n    appendonly no\n {% endcodeblock %}\n39. 指定更新日志文件名，默认为appendonly.aof\n{% codeblock %}\n     appendfilename appendonly.aof\n {% endcodeblock %}\n30. 指定更新日志条件，共有3个可选值： \n    no：表示等操作系统进行数据缓存同步到磁盘（快） \n    always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） \n    everysec：表示每秒同步一次（折衷，默认值）\n{% codeblock %}\n    appendfsync everysec\n {% endcodeblock %}\n\n31.AOF策略设置为always或者everysec时，后台处理进程(后台保存或者AOF日志重写)会执行大量的I/O操作\n在某些Linux配置中会阻止过长的fsync()请求。注意现在没有任何修复，即使fsync在另外一个线程进行处理\n为了减缓这个问题，可以设置下面这个参数no-appendfsync-on-rewrite\n{% codeblock %}\n no-appendfsync-on-rewrite no\n {% endcodeblock %}\n32.AOF 自动重写\n\n当AOF文件增长到一定大小的时候Redis能够调用 BGREWRITEAOF 对日志文件进行重写\n它是这样工作的：Redis会记住上次进行些日志后文件的大小(如果从开机以来还没进行过重写，那日子大小在开机的时候确定)\n基础大小会同现在的大小进行比较。如果现在的大小比基础大小大制定的百分比，重写功能将启动\n同时需要指定一个最小大小用于AOF重写，这个用于阻止即使文件很小但是增长幅度很大也去重写AOF文件的情况\n# 设置 percentage \n为0就关闭这个特性\n{% codeblock %}\nauto-aof-rewrite-percentage 100\n\nauto-aof-rewrite-min-size 64mb\n {% endcodeblock %}\n日志：\n\n Redis Slow Log 记录超过特定执行时间的命令。执行时间不包括I/O计算比如连接客户端，返回结果等，只是命令执行时间\n\n可以通过两个参数设置slow log：一个是告诉Redis执行超过多少时间被记录的参数slowlog-log-slower-than(微妙)， \n另一个是slow log 的长度。当一个新命令被记录的时候最早的命令将被从队列中移除\n 下面的时间以微妙微单位，因此1000000代表一分钟。\n \n33注意制定一个负数将关闭慢日志，而设置为0将强制每个命令都会记录\n{% codeblock %}\nslowlog-log-slower-than 10000\n {% endcodeblock %}\n34对日志长度没有限制，只是要注意它会消耗内存\n{% codeblock %}\n# 可以通过 SLOWLOG RESET \n回收被慢日志消耗的内存\nslowlog-max-len 1024\n {% endcodeblock %}\nVM:\n35. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）\n{% codeblock %}\n     vm-enabled no\n {% endcodeblock %}\n36. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享\n{% codeblock %}\n     vm-swap-file /tmp/redis.swap\n {% endcodeblock %}\n37. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0\n{% codeblock %}\n     vm-max-memory 0\n {% endcodeblock %}\n38. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值\n{% codeblock %}\n     vm-page-size 32\n {% endcodeblock %}\n39. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。\n{% codeblock %}\n     vm-pages 134217728\n {% endcodeblock %}\n40. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4\n{% codeblock %}\n     vm-max-threads 4\n\n {% endcodeblock %}\n\nlua脚本：\n\n41.执行lua脚本的超时时间\nlua-time-limit 5000\n\n集群：\n42.启用或停用集群\n# cluster-enabled yes\n43.集群配置文件\n# cluster-config-file nodes-6379.conf\n44.节点超时时间\n {% codeblock %}\n# cluster-node-timeout 15000\n \n# A slave of a failing master will avoid to start a failover if its data\n# looks too old.\n#\n# There is no simple way for a slave to actually have a exact measure of\n# its \"data age\", so the following two checks are performed:\n#\n# 1) If there are multiple slaves able to failover, they exchange messages\n#    in order to try to give an advantage to the slave with the best\n#    replication offset (more data from the master processed).\n#    Slaves will try to get their rank by offset, and apply to the start\n#    of the failover a delay proportional to their rank.\n#\n# 2) Every single slave computes the time of the last interaction with\n#    its master. This can be the last ping or command received (if the master\n#    is still in the \"connected\" state), or the time that elapsed since the\n#    disconnection with the master (if the replication link is currently down).\n#    If the last interaction is too old, the slave will not try to failover\n#    at all.\n#\n# The point \"2\" can be tuned by user. Specifically a slave will not perform\n# the failover if, since the last interaction with the master, the time\n# elapsed is greater than:\n#\n#   (node-timeout * slave-validity-factor) + repl-ping-slave-period\n#\n# So for example if node-timeout is 30 seconds, and the slave-validity-factor\n# is 10, and assuming a default repl-ping-slave-period of 10 seconds, the\n# slave will not try to failover if it was not able to talk with the master\n# for longer than 310 seconds.\n#\n# A large slave-validity-factor may allow slaves with too old data to failover\n# a master, while a too small value may prevent the cluster from being able to\n# elect a slave at all.\n#\n# For maximum availability, it is possible to set the slave-validity-factor\n# to a value of 0, which means, that slaves will always try to failover the\n# master regardless of the last time they interacted with the master.\n# (However they'll always try to apply a delay proportional to their\n# offset rank).\n#\n# Zero is the only value able to guarantee that when all the partitions heal\n# the cluster will always be able to continue.\n#\n# cluster-slave-validity-factor 10\n \n# Cluster slaves are able to migrate to orphaned masters, that are masters\n# that are left without working slaves. This improves the cluster ability\n# to resist to failures as otherwise an orphaned master can't be failed over\n# in case of failure if it has no working slaves.\n#\n# Slaves migrate to orphaned masters only if there are still at least a\n# given number of other working slaves for their old master. This number\n# is the \"migration barrier\". A migration barrier of 1 means that a slave\n# will migrate only if there is at least 1 other working slave for its master\n# and so forth. It usually reflects the number of slaves you want for every\n# master in your cluster.\n#\n# Default is 1 (slaves migrate only if their masters remain with at least\n# one slave). To disable migration just set it to a very large value.\n# A value of 0 can be set but is useful only for debugging and dangerous\n# in production.\n#\n# cluster-migration-barrier 1\n \n# In order to setup your cluster make sure to read the documentation\n# available at http://redis.io web site.\n\n {% endcodeblock %}\n\n其它：\n\n41. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启\n{% codeblock %}\n    glueoutputbuf yes\n {% endcodeblock %}\n42. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法\n{% codeblock %}\n    hash-max-zipmap-entries 64\n\n    hash-max-zipmap-value 512\n {% endcodeblock %}\n43. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）\n{% codeblock %}\n    activerehashing yes\n {% endcodeblock %}\n44. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件\n{% codeblock %}\n    include /path/to/local.conf\n {% endcodeblock %}","slug":"redis配置","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeienq001mznz4q2bdnjk8","content":"<p>redis配置：</p>\n<p>使用方法：</p>\n<p>1）使用文件：在启动service是使用文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/redis/bin/redis-server /config.conf</div></pre></td></tr></table></figure></p>\n<p>2）启动redis后在程序中配置<br>通过config set config_name  config_value 设置<br>通过config get config_name :(*表示所有)</p>\n<p>配置说明：</p>\n<p>常用</p>\n<ol>\n<li><p>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">daemonize </div><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pidfile /var/run/redis.pid</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定Redis监听端口，默认端口为6379，如果你设为 0 ，redis 将不在 socket 上监听任何客户端连接<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">port 6379</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li><p>绑定的主机地址  示例，多个IP用空格隔开:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bind 127.0.0.1 </div><div class=\"line\"> </div></pre></td></tr></table></figure>\n<p>5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">timeout 300</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>指定日志记录级别，Redis总共支持四个级别：debug（测试环境）、verbose、notice（生产环境）、warning（仅一些重要的信息），默认为verbose</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">loglevel verbose</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">logfile stdout</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n<p>要想把日志记录到系统日志，就把它改成 yes，<br>也可以可选择性的更新其他的syslog 参数以达到你的要求<br>syslog-enabled no</p>\n<p>设置 syslog 的 identity。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"></div><div class=\"line\"> syslog-ident redis</div><div class=\"line\">  </div></pre></td></tr></table></figure>\n<p>设置 syslog 的 facility，必须是 USER 或者是 LOCAL0-LOCAL7 之间的值。<br>syslog-facility local0</p>\n</li>\n<li>设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">databases 16</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n</dbid></li>\n</ol>\n<p>快照备份：</p>\n<ol>\n<li><p>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">save &lt;seconds&gt; &lt;changes&gt;</div><div class=\"line\"></div><div class=\"line\">Redis默认配置文件中提供了三个条件：</div><div class=\"line\"></div><div class=\"line\">save 900 1</div><div class=\"line\"></div><div class=\"line\">save 300 10</div><div class=\"line\"></div><div class=\"line\">save 60 10000</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n<p> 分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</p>\n<p>注意：你可以注释掉所有的 save 行来停用保存功能。<br>也可以直接一个空字符串来实现停用：</p>\n</li>\n</ol>\n<ol>\n<li><p>默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，</p>\n<p>这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，<br>否则就会没人注意到灾难的发生。</p>\n<p>如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。</p>\n<p>然而你要是安装了靠谱的监控，你可能不希望 redis 这样做，那你就改成 no 好了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">stop-writes-on-bgsave-error yes</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rdbcompression yes</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定本地数据库文件名，默认值为dump.rdb<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">dbfilename dump.rdb</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li><p>指定本地数据库存放目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">dir ./</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n<p>主从复制</p>\n<p>主从复制。使用 slaveof 来让一个 redis 实例成为另一个reids 实例的副本。<br>注意这个只需要在 slave 上配置。</p>\n</li>\n<li>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">slaveof &lt;masterip&gt; &lt;masterport&gt;</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li><p>当master服务设置了密码保护时，slav服务连接master的密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">masterauth &lt;master-password&gt;</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n<p>16.是否返回同步不及时的时候的信息<br>当一个 slave 与 master 失去联系，或者复制正在进行的时候，<br>slave 可能会有两种表现：</p>\n<p>1) 如果为 yes ，slave 仍然会应答客户端请求，但返回的数据可能是过时，<br>或者数据可能是空的在第一次同步的时候</p>\n<p>2) 如果为 no ，在你执行除了 info he salveof 之外的其他命令时，<br>slave 都将返回一个 “SYNC with master in progress” 的错误，</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">slave-serve-stale-data yes</div><div class=\"line\">  </div></pre></td></tr></table></figure>\n<p>17.配置一个 slave 实体是否接受写入操作。<br> 通过写入操作来存储一些短暂的数据对于一个 slave 实例来说可能是有用的，<br> 因为相对从 master 重新同步数而言，据数据写入到 slave 会更容易被删除。<br> 但是如果客户端因为一个错误的配置写入，也可能会导致一些问题。<br> 从 redis 2.6 版起，默认 slaves 都是只读的。<br> 注意：只读的 slaves 没有被设计成在 internet 上暴露给不受信任的客户端。<br> 它仅仅是一个针对误用实例的一个保护层。<br>slave-read-only yes</p>\n<p>18.Slaves 在一个预定义的时间间隔内发送 ping 命令到 server 。<br> 你可以改变这个时间间隔。默认为 10 秒。<br> 为确认主库是否可用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">repl-ping-slave-period 10</div><div class=\"line\"> </div></pre></td></tr></table></figure></p>\n<ol>\n<li>设置主从复制过期时间<br>这个值一定要比 repl-ping-slave-period 大</li>\n</ol>\n<h1 id=\"repl-timeout-60\"><a href=\"#repl-timeout-60\" class=\"headerlink\" title=\"repl-timeout 60\"></a>repl-timeout 60</h1><p>20。  Disable TCP_NODELAY on the slave socket after SYNC?<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\"># If you select &quot;yes&quot; Redis will use a smaller number of TCP packets and</div><div class=\"line\"># less bandwidth to send data to slaves. But this can add a delay for</div><div class=\"line\"># the data to appear on the slave side, up to 40 milliseconds with</div><div class=\"line\"># Linux kernels using a default configuration.</div><div class=\"line\">#</div><div class=\"line\"># If you select &quot;no&quot; the delay for data to appear on the slave side will</div><div class=\"line\"># be reduced but more bandwidth will be used for replication.</div><div class=\"line\">#</div><div class=\"line\"># By default we optimize for low latency, but in very high traffic conditions</div><div class=\"line\"># or when the master and slaves are many hops away, turning this to &quot;yes&quot; may</div><div class=\"line\"># be a good idea.</div><div class=\"line\">repl-disable-tcp-nodelay no</div><div class=\"line\">  </div></pre></td></tr></table></figure><br>21.设置主从复制容量大小。这个 backlog 是一个用来在 slaves 被断开连接时<br> 存放 slave 数据的 buffer，所以当一个 slave 想要重新连接，通常不希望全部重新同步，<br> 只是部分同步就够了，仅仅传递 slave 在断开连接时丢失的这部分数据。<br> 这个值越大，salve 可以断开连接的时间就越长。</p>\n<h1 id=\"repl-backlog-size-1mb\"><a href=\"#repl-backlog-size-1mb\" class=\"headerlink\" title=\"repl-backlog-size 1mb\"></a>repl-backlog-size 1mb</h1><p>22.在某些时候，master 不再连接 slaves，backlog 将被释放<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># A value of 0 means to never release the backlog.</div><div class=\"line\"># 如果设置为 0 ，意味着绝不释放 backlog 。</div><div class=\"line\">#</div><div class=\"line\"># repl-backlog-ttl 3600</div><div class=\"line\">  </div></pre></td></tr></table></figure><br>23当 master 不能正常工作的时候，Redis Sentinel 会从 slaves 中选出一个新的 master，<br> 这个值越小，就越会被优先选中，但是如果是 0 ， 那是意味着这个 slave 不可能被选中。<br> 默认优先级为 100。<br>slave-priority 100<br>安全：</p>\n<ol>\n<li><p>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭</password></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">requirepass foobared</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n<p>限制：</p>\n</li>\n<li><p>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">maxclients 128</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">maxmemory &lt;bytes&gt;</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>最大内存策略，你有 5 个选择。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># </div><div class=\"line\"># volatile-lru -&gt; 使用 LRU 算法移除包含过期设置的 key 。</div><div class=\"line\"># allkeys-lru -&gt; 根据 LRU 算法移除所有的 key 。</div><div class=\"line\"># volatile-random -&gt; remove a random key with an expire set：移除随机包含过期设置的key</div><div class=\"line\"># allkeys-random -&gt; remove a random key, any key:移除随机所有过期设置的key</div><div class=\"line\"># volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)移除随机最近过期的key</div><div class=\"line\"># noeviction -&gt; 不让任何 key 过期，只是给写入操作返回一个错误</div><div class=\"line\">#</div><div class=\"line\"># The default is:</div><div class=\"line\">#</div><div class=\"line\"># maxmemory-policy noeviction</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">appendonly no</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定更新日志文件名，默认为appendonly.aof<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">appendfilename appendonly.aof</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定更新日志条件，共有3个可选值：<br>no：表示等操作系统进行数据缓存同步到磁盘（快）<br>always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）<br>everysec：表示每秒同步一次（折衷，默认值）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">appendfsync everysec</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>31.AOF策略设置为always或者everysec时，后台处理进程(后台保存或者AOF日志重写)会执行大量的I/O操作<br>在某些Linux配置中会阻止过长的fsync()请求。注意现在没有任何修复，即使fsync在另外一个线程进行处理<br>为了减缓这个问题，可以设置下面这个参数no-appendfsync-on-rewrite<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">no-appendfsync-on-rewrite no</div></pre></td></tr></table></figure><br>32.AOF 自动重写</p>\n<p>当AOF文件增长到一定大小的时候Redis能够调用 BGREWRITEAOF 对日志文件进行重写<br>它是这样工作的：Redis会记住上次进行些日志后文件的大小(如果从开机以来还没进行过重写，那日子大小在开机的时候确定)<br>基础大小会同现在的大小进行比较。如果现在的大小比基础大小大制定的百分比，重写功能将启动<br>同时需要指定一个最小大小用于AOF重写，这个用于阻止即使文件很小但是增长幅度很大也去重写AOF文件的情况</p>\n<h1 id=\"设置-percentage\"><a href=\"#设置-percentage\" class=\"headerlink\" title=\"设置 percentage\"></a>设置 percentage</h1><p>为0就关闭这个特性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">auto-aof-rewrite-percentage 100</div><div class=\"line\"></div><div class=\"line\">auto-aof-rewrite-min-size 64mb</div><div class=\"line\"> </div></pre></td></tr></table></figure><br>日志：</p>\n<p> Redis Slow Log 记录超过特定执行时间的命令。执行时间不包括I/O计算比如连接客户端，返回结果等，只是命令执行时间</p>\n<p>可以通过两个参数设置slow log：一个是告诉Redis执行超过多少时间被记录的参数slowlog-log-slower-than(微妙)，<br>另一个是slow log 的长度。当一个新命令被记录的时候最早的命令将被从队列中移除<br> 下面的时间以微妙微单位，因此1000000代表一分钟。</p>\n<p>33注意制定一个负数将关闭慢日志，而设置为0将强制每个命令都会记录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">slowlog-log-slower-than 10000</div><div class=\"line\"> </div></pre></td></tr></table></figure><br>34对日志长度没有限制，只是要注意它会消耗内存<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 可以通过 SLOWLOG RESET </div><div class=\"line\">回收被慢日志消耗的内存</div><div class=\"line\">slowlog-max-len 1024</div><div class=\"line\"> </div></pre></td></tr></table></figure><br>VM:</p>\n<ol>\n<li>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vm-enabled no</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vm-swap-file /tmp/redis.swap</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vm-max-memory 0</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vm-page-size 32</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vm-pages 134217728</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vm-max-threads 4</div><div class=\"line\"></div><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>lua脚本：</p>\n<p>41.执行lua脚本的超时时间<br>lua-time-limit 5000</p>\n<p>集群：<br>42.启用或停用集群</p>\n<h1 id=\"cluster-enabled-yes\"><a href=\"#cluster-enabled-yes\" class=\"headerlink\" title=\"cluster-enabled yes\"></a>cluster-enabled yes</h1><p>43.集群配置文件</p>\n<h1 id=\"cluster-config-file-nodes-6379-conf\"><a href=\"#cluster-config-file-nodes-6379-conf\" class=\"headerlink\" title=\"cluster-config-file nodes-6379.conf\"></a>cluster-config-file nodes-6379.conf</h1><p>44.节点超时时间<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"># cluster-node-timeout 15000</div><div class=\"line\"> </div><div class=\"line\"># A slave of a failing master will avoid to start a failover if its data</div><div class=\"line\"># looks too old.</div><div class=\"line\">#</div><div class=\"line\"># There is no simple way for a slave to actually have a exact measure of</div><div class=\"line\"># its &quot;data age&quot;, so the following two checks are performed:</div><div class=\"line\">#</div><div class=\"line\"># 1) If there are multiple slaves able to failover, they exchange messages</div><div class=\"line\">#    in order to try to give an advantage to the slave with the best</div><div class=\"line\">#    replication offset (more data from the master processed).</div><div class=\"line\">#    Slaves will try to get their rank by offset, and apply to the start</div><div class=\"line\">#    of the failover a delay proportional to their rank.</div><div class=\"line\">#</div><div class=\"line\"># 2) Every single slave computes the time of the last interaction with</div><div class=\"line\">#    its master. This can be the last ping or command received (if the master</div><div class=\"line\">#    is still in the &quot;connected&quot; state), or the time that elapsed since the</div><div class=\"line\">#    disconnection with the master (if the replication link is currently down).</div><div class=\"line\">#    If the last interaction is too old, the slave will not try to failover</div><div class=\"line\">#    at all.</div><div class=\"line\">#</div><div class=\"line\"># The point &quot;2&quot; can be tuned by user. Specifically a slave will not perform</div><div class=\"line\"># the failover if, since the last interaction with the master, the time</div><div class=\"line\"># elapsed is greater than:</div><div class=\"line\">#</div><div class=\"line\">#   (node-timeout * slave-validity-factor) + repl-ping-slave-period</div><div class=\"line\">#</div><div class=\"line\"># So for example if node-timeout is 30 seconds, and the slave-validity-factor</div><div class=\"line\"># is 10, and assuming a default repl-ping-slave-period of 10 seconds, the</div><div class=\"line\"># slave will not try to failover if it was not able to talk with the master</div><div class=\"line\"># for longer than 310 seconds.</div><div class=\"line\">#</div><div class=\"line\"># A large slave-validity-factor may allow slaves with too old data to failover</div><div class=\"line\"># a master, while a too small value may prevent the cluster from being able to</div><div class=\"line\"># elect a slave at all.</div><div class=\"line\">#</div><div class=\"line\"># For maximum availability, it is possible to set the slave-validity-factor</div><div class=\"line\"># to a value of 0, which means, that slaves will always try to failover the</div><div class=\"line\"># master regardless of the last time they interacted with the master.</div><div class=\"line\"># (However they&apos;ll always try to apply a delay proportional to their</div><div class=\"line\"># offset rank).</div><div class=\"line\">#</div><div class=\"line\"># Zero is the only value able to guarantee that when all the partitions heal</div><div class=\"line\"># the cluster will always be able to continue.</div><div class=\"line\">#</div><div class=\"line\"># cluster-slave-validity-factor 10</div><div class=\"line\"> </div><div class=\"line\"># Cluster slaves are able to migrate to orphaned masters, that are masters</div><div class=\"line\"># that are left without working slaves. This improves the cluster ability</div><div class=\"line\"># to resist to failures as otherwise an orphaned master can&apos;t be failed over</div><div class=\"line\"># in case of failure if it has no working slaves.</div><div class=\"line\">#</div><div class=\"line\"># Slaves migrate to orphaned masters only if there are still at least a</div><div class=\"line\"># given number of other working slaves for their old master. This number</div><div class=\"line\"># is the &quot;migration barrier&quot;. A migration barrier of 1 means that a slave</div><div class=\"line\"># will migrate only if there is at least 1 other working slave for its master</div><div class=\"line\"># and so forth. It usually reflects the number of slaves you want for every</div><div class=\"line\"># master in your cluster.</div><div class=\"line\">#</div><div class=\"line\"># Default is 1 (slaves migrate only if their masters remain with at least</div><div class=\"line\"># one slave). To disable migration just set it to a very large value.</div><div class=\"line\"># A value of 0 can be set but is useful only for debugging and dangerous</div><div class=\"line\"># in production.</div><div class=\"line\">#</div><div class=\"line\"># cluster-migration-barrier 1</div><div class=\"line\"> </div><div class=\"line\"># In order to setup your cluster make sure to read the documentation</div><div class=\"line\"># available at http://redis.io web site.</div><div class=\"line\"></div><div class=\"line\"> </div></pre></td></tr></table></figure></p>\n<p>其它：</p>\n<ol>\n<li>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">glueoutputbuf yes</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hash-max-zipmap-entries 64</div><div class=\"line\"></div><div class=\"line\">hash-max-zipmap-value 512</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">activerehashing yes</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">include /path/to/local.conf</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<p>redis配置：</p>\n<p>使用方法：</p>\n<p>1）使用文件：在启动service是使用文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/redis/bin/redis-server /config.conf</div></pre></td></tr></table></figure></p>\n<p>2）启动redis后在程序中配置<br>通过config set config_name  config_value 设置<br>通过config get config_name :(*表示所有)</p>\n<p>配置说明：</p>\n<p>常用</p>\n<ol>\n<li><p>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">daemonize </div><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pidfile /var/run/redis.pid</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定Redis监听端口，默认端口为6379，如果你设为 0 ，redis 将不在 socket 上监听任何客户端连接<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">port 6379</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li><p>绑定的主机地址  示例，多个IP用空格隔开:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bind 127.0.0.1 </div><div class=\"line\"> </div></pre></td></tr></table></figure>\n<p>5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">timeout 300</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>指定日志记录级别，Redis总共支持四个级别：debug（测试环境）、verbose、notice（生产环境）、warning（仅一些重要的信息），默认为verbose</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">loglevel verbose</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">logfile stdout</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n<p>要想把日志记录到系统日志，就把它改成 yes，<br>也可以可选择性的更新其他的syslog 参数以达到你的要求<br>syslog-enabled no</p>\n<p>设置 syslog 的 identity。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"></div><div class=\"line\"> syslog-ident redis</div><div class=\"line\">  </div></pre></td></tr></table></figure>\n<p>设置 syslog 的 facility，必须是 USER 或者是 LOCAL0-LOCAL7 之间的值。<br>syslog-facility local0</p>\n</li>\n<li>设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">databases 16</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>快照备份：</p>\n<ol>\n<li><p>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">save &lt;seconds&gt; &lt;changes&gt;</div><div class=\"line\"></div><div class=\"line\">Redis默认配置文件中提供了三个条件：</div><div class=\"line\"></div><div class=\"line\">save 900 1</div><div class=\"line\"></div><div class=\"line\">save 300 10</div><div class=\"line\"></div><div class=\"line\">save 60 10000</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n<p> 分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</p>\n<p>注意：你可以注释掉所有的 save 行来停用保存功能。<br>也可以直接一个空字符串来实现停用：</p>\n</li>\n</ol>\n<ol>\n<li><p>默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，</p>\n<p>这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，<br>否则就会没人注意到灾难的发生。</p>\n<p>如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。</p>\n<p>然而你要是安装了靠谱的监控，你可能不希望 redis 这样做，那你就改成 no 好了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">stop-writes-on-bgsave-error yes</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rdbcompression yes</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定本地数据库文件名，默认值为dump.rdb<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">dbfilename dump.rdb</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li><p>指定本地数据库存放目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">dir ./</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n<p>主从复制</p>\n<p>主从复制。使用 slaveof 来让一个 redis 实例成为另一个reids 实例的副本。<br>注意这个只需要在 slave 上配置。</p>\n</li>\n<li>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">slaveof &lt;masterip&gt; &lt;masterport&gt;</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li><p>当master服务设置了密码保护时，slav服务连接master的密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">masterauth &lt;master-password&gt;</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n<p>16.是否返回同步不及时的时候的信息<br>当一个 slave 与 master 失去联系，或者复制正在进行的时候，<br>slave 可能会有两种表现：</p>\n<p>1) 如果为 yes ，slave 仍然会应答客户端请求，但返回的数据可能是过时，<br>或者数据可能是空的在第一次同步的时候</p>\n<p>2) 如果为 no ，在你执行除了 info he salveof 之外的其他命令时，<br>slave 都将返回一个 “SYNC with master in progress” 的错误，</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">slave-serve-stale-data yes</div><div class=\"line\">  </div></pre></td></tr></table></figure>\n<p>17.配置一个 slave 实体是否接受写入操作。<br> 通过写入操作来存储一些短暂的数据对于一个 slave 实例来说可能是有用的，<br> 因为相对从 master 重新同步数而言，据数据写入到 slave 会更容易被删除。<br> 但是如果客户端因为一个错误的配置写入，也可能会导致一些问题。<br> 从 redis 2.6 版起，默认 slaves 都是只读的。<br> 注意：只读的 slaves 没有被设计成在 internet 上暴露给不受信任的客户端。<br> 它仅仅是一个针对误用实例的一个保护层。<br>slave-read-only yes</p>\n<p>18.Slaves 在一个预定义的时间间隔内发送 ping 命令到 server 。<br> 你可以改变这个时间间隔。默认为 10 秒。<br> 为确认主库是否可用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">repl-ping-slave-period 10</div><div class=\"line\"> </div></pre></td></tr></table></figure></p>\n<ol>\n<li>设置主从复制过期时间<br>这个值一定要比 repl-ping-slave-period 大</li>\n</ol>\n<h1 id=\"repl-timeout-60\"><a href=\"#repl-timeout-60\" class=\"headerlink\" title=\"repl-timeout 60\"></a>repl-timeout 60</h1><p>20。  Disable TCP_NODELAY on the slave socket after SYNC?<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\"># If you select &quot;yes&quot; Redis will use a smaller number of TCP packets and</div><div class=\"line\"># less bandwidth to send data to slaves. But this can add a delay for</div><div class=\"line\"># the data to appear on the slave side, up to 40 milliseconds with</div><div class=\"line\"># Linux kernels using a default configuration.</div><div class=\"line\">#</div><div class=\"line\"># If you select &quot;no&quot; the delay for data to appear on the slave side will</div><div class=\"line\"># be reduced but more bandwidth will be used for replication.</div><div class=\"line\">#</div><div class=\"line\"># By default we optimize for low latency, but in very high traffic conditions</div><div class=\"line\"># or when the master and slaves are many hops away, turning this to &quot;yes&quot; may</div><div class=\"line\"># be a good idea.</div><div class=\"line\">repl-disable-tcp-nodelay no</div><div class=\"line\">  </div></pre></td></tr></table></figure><br>21.设置主从复制容量大小。这个 backlog 是一个用来在 slaves 被断开连接时<br> 存放 slave 数据的 buffer，所以当一个 slave 想要重新连接，通常不希望全部重新同步，<br> 只是部分同步就够了，仅仅传递 slave 在断开连接时丢失的这部分数据。<br> 这个值越大，salve 可以断开连接的时间就越长。</p>\n<h1 id=\"repl-backlog-size-1mb\"><a href=\"#repl-backlog-size-1mb\" class=\"headerlink\" title=\"repl-backlog-size 1mb\"></a>repl-backlog-size 1mb</h1><p>22.在某些时候，master 不再连接 slaves，backlog 将被释放<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># A value of 0 means to never release the backlog.</div><div class=\"line\"># 如果设置为 0 ，意味着绝不释放 backlog 。</div><div class=\"line\">#</div><div class=\"line\"># repl-backlog-ttl 3600</div><div class=\"line\">  </div></pre></td></tr></table></figure><br>23当 master 不能正常工作的时候，Redis Sentinel 会从 slaves 中选出一个新的 master，<br> 这个值越小，就越会被优先选中，但是如果是 0 ， 那是意味着这个 slave 不可能被选中。<br> 默认优先级为 100。<br>slave-priority 100<br>安全：</p>\n<ol>\n<li><p>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">requirepass foobared</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n<p>限制：</p>\n</li>\n<li><p>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">maxclients 128</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">maxmemory &lt;bytes&gt;</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>最大内存策略，你有 5 个选择。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># </div><div class=\"line\"># volatile-lru -&gt; 使用 LRU 算法移除包含过期设置的 key 。</div><div class=\"line\"># allkeys-lru -&gt; 根据 LRU 算法移除所有的 key 。</div><div class=\"line\"># volatile-random -&gt; remove a random key with an expire set：移除随机包含过期设置的key</div><div class=\"line\"># allkeys-random -&gt; remove a random key, any key:移除随机所有过期设置的key</div><div class=\"line\"># volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)移除随机最近过期的key</div><div class=\"line\"># noeviction -&gt; 不让任何 key 过期，只是给写入操作返回一个错误</div><div class=\"line\">#</div><div class=\"line\"># The default is:</div><div class=\"line\">#</div><div class=\"line\"># maxmemory-policy noeviction</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">appendonly no</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定更新日志文件名，默认为appendonly.aof<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">appendfilename appendonly.aof</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定更新日志条件，共有3个可选值：<br>no：表示等操作系统进行数据缓存同步到磁盘（快）<br>always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）<br>everysec：表示每秒同步一次（折衷，默认值）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">appendfsync everysec</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>31.AOF策略设置为always或者everysec时，后台处理进程(后台保存或者AOF日志重写)会执行大量的I/O操作<br>在某些Linux配置中会阻止过长的fsync()请求。注意现在没有任何修复，即使fsync在另外一个线程进行处理<br>为了减缓这个问题，可以设置下面这个参数no-appendfsync-on-rewrite<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">no-appendfsync-on-rewrite no</div></pre></td></tr></table></figure><br>32.AOF 自动重写</p>\n<p>当AOF文件增长到一定大小的时候Redis能够调用 BGREWRITEAOF 对日志文件进行重写<br>它是这样工作的：Redis会记住上次进行些日志后文件的大小(如果从开机以来还没进行过重写，那日子大小在开机的时候确定)<br>基础大小会同现在的大小进行比较。如果现在的大小比基础大小大制定的百分比，重写功能将启动<br>同时需要指定一个最小大小用于AOF重写，这个用于阻止即使文件很小但是增长幅度很大也去重写AOF文件的情况</p>\n<h1 id=\"设置-percentage\"><a href=\"#设置-percentage\" class=\"headerlink\" title=\"设置 percentage\"></a>设置 percentage</h1><p>为0就关闭这个特性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">auto-aof-rewrite-percentage 100</div><div class=\"line\"></div><div class=\"line\">auto-aof-rewrite-min-size 64mb</div><div class=\"line\"> </div></pre></td></tr></table></figure><br>日志：</p>\n<p> Redis Slow Log 记录超过特定执行时间的命令。执行时间不包括I/O计算比如连接客户端，返回结果等，只是命令执行时间</p>\n<p>可以通过两个参数设置slow log：一个是告诉Redis执行超过多少时间被记录的参数slowlog-log-slower-than(微妙)，<br>另一个是slow log 的长度。当一个新命令被记录的时候最早的命令将被从队列中移除<br> 下面的时间以微妙微单位，因此1000000代表一分钟。</p>\n<p>33注意制定一个负数将关闭慢日志，而设置为0将强制每个命令都会记录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">slowlog-log-slower-than 10000</div><div class=\"line\"> </div></pre></td></tr></table></figure><br>34对日志长度没有限制，只是要注意它会消耗内存<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 可以通过 SLOWLOG RESET </div><div class=\"line\">回收被慢日志消耗的内存</div><div class=\"line\">slowlog-max-len 1024</div><div class=\"line\"> </div></pre></td></tr></table></figure><br>VM:</p>\n<ol>\n<li>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vm-enabled no</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vm-swap-file /tmp/redis.swap</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vm-max-memory 0</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vm-page-size 32</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vm-pages 134217728</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vm-max-threads 4</div><div class=\"line\"></div><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>lua脚本：</p>\n<p>41.执行lua脚本的超时时间<br>lua-time-limit 5000</p>\n<p>集群：<br>42.启用或停用集群</p>\n<h1 id=\"cluster-enabled-yes\"><a href=\"#cluster-enabled-yes\" class=\"headerlink\" title=\"cluster-enabled yes\"></a>cluster-enabled yes</h1><p>43.集群配置文件</p>\n<h1 id=\"cluster-config-file-nodes-6379-conf\"><a href=\"#cluster-config-file-nodes-6379-conf\" class=\"headerlink\" title=\"cluster-config-file nodes-6379.conf\"></a>cluster-config-file nodes-6379.conf</h1><p>44.节点超时时间<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"># cluster-node-timeout 15000</div><div class=\"line\"> </div><div class=\"line\"># A slave of a failing master will avoid to start a failover if its data</div><div class=\"line\"># looks too old.</div><div class=\"line\">#</div><div class=\"line\"># There is no simple way for a slave to actually have a exact measure of</div><div class=\"line\"># its &quot;data age&quot;, so the following two checks are performed:</div><div class=\"line\">#</div><div class=\"line\"># 1) If there are multiple slaves able to failover, they exchange messages</div><div class=\"line\">#    in order to try to give an advantage to the slave with the best</div><div class=\"line\">#    replication offset (more data from the master processed).</div><div class=\"line\">#    Slaves will try to get their rank by offset, and apply to the start</div><div class=\"line\">#    of the failover a delay proportional to their rank.</div><div class=\"line\">#</div><div class=\"line\"># 2) Every single slave computes the time of the last interaction with</div><div class=\"line\">#    its master. This can be the last ping or command received (if the master</div><div class=\"line\">#    is still in the &quot;connected&quot; state), or the time that elapsed since the</div><div class=\"line\">#    disconnection with the master (if the replication link is currently down).</div><div class=\"line\">#    If the last interaction is too old, the slave will not try to failover</div><div class=\"line\">#    at all.</div><div class=\"line\">#</div><div class=\"line\"># The point &quot;2&quot; can be tuned by user. Specifically a slave will not perform</div><div class=\"line\"># the failover if, since the last interaction with the master, the time</div><div class=\"line\"># elapsed is greater than:</div><div class=\"line\">#</div><div class=\"line\">#   (node-timeout * slave-validity-factor) + repl-ping-slave-period</div><div class=\"line\">#</div><div class=\"line\"># So for example if node-timeout is 30 seconds, and the slave-validity-factor</div><div class=\"line\"># is 10, and assuming a default repl-ping-slave-period of 10 seconds, the</div><div class=\"line\"># slave will not try to failover if it was not able to talk with the master</div><div class=\"line\"># for longer than 310 seconds.</div><div class=\"line\">#</div><div class=\"line\"># A large slave-validity-factor may allow slaves with too old data to failover</div><div class=\"line\"># a master, while a too small value may prevent the cluster from being able to</div><div class=\"line\"># elect a slave at all.</div><div class=\"line\">#</div><div class=\"line\"># For maximum availability, it is possible to set the slave-validity-factor</div><div class=\"line\"># to a value of 0, which means, that slaves will always try to failover the</div><div class=\"line\"># master regardless of the last time they interacted with the master.</div><div class=\"line\"># (However they&apos;ll always try to apply a delay proportional to their</div><div class=\"line\"># offset rank).</div><div class=\"line\">#</div><div class=\"line\"># Zero is the only value able to guarantee that when all the partitions heal</div><div class=\"line\"># the cluster will always be able to continue.</div><div class=\"line\">#</div><div class=\"line\"># cluster-slave-validity-factor 10</div><div class=\"line\"> </div><div class=\"line\"># Cluster slaves are able to migrate to orphaned masters, that are masters</div><div class=\"line\"># that are left without working slaves. This improves the cluster ability</div><div class=\"line\"># to resist to failures as otherwise an orphaned master can&apos;t be failed over</div><div class=\"line\"># in case of failure if it has no working slaves.</div><div class=\"line\">#</div><div class=\"line\"># Slaves migrate to orphaned masters only if there are still at least a</div><div class=\"line\"># given number of other working slaves for their old master. This number</div><div class=\"line\"># is the &quot;migration barrier&quot;. A migration barrier of 1 means that a slave</div><div class=\"line\"># will migrate only if there is at least 1 other working slave for its master</div><div class=\"line\"># and so forth. It usually reflects the number of slaves you want for every</div><div class=\"line\"># master in your cluster.</div><div class=\"line\">#</div><div class=\"line\"># Default is 1 (slaves migrate only if their masters remain with at least</div><div class=\"line\"># one slave). To disable migration just set it to a very large value.</div><div class=\"line\"># A value of 0 can be set but is useful only for debugging and dangerous</div><div class=\"line\"># in production.</div><div class=\"line\">#</div><div class=\"line\"># cluster-migration-barrier 1</div><div class=\"line\"> </div><div class=\"line\"># In order to setup your cluster make sure to read the documentation</div><div class=\"line\"># available at http://redis.io web site.</div><div class=\"line\"></div><div class=\"line\"> </div></pre></td></tr></table></figure></p>\n<p>其它：</p>\n<ol>\n<li>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">glueoutputbuf yes</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hash-max-zipmap-entries 64</div><div class=\"line\"></div><div class=\"line\">hash-max-zipmap-value 512</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">activerehashing yes</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n<li>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">include /path/to/local.conf</div><div class=\"line\"> </div></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"redis高级命令","date":"2016-07-03T10:53:36.000Z","_content":"redis高级命令：\n\n订阅：\n\n1\tpusbscribe pattern [pattern ...] \n订阅通道匹配给定的模式。\n2\tpubsub subcommand [argument [argument ...]] \n讲述了PubSub的系统，例如它的客户是活动在服务器上的状态。\n3\tpublish channel message \n发布一条消息到通道。\n4\tpunsubscribe  [pattern [pattern ...]] \n停止监听发布到通道匹配给定模式的消息。\n5\tsubscribe channel [channel ...] \n监听发布到指定的通道信息。\n6\tunsubscribe [channel [channel ...]] \n停止监听发布给定的通道信息。\n\nphp拓展使用方法：\nhttps://github.com/nicolasff/phpredis pecl扩展包目前只提供了两个接口 publish  subscribe\n\nphpredis是c写的php模块\n\nhttps://github.com/jamm/Memory/blob/master/RedisServer.php\n\nphp这个是php是基于redis protocol的fsocketopen链接后操作的类库，提供的接口比较全面；publish可以进入数据，但是subscrbie没有阻塞；\n\n可以在原类包当中修改其加入对阻塞模形的支持；\n\n发布功能：\n\n$redis = new Redis();\n\n$res = $redis->connect($REDIS_HOSTS['CACHE']['host'], $REDIS_HOSTS['CACHE']['port'], 1 );\n\n$res = $redis->publish($key,$value);\n\n定阅功能：                           \n\n$redis = new Redis();\n\n$res = $redis->pconnect($REDIS_HOSTS['CACHE']['host'], $REDIS_HOSTS['CACHE']['port']);\n\n$res = $redis->subscribe(array($key),array('SinaRedis','subscribe_handler'));\n\n第二个参数为回调方法；\n\npublic static function subscribe_handler($redis, $channel, $msg){\n\n            print_r($redis);\n\n            echo $chan;\n\n            echo $msg;\n\n            return true;\n\n  }\n\n定阅 redis_subscriber.php\n\nSinaRedis::subscribe('wangbin_test');\n\n发布redis_publisher.php\n\n\n\n事务：\n\n1\tdiscard \n\n取消事务，放弃执行事务块内的所有命令。\n\n2\texec\n\n执行所有事务块内的命令。\n\n3\tmulti \n\n标记一个事务块的开始。\n\n4\t unwatch \n\n取消 WATCH 命令对所有 key 的监视。\n\n5\twatch key [key ...] \n\n监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。\n\n\n\nphp扩展使用方法：\n\nmulti, exec, discard.\n\n$ret = $redis->multi()\n\n    ->set('key1', 'val1')\n\n    ->get('key1')\n\n    ->set('key2', 'val2')\n\n    ->get('key2')\n\n    ->exec();\n\n/*\n\n$ret == array(\n\n    0 => TRUE,\n\n    1 => 'val1',\n\n    2 => TRUE,\n\n    3 => 'val2');\n\n*/\n\nwatch, unwatch\n\n$redis->watch('x'); // or for a list of keys: $redis->watch(array('x','another key'));\n\n/* long code here during the execution of which other clients could well modify `x` */\n\n$ret = $redis->multi()\n\n    ->incr('x')\n\n    ->exec();\n\n/*\n\n$ret = FALSE if x has been modified between the call to WATCH and the call to EXE\n\n\n\n脚本：\n\n1\teval script numkeys key [key ...] arg [arg ...] \n\n执行 Lua 脚本。\n\n参数说明：\n\nscript： 参数是一段 Lua 5.1 脚本程序。脚本不必(也不应该)定义为一个 Lua 函数。\n\nnumkeys： 用于指定键名参数的个数。\n\nkey [key ...]： 从 EVAL 的第三个参数开始算起，表示在脚本中所用到的那些 Redis 键(key)，这些键名参数可以在 Lua 中通过全局变量 KEYS 数组，用 1 为基址的形式访问( KEYS[1] ， KEYS[2] ，以此类推)。\n\narg [arg ...]： 附加参数，在 Lua 中通过全局变量 ARGV 数组访问，访问的形式和 KEYS 变量类似( ARGV[1] 、 ARGV[2] ，诸如此类)。\n\n\n\n2\tevalsha sha1 numkeys key [key ...] arg [arg ...] \n\n执行 Lua 脚本。\n\n3\t script exists  script [script ...] \n\n查看指定的脚本是否已经被保存在缓存当中。\n\n4     scirpt flush\n\n从脚本缓存中移除所有脚本。\n\n5\tscript kill\n\n杀死当前正在运行的 Lua 脚本。\n\n6\tscript load  script \n\n将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本\n\nphp 扩展的使用方法：\n\n\n\n\n\n服务器命令：\n\n序号\t命令及描述\n\n 1 bgrewriteaof\n\n异步执行一个 AOF（AppendOnly File） 文件重写操作\n\n2\tbgsave\n\n在后台异步保存当前数据库的数据到磁盘\n\n3  client kill  [ip:port] [ID client-id] \n\n关闭客户端连接\n\n4\tclient list\n\n获取连接到服务器的客户端连接列表\n\n5   client getname\n\n获取连接的名称\n\n6   client pause timeout \n\n在指定时间内终止运行来自客户端的命令\n\n7  client setname  connection-name \n\n设置当前连接的名称\n\n8  cluster slots\n\n获取集群节点的映射数组\n\n9\t commad\n\n获取 Redis 命令详情数组\n\n10\tcommand count\n\n获取 Redis 命令总数\n\n11\tcommand getkeys \n\n获取给定命令的所有键\n\n12\ttime\n\n返回当前服务器时间\n\n13\tcommand info  command-name [command-name ...] \n\n获取指定 Redis 命令描述的数组\n\n14 config get parameter \n\n获取指定配置参数的值\n\n15 config rewrite\n\n对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写\n\n16\tconfig set  parameter value \n\n修改 redis 配置参数，无需重启\n\n17 config resetstat\n\n重置 INFO 命令中的某些统计数据\n\n18\tdbsize\n\n返回当前数据库的 key 的数量\n\n19  debug object key\n\n获取 key 的调试信息\n\n20\tdebug segfault\n\n让 Redis 服务崩溃\n\n21 flushall\n\n删除所有数据库的所有key\n\n22\tflushdb\n\n删除当前数据库的所有key\n\n23\tinfo [section] \n\n获取 Redis 服务器的各种信息和统计数值\n\n24 lastsave\n\n返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示\n\n25  monitor\n\n实时打印出 Redis 服务器接收到的命令，调试用\n\n26  role\n\n返回主从实例所属的角色\n\n27 save\n\n异步保存数据到硬盘\n\n28 shutdown [NOSAVE] [SAVE] \n\n异步保存数据到硬盘，并关闭服务器\n\n29  slaveof host port \n\n将当前服务器转变为指定服务器的从属服务器(slave server)\n\n30  slowlog subcommand [argument] \n\n管理 redis 的慢日志\n\n31 sync\n\n用于复制功能(replication)的内部命令\n\n","source":"_posts/redis高级命令.md","raw":"---\ntitle: redis高级命令\ndate: 2016-07-03 18:53:36\ntags:\n---\nredis高级命令：\n\n订阅：\n\n1\tpusbscribe pattern [pattern ...] \n订阅通道匹配给定的模式。\n2\tpubsub subcommand [argument [argument ...]] \n讲述了PubSub的系统，例如它的客户是活动在服务器上的状态。\n3\tpublish channel message \n发布一条消息到通道。\n4\tpunsubscribe  [pattern [pattern ...]] \n停止监听发布到通道匹配给定模式的消息。\n5\tsubscribe channel [channel ...] \n监听发布到指定的通道信息。\n6\tunsubscribe [channel [channel ...]] \n停止监听发布给定的通道信息。\n\nphp拓展使用方法：\nhttps://github.com/nicolasff/phpredis pecl扩展包目前只提供了两个接口 publish  subscribe\n\nphpredis是c写的php模块\n\nhttps://github.com/jamm/Memory/blob/master/RedisServer.php\n\nphp这个是php是基于redis protocol的fsocketopen链接后操作的类库，提供的接口比较全面；publish可以进入数据，但是subscrbie没有阻塞；\n\n可以在原类包当中修改其加入对阻塞模形的支持；\n\n发布功能：\n\n$redis = new Redis();\n\n$res = $redis->connect($REDIS_HOSTS['CACHE']['host'], $REDIS_HOSTS['CACHE']['port'], 1 );\n\n$res = $redis->publish($key,$value);\n\n定阅功能：                           \n\n$redis = new Redis();\n\n$res = $redis->pconnect($REDIS_HOSTS['CACHE']['host'], $REDIS_HOSTS['CACHE']['port']);\n\n$res = $redis->subscribe(array($key),array('SinaRedis','subscribe_handler'));\n\n第二个参数为回调方法；\n\npublic static function subscribe_handler($redis, $channel, $msg){\n\n            print_r($redis);\n\n            echo $chan;\n\n            echo $msg;\n\n            return true;\n\n  }\n\n定阅 redis_subscriber.php\n\nSinaRedis::subscribe('wangbin_test');\n\n发布redis_publisher.php\n\n\n\n事务：\n\n1\tdiscard \n\n取消事务，放弃执行事务块内的所有命令。\n\n2\texec\n\n执行所有事务块内的命令。\n\n3\tmulti \n\n标记一个事务块的开始。\n\n4\t unwatch \n\n取消 WATCH 命令对所有 key 的监视。\n\n5\twatch key [key ...] \n\n监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。\n\n\n\nphp扩展使用方法：\n\nmulti, exec, discard.\n\n$ret = $redis->multi()\n\n    ->set('key1', 'val1')\n\n    ->get('key1')\n\n    ->set('key2', 'val2')\n\n    ->get('key2')\n\n    ->exec();\n\n/*\n\n$ret == array(\n\n    0 => TRUE,\n\n    1 => 'val1',\n\n    2 => TRUE,\n\n    3 => 'val2');\n\n*/\n\nwatch, unwatch\n\n$redis->watch('x'); // or for a list of keys: $redis->watch(array('x','another key'));\n\n/* long code here during the execution of which other clients could well modify `x` */\n\n$ret = $redis->multi()\n\n    ->incr('x')\n\n    ->exec();\n\n/*\n\n$ret = FALSE if x has been modified between the call to WATCH and the call to EXE\n\n\n\n脚本：\n\n1\teval script numkeys key [key ...] arg [arg ...] \n\n执行 Lua 脚本。\n\n参数说明：\n\nscript： 参数是一段 Lua 5.1 脚本程序。脚本不必(也不应该)定义为一个 Lua 函数。\n\nnumkeys： 用于指定键名参数的个数。\n\nkey [key ...]： 从 EVAL 的第三个参数开始算起，表示在脚本中所用到的那些 Redis 键(key)，这些键名参数可以在 Lua 中通过全局变量 KEYS 数组，用 1 为基址的形式访问( KEYS[1] ， KEYS[2] ，以此类推)。\n\narg [arg ...]： 附加参数，在 Lua 中通过全局变量 ARGV 数组访问，访问的形式和 KEYS 变量类似( ARGV[1] 、 ARGV[2] ，诸如此类)。\n\n\n\n2\tevalsha sha1 numkeys key [key ...] arg [arg ...] \n\n执行 Lua 脚本。\n\n3\t script exists  script [script ...] \n\n查看指定的脚本是否已经被保存在缓存当中。\n\n4     scirpt flush\n\n从脚本缓存中移除所有脚本。\n\n5\tscript kill\n\n杀死当前正在运行的 Lua 脚本。\n\n6\tscript load  script \n\n将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本\n\nphp 扩展的使用方法：\n\n\n\n\n\n服务器命令：\n\n序号\t命令及描述\n\n 1 bgrewriteaof\n\n异步执行一个 AOF（AppendOnly File） 文件重写操作\n\n2\tbgsave\n\n在后台异步保存当前数据库的数据到磁盘\n\n3  client kill  [ip:port] [ID client-id] \n\n关闭客户端连接\n\n4\tclient list\n\n获取连接到服务器的客户端连接列表\n\n5   client getname\n\n获取连接的名称\n\n6   client pause timeout \n\n在指定时间内终止运行来自客户端的命令\n\n7  client setname  connection-name \n\n设置当前连接的名称\n\n8  cluster slots\n\n获取集群节点的映射数组\n\n9\t commad\n\n获取 Redis 命令详情数组\n\n10\tcommand count\n\n获取 Redis 命令总数\n\n11\tcommand getkeys \n\n获取给定命令的所有键\n\n12\ttime\n\n返回当前服务器时间\n\n13\tcommand info  command-name [command-name ...] \n\n获取指定 Redis 命令描述的数组\n\n14 config get parameter \n\n获取指定配置参数的值\n\n15 config rewrite\n\n对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写\n\n16\tconfig set  parameter value \n\n修改 redis 配置参数，无需重启\n\n17 config resetstat\n\n重置 INFO 命令中的某些统计数据\n\n18\tdbsize\n\n返回当前数据库的 key 的数量\n\n19  debug object key\n\n获取 key 的调试信息\n\n20\tdebug segfault\n\n让 Redis 服务崩溃\n\n21 flushall\n\n删除所有数据库的所有key\n\n22\tflushdb\n\n删除当前数据库的所有key\n\n23\tinfo [section] \n\n获取 Redis 服务器的各种信息和统计数值\n\n24 lastsave\n\n返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示\n\n25  monitor\n\n实时打印出 Redis 服务器接收到的命令，调试用\n\n26  role\n\n返回主从实例所属的角色\n\n27 save\n\n异步保存数据到硬盘\n\n28 shutdown [NOSAVE] [SAVE] \n\n异步保存数据到硬盘，并关闭服务器\n\n29  slaveof host port \n\n将当前服务器转变为指定服务器的从属服务器(slave server)\n\n30  slowlog subcommand [argument] \n\n管理 redis 的慢日志\n\n31 sync\n\n用于复制功能(replication)的内部命令\n\n","slug":"redis高级命令","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeiens001pznz4wxqaqxfz","content":"<p>redis高级命令：</p>\n<p>订阅：</p>\n<p>1    pusbscribe pattern [pattern …]<br>订阅通道匹配给定的模式。<br>2    pubsub subcommand [argument [argument …]]<br>讲述了PubSub的系统，例如它的客户是活动在服务器上的状态。<br>3    publish channel message<br>发布一条消息到通道。<br>4    punsubscribe  [pattern [pattern …]]<br>停止监听发布到通道匹配给定模式的消息。<br>5    subscribe channel [channel …]<br>监听发布到指定的通道信息。<br>6    unsubscribe [channel [channel …]]<br>停止监听发布给定的通道信息。</p>\n<p>php拓展使用方法：<br><a href=\"https://github.com/nicolasff/phpredis\" target=\"_blank\" rel=\"external\">https://github.com/nicolasff/phpredis</a> pecl扩展包目前只提供了两个接口 publish  subscribe</p>\n<p>phpredis是c写的php模块</p>\n<p><a href=\"https://github.com/jamm/Memory/blob/master/RedisServer.php\" target=\"_blank\" rel=\"external\">https://github.com/jamm/Memory/blob/master/RedisServer.php</a></p>\n<p>php这个是php是基于redis protocol的fsocketopen链接后操作的类库，提供的接口比较全面；publish可以进入数据，但是subscrbie没有阻塞；</p>\n<p>可以在原类包当中修改其加入对阻塞模形的支持；</p>\n<p>发布功能：</p>\n<p>$redis = new Redis();</p>\n<p>$res = $redis-&gt;connect($REDIS_HOSTS[‘CACHE’][‘host’], $REDIS_HOSTS[‘CACHE’][‘port’], 1 );</p>\n<p>$res = $redis-&gt;publish($key,$value);</p>\n<p>定阅功能：                           </p>\n<p>$redis = new Redis();</p>\n<p>$res = $redis-&gt;pconnect($REDIS_HOSTS[‘CACHE’][‘host’], $REDIS_HOSTS[‘CACHE’][‘port’]);</p>\n<p>$res = $redis-&gt;subscribe(array($key),array(‘SinaRedis’,’subscribe_handler’));</p>\n<p>第二个参数为回调方法；</p>\n<p>public static function subscribe_handler($redis, $channel, $msg){</p>\n<pre><code>print_r($redis);\n\necho $chan;\n\necho $msg;\n\nreturn true;\n</code></pre><p>  }</p>\n<p>定阅 redis_subscriber.php</p>\n<p>SinaRedis::subscribe(‘wangbin_test’);</p>\n<p>发布redis_publisher.php</p>\n<p>事务：</p>\n<p>1    discard </p>\n<p>取消事务，放弃执行事务块内的所有命令。</p>\n<p>2    exec</p>\n<p>执行所有事务块内的命令。</p>\n<p>3    multi </p>\n<p>标记一个事务块的开始。</p>\n<p>4     unwatch </p>\n<p>取消 WATCH 命令对所有 key 的监视。</p>\n<p>5    watch key [key …] </p>\n<p>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p>\n<p>php扩展使用方法：</p>\n<p>multi, exec, discard.</p>\n<p>$ret = $redis-&gt;multi()</p>\n<pre><code>-&gt;set(&apos;key1&apos;, &apos;val1&apos;)\n\n-&gt;get(&apos;key1&apos;)\n\n-&gt;set(&apos;key2&apos;, &apos;val2&apos;)\n\n-&gt;get(&apos;key2&apos;)\n\n-&gt;exec();\n</code></pre><p>/*</p>\n<p>$ret == array(</p>\n<pre><code>0 =&gt; TRUE,\n\n1 =&gt; &apos;val1&apos;,\n\n2 =&gt; TRUE,\n\n3 =&gt; &apos;val2&apos;);\n</code></pre><p>*/</p>\n<p>watch, unwatch</p>\n<p>$redis-&gt;watch(‘x’); // or for a list of keys: $redis-&gt;watch(array(‘x’,’another key’));</p>\n<p>/<em> long code here during the execution of which other clients could well modify <code>x</code> </em>/</p>\n<p>$ret = $redis-&gt;multi()</p>\n<pre><code>-&gt;incr(&apos;x&apos;)\n\n-&gt;exec();\n</code></pre><p>/*</p>\n<p>$ret = FALSE if x has been modified between the call to WATCH and the call to EXE</p>\n<p>脚本：</p>\n<p>1    eval script numkeys key [key …] arg [arg …] </p>\n<p>执行 Lua 脚本。</p>\n<p>参数说明：</p>\n<p>script： 参数是一段 Lua 5.1 脚本程序。脚本不必(也不应该)定义为一个 Lua 函数。</p>\n<p>numkeys： 用于指定键名参数的个数。</p>\n<p>key [key …]： 从 EVAL 的第三个参数开始算起，表示在脚本中所用到的那些 Redis 键(key)，这些键名参数可以在 Lua 中通过全局变量 KEYS 数组，用 1 为基址的形式访问( KEYS[1] ， KEYS[2] ，以此类推)。</p>\n<p>arg [arg …]： 附加参数，在 Lua 中通过全局变量 ARGV 数组访问，访问的形式和 KEYS 变量类似( ARGV[1] 、 ARGV[2] ，诸如此类)。</p>\n<p>2    evalsha sha1 numkeys key [key …] arg [arg …] </p>\n<p>执行 Lua 脚本。</p>\n<p>3     script exists  script [script …] </p>\n<p>查看指定的脚本是否已经被保存在缓存当中。</p>\n<p>4     scirpt flush</p>\n<p>从脚本缓存中移除所有脚本。</p>\n<p>5    script kill</p>\n<p>杀死当前正在运行的 Lua 脚本。</p>\n<p>6    script load  script </p>\n<p>将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本</p>\n<p>php 扩展的使用方法：</p>\n<p>服务器命令：</p>\n<p>序号    命令及描述</p>\n<p> 1 bgrewriteaof</p>\n<p>异步执行一个 AOF（AppendOnly File） 文件重写操作</p>\n<p>2    bgsave</p>\n<p>在后台异步保存当前数据库的数据到磁盘</p>\n<p>3  client kill  [ip:port] [ID client-id] </p>\n<p>关闭客户端连接</p>\n<p>4    client list</p>\n<p>获取连接到服务器的客户端连接列表</p>\n<p>5   client getname</p>\n<p>获取连接的名称</p>\n<p>6   client pause timeout </p>\n<p>在指定时间内终止运行来自客户端的命令</p>\n<p>7  client setname  connection-name </p>\n<p>设置当前连接的名称</p>\n<p>8  cluster slots</p>\n<p>获取集群节点的映射数组</p>\n<p>9     commad</p>\n<p>获取 Redis 命令详情数组</p>\n<p>10    command count</p>\n<p>获取 Redis 命令总数</p>\n<p>11    command getkeys </p>\n<p>获取给定命令的所有键</p>\n<p>12    time</p>\n<p>返回当前服务器时间</p>\n<p>13    command info  command-name [command-name …] </p>\n<p>获取指定 Redis 命令描述的数组</p>\n<p>14 config get parameter </p>\n<p>获取指定配置参数的值</p>\n<p>15 config rewrite</p>\n<p>对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写</p>\n<p>16    config set  parameter value </p>\n<p>修改 redis 配置参数，无需重启</p>\n<p>17 config resetstat</p>\n<p>重置 INFO 命令中的某些统计数据</p>\n<p>18    dbsize</p>\n<p>返回当前数据库的 key 的数量</p>\n<p>19  debug object key</p>\n<p>获取 key 的调试信息</p>\n<p>20    debug segfault</p>\n<p>让 Redis 服务崩溃</p>\n<p>21 flushall</p>\n<p>删除所有数据库的所有key</p>\n<p>22    flushdb</p>\n<p>删除当前数据库的所有key</p>\n<p>23    info [section] </p>\n<p>获取 Redis 服务器的各种信息和统计数值</p>\n<p>24 lastsave</p>\n<p>返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示</p>\n<p>25  monitor</p>\n<p>实时打印出 Redis 服务器接收到的命令，调试用</p>\n<p>26  role</p>\n<p>返回主从实例所属的角色</p>\n<p>27 save</p>\n<p>异步保存数据到硬盘</p>\n<p>28 shutdown [NOSAVE] [SAVE] </p>\n<p>异步保存数据到硬盘，并关闭服务器</p>\n<p>29  slaveof host port </p>\n<p>将当前服务器转变为指定服务器的从属服务器(slave server)</p>\n<p>30  slowlog subcommand [argument] </p>\n<p>管理 redis 的慢日志</p>\n<p>31 sync</p>\n<p>用于复制功能(replication)的内部命令</p>\n","excerpt":"","more":"<p>redis高级命令：</p>\n<p>订阅：</p>\n<p>1    pusbscribe pattern [pattern …]<br>订阅通道匹配给定的模式。<br>2    pubsub subcommand [argument [argument …]]<br>讲述了PubSub的系统，例如它的客户是活动在服务器上的状态。<br>3    publish channel message<br>发布一条消息到通道。<br>4    punsubscribe  [pattern [pattern …]]<br>停止监听发布到通道匹配给定模式的消息。<br>5    subscribe channel [channel …]<br>监听发布到指定的通道信息。<br>6    unsubscribe [channel [channel …]]<br>停止监听发布给定的通道信息。</p>\n<p>php拓展使用方法：<br><a href=\"https://github.com/nicolasff/phpredis\">https://github.com/nicolasff/phpredis</a> pecl扩展包目前只提供了两个接口 publish  subscribe</p>\n<p>phpredis是c写的php模块</p>\n<p><a href=\"https://github.com/jamm/Memory/blob/master/RedisServer.php\">https://github.com/jamm/Memory/blob/master/RedisServer.php</a></p>\n<p>php这个是php是基于redis protocol的fsocketopen链接后操作的类库，提供的接口比较全面；publish可以进入数据，但是subscrbie没有阻塞；</p>\n<p>可以在原类包当中修改其加入对阻塞模形的支持；</p>\n<p>发布功能：</p>\n<p>$redis = new Redis();</p>\n<p>$res = $redis-&gt;connect($REDIS_HOSTS[‘CACHE’][‘host’], $REDIS_HOSTS[‘CACHE’][‘port’], 1 );</p>\n<p>$res = $redis-&gt;publish($key,$value);</p>\n<p>定阅功能：                           </p>\n<p>$redis = new Redis();</p>\n<p>$res = $redis-&gt;pconnect($REDIS_HOSTS[‘CACHE’][‘host’], $REDIS_HOSTS[‘CACHE’][‘port’]);</p>\n<p>$res = $redis-&gt;subscribe(array($key),array(‘SinaRedis’,’subscribe_handler’));</p>\n<p>第二个参数为回调方法；</p>\n<p>public static function subscribe_handler($redis, $channel, $msg){</p>\n<pre><code>print_r($redis);\n\necho $chan;\n\necho $msg;\n\nreturn true;\n</code></pre><p>  }</p>\n<p>定阅 redis_subscriber.php</p>\n<p>SinaRedis::subscribe(‘wangbin_test’);</p>\n<p>发布redis_publisher.php</p>\n<p>事务：</p>\n<p>1    discard </p>\n<p>取消事务，放弃执行事务块内的所有命令。</p>\n<p>2    exec</p>\n<p>执行所有事务块内的命令。</p>\n<p>3    multi </p>\n<p>标记一个事务块的开始。</p>\n<p>4     unwatch </p>\n<p>取消 WATCH 命令对所有 key 的监视。</p>\n<p>5    watch key [key …] </p>\n<p>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p>\n<p>php扩展使用方法：</p>\n<p>multi, exec, discard.</p>\n<p>$ret = $redis-&gt;multi()</p>\n<pre><code>-&gt;set(&apos;key1&apos;, &apos;val1&apos;)\n\n-&gt;get(&apos;key1&apos;)\n\n-&gt;set(&apos;key2&apos;, &apos;val2&apos;)\n\n-&gt;get(&apos;key2&apos;)\n\n-&gt;exec();\n</code></pre><p>/*</p>\n<p>$ret == array(</p>\n<pre><code>0 =&gt; TRUE,\n\n1 =&gt; &apos;val1&apos;,\n\n2 =&gt; TRUE,\n\n3 =&gt; &apos;val2&apos;);\n</code></pre><p>*/</p>\n<p>watch, unwatch</p>\n<p>$redis-&gt;watch(‘x’); // or for a list of keys: $redis-&gt;watch(array(‘x’,’another key’));</p>\n<p>/<em> long code here during the execution of which other clients could well modify <code>x</code> </em>/</p>\n<p>$ret = $redis-&gt;multi()</p>\n<pre><code>-&gt;incr(&apos;x&apos;)\n\n-&gt;exec();\n</code></pre><p>/*</p>\n<p>$ret = FALSE if x has been modified between the call to WATCH and the call to EXE</p>\n<p>脚本：</p>\n<p>1    eval script numkeys key [key …] arg [arg …] </p>\n<p>执行 Lua 脚本。</p>\n<p>参数说明：</p>\n<p>script： 参数是一段 Lua 5.1 脚本程序。脚本不必(也不应该)定义为一个 Lua 函数。</p>\n<p>numkeys： 用于指定键名参数的个数。</p>\n<p>key [key …]： 从 EVAL 的第三个参数开始算起，表示在脚本中所用到的那些 Redis 键(key)，这些键名参数可以在 Lua 中通过全局变量 KEYS 数组，用 1 为基址的形式访问( KEYS[1] ， KEYS[2] ，以此类推)。</p>\n<p>arg [arg …]： 附加参数，在 Lua 中通过全局变量 ARGV 数组访问，访问的形式和 KEYS 变量类似( ARGV[1] 、 ARGV[2] ，诸如此类)。</p>\n<p>2    evalsha sha1 numkeys key [key …] arg [arg …] </p>\n<p>执行 Lua 脚本。</p>\n<p>3     script exists  script [script …] </p>\n<p>查看指定的脚本是否已经被保存在缓存当中。</p>\n<p>4     scirpt flush</p>\n<p>从脚本缓存中移除所有脚本。</p>\n<p>5    script kill</p>\n<p>杀死当前正在运行的 Lua 脚本。</p>\n<p>6    script load  script </p>\n<p>将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本</p>\n<p>php 扩展的使用方法：</p>\n<p>服务器命令：</p>\n<p>序号    命令及描述</p>\n<p> 1 bgrewriteaof</p>\n<p>异步执行一个 AOF（AppendOnly File） 文件重写操作</p>\n<p>2    bgsave</p>\n<p>在后台异步保存当前数据库的数据到磁盘</p>\n<p>3  client kill  [ip:port] [ID client-id] </p>\n<p>关闭客户端连接</p>\n<p>4    client list</p>\n<p>获取连接到服务器的客户端连接列表</p>\n<p>5   client getname</p>\n<p>获取连接的名称</p>\n<p>6   client pause timeout </p>\n<p>在指定时间内终止运行来自客户端的命令</p>\n<p>7  client setname  connection-name </p>\n<p>设置当前连接的名称</p>\n<p>8  cluster slots</p>\n<p>获取集群节点的映射数组</p>\n<p>9     commad</p>\n<p>获取 Redis 命令详情数组</p>\n<p>10    command count</p>\n<p>获取 Redis 命令总数</p>\n<p>11    command getkeys </p>\n<p>获取给定命令的所有键</p>\n<p>12    time</p>\n<p>返回当前服务器时间</p>\n<p>13    command info  command-name [command-name …] </p>\n<p>获取指定 Redis 命令描述的数组</p>\n<p>14 config get parameter </p>\n<p>获取指定配置参数的值</p>\n<p>15 config rewrite</p>\n<p>对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写</p>\n<p>16    config set  parameter value </p>\n<p>修改 redis 配置参数，无需重启</p>\n<p>17 config resetstat</p>\n<p>重置 INFO 命令中的某些统计数据</p>\n<p>18    dbsize</p>\n<p>返回当前数据库的 key 的数量</p>\n<p>19  debug object key</p>\n<p>获取 key 的调试信息</p>\n<p>20    debug segfault</p>\n<p>让 Redis 服务崩溃</p>\n<p>21 flushall</p>\n<p>删除所有数据库的所有key</p>\n<p>22    flushdb</p>\n<p>删除当前数据库的所有key</p>\n<p>23    info [section] </p>\n<p>获取 Redis 服务器的各种信息和统计数值</p>\n<p>24 lastsave</p>\n<p>返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示</p>\n<p>25  monitor</p>\n<p>实时打印出 Redis 服务器接收到的命令，调试用</p>\n<p>26  role</p>\n<p>返回主从实例所属的角色</p>\n<p>27 save</p>\n<p>异步保存数据到硬盘</p>\n<p>28 shutdown [NOSAVE] [SAVE] </p>\n<p>异步保存数据到硬盘，并关闭服务器</p>\n<p>29  slaveof host port </p>\n<p>将当前服务器转变为指定服务器的从属服务器(slave server)</p>\n<p>30  slowlog subcommand [argument] </p>\n<p>管理 redis 的慢日志</p>\n<p>31 sync</p>\n<p>用于复制功能(replication)的内部命令</p>\n"},{"title":"ssh秘钥登陆","date":"2016-02-19T03:48:06.000Z","comments":1,"_content":"\nssh 是一个专为远程登录会话和其他网络服务提供安全性的协议。默认状态下ssh链接是需要密码认证的，可以通过添加系统认证（即公钥-私钥）的修改，修改后系统间切换可以避免密码输入和ssh认证\n\n1.用ssh-keygen创建公钥\n\n{% codeblock %}\n#进入目录\n$cd ~./ssh   \n\n#生成ssh key,如果不想输入密码,可以将密码设置为空(直接回车就行)\nhuangchkaideAir:.ssh kai$ ssh-keygen -t rsa -C \"hck920927@qq.com\"\nGenerating public/private rsa key pair.\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in github_rsa.\nYour public key has been saved in github_rsa.pub.\nThe key fingerprint is:\n4d:4c:51:fa:07:c6:49:b6:a4:1c:36:e8:a3:9b:6b:bb hck920927@qq.com\nThe key's randomart image is:\n+--[ RSA 2048]----+\n|         .*o=    |\n|        .= X o   |\n|       .  * *    |\n|        oo o .   |\n|       .S.. . .  |\n|      .      .   |\n|       o         |\n|      +          |\n|     .E+         |\n+-----------------+\nhuangchkaideAir:.ssh kai$ ls\ngithub_rsa\tgithub_rsa.pub\tid_rsa\tid_rsa.pub\tknown_hosts\n\n{% endcodeblock %}\n\n加入SSH Agent\nssh-agent 是专为既令人愉快又安全的处理 RSA 和 DSA 密钥而设计的特殊程序， ssh-agent 是个长时间持续运行的守护进程（daemon），设计它的唯一目的就是对解密的专用密钥进行高速缓存。\n运行ssh-agent，它会打印出来它使用的 ssh 的环境和变量。要使用这些变量，有两种方法，一种是手动进行声明环境变量，另一种是运行eval命令自动声明环境变量。\n方法一：手动声明环境变量\n{% codeblock %}\nhuangchkaideAir:# SSH_AUTH_SOCK=/tmp/ssh-vEGjCM2147/agent.2147; export SSH_AUTH_SOCK;\nhuangchkaideAir:# SSH_AGENT_PID=2148; export SSH_AGENT_PID;\nhuangchkaideAir:# printenv | grep SSH     #检查 ssh 环境变量是否已经加入当前会话的环境变量\nSSH_AGENT_PID=2148\nSSH_AUTH_SOCK=/tmp/ssh-vEGjCM2147/agent.2147\n {% endcodeblock %}\n方法二：运行eval命令自动声明环境变量\n{% codeblock %}\nhuangchkaideAir:#  eval `ssh-agent`\nAgent pid 2157\nhuangchkaideAir:#  printenv | grep SSH     #检查 ssh 环境变量是否已经加入当前会话的环境变量\nSSH_AGENT_PID=2148\nSSH_AUTH_SOCK=/tmp/ssh-vEGjCM2147/agent.2147 \n{% endcodeblock %}\n所以加入SSH Agent的步骤如下:\n输入：\n{% codeblock %}\nhuangchkaideAir:.ssh kai$ ssh-agent -s\nSSH_AUTH_SOCK=/var/folders/3w/ygb7_1m10f98xfnwgh86939c0000gn/T//ssh-lGyzWDf7xrpC/agent.1537; export SSH_AUTH_SOCK;\nSSH_AGENT_PID=1538; export SSH_AGENT_PID;\necho Agent pid 1538;\n{% endcodeblock %}\n\n如果没有显示上面所示的结果的话,就输入：\n{% codeblock %}\neval `ssh-agent -s`\n{% endcodeblock %}\n\n\n直到出现上面的结果后再输入：\n{% codeblock %}\nhuangchkaideAir:.ssh kai$ ssh-add ~/.ssh/id_rsa\nIdentity added: /Users/kai/.ssh/id_rsa (/Users/kai/.ssh/id_rsa)\n{% endcodeblock %}\n这样，你成功的在本地生成了一个可用的SSH key\n\n2)上传公钥到linux服务器\n\n登陆服务器，进入需要远程登陆的用户目录(~)，把公钥放到用户目录的 .ssh 这个目录下\n如果目录不存在，需要创建~/.ssh目录，并把目录权限设置为700,\n并将把公钥改名为authorized_keys，并且把它的用户权限设成600.\n\n{% codeblock %}\n[root@localhost ~]# mkdir ~/.ssh    \n[root@localhost ~]# chmod 700 .ssh \n[root@localhost ~]# cd .ssh/\n[root@localhost .ssh]#  rz\nrz waiting to receive.\nStarting zmodem transfer.  Press Ctrl+C to cancel.\nTransferring id_rsa.pub...\n  100%     398 bytes  398 bytes/sec 00:00:01       0 Errors  \n[root@localhost .ssh]# ls\nid_rsa.pub\n[root@localhost .ssh]# mv id_rsa.pub authorized_keys\n[root@localhost .ssh]# ls\nauthorized_keys\n[root@localhost .ssh]# chmod 600 authorized_keys\n{% endcodeblock %}\n\n3)这里设置密码短语为空,所以 ssh-add ~/.ssh/id_rsa的不用输入密码.\n如果设置ssh-keygen -t rsa -C \"hck920927@qq.com”的时候设置密码.\n需要在ssh-add ~/.ssh/id_rsa的时候输入密码:\n{% codeblock %}\n[root@server ~]# ssh-add ~/.ssh/id_dsa\nEnter passphrase for /home/user/.ssh/id_dsa:     #输入你的密码短语\nIdentity added: /home/user/.ssh/id_dsa (/home/user/.ssh/id_dsa) \n{% endcodeblock %}\n\n还可以查看和清除:\n{% codeblock %}\nhuangchkaideAir:.ssh kai$ ssh-add -l\n2048 4d:4c:51:fa:07:c6:49:b6:a4:1c:36:e8:a3:9b:6b:bb /Users/kai/.ssh/id_rsa (RSA)\n2048 4c:82:57:82:65:61:1f:de:07:88:18:f0:d7:7f:dc:45 /Users/kai/.ssh/id_rsa (RSA)\n{% endcodeblock%}\n\n{% codeblock %}\n\n[root@server ~]# ssh-agent -k\nunset SSH_AUTH_SOCK;\nunset SSH_AGENT_PID;\necho Agent pid 2148 killed;\n{% endcodeblock %}\n\n\n","source":"_posts/ssh秘钥登陆.md","raw":"---\ntitle: ssh秘钥登陆\ndate: 2016-02-19 11:48:06\ntags: https\ncategories: liunx\ncomments: true\n---\n\nssh 是一个专为远程登录会话和其他网络服务提供安全性的协议。默认状态下ssh链接是需要密码认证的，可以通过添加系统认证（即公钥-私钥）的修改，修改后系统间切换可以避免密码输入和ssh认证\n\n1.用ssh-keygen创建公钥\n\n{% codeblock %}\n#进入目录\n$cd ~./ssh   \n\n#生成ssh key,如果不想输入密码,可以将密码设置为空(直接回车就行)\nhuangchkaideAir:.ssh kai$ ssh-keygen -t rsa -C \"hck920927@qq.com\"\nGenerating public/private rsa key pair.\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in github_rsa.\nYour public key has been saved in github_rsa.pub.\nThe key fingerprint is:\n4d:4c:51:fa:07:c6:49:b6:a4:1c:36:e8:a3:9b:6b:bb hck920927@qq.com\nThe key's randomart image is:\n+--[ RSA 2048]----+\n|         .*o=    |\n|        .= X o   |\n|       .  * *    |\n|        oo o .   |\n|       .S.. . .  |\n|      .      .   |\n|       o         |\n|      +          |\n|     .E+         |\n+-----------------+\nhuangchkaideAir:.ssh kai$ ls\ngithub_rsa\tgithub_rsa.pub\tid_rsa\tid_rsa.pub\tknown_hosts\n\n{% endcodeblock %}\n\n加入SSH Agent\nssh-agent 是专为既令人愉快又安全的处理 RSA 和 DSA 密钥而设计的特殊程序， ssh-agent 是个长时间持续运行的守护进程（daemon），设计它的唯一目的就是对解密的专用密钥进行高速缓存。\n运行ssh-agent，它会打印出来它使用的 ssh 的环境和变量。要使用这些变量，有两种方法，一种是手动进行声明环境变量，另一种是运行eval命令自动声明环境变量。\n方法一：手动声明环境变量\n{% codeblock %}\nhuangchkaideAir:# SSH_AUTH_SOCK=/tmp/ssh-vEGjCM2147/agent.2147; export SSH_AUTH_SOCK;\nhuangchkaideAir:# SSH_AGENT_PID=2148; export SSH_AGENT_PID;\nhuangchkaideAir:# printenv | grep SSH     #检查 ssh 环境变量是否已经加入当前会话的环境变量\nSSH_AGENT_PID=2148\nSSH_AUTH_SOCK=/tmp/ssh-vEGjCM2147/agent.2147\n {% endcodeblock %}\n方法二：运行eval命令自动声明环境变量\n{% codeblock %}\nhuangchkaideAir:#  eval `ssh-agent`\nAgent pid 2157\nhuangchkaideAir:#  printenv | grep SSH     #检查 ssh 环境变量是否已经加入当前会话的环境变量\nSSH_AGENT_PID=2148\nSSH_AUTH_SOCK=/tmp/ssh-vEGjCM2147/agent.2147 \n{% endcodeblock %}\n所以加入SSH Agent的步骤如下:\n输入：\n{% codeblock %}\nhuangchkaideAir:.ssh kai$ ssh-agent -s\nSSH_AUTH_SOCK=/var/folders/3w/ygb7_1m10f98xfnwgh86939c0000gn/T//ssh-lGyzWDf7xrpC/agent.1537; export SSH_AUTH_SOCK;\nSSH_AGENT_PID=1538; export SSH_AGENT_PID;\necho Agent pid 1538;\n{% endcodeblock %}\n\n如果没有显示上面所示的结果的话,就输入：\n{% codeblock %}\neval `ssh-agent -s`\n{% endcodeblock %}\n\n\n直到出现上面的结果后再输入：\n{% codeblock %}\nhuangchkaideAir:.ssh kai$ ssh-add ~/.ssh/id_rsa\nIdentity added: /Users/kai/.ssh/id_rsa (/Users/kai/.ssh/id_rsa)\n{% endcodeblock %}\n这样，你成功的在本地生成了一个可用的SSH key\n\n2)上传公钥到linux服务器\n\n登陆服务器，进入需要远程登陆的用户目录(~)，把公钥放到用户目录的 .ssh 这个目录下\n如果目录不存在，需要创建~/.ssh目录，并把目录权限设置为700,\n并将把公钥改名为authorized_keys，并且把它的用户权限设成600.\n\n{% codeblock %}\n[root@localhost ~]# mkdir ~/.ssh    \n[root@localhost ~]# chmod 700 .ssh \n[root@localhost ~]# cd .ssh/\n[root@localhost .ssh]#  rz\nrz waiting to receive.\nStarting zmodem transfer.  Press Ctrl+C to cancel.\nTransferring id_rsa.pub...\n  100%     398 bytes  398 bytes/sec 00:00:01       0 Errors  \n[root@localhost .ssh]# ls\nid_rsa.pub\n[root@localhost .ssh]# mv id_rsa.pub authorized_keys\n[root@localhost .ssh]# ls\nauthorized_keys\n[root@localhost .ssh]# chmod 600 authorized_keys\n{% endcodeblock %}\n\n3)这里设置密码短语为空,所以 ssh-add ~/.ssh/id_rsa的不用输入密码.\n如果设置ssh-keygen -t rsa -C \"hck920927@qq.com”的时候设置密码.\n需要在ssh-add ~/.ssh/id_rsa的时候输入密码:\n{% codeblock %}\n[root@server ~]# ssh-add ~/.ssh/id_dsa\nEnter passphrase for /home/user/.ssh/id_dsa:     #输入你的密码短语\nIdentity added: /home/user/.ssh/id_dsa (/home/user/.ssh/id_dsa) \n{% endcodeblock %}\n\n还可以查看和清除:\n{% codeblock %}\nhuangchkaideAir:.ssh kai$ ssh-add -l\n2048 4d:4c:51:fa:07:c6:49:b6:a4:1c:36:e8:a3:9b:6b:bb /Users/kai/.ssh/id_rsa (RSA)\n2048 4c:82:57:82:65:61:1f:de:07:88:18:f0:d7:7f:dc:45 /Users/kai/.ssh/id_rsa (RSA)\n{% endcodeblock%}\n\n{% codeblock %}\n\n[root@server ~]# ssh-agent -k\nunset SSH_AUTH_SOCK;\nunset SSH_AGENT_PID;\necho Agent pid 2148 killed;\n{% endcodeblock %}\n\n\n","slug":"ssh秘钥登陆","published":1,"updated":"2017-03-01T02:52:32.000Z","layout":"post","photos":[],"link":"","_id":"cizqeienv001qznz4khpngqt1","content":"<p>ssh 是一个专为远程登录会话和其他网络服务提供安全性的协议。默认状态下ssh链接是需要密码认证的，可以通过添加系统认证（即公钥-私钥）的修改，修改后系统间切换可以避免密码输入和ssh认证</p>\n<p>1.用ssh-keygen创建公钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">#进入目录</div><div class=\"line\">$cd ~./ssh   </div><div class=\"line\"></div><div class=\"line\">#生成ssh key,如果不想输入密码,可以将密码设置为空(直接回车就行)</div><div class=\"line\">huangchkaideAir:.ssh kai$ ssh-keygen -t rsa -C &quot;hck920927@qq.com&quot;</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter passphrase (empty for no passphrase): </div><div class=\"line\">Enter same passphrase again: </div><div class=\"line\">Your identification has been saved in github_rsa.</div><div class=\"line\">Your public key has been saved in github_rsa.pub.</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">4d:4c:51:fa:07:c6:49:b6:a4:1c:36:e8:a3:9b:6b:bb hck920927@qq.com</div><div class=\"line\">The key&apos;s randomart image is:</div><div class=\"line\">+--[ RSA 2048]----+</div><div class=\"line\">|         .*o=    |</div><div class=\"line\">|        .= X o   |</div><div class=\"line\">|       .  * *    |</div><div class=\"line\">|        oo o .   |</div><div class=\"line\">|       .S.. . .  |</div><div class=\"line\">|      .      .   |</div><div class=\"line\">|       o         |</div><div class=\"line\">|      +          |</div><div class=\"line\">|     .E+         |</div><div class=\"line\">+-----------------+</div><div class=\"line\">huangchkaideAir:.ssh kai$ ls</div><div class=\"line\">github_rsa\tgithub_rsa.pub\tid_rsa\tid_rsa.pub\tknown_hosts</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>加入SSH Agent<br>ssh-agent 是专为既令人愉快又安全的处理 RSA 和 DSA 密钥而设计的特殊程序， ssh-agent 是个长时间持续运行的守护进程（daemon），设计它的唯一目的就是对解密的专用密钥进行高速缓存。<br>运行ssh-agent，它会打印出来它使用的 ssh 的环境和变量。要使用这些变量，有两种方法，一种是手动进行声明环境变量，另一种是运行eval命令自动声明环境变量。<br>方法一：手动声明环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchkaideAir:# SSH_AUTH_SOCK=/tmp/ssh-vEGjCM2147/agent.2147; export SSH_AUTH_SOCK;</div><div class=\"line\">huangchkaideAir:# SSH_AGENT_PID=2148; export SSH_AGENT_PID;</div><div class=\"line\">huangchkaideAir:# printenv | grep SSH     #检查 ssh 环境变量是否已经加入当前会话的环境变量</div><div class=\"line\">SSH_AGENT_PID=2148</div><div class=\"line\">SSH_AUTH_SOCK=/tmp/ssh-vEGjCM2147/agent.2147</div><div class=\"line\"> </div></pre></td></tr></table></figure><br>方法二：运行eval命令自动声明环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchkaideAir:#  eval `ssh-agent`</div><div class=\"line\">Agent pid 2157</div><div class=\"line\">huangchkaideAir:#  printenv | grep SSH     #检查 ssh 环境变量是否已经加入当前会话的环境变量</div><div class=\"line\">SSH_AGENT_PID=2148</div><div class=\"line\">SSH_AUTH_SOCK=/tmp/ssh-vEGjCM2147/agent.2147 </div></pre></td></tr></table></figure><br>所以加入SSH Agent的步骤如下:<br>输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchkaideAir:.ssh kai$ ssh-agent -s</div><div class=\"line\">SSH_AUTH_SOCK=/var/folders/3w/ygb7_1m10f98xfnwgh86939c0000gn/T//ssh-lGyzWDf7xrpC/agent.1537; export SSH_AUTH_SOCK;</div><div class=\"line\">SSH_AGENT_PID=1538; export SSH_AGENT_PID;</div><div class=\"line\">echo Agent pid 1538;</div></pre></td></tr></table></figure></p>\n<p>如果没有显示上面所示的结果的话,就输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">eval `ssh-agent -s`</div></pre></td></tr></table></figure></p>\n<p>直到出现上面的结果后再输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchkaideAir:.ssh kai$ ssh-add ~/.ssh/id_rsa</div><div class=\"line\">Identity added: /Users/kai/.ssh/id_rsa (/Users/kai/.ssh/id_rsa)</div></pre></td></tr></table></figure><br>这样，你成功的在本地生成了一个可用的SSH key</p>\n<p>2)上传公钥到linux服务器</p>\n<p>登陆服务器，进入需要远程登陆的用户目录(~)，把公钥放到用户目录的 .ssh 这个目录下<br>如果目录不存在，需要创建~/.ssh目录，并把目录权限设置为700,<br>并将把公钥改名为authorized_keys，并且把它的用户权限设成600.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]# mkdir ~/.ssh    </div><div class=\"line\">[root@localhost ~]# chmod 700 .ssh </div><div class=\"line\">[root@localhost ~]# cd .ssh/</div><div class=\"line\">[root@localhost .ssh]#  rz</div><div class=\"line\">rz waiting to receive.</div><div class=\"line\">Starting zmodem transfer.  Press Ctrl+C to cancel.</div><div class=\"line\">Transferring id_rsa.pub...</div><div class=\"line\">  100%     398 bytes  398 bytes/sec 00:00:01       0 Errors  </div><div class=\"line\">[root@localhost .ssh]# ls</div><div class=\"line\">id_rsa.pub</div><div class=\"line\">[root@localhost .ssh]# mv id_rsa.pub authorized_keys</div><div class=\"line\">[root@localhost .ssh]# ls</div><div class=\"line\">authorized_keys</div><div class=\"line\">[root@localhost .ssh]# chmod 600 authorized_keys</div></pre></td></tr></table></figure>\n<p>3)这里设置密码短语为空,所以 ssh-add ~/.ssh/id_rsa的不用输入密码.<br>如果设置ssh-keygen -t rsa -C “hck920927@qq.com”的时候设置密码.<br>需要在ssh-add ~/.ssh/id_rsa的时候输入密码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@server ~]# ssh-add ~/.ssh/id_dsa</div><div class=\"line\">Enter passphrase for /home/user/.ssh/id_dsa:     #输入你的密码短语</div><div class=\"line\">Identity added: /home/user/.ssh/id_dsa (/home/user/.ssh/id_dsa) </div></pre></td></tr></table></figure></p>\n<p>还可以查看和清除:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchkaideAir:.ssh kai$ ssh-add -l</div><div class=\"line\">2048 4d:4c:51:fa:07:c6:49:b6:a4:1c:36:e8:a3:9b:6b:bb /Users/kai/.ssh/id_rsa (RSA)</div><div class=\"line\">2048 4c:82:57:82:65:61:1f:de:07:88:18:f0:d7:7f:dc:45 /Users/kai/.ssh/id_rsa (RSA)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">[root@server ~]# ssh-agent -k</div><div class=\"line\">unset SSH_AUTH_SOCK;</div><div class=\"line\">unset SSH_AGENT_PID;</div><div class=\"line\">echo Agent pid 2148 killed;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>ssh 是一个专为远程登录会话和其他网络服务提供安全性的协议。默认状态下ssh链接是需要密码认证的，可以通过添加系统认证（即公钥-私钥）的修改，修改后系统间切换可以避免密码输入和ssh认证</p>\n<p>1.用ssh-keygen创建公钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">#进入目录</div><div class=\"line\">$cd ~./ssh   </div><div class=\"line\"></div><div class=\"line\">#生成ssh key,如果不想输入密码,可以将密码设置为空(直接回车就行)</div><div class=\"line\">huangchkaideAir:.ssh kai$ ssh-keygen -t rsa -C &quot;hck920927@qq.com&quot;</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter passphrase (empty for no passphrase): </div><div class=\"line\">Enter same passphrase again: </div><div class=\"line\">Your identification has been saved in github_rsa.</div><div class=\"line\">Your public key has been saved in github_rsa.pub.</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">4d:4c:51:fa:07:c6:49:b6:a4:1c:36:e8:a3:9b:6b:bb hck920927@qq.com</div><div class=\"line\">The key&apos;s randomart image is:</div><div class=\"line\">+--[ RSA 2048]----+</div><div class=\"line\">|         .*o=    |</div><div class=\"line\">|        .= X o   |</div><div class=\"line\">|       .  * *    |</div><div class=\"line\">|        oo o .   |</div><div class=\"line\">|       .S.. . .  |</div><div class=\"line\">|      .      .   |</div><div class=\"line\">|       o         |</div><div class=\"line\">|      +          |</div><div class=\"line\">|     .E+         |</div><div class=\"line\">+-----------------+</div><div class=\"line\">huangchkaideAir:.ssh kai$ ls</div><div class=\"line\">github_rsa\tgithub_rsa.pub\tid_rsa\tid_rsa.pub\tknown_hosts</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>加入SSH Agent<br>ssh-agent 是专为既令人愉快又安全的处理 RSA 和 DSA 密钥而设计的特殊程序， ssh-agent 是个长时间持续运行的守护进程（daemon），设计它的唯一目的就是对解密的专用密钥进行高速缓存。<br>运行ssh-agent，它会打印出来它使用的 ssh 的环境和变量。要使用这些变量，有两种方法，一种是手动进行声明环境变量，另一种是运行eval命令自动声明环境变量。<br>方法一：手动声明环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchkaideAir:# SSH_AUTH_SOCK=/tmp/ssh-vEGjCM2147/agent.2147; export SSH_AUTH_SOCK;</div><div class=\"line\">huangchkaideAir:# SSH_AGENT_PID=2148; export SSH_AGENT_PID;</div><div class=\"line\">huangchkaideAir:# printenv | grep SSH     #检查 ssh 环境变量是否已经加入当前会话的环境变量</div><div class=\"line\">SSH_AGENT_PID=2148</div><div class=\"line\">SSH_AUTH_SOCK=/tmp/ssh-vEGjCM2147/agent.2147</div><div class=\"line\"> </div></pre></td></tr></table></figure><br>方法二：运行eval命令自动声明环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchkaideAir:#  eval `ssh-agent`</div><div class=\"line\">Agent pid 2157</div><div class=\"line\">huangchkaideAir:#  printenv | grep SSH     #检查 ssh 环境变量是否已经加入当前会话的环境变量</div><div class=\"line\">SSH_AGENT_PID=2148</div><div class=\"line\">SSH_AUTH_SOCK=/tmp/ssh-vEGjCM2147/agent.2147 </div></pre></td></tr></table></figure><br>所以加入SSH Agent的步骤如下:<br>输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchkaideAir:.ssh kai$ ssh-agent -s</div><div class=\"line\">SSH_AUTH_SOCK=/var/folders/3w/ygb7_1m10f98xfnwgh86939c0000gn/T//ssh-lGyzWDf7xrpC/agent.1537; export SSH_AUTH_SOCK;</div><div class=\"line\">SSH_AGENT_PID=1538; export SSH_AGENT_PID;</div><div class=\"line\">echo Agent pid 1538;</div></pre></td></tr></table></figure></p>\n<p>如果没有显示上面所示的结果的话,就输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">eval `ssh-agent -s`</div></pre></td></tr></table></figure></p>\n<p>直到出现上面的结果后再输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchkaideAir:.ssh kai$ ssh-add ~/.ssh/id_rsa</div><div class=\"line\">Identity added: /Users/kai/.ssh/id_rsa (/Users/kai/.ssh/id_rsa)</div></pre></td></tr></table></figure><br>这样，你成功的在本地生成了一个可用的SSH key</p>\n<p>2)上传公钥到linux服务器</p>\n<p>登陆服务器，进入需要远程登陆的用户目录(~)，把公钥放到用户目录的 .ssh 这个目录下<br>如果目录不存在，需要创建~/.ssh目录，并把目录权限设置为700,<br>并将把公钥改名为authorized_keys，并且把它的用户权限设成600.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]# mkdir ~/.ssh    </div><div class=\"line\">[root@localhost ~]# chmod 700 .ssh </div><div class=\"line\">[root@localhost ~]# cd .ssh/</div><div class=\"line\">[root@localhost .ssh]#  rz</div><div class=\"line\">rz waiting to receive.</div><div class=\"line\">Starting zmodem transfer.  Press Ctrl+C to cancel.</div><div class=\"line\">Transferring id_rsa.pub...</div><div class=\"line\">  100%     398 bytes  398 bytes/sec 00:00:01       0 Errors  </div><div class=\"line\">[root@localhost .ssh]# ls</div><div class=\"line\">id_rsa.pub</div><div class=\"line\">[root@localhost .ssh]# mv id_rsa.pub authorized_keys</div><div class=\"line\">[root@localhost .ssh]# ls</div><div class=\"line\">authorized_keys</div><div class=\"line\">[root@localhost .ssh]# chmod 600 authorized_keys</div></pre></td></tr></table></figure>\n<p>3)这里设置密码短语为空,所以 ssh-add ~/.ssh/id_rsa的不用输入密码.<br>如果设置ssh-keygen -t rsa -C “hck920927@qq.com”的时候设置密码.<br>需要在ssh-add ~/.ssh/id_rsa的时候输入密码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@server ~]# ssh-add ~/.ssh/id_dsa</div><div class=\"line\">Enter passphrase for /home/user/.ssh/id_dsa:     #输入你的密码短语</div><div class=\"line\">Identity added: /home/user/.ssh/id_dsa (/home/user/.ssh/id_dsa) </div></pre></td></tr></table></figure></p>\n<p>还可以查看和清除:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchkaideAir:.ssh kai$ ssh-add -l</div><div class=\"line\">2048 4d:4c:51:fa:07:c6:49:b6:a4:1c:36:e8:a3:9b:6b:bb /Users/kai/.ssh/id_rsa (RSA)</div><div class=\"line\">2048 4c:82:57:82:65:61:1f:de:07:88:18:f0:d7:7f:dc:45 /Users/kai/.ssh/id_rsa (RSA)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">[root@server ~]# ssh-agent -k</div><div class=\"line\">unset SSH_AUTH_SOCK;</div><div class=\"line\">unset SSH_AGENT_PID;</div><div class=\"line\">echo Agent pid 2148 killed;</div></pre></td></tr></table></figure>\n"},{"title":"shadowsocks安装","date":"2016-02-23T08:30:22.000Z","comments":1,"_content":"\nShadowsocks是一个轻量级socks5代理，以python写成.当然也有其他语言版本的\n\n1.安装Shadowsocks\n\n1)手动安装:\n先安装m2crypto,如果要使用 salsa20 或 chacha20 或 chacha20-ietf 算法，还要安装 libsodium.\n同时可以安装git从官方地址(github)下载代码,方便升级. \n{% codeblock %}\nyum install m2crypto git libsodium\n{% endcodeblock %}\nps:这里安装的python版的,所以OS必须有python环境,目前绝大多数的发行版本的liunx的系统都会预装有.\n\n从github处获取源码:\n{% codeblock %}\ngit clone -b manyuser https://github.com/breakwa11/shadowsocks.git\n{% endcodeblock %}\n执行完毕后此目录会新建一个shadowsocks目录，其中根目录的是多用户版（即数据库版，个人用户请忽略这个），子目录中的是单用户版(即shadowsocks/shadowsocks)。\n根目录即 ./shadowsocks :多用户版本\n子目录即 ./shadowsocks/shadowsocks :单用户版本\n<!-- more -->\n\n服务端配置:\n进入子目录：\ncd shadowsocks/shadowsocks\n快速运行\n{% codeblock %}\npython server.py -p 443 -k password -m aes-256-cfb -o http_simple\n{% endcodeblock %}\n#说明：-p 端口 -k 密码  -m 加密方式 -P 协议插件 -o 混淆插件\n如果要后台运行：\n{% codeblock %}\npython server.py -p 443 -k password -m aes-256-cfb -o http_simple -d start\n{% endcodeblock %}\n如果要停止/重启：\n{% codeblock %}\npython server.py -d stop/restart\n{% endcodeblock %}\n用 -h 查看所有参数\n\n通过配置文件运行\n\n建立配置文件 vi /etc/shadowsocks.json\n\n写入以下内容：\n{% codeblock %}\n{\n    \"server\": \"0.0.0.0\", //服务器地址,客户端配置的时候使用,服务端配置时无需修改\n    \"server_ipv6\": \"::\", //服务器的ipv6地址,客户端配置的时候使用,服务端配置时无需修改\n    \"server_port\": 8388, //服务器监听的地址\n    \"local_address\": \"127.0.0.1\", //本地监听地址\n    \"local_port\": 1080,\t//本地监听端口\n    \"password\": \"mypassword\",//密码\n    \"timeout\": 120,//超时时间\n    \"method\": \"aes-256-cfb\", //加密方式,默认aes-256-cfb\n    \"protocol\": \"auth_sha1_compatible\", //协议插件，默认\"origin\"\n    \"protocol_param\": \"\", //协议插件参数，默认\"\"\n    \"obfs\": \"tls1.0_session_auth_compatible\", //混淆插件，默认\"tls1.0_session_auth_compatible\"\n    \"obfs_param\": \"\",  //混淆插件参数，默认\"\"\n    \"redirect\": \"\", //重定向参数，默认\"\"\n    \"dns_ipv6\": false, //是否优先使用IPv6地址，有IPv6时可开启\n    \"fast_open\": false, //true / false\t快速打开(仅限linux客户端)\n    \"workers\": 1   //线程（仅限linux客户端）\n}\n{% endcodeblock %}\n\n其中protocol有如下取值：\n\nprotocol\t说明\n\"origin\"\t原版协议\n\"verify_simple\"\t带校验的协议\n\"verify_deflate\"\t带压缩的协议\n\"verify_sha1\"\t带验证抗CCA攻击的协议，可兼容libev的OTA\n\"auth_simple\"\t抗重放攻击的协议\n\"auth_sha1\"\t带验证抗CCA攻击且抗重放攻击的协议\n其中obfs有如下取值：\n\nobfs\t说明\n\"plain\"\t不混淆\n\"http_simple\"\t伪装为http协议\n\"tls_simple\"\t伪装为tls协议（不建议使用）\n\"random_head\"\t发送一个随机包再通讯的协议\n\"tls1.0_session_auth\"\t伪装为tls session握手协议，同时能抗重放攻击\n\n\n各混淆插件的说明请点击这里查看：{% link 混淆插件说明  https://github.com/breakwa11/shadowsocks-rss/wiki/obfs %}\n\n注：客户端的protocol和obfs配置必须与服务端的一致。\n\nredirect参数说明：\n\n值为空字符串或一个列表，若为列表示例如\n\"redirect\":[\"bing.com\", \"cloudflare.com:443\"],\n作用是在连接方的数据不正确的时候，把数据重定向到列表中的其中一个地址和端口（不写端口则视为80），以伪装为目标服务器。\n\ndns_ipv6参数说明：\n\n为true则指定服务器优先使用IPv6地址。仅当服务器能访问IPv6地址时可以用，否则会导致有IPv6地址的网站无法打开。\n\n一般情况下，只需要修改以下五项即可：\n\n\"server_port\":8388,        //端口\n\"password\":\"password\",     //密码\n\"protocol\":\"origin\",       //协议插件\n\"obfs\":\"http_simple\",      //混淆插件\n\"method\":\"aes-256-cfb\",    //加密方式\n\n\n2)脚本自动安装\n\n自动安装shell脚本:\n\n{% link 所有版本一建安装脚本 https://github.com/teddysun/shadowsocks_install %}\n\n{% codeblock %}\n\n下面是自动安装脚本:\n\n#! /bin/bash\n# Check OS\nfunction checkos(){\n    if [ -f /etc/redhat-release ];then\n        OS=CentOS\n    else\n        echo \"Not support OS, Please  run  CentOS install \"\n        exit 1\n    fi\n}\n\n# Config shadowsocks\nfunction config_shadowsocks(){\n\techo \"Please input password for shadowsocks-python:\"\n    read -p \"(Default password: teddysun.com):\" shadowsockspwd\n    [ -z \"$shadowsockspwd\" ] && shadowsockspwd=\"teddysun.com\"\n    echo \"\"\n    echo \"---------------------------\"\n    echo \"password = $shadowsockspwd\"\n    echo \"---------------------------\"\n    echo \"\"\n    # Set shadowsocks config port\n    while true\n    do\n    echo -e \"Please input port for shadowsocks-python [1-65535]:\"\n    read -p \"(Default port: 8989):\" shadowsocksport\n    [ -z \"$shadowsocksport\" ] && shadowsocksport=\"8989\"\n    expr $shadowsocksport + 0 &>/dev/null\n    if [ $? -eq 0 ]; then\n        if [ $shadowsocksport -ge 1 ] && [ $shadowsocksport -le 65535 ]; then\n            echo \"\"\n            echo \"---------------------------\"\n            echo \"port = $shadowsocksport\"\n            echo \"---------------------------\"\n            echo \"\"\n            break\n        else\n            echo \"Input error! Please input correct numbers.\"\n        fi\n    else\n        echo \"Input error! Please input correct numbers.\"\n    fi\n    done\n    cat > /etc/shadowsocks.json<<-EOF\n{\n    \"server\": \"0.0.0.0\",\n    \"server_ipv6\": \"::\",\n    \"server_port\": ${shadowsocksport},\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\": 1080,\n    \"password\": \"${shadowsockspwd}\",\n    \"timeout\": 120,\n    \"method\": \"aes-256-cfb\",\n    \"protocol\": \"auth_sha1_compatible\",\n    \"protocol_param\": \"\",\n    \"obfs\": \"tls1.0_session_auth_compatible\",\n    \"obfs_param\": \"\",\n    \"redirect\": \"\",\n    \"dns_ipv6\": false,\n    \"fast_open\": false,\n    \"workers\": 1\n}\nEOF\n\n# Get IP address\n    echo \"Getting Public IP address, Please wait a moment...\"\n    IP=$(curl -s -4 icanhazip.com)\n    if [[ \"$IP\" = \"\" ]]; then\n        IP=$(curl -s -4 ipinfo.io/ip)\n    fi\n    echo -e \"Your main public IP is\\t\\033[32m$IP\\033[0m\"\n    echo \"\"\n    #Current folder\n    cur_dir=`pwd`\n    cd $cur_dir\n\n}\n\n\n# iptables set\nfunction iptables_set(){\n    echo \"iptables start setting...\"\n    /etc/init.d/iptables status 1>/dev/null 2>&1\n    if [ $? -eq 0 ]; then\n        /etc/init.d/iptables status | grep '${shadowsocksport}' | grep 'ACCEPT' >/dev/null 2>&1\n        if [ $? -ne 0 ]; then\n            /sbin/iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${shadowsocksport} -j ACCEPT\n            /etc/init.d/iptables save\n            /etc/init.d/iptables restart\n        else\n            echo \"port ${shadowsocksport} has been set up.\"\n        fi\n    else\n        echo \"iptables looks like shutdown, please manually set it if necessary.\"\n    fi\n}\n\n# Uninstall Shadowsocks\nfunction uninstall(){\n    printf \"Are you sure uninstall Shadowsocks? (y/n) \"\n    printf \"\\n\"\n    read -p \"(Default: n):\" answer\n    if [ -z $answer ]; then\n        answer=\"n\"\n    fi\n    if [ \"$answer\" = \"y\" ]; then\n        ps -ef | grep -v grep | grep -v ps | grep -i \"ssserver\" > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            /etc/init.d/shadowsocks stop\n        fi\n        # delete config file\n        rm -f /etc/shadowsocks.json\n        rm -f /var/run/shadowsocks.pid\n        rm -f /etc/init.d/shadowsocks\n        rm -rf /usr/local/shadowsocks\n        chkconfig --del shadowsocks\n        if [ $? -eq 0 ]; then\n            echo \"Shadowsocks uninstall success!\"\n        else\n            echo \"Shadowsocks uninstall failed!\"\n        fi\n    else\n        echo \"uninstall cancelled, Nothing to do\"\n    fi\n}\n\n\nfunction init_d(){\n\t    cat > /etc/init.d/shadowsocks<<EOF\n#!/bin/sh\n# chkconfig: 2345 90 10\n# description: Start or stop the Shadowsocks server\n#\n \nname=shadowsocks\nBIN=/usr/local/shadowsocks/shadowsocks/server.py\nconf=/etc/shadowsocks.json\n \nstart(){\n    python \\$BIN -c \\$conf -d start\n    RETVAL=\\$?\n    if [ \"\\$RETVAL\" = \"0\" ]; then\n        echo \"\\$name start success\"\n    else\n        echo \"\\$name start failed\"\n    fi\n}\n \nstop(){\n    pid=\\`ps -ef | grep -v grep | grep -v ps | grep -i \"\\${BIN}\" | awk '{print \\$2}'\\`\n    if [ ! -z \\$pid ]; then\n        python \\$BIN -c \\$conf -d stop\n        RETVAL=\\$?\n        if [ \"\\$RETVAL\" = \"0\" ]; then\n            echo \"\\$name stop success\"\n        else\n            echo \"\\$name stop failed\"\n        fi\n    else\n        echo \"\\$name is not running\"\n        RETVAL=1\n    fi\n}\n \nstatus(){\n    pid=\\`ps -ef | grep -v grep | grep -v ps | grep -i \"\\${BIN}\" | awk '{print \\$2}'\\`\n    if [ -z \\$pid ]; then\n        echo \"\\$name is not running\"\n        RETVAL=1\n    else\n        echo \"\\$name is running with PID \\$pid\"\n        RETVAL=0\n    fi\n}\n \ncase \"\\$1\" in\n'start')\n    start\n    ;;\n'stop')\n    stop\n    ;;\n'status')\n    status\n    ;;\n'restart')\n    stop\n    start\n    RETVAL=\\$?\n    ;;\n*)\n    echo \"Usage: \\$0 { start | stop | restart | status }\"\n    RETVAL=1\n    ;;\nesac\nexit \\$RETVAL\nEOF\n\n}\n\nfunction install(){\n\tcd /usr/local\n\tyum install -y m2crypto git libsodium\n\n\t#wget https://github.com/jedisct1/libsodium/releases/download/1.0.8/libsodium-1.0.8.tar.gz\n\t#tar xf libsodium-1.0.8.tar.gz && cd libsodium-1.0.8\n\t#./configure && make -j2 && make install\n\t#ldconfig\n\n\tif [ -d /usr/local/shadowsocks ]; then\n\t\techo \"shadowsocks already exists and is not an empty directory\"\n\t\texit 1\n\tfi\n\n\tgit clone -b manyuser https://github.com/breakwa11/shadowsocks.git\n\n\tcd /usr/local/shadowsocks/shadowsocks\n\n\tif [ -d /usr/local/shadowsocks ]; then\n\t\t    init_d\n            # Add run on system start up\n            if [ -f  /etc/init.d/shadowsocks ]; then\n            \tchmod +x /etc/init.d/shadowsocks\n                chkconfig --add shadowsocks\n                chkconfig shadowsocks on\n            fi\n            # Run shadowsocks in the background\n            /etc/init.d/shadowsocks start\n        else\n            echo \"\"\n            echo \"Shadowsocks install failed! Please visit https://teddysun.com/342.html and contact.\"\n            exit 1\n        fi\n        clear\n        echo \"\"\n        echo \"Congratulations, shadowsocks install completed!\"\n        echo -e \"Your Server IP: \\033[41;37m ${IP} \\033[0m\"\n        echo -e \"Your Server Port: \\033[41;37m ${shadowsocksport} \\033[0m\"\n        echo -e \"Your Password: \\033[41;37m ${shadowsockspwd} \\033[0m\"\n        echo -e \"Your Local IP: \\033[41;37m 127.0.0.1 \\033[0m\"\n        echo -e \"Your Local Port: \\033[41;37m 1080 \\033[0m\"\n        echo -e \"Your Encryption Method: \\033[41;37m aes-256-cfb \\033[0m\"\n        echo \"\"\n        echo \"Welcome to visit:https://teddysun.com/342.html\"\n        echo \"Enjoy it!\"\n        echo \"\"\n        exit 0\n\n}\n\n# Initialization step\naction=$1\n[  -z $1 ] && action=install\ncase \"$action\" in\ninstall)\n    config_shadowsocks\n    install\n    ;;\nuninstall)\n    uninstall\n    ;;\n*)\n    echo \"Arguments error! [${action} ]\"\n    echo \"Usage: `basename $0` {install|uninstall}\"\n    ;;\nesac\n\n{% endcodeblock %}","source":"_posts/shadowsocks安装.md","raw":"---\ntitle: shadowsocks安装\ndate: 2016-02-23 16:30:22\ntags: 科学上网\ncategories: liunx\ncomments: true\n---\n\nShadowsocks是一个轻量级socks5代理，以python写成.当然也有其他语言版本的\n\n1.安装Shadowsocks\n\n1)手动安装:\n先安装m2crypto,如果要使用 salsa20 或 chacha20 或 chacha20-ietf 算法，还要安装 libsodium.\n同时可以安装git从官方地址(github)下载代码,方便升级. \n{% codeblock %}\nyum install m2crypto git libsodium\n{% endcodeblock %}\nps:这里安装的python版的,所以OS必须有python环境,目前绝大多数的发行版本的liunx的系统都会预装有.\n\n从github处获取源码:\n{% codeblock %}\ngit clone -b manyuser https://github.com/breakwa11/shadowsocks.git\n{% endcodeblock %}\n执行完毕后此目录会新建一个shadowsocks目录，其中根目录的是多用户版（即数据库版，个人用户请忽略这个），子目录中的是单用户版(即shadowsocks/shadowsocks)。\n根目录即 ./shadowsocks :多用户版本\n子目录即 ./shadowsocks/shadowsocks :单用户版本\n<!-- more -->\n\n服务端配置:\n进入子目录：\ncd shadowsocks/shadowsocks\n快速运行\n{% codeblock %}\npython server.py -p 443 -k password -m aes-256-cfb -o http_simple\n{% endcodeblock %}\n#说明：-p 端口 -k 密码  -m 加密方式 -P 协议插件 -o 混淆插件\n如果要后台运行：\n{% codeblock %}\npython server.py -p 443 -k password -m aes-256-cfb -o http_simple -d start\n{% endcodeblock %}\n如果要停止/重启：\n{% codeblock %}\npython server.py -d stop/restart\n{% endcodeblock %}\n用 -h 查看所有参数\n\n通过配置文件运行\n\n建立配置文件 vi /etc/shadowsocks.json\n\n写入以下内容：\n{% codeblock %}\n{\n    \"server\": \"0.0.0.0\", //服务器地址,客户端配置的时候使用,服务端配置时无需修改\n    \"server_ipv6\": \"::\", //服务器的ipv6地址,客户端配置的时候使用,服务端配置时无需修改\n    \"server_port\": 8388, //服务器监听的地址\n    \"local_address\": \"127.0.0.1\", //本地监听地址\n    \"local_port\": 1080,\t//本地监听端口\n    \"password\": \"mypassword\",//密码\n    \"timeout\": 120,//超时时间\n    \"method\": \"aes-256-cfb\", //加密方式,默认aes-256-cfb\n    \"protocol\": \"auth_sha1_compatible\", //协议插件，默认\"origin\"\n    \"protocol_param\": \"\", //协议插件参数，默认\"\"\n    \"obfs\": \"tls1.0_session_auth_compatible\", //混淆插件，默认\"tls1.0_session_auth_compatible\"\n    \"obfs_param\": \"\",  //混淆插件参数，默认\"\"\n    \"redirect\": \"\", //重定向参数，默认\"\"\n    \"dns_ipv6\": false, //是否优先使用IPv6地址，有IPv6时可开启\n    \"fast_open\": false, //true / false\t快速打开(仅限linux客户端)\n    \"workers\": 1   //线程（仅限linux客户端）\n}\n{% endcodeblock %}\n\n其中protocol有如下取值：\n\nprotocol\t说明\n\"origin\"\t原版协议\n\"verify_simple\"\t带校验的协议\n\"verify_deflate\"\t带压缩的协议\n\"verify_sha1\"\t带验证抗CCA攻击的协议，可兼容libev的OTA\n\"auth_simple\"\t抗重放攻击的协议\n\"auth_sha1\"\t带验证抗CCA攻击且抗重放攻击的协议\n其中obfs有如下取值：\n\nobfs\t说明\n\"plain\"\t不混淆\n\"http_simple\"\t伪装为http协议\n\"tls_simple\"\t伪装为tls协议（不建议使用）\n\"random_head\"\t发送一个随机包再通讯的协议\n\"tls1.0_session_auth\"\t伪装为tls session握手协议，同时能抗重放攻击\n\n\n各混淆插件的说明请点击这里查看：{% link 混淆插件说明  https://github.com/breakwa11/shadowsocks-rss/wiki/obfs %}\n\n注：客户端的protocol和obfs配置必须与服务端的一致。\n\nredirect参数说明：\n\n值为空字符串或一个列表，若为列表示例如\n\"redirect\":[\"bing.com\", \"cloudflare.com:443\"],\n作用是在连接方的数据不正确的时候，把数据重定向到列表中的其中一个地址和端口（不写端口则视为80），以伪装为目标服务器。\n\ndns_ipv6参数说明：\n\n为true则指定服务器优先使用IPv6地址。仅当服务器能访问IPv6地址时可以用，否则会导致有IPv6地址的网站无法打开。\n\n一般情况下，只需要修改以下五项即可：\n\n\"server_port\":8388,        //端口\n\"password\":\"password\",     //密码\n\"protocol\":\"origin\",       //协议插件\n\"obfs\":\"http_simple\",      //混淆插件\n\"method\":\"aes-256-cfb\",    //加密方式\n\n\n2)脚本自动安装\n\n自动安装shell脚本:\n\n{% link 所有版本一建安装脚本 https://github.com/teddysun/shadowsocks_install %}\n\n{% codeblock %}\n\n下面是自动安装脚本:\n\n#! /bin/bash\n# Check OS\nfunction checkos(){\n    if [ -f /etc/redhat-release ];then\n        OS=CentOS\n    else\n        echo \"Not support OS, Please  run  CentOS install \"\n        exit 1\n    fi\n}\n\n# Config shadowsocks\nfunction config_shadowsocks(){\n\techo \"Please input password for shadowsocks-python:\"\n    read -p \"(Default password: teddysun.com):\" shadowsockspwd\n    [ -z \"$shadowsockspwd\" ] && shadowsockspwd=\"teddysun.com\"\n    echo \"\"\n    echo \"---------------------------\"\n    echo \"password = $shadowsockspwd\"\n    echo \"---------------------------\"\n    echo \"\"\n    # Set shadowsocks config port\n    while true\n    do\n    echo -e \"Please input port for shadowsocks-python [1-65535]:\"\n    read -p \"(Default port: 8989):\" shadowsocksport\n    [ -z \"$shadowsocksport\" ] && shadowsocksport=\"8989\"\n    expr $shadowsocksport + 0 &>/dev/null\n    if [ $? -eq 0 ]; then\n        if [ $shadowsocksport -ge 1 ] && [ $shadowsocksport -le 65535 ]; then\n            echo \"\"\n            echo \"---------------------------\"\n            echo \"port = $shadowsocksport\"\n            echo \"---------------------------\"\n            echo \"\"\n            break\n        else\n            echo \"Input error! Please input correct numbers.\"\n        fi\n    else\n        echo \"Input error! Please input correct numbers.\"\n    fi\n    done\n    cat > /etc/shadowsocks.json<<-EOF\n{\n    \"server\": \"0.0.0.0\",\n    \"server_ipv6\": \"::\",\n    \"server_port\": ${shadowsocksport},\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\": 1080,\n    \"password\": \"${shadowsockspwd}\",\n    \"timeout\": 120,\n    \"method\": \"aes-256-cfb\",\n    \"protocol\": \"auth_sha1_compatible\",\n    \"protocol_param\": \"\",\n    \"obfs\": \"tls1.0_session_auth_compatible\",\n    \"obfs_param\": \"\",\n    \"redirect\": \"\",\n    \"dns_ipv6\": false,\n    \"fast_open\": false,\n    \"workers\": 1\n}\nEOF\n\n# Get IP address\n    echo \"Getting Public IP address, Please wait a moment...\"\n    IP=$(curl -s -4 icanhazip.com)\n    if [[ \"$IP\" = \"\" ]]; then\n        IP=$(curl -s -4 ipinfo.io/ip)\n    fi\n    echo -e \"Your main public IP is\\t\\033[32m$IP\\033[0m\"\n    echo \"\"\n    #Current folder\n    cur_dir=`pwd`\n    cd $cur_dir\n\n}\n\n\n# iptables set\nfunction iptables_set(){\n    echo \"iptables start setting...\"\n    /etc/init.d/iptables status 1>/dev/null 2>&1\n    if [ $? -eq 0 ]; then\n        /etc/init.d/iptables status | grep '${shadowsocksport}' | grep 'ACCEPT' >/dev/null 2>&1\n        if [ $? -ne 0 ]; then\n            /sbin/iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${shadowsocksport} -j ACCEPT\n            /etc/init.d/iptables save\n            /etc/init.d/iptables restart\n        else\n            echo \"port ${shadowsocksport} has been set up.\"\n        fi\n    else\n        echo \"iptables looks like shutdown, please manually set it if necessary.\"\n    fi\n}\n\n# Uninstall Shadowsocks\nfunction uninstall(){\n    printf \"Are you sure uninstall Shadowsocks? (y/n) \"\n    printf \"\\n\"\n    read -p \"(Default: n):\" answer\n    if [ -z $answer ]; then\n        answer=\"n\"\n    fi\n    if [ \"$answer\" = \"y\" ]; then\n        ps -ef | grep -v grep | grep -v ps | grep -i \"ssserver\" > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            /etc/init.d/shadowsocks stop\n        fi\n        # delete config file\n        rm -f /etc/shadowsocks.json\n        rm -f /var/run/shadowsocks.pid\n        rm -f /etc/init.d/shadowsocks\n        rm -rf /usr/local/shadowsocks\n        chkconfig --del shadowsocks\n        if [ $? -eq 0 ]; then\n            echo \"Shadowsocks uninstall success!\"\n        else\n            echo \"Shadowsocks uninstall failed!\"\n        fi\n    else\n        echo \"uninstall cancelled, Nothing to do\"\n    fi\n}\n\n\nfunction init_d(){\n\t    cat > /etc/init.d/shadowsocks<<EOF\n#!/bin/sh\n# chkconfig: 2345 90 10\n# description: Start or stop the Shadowsocks server\n#\n \nname=shadowsocks\nBIN=/usr/local/shadowsocks/shadowsocks/server.py\nconf=/etc/shadowsocks.json\n \nstart(){\n    python \\$BIN -c \\$conf -d start\n    RETVAL=\\$?\n    if [ \"\\$RETVAL\" = \"0\" ]; then\n        echo \"\\$name start success\"\n    else\n        echo \"\\$name start failed\"\n    fi\n}\n \nstop(){\n    pid=\\`ps -ef | grep -v grep | grep -v ps | grep -i \"\\${BIN}\" | awk '{print \\$2}'\\`\n    if [ ! -z \\$pid ]; then\n        python \\$BIN -c \\$conf -d stop\n        RETVAL=\\$?\n        if [ \"\\$RETVAL\" = \"0\" ]; then\n            echo \"\\$name stop success\"\n        else\n            echo \"\\$name stop failed\"\n        fi\n    else\n        echo \"\\$name is not running\"\n        RETVAL=1\n    fi\n}\n \nstatus(){\n    pid=\\`ps -ef | grep -v grep | grep -v ps | grep -i \"\\${BIN}\" | awk '{print \\$2}'\\`\n    if [ -z \\$pid ]; then\n        echo \"\\$name is not running\"\n        RETVAL=1\n    else\n        echo \"\\$name is running with PID \\$pid\"\n        RETVAL=0\n    fi\n}\n \ncase \"\\$1\" in\n'start')\n    start\n    ;;\n'stop')\n    stop\n    ;;\n'status')\n    status\n    ;;\n'restart')\n    stop\n    start\n    RETVAL=\\$?\n    ;;\n*)\n    echo \"Usage: \\$0 { start | stop | restart | status }\"\n    RETVAL=1\n    ;;\nesac\nexit \\$RETVAL\nEOF\n\n}\n\nfunction install(){\n\tcd /usr/local\n\tyum install -y m2crypto git libsodium\n\n\t#wget https://github.com/jedisct1/libsodium/releases/download/1.0.8/libsodium-1.0.8.tar.gz\n\t#tar xf libsodium-1.0.8.tar.gz && cd libsodium-1.0.8\n\t#./configure && make -j2 && make install\n\t#ldconfig\n\n\tif [ -d /usr/local/shadowsocks ]; then\n\t\techo \"shadowsocks already exists and is not an empty directory\"\n\t\texit 1\n\tfi\n\n\tgit clone -b manyuser https://github.com/breakwa11/shadowsocks.git\n\n\tcd /usr/local/shadowsocks/shadowsocks\n\n\tif [ -d /usr/local/shadowsocks ]; then\n\t\t    init_d\n            # Add run on system start up\n            if [ -f  /etc/init.d/shadowsocks ]; then\n            \tchmod +x /etc/init.d/shadowsocks\n                chkconfig --add shadowsocks\n                chkconfig shadowsocks on\n            fi\n            # Run shadowsocks in the background\n            /etc/init.d/shadowsocks start\n        else\n            echo \"\"\n            echo \"Shadowsocks install failed! Please visit https://teddysun.com/342.html and contact.\"\n            exit 1\n        fi\n        clear\n        echo \"\"\n        echo \"Congratulations, shadowsocks install completed!\"\n        echo -e \"Your Server IP: \\033[41;37m ${IP} \\033[0m\"\n        echo -e \"Your Server Port: \\033[41;37m ${shadowsocksport} \\033[0m\"\n        echo -e \"Your Password: \\033[41;37m ${shadowsockspwd} \\033[0m\"\n        echo -e \"Your Local IP: \\033[41;37m 127.0.0.1 \\033[0m\"\n        echo -e \"Your Local Port: \\033[41;37m 1080 \\033[0m\"\n        echo -e \"Your Encryption Method: \\033[41;37m aes-256-cfb \\033[0m\"\n        echo \"\"\n        echo \"Welcome to visit:https://teddysun.com/342.html\"\n        echo \"Enjoy it!\"\n        echo \"\"\n        exit 0\n\n}\n\n# Initialization step\naction=$1\n[  -z $1 ] && action=install\ncase \"$action\" in\ninstall)\n    config_shadowsocks\n    install\n    ;;\nuninstall)\n    uninstall\n    ;;\n*)\n    echo \"Arguments error! [${action} ]\"\n    echo \"Usage: `basename $0` {install|uninstall}\"\n    ;;\nesac\n\n{% endcodeblock %}","slug":"shadowsocks安装","published":1,"updated":"2017-03-01T02:52:32.000Z","layout":"post","photos":[],"link":"","_id":"cizqeienx001rznz4gom6cbfu","content":"<p>Shadowsocks是一个轻量级socks5代理，以python写成.当然也有其他语言版本的</p>\n<p>1.安装Shadowsocks</p>\n<p>1)手动安装:<br>先安装m2crypto,如果要使用 salsa20 或 chacha20 或 chacha20-ietf 算法，还要安装 libsodium.<br>同时可以安装git从官方地址(github)下载代码,方便升级.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install m2crypto git libsodium</div></pre></td></tr></table></figure><br>ps:这里安装的python版的,所以OS必须有python环境,目前绝大多数的发行版本的liunx的系统都会预装有.</p>\n<p>从github处获取源码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone -b manyuser https://github.com/breakwa11/shadowsocks.git</div></pre></td></tr></table></figure><br>执行完毕后此目录会新建一个shadowsocks目录，其中根目录的是多用户版（即数据库版，个人用户请忽略这个），子目录中的是单用户版(即shadowsocks/shadowsocks)。<br>根目录即 ./shadowsocks :多用户版本<br>子目录即 ./shadowsocks/shadowsocks :单用户版本<br><a id=\"more\"></a></p>\n<p>服务端配置:<br>进入子目录：<br>cd shadowsocks/shadowsocks<br>快速运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python server.py -p 443 -k password -m aes-256-cfb -o http_simple</div></pre></td></tr></table></figure></p>\n<p>#说明：-p 端口 -k 密码  -m 加密方式 -P 协议插件 -o 混淆插件<br>如果要后台运行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python server.py -p 443 -k password -m aes-256-cfb -o http_simple -d start</div></pre></td></tr></table></figure><br>如果要停止/重启：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python server.py -d stop/restart</div></pre></td></tr></table></figure><br>用 -h 查看所有参数</p>\n<p>通过配置文件运行</p>\n<p>建立配置文件 vi /etc/shadowsocks.json</p>\n<p>写入以下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;server&quot;: &quot;0.0.0.0&quot;, //服务器地址,客户端配置的时候使用,服务端配置时无需修改</div><div class=\"line\">    &quot;server_ipv6&quot;: &quot;::&quot;, //服务器的ipv6地址,客户端配置的时候使用,服务端配置时无需修改</div><div class=\"line\">    &quot;server_port&quot;: 8388, //服务器监听的地址</div><div class=\"line\">    &quot;local_address&quot;: &quot;127.0.0.1&quot;, //本地监听地址</div><div class=\"line\">    &quot;local_port&quot;: 1080,\t//本地监听端口</div><div class=\"line\">    &quot;password&quot;: &quot;mypassword&quot;,//密码</div><div class=\"line\">    &quot;timeout&quot;: 120,//超时时间</div><div class=\"line\">    &quot;method&quot;: &quot;aes-256-cfb&quot;, //加密方式,默认aes-256-cfb</div><div class=\"line\">    &quot;protocol&quot;: &quot;auth_sha1_compatible&quot;, //协议插件，默认&quot;origin&quot;</div><div class=\"line\">    &quot;protocol_param&quot;: &quot;&quot;, //协议插件参数，默认&quot;&quot;</div><div class=\"line\">    &quot;obfs&quot;: &quot;tls1.0_session_auth_compatible&quot;, //混淆插件，默认&quot;tls1.0_session_auth_compatible&quot;</div><div class=\"line\">    &quot;obfs_param&quot;: &quot;&quot;,  //混淆插件参数，默认&quot;&quot;</div><div class=\"line\">    &quot;redirect&quot;: &quot;&quot;, //重定向参数，默认&quot;&quot;</div><div class=\"line\">    &quot;dns_ipv6&quot;: false, //是否优先使用IPv6地址，有IPv6时可开启</div><div class=\"line\">    &quot;fast_open&quot;: false, //true / false\t快速打开(仅限linux客户端)</div><div class=\"line\">    &quot;workers&quot;: 1   //线程（仅限linux客户端）</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中protocol有如下取值：</p>\n<p>protocol    说明<br>“origin”    原版协议<br>“verify_simple”    带校验的协议<br>“verify_deflate”    带压缩的协议<br>“verify_sha1”    带验证抗CCA攻击的协议，可兼容libev的OTA<br>“auth_simple”    抗重放攻击的协议<br>“auth_sha1”    带验证抗CCA攻击且抗重放攻击的协议<br>其中obfs有如下取值：</p>\n<p>obfs    说明<br>“plain”    不混淆<br>“http_simple”    伪装为http协议<br>“tls_simple”    伪装为tls协议（不建议使用）<br>“random_head”    发送一个随机包再通讯的协议<br>“tls1.0_session_auth”    伪装为tls session握手协议，同时能抗重放攻击</p>\n<p>各混淆插件的说明请点击这里查看：<a href=\"https://github.com/breakwa11/shadowsocks-rss/wiki/obfs\" target=\"_blank\" rel=\"external\">混淆插件说明</a></p>\n<p>注：客户端的protocol和obfs配置必须与服务端的一致。</p>\n<p>redirect参数说明：</p>\n<p>值为空字符串或一个列表，若为列表示例如<br>“redirect”:[“bing.com”, “cloudflare.com:443”],<br>作用是在连接方的数据不正确的时候，把数据重定向到列表中的其中一个地址和端口（不写端口则视为80），以伪装为目标服务器。</p>\n<p>dns_ipv6参数说明：</p>\n<p>为true则指定服务器优先使用IPv6地址。仅当服务器能访问IPv6地址时可以用，否则会导致有IPv6地址的网站无法打开。</p>\n<p>一般情况下，只需要修改以下五项即可：</p>\n<p>“server_port”:8388,        //端口<br>“password”:”password”,     //密码<br>“protocol”:”origin”,       //协议插件<br>“obfs”:”http_simple”,      //混淆插件<br>“method”:”aes-256-cfb”,    //加密方式</p>\n<p>2)脚本自动安装</p>\n<p>自动安装shell脚本:</p>\n<a href=\"https://github.com/teddysun/shadowsocks_install\" target=\"_blank\" rel=\"external\">所有版本一建安装脚本</a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">下面是自动安装脚本:</div><div class=\"line\"></div><div class=\"line\">#! /bin/bash</div><div class=\"line\"># Check OS</div><div class=\"line\">function checkos()&#123;</div><div class=\"line\">    if [ -f /etc/redhat-release ];then</div><div class=\"line\">        OS=CentOS</div><div class=\"line\">    else</div><div class=\"line\">        echo &quot;Not support OS, Please  run  CentOS install &quot;</div><div class=\"line\">        exit 1</div><div class=\"line\">    fi</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"># Config shadowsocks</div><div class=\"line\">function config_shadowsocks()&#123;</div><div class=\"line\">\techo &quot;Please input password for shadowsocks-python:&quot;</div><div class=\"line\">    read -p &quot;(Default password: teddysun.com):&quot; shadowsockspwd</div><div class=\"line\">    [ -z &quot;$shadowsockspwd&quot; ] &amp;&amp; shadowsockspwd=&quot;teddysun.com&quot;</div><div class=\"line\">    echo &quot;&quot;</div><div class=\"line\">    echo &quot;---------------------------&quot;</div><div class=\"line\">    echo &quot;password = $shadowsockspwd&quot;</div><div class=\"line\">    echo &quot;---------------------------&quot;</div><div class=\"line\">    echo &quot;&quot;</div><div class=\"line\">    # Set shadowsocks config port</div><div class=\"line\">    while true</div><div class=\"line\">    do</div><div class=\"line\">    echo -e &quot;Please input port for shadowsocks-python [1-65535]:&quot;</div><div class=\"line\">    read -p &quot;(Default port: 8989):&quot; shadowsocksport</div><div class=\"line\">    [ -z &quot;$shadowsocksport&quot; ] &amp;&amp; shadowsocksport=&quot;8989&quot;</div><div class=\"line\">    expr $shadowsocksport + 0 &amp;&gt;/dev/null</div><div class=\"line\">    if [ $? -eq 0 ]; then</div><div class=\"line\">        if [ $shadowsocksport -ge 1 ] &amp;&amp; [ $shadowsocksport -le 65535 ]; then</div><div class=\"line\">            echo &quot;&quot;</div><div class=\"line\">            echo &quot;---------------------------&quot;</div><div class=\"line\">            echo &quot;port = $shadowsocksport&quot;</div><div class=\"line\">            echo &quot;---------------------------&quot;</div><div class=\"line\">            echo &quot;&quot;</div><div class=\"line\">            break</div><div class=\"line\">        else</div><div class=\"line\">            echo &quot;Input error! Please input correct numbers.&quot;</div><div class=\"line\">        fi</div><div class=\"line\">    else</div><div class=\"line\">        echo &quot;Input error! Please input correct numbers.&quot;</div><div class=\"line\">    fi</div><div class=\"line\">    done</div><div class=\"line\">    cat &gt; /etc/shadowsocks.json&lt;&lt;-EOF</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;server&quot;: &quot;0.0.0.0&quot;,</div><div class=\"line\">    &quot;server_ipv6&quot;: &quot;::&quot;,</div><div class=\"line\">    &quot;server_port&quot;: $&#123;shadowsocksport&#125;,</div><div class=\"line\">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</div><div class=\"line\">    &quot;local_port&quot;: 1080,</div><div class=\"line\">    &quot;password&quot;: &quot;$&#123;shadowsockspwd&#125;&quot;,</div><div class=\"line\">    &quot;timeout&quot;: 120,</div><div class=\"line\">    &quot;method&quot;: &quot;aes-256-cfb&quot;,</div><div class=\"line\">    &quot;protocol&quot;: &quot;auth_sha1_compatible&quot;,</div><div class=\"line\">    &quot;protocol_param&quot;: &quot;&quot;,</div><div class=\"line\">    &quot;obfs&quot;: &quot;tls1.0_session_auth_compatible&quot;,</div><div class=\"line\">    &quot;obfs_param&quot;: &quot;&quot;,</div><div class=\"line\">    &quot;redirect&quot;: &quot;&quot;,</div><div class=\"line\">    &quot;dns_ipv6&quot;: false,</div><div class=\"line\">    &quot;fast_open&quot;: false,</div><div class=\"line\">    &quot;workers&quot;: 1</div><div class=\"line\">&#125;</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\"># Get IP address</div><div class=\"line\">    echo &quot;Getting Public IP address, Please wait a moment...&quot;</div><div class=\"line\">    IP=$(curl -s -4 icanhazip.com)</div><div class=\"line\">    if [[ &quot;$IP&quot; = &quot;&quot; ]]; then</div><div class=\"line\">        IP=$(curl -s -4 ipinfo.io/ip)</div><div class=\"line\">    fi</div><div class=\"line\">    echo -e &quot;Your main public IP is\\t\\033[32m$IP\\033[0m&quot;</div><div class=\"line\">    echo &quot;&quot;</div><div class=\"line\">    #Current folder</div><div class=\"line\">    cur_dir=`pwd`</div><div class=\"line\">    cd $cur_dir</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># iptables set</div><div class=\"line\">function iptables_set()&#123;</div><div class=\"line\">    echo &quot;iptables start setting...&quot;</div><div class=\"line\">    /etc/init.d/iptables status 1&gt;/dev/null 2&gt;&amp;1</div><div class=\"line\">    if [ $? -eq 0 ]; then</div><div class=\"line\">        /etc/init.d/iptables status | grep &apos;$&#123;shadowsocksport&#125;&apos; | grep &apos;ACCEPT&apos; &gt;/dev/null 2&gt;&amp;1</div><div class=\"line\">        if [ $? -ne 0 ]; then</div><div class=\"line\">            /sbin/iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport $&#123;shadowsocksport&#125; -j ACCEPT</div><div class=\"line\">            /etc/init.d/iptables save</div><div class=\"line\">            /etc/init.d/iptables restart</div><div class=\"line\">        else</div><div class=\"line\">            echo &quot;port $&#123;shadowsocksport&#125; has been set up.&quot;</div><div class=\"line\">        fi</div><div class=\"line\">    else</div><div class=\"line\">        echo &quot;iptables looks like shutdown, please manually set it if necessary.&quot;</div><div class=\"line\">    fi</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"># Uninstall Shadowsocks</div><div class=\"line\">function uninstall()&#123;</div><div class=\"line\">    printf &quot;Are you sure uninstall Shadowsocks? (y/n) &quot;</div><div class=\"line\">    printf &quot;\\n&quot;</div><div class=\"line\">    read -p &quot;(Default: n):&quot; answer</div><div class=\"line\">    if [ -z $answer ]; then</div><div class=\"line\">        answer=&quot;n&quot;</div><div class=\"line\">    fi</div><div class=\"line\">    if [ &quot;$answer&quot; = &quot;y&quot; ]; then</div><div class=\"line\">        ps -ef | grep -v grep | grep -v ps | grep -i &quot;ssserver&quot; &gt; /dev/null 2&gt;&amp;1</div><div class=\"line\">        if [ $? -eq 0 ]; then</div><div class=\"line\">            /etc/init.d/shadowsocks stop</div><div class=\"line\">        fi</div><div class=\"line\">        # delete config file</div><div class=\"line\">        rm -f /etc/shadowsocks.json</div><div class=\"line\">        rm -f /var/run/shadowsocks.pid</div><div class=\"line\">        rm -f /etc/init.d/shadowsocks</div><div class=\"line\">        rm -rf /usr/local/shadowsocks</div><div class=\"line\">        chkconfig --del shadowsocks</div><div class=\"line\">        if [ $? -eq 0 ]; then</div><div class=\"line\">            echo &quot;Shadowsocks uninstall success!&quot;</div><div class=\"line\">        else</div><div class=\"line\">            echo &quot;Shadowsocks uninstall failed!&quot;</div><div class=\"line\">        fi</div><div class=\"line\">    else</div><div class=\"line\">        echo &quot;uninstall cancelled, Nothing to do&quot;</div><div class=\"line\">    fi</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">function init_d()&#123;</div><div class=\"line\">\t    cat &gt; /etc/init.d/shadowsocks&lt;&lt;EOF</div><div class=\"line\">#!/bin/sh</div><div class=\"line\"># chkconfig: 2345 90 10</div><div class=\"line\"># description: Start or stop the Shadowsocks server</div><div class=\"line\">#</div><div class=\"line\"> </div><div class=\"line\">name=shadowsocks</div><div class=\"line\">BIN=/usr/local/shadowsocks/shadowsocks/server.py</div><div class=\"line\">conf=/etc/shadowsocks.json</div><div class=\"line\"> </div><div class=\"line\">start()&#123;</div><div class=\"line\">    python \\$BIN -c \\$conf -d start</div><div class=\"line\">    RETVAL=\\$?</div><div class=\"line\">    if [ &quot;\\$RETVAL&quot; = &quot;0&quot; ]; then</div><div class=\"line\">        echo &quot;\\$name start success&quot;</div><div class=\"line\">    else</div><div class=\"line\">        echo &quot;\\$name start failed&quot;</div><div class=\"line\">    fi</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">stop()&#123;</div><div class=\"line\">    pid=\\`ps -ef | grep -v grep | grep -v ps | grep -i &quot;\\$&#123;BIN&#125;&quot; | awk &apos;&#123;print \\$2&#125;&apos;\\`</div><div class=\"line\">    if [ ! -z \\$pid ]; then</div><div class=\"line\">        python \\$BIN -c \\$conf -d stop</div><div class=\"line\">        RETVAL=\\$?</div><div class=\"line\">        if [ &quot;\\$RETVAL&quot; = &quot;0&quot; ]; then</div><div class=\"line\">            echo &quot;\\$name stop success&quot;</div><div class=\"line\">        else</div><div class=\"line\">            echo &quot;\\$name stop failed&quot;</div><div class=\"line\">        fi</div><div class=\"line\">    else</div><div class=\"line\">        echo &quot;\\$name is not running&quot;</div><div class=\"line\">        RETVAL=1</div><div class=\"line\">    fi</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">status()&#123;</div><div class=\"line\">    pid=\\`ps -ef | grep -v grep | grep -v ps | grep -i &quot;\\$&#123;BIN&#125;&quot; | awk &apos;&#123;print \\$2&#125;&apos;\\`</div><div class=\"line\">    if [ -z \\$pid ]; then</div><div class=\"line\">        echo &quot;\\$name is not running&quot;</div><div class=\"line\">        RETVAL=1</div><div class=\"line\">    else</div><div class=\"line\">        echo &quot;\\$name is running with PID \\$pid&quot;</div><div class=\"line\">        RETVAL=0</div><div class=\"line\">    fi</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">case &quot;\\$1&quot; in</div><div class=\"line\">&apos;start&apos;)</div><div class=\"line\">    start</div><div class=\"line\">    ;;</div><div class=\"line\">&apos;stop&apos;)</div><div class=\"line\">    stop</div><div class=\"line\">    ;;</div><div class=\"line\">&apos;status&apos;)</div><div class=\"line\">    status</div><div class=\"line\">    ;;</div><div class=\"line\">&apos;restart&apos;)</div><div class=\"line\">    stop</div><div class=\"line\">    start</div><div class=\"line\">    RETVAL=\\$?</div><div class=\"line\">    ;;</div><div class=\"line\">*)</div><div class=\"line\">    echo &quot;Usage: \\$0 &#123; start | stop | restart | status &#125;&quot;</div><div class=\"line\">    RETVAL=1</div><div class=\"line\">    ;;</div><div class=\"line\">esac</div><div class=\"line\">exit \\$RETVAL</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function install()&#123;</div><div class=\"line\">\tcd /usr/local</div><div class=\"line\">\tyum install -y m2crypto git libsodium</div><div class=\"line\"></div><div class=\"line\">\t#wget https://github.com/jedisct1/libsodium/releases/download/1.0.8/libsodium-1.0.8.tar.gz</div><div class=\"line\">\t#tar xf libsodium-1.0.8.tar.gz &amp;&amp; cd libsodium-1.0.8</div><div class=\"line\">\t#./configure &amp;&amp; make -j2 &amp;&amp; make install</div><div class=\"line\">\t#ldconfig</div><div class=\"line\"></div><div class=\"line\">\tif [ -d /usr/local/shadowsocks ]; then</div><div class=\"line\">\t\techo &quot;shadowsocks already exists and is not an empty directory&quot;</div><div class=\"line\">\t\texit 1</div><div class=\"line\">\tfi</div><div class=\"line\"></div><div class=\"line\">\tgit clone -b manyuser https://github.com/breakwa11/shadowsocks.git</div><div class=\"line\"></div><div class=\"line\">\tcd /usr/local/shadowsocks/shadowsocks</div><div class=\"line\"></div><div class=\"line\">\tif [ -d /usr/local/shadowsocks ]; then</div><div class=\"line\">\t\t    init_d</div><div class=\"line\">            # Add run on system start up</div><div class=\"line\">            if [ -f  /etc/init.d/shadowsocks ]; then</div><div class=\"line\">            \tchmod +x /etc/init.d/shadowsocks</div><div class=\"line\">                chkconfig --add shadowsocks</div><div class=\"line\">                chkconfig shadowsocks on</div><div class=\"line\">            fi</div><div class=\"line\">            # Run shadowsocks in the background</div><div class=\"line\">            /etc/init.d/shadowsocks start</div><div class=\"line\">        else</div><div class=\"line\">            echo &quot;&quot;</div><div class=\"line\">            echo &quot;Shadowsocks install failed! Please visit https://teddysun.com/342.html and contact.&quot;</div><div class=\"line\">            exit 1</div><div class=\"line\">        fi</div><div class=\"line\">        clear</div><div class=\"line\">        echo &quot;&quot;</div><div class=\"line\">        echo &quot;Congratulations, shadowsocks install completed!&quot;</div><div class=\"line\">        echo -e &quot;Your Server IP: \\033[41;37m $&#123;IP&#125; \\033[0m&quot;</div><div class=\"line\">        echo -e &quot;Your Server Port: \\033[41;37m $&#123;shadowsocksport&#125; \\033[0m&quot;</div><div class=\"line\">        echo -e &quot;Your Password: \\033[41;37m $&#123;shadowsockspwd&#125; \\033[0m&quot;</div><div class=\"line\">        echo -e &quot;Your Local IP: \\033[41;37m 127.0.0.1 \\033[0m&quot;</div><div class=\"line\">        echo -e &quot;Your Local Port: \\033[41;37m 1080 \\033[0m&quot;</div><div class=\"line\">        echo -e &quot;Your Encryption Method: \\033[41;37m aes-256-cfb \\033[0m&quot;</div><div class=\"line\">        echo &quot;&quot;</div><div class=\"line\">        echo &quot;Welcome to visit:https://teddysun.com/342.html&quot;</div><div class=\"line\">        echo &quot;Enjoy it!&quot;</div><div class=\"line\">        echo &quot;&quot;</div><div class=\"line\">        exit 0</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"># Initialization step</div><div class=\"line\">action=$1</div><div class=\"line\">[  -z $1 ] &amp;&amp; action=install</div><div class=\"line\">case &quot;$action&quot; in</div><div class=\"line\">install)</div><div class=\"line\">    config_shadowsocks</div><div class=\"line\">    install</div><div class=\"line\">    ;;</div><div class=\"line\">uninstall)</div><div class=\"line\">    uninstall</div><div class=\"line\">    ;;</div><div class=\"line\">*)</div><div class=\"line\">    echo &quot;Arguments error! [$&#123;action&#125; ]&quot;</div><div class=\"line\">    echo &quot;Usage: `basename $0` &#123;install|uninstall&#125;&quot;</div><div class=\"line\">    ;;</div><div class=\"line\">esac</div><div class=\"line\"></div></pre></td></tr></table></figure>","excerpt":"<p>Shadowsocks是一个轻量级socks5代理，以python写成.当然也有其他语言版本的</p>\n<p>1.安装Shadowsocks</p>\n<p>1)手动安装:<br>先安装m2crypto,如果要使用 salsa20 或 chacha20 或 chacha20-ietf 算法，还要安装 libsodium.<br>同时可以安装git从官方地址(github)下载代码,方便升级.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install m2crypto git libsodium</div></pre></td></tr></table></figure><br>ps:这里安装的python版的,所以OS必须有python环境,目前绝大多数的发行版本的liunx的系统都会预装有.</p>\n<p>从github处获取源码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone -b manyuser https://github.com/breakwa11/shadowsocks.git</div></pre></td></tr></table></figure><br>执行完毕后此目录会新建一个shadowsocks目录，其中根目录的是多用户版（即数据库版，个人用户请忽略这个），子目录中的是单用户版(即shadowsocks/shadowsocks)。<br>根目录即 ./shadowsocks :多用户版本<br>子目录即 ./shadowsocks/shadowsocks :单用户版本<br>","more":"</p>\n<p>服务端配置:<br>进入子目录：<br>cd shadowsocks/shadowsocks<br>快速运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python server.py -p 443 -k password -m aes-256-cfb -o http_simple</div></pre></td></tr></table></figure></p>\n<p>#说明：-p 端口 -k 密码  -m 加密方式 -P 协议插件 -o 混淆插件<br>如果要后台运行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python server.py -p 443 -k password -m aes-256-cfb -o http_simple -d start</div></pre></td></tr></table></figure><br>如果要停止/重启：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python server.py -d stop/restart</div></pre></td></tr></table></figure><br>用 -h 查看所有参数</p>\n<p>通过配置文件运行</p>\n<p>建立配置文件 vi /etc/shadowsocks.json</p>\n<p>写入以下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;server&quot;: &quot;0.0.0.0&quot;, //服务器地址,客户端配置的时候使用,服务端配置时无需修改</div><div class=\"line\">    &quot;server_ipv6&quot;: &quot;::&quot;, //服务器的ipv6地址,客户端配置的时候使用,服务端配置时无需修改</div><div class=\"line\">    &quot;server_port&quot;: 8388, //服务器监听的地址</div><div class=\"line\">    &quot;local_address&quot;: &quot;127.0.0.1&quot;, //本地监听地址</div><div class=\"line\">    &quot;local_port&quot;: 1080,\t//本地监听端口</div><div class=\"line\">    &quot;password&quot;: &quot;mypassword&quot;,//密码</div><div class=\"line\">    &quot;timeout&quot;: 120,//超时时间</div><div class=\"line\">    &quot;method&quot;: &quot;aes-256-cfb&quot;, //加密方式,默认aes-256-cfb</div><div class=\"line\">    &quot;protocol&quot;: &quot;auth_sha1_compatible&quot;, //协议插件，默认&quot;origin&quot;</div><div class=\"line\">    &quot;protocol_param&quot;: &quot;&quot;, //协议插件参数，默认&quot;&quot;</div><div class=\"line\">    &quot;obfs&quot;: &quot;tls1.0_session_auth_compatible&quot;, //混淆插件，默认&quot;tls1.0_session_auth_compatible&quot;</div><div class=\"line\">    &quot;obfs_param&quot;: &quot;&quot;,  //混淆插件参数，默认&quot;&quot;</div><div class=\"line\">    &quot;redirect&quot;: &quot;&quot;, //重定向参数，默认&quot;&quot;</div><div class=\"line\">    &quot;dns_ipv6&quot;: false, //是否优先使用IPv6地址，有IPv6时可开启</div><div class=\"line\">    &quot;fast_open&quot;: false, //true / false\t快速打开(仅限linux客户端)</div><div class=\"line\">    &quot;workers&quot;: 1   //线程（仅限linux客户端）</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中protocol有如下取值：</p>\n<p>protocol    说明<br>“origin”    原版协议<br>“verify_simple”    带校验的协议<br>“verify_deflate”    带压缩的协议<br>“verify_sha1”    带验证抗CCA攻击的协议，可兼容libev的OTA<br>“auth_simple”    抗重放攻击的协议<br>“auth_sha1”    带验证抗CCA攻击且抗重放攻击的协议<br>其中obfs有如下取值：</p>\n<p>obfs    说明<br>“plain”    不混淆<br>“http_simple”    伪装为http协议<br>“tls_simple”    伪装为tls协议（不建议使用）<br>“random_head”    发送一个随机包再通讯的协议<br>“tls1.0_session_auth”    伪装为tls session握手协议，同时能抗重放攻击</p>\n<p>各混淆插件的说明请点击这里查看：<a href=\"https://github.com/breakwa11/shadowsocks-rss/wiki/obfs\">混淆插件说明</a></p>\n<p>注：客户端的protocol和obfs配置必须与服务端的一致。</p>\n<p>redirect参数说明：</p>\n<p>值为空字符串或一个列表，若为列表示例如<br>“redirect”:[“bing.com”, “cloudflare.com:443”],<br>作用是在连接方的数据不正确的时候，把数据重定向到列表中的其中一个地址和端口（不写端口则视为80），以伪装为目标服务器。</p>\n<p>dns_ipv6参数说明：</p>\n<p>为true则指定服务器优先使用IPv6地址。仅当服务器能访问IPv6地址时可以用，否则会导致有IPv6地址的网站无法打开。</p>\n<p>一般情况下，只需要修改以下五项即可：</p>\n<p>“server_port”:8388,        //端口<br>“password”:”password”,     //密码<br>“protocol”:”origin”,       //协议插件<br>“obfs”:”http_simple”,      //混淆插件<br>“method”:”aes-256-cfb”,    //加密方式</p>\n<p>2)脚本自动安装</p>\n<p>自动安装shell脚本:</p>\n<a href=\"https://github.com/teddysun/shadowsocks_install\">所有版本一建安装脚本</a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">下面是自动安装脚本:</div><div class=\"line\"></div><div class=\"line\">#! /bin/bash</div><div class=\"line\"># Check OS</div><div class=\"line\">function checkos()&#123;</div><div class=\"line\">    if [ -f /etc/redhat-release ];then</div><div class=\"line\">        OS=CentOS</div><div class=\"line\">    else</div><div class=\"line\">        echo &quot;Not support OS, Please  run  CentOS install &quot;</div><div class=\"line\">        exit 1</div><div class=\"line\">    fi</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"># Config shadowsocks</div><div class=\"line\">function config_shadowsocks()&#123;</div><div class=\"line\">\techo &quot;Please input password for shadowsocks-python:&quot;</div><div class=\"line\">    read -p &quot;(Default password: teddysun.com):&quot; shadowsockspwd</div><div class=\"line\">    [ -z &quot;$shadowsockspwd&quot; ] &amp;&amp; shadowsockspwd=&quot;teddysun.com&quot;</div><div class=\"line\">    echo &quot;&quot;</div><div class=\"line\">    echo &quot;---------------------------&quot;</div><div class=\"line\">    echo &quot;password = $shadowsockspwd&quot;</div><div class=\"line\">    echo &quot;---------------------------&quot;</div><div class=\"line\">    echo &quot;&quot;</div><div class=\"line\">    # Set shadowsocks config port</div><div class=\"line\">    while true</div><div class=\"line\">    do</div><div class=\"line\">    echo -e &quot;Please input port for shadowsocks-python [1-65535]:&quot;</div><div class=\"line\">    read -p &quot;(Default port: 8989):&quot; shadowsocksport</div><div class=\"line\">    [ -z &quot;$shadowsocksport&quot; ] &amp;&amp; shadowsocksport=&quot;8989&quot;</div><div class=\"line\">    expr $shadowsocksport + 0 &amp;&gt;/dev/null</div><div class=\"line\">    if [ $? -eq 0 ]; then</div><div class=\"line\">        if [ $shadowsocksport -ge 1 ] &amp;&amp; [ $shadowsocksport -le 65535 ]; then</div><div class=\"line\">            echo &quot;&quot;</div><div class=\"line\">            echo &quot;---------------------------&quot;</div><div class=\"line\">            echo &quot;port = $shadowsocksport&quot;</div><div class=\"line\">            echo &quot;---------------------------&quot;</div><div class=\"line\">            echo &quot;&quot;</div><div class=\"line\">            break</div><div class=\"line\">        else</div><div class=\"line\">            echo &quot;Input error! Please input correct numbers.&quot;</div><div class=\"line\">        fi</div><div class=\"line\">    else</div><div class=\"line\">        echo &quot;Input error! Please input correct numbers.&quot;</div><div class=\"line\">    fi</div><div class=\"line\">    done</div><div class=\"line\">    cat &gt; /etc/shadowsocks.json&lt;&lt;-EOF</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;server&quot;: &quot;0.0.0.0&quot;,</div><div class=\"line\">    &quot;server_ipv6&quot;: &quot;::&quot;,</div><div class=\"line\">    &quot;server_port&quot;: $&#123;shadowsocksport&#125;,</div><div class=\"line\">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</div><div class=\"line\">    &quot;local_port&quot;: 1080,</div><div class=\"line\">    &quot;password&quot;: &quot;$&#123;shadowsockspwd&#125;&quot;,</div><div class=\"line\">    &quot;timeout&quot;: 120,</div><div class=\"line\">    &quot;method&quot;: &quot;aes-256-cfb&quot;,</div><div class=\"line\">    &quot;protocol&quot;: &quot;auth_sha1_compatible&quot;,</div><div class=\"line\">    &quot;protocol_param&quot;: &quot;&quot;,</div><div class=\"line\">    &quot;obfs&quot;: &quot;tls1.0_session_auth_compatible&quot;,</div><div class=\"line\">    &quot;obfs_param&quot;: &quot;&quot;,</div><div class=\"line\">    &quot;redirect&quot;: &quot;&quot;,</div><div class=\"line\">    &quot;dns_ipv6&quot;: false,</div><div class=\"line\">    &quot;fast_open&quot;: false,</div><div class=\"line\">    &quot;workers&quot;: 1</div><div class=\"line\">&#125;</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\"># Get IP address</div><div class=\"line\">    echo &quot;Getting Public IP address, Please wait a moment...&quot;</div><div class=\"line\">    IP=$(curl -s -4 icanhazip.com)</div><div class=\"line\">    if [[ &quot;$IP&quot; = &quot;&quot; ]]; then</div><div class=\"line\">        IP=$(curl -s -4 ipinfo.io/ip)</div><div class=\"line\">    fi</div><div class=\"line\">    echo -e &quot;Your main public IP is\\t\\033[32m$IP\\033[0m&quot;</div><div class=\"line\">    echo &quot;&quot;</div><div class=\"line\">    #Current folder</div><div class=\"line\">    cur_dir=`pwd`</div><div class=\"line\">    cd $cur_dir</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># iptables set</div><div class=\"line\">function iptables_set()&#123;</div><div class=\"line\">    echo &quot;iptables start setting...&quot;</div><div class=\"line\">    /etc/init.d/iptables status 1&gt;/dev/null 2&gt;&amp;1</div><div class=\"line\">    if [ $? -eq 0 ]; then</div><div class=\"line\">        /etc/init.d/iptables status | grep &apos;$&#123;shadowsocksport&#125;&apos; | grep &apos;ACCEPT&apos; &gt;/dev/null 2&gt;&amp;1</div><div class=\"line\">        if [ $? -ne 0 ]; then</div><div class=\"line\">            /sbin/iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport $&#123;shadowsocksport&#125; -j ACCEPT</div><div class=\"line\">            /etc/init.d/iptables save</div><div class=\"line\">            /etc/init.d/iptables restart</div><div class=\"line\">        else</div><div class=\"line\">            echo &quot;port $&#123;shadowsocksport&#125; has been set up.&quot;</div><div class=\"line\">        fi</div><div class=\"line\">    else</div><div class=\"line\">        echo &quot;iptables looks like shutdown, please manually set it if necessary.&quot;</div><div class=\"line\">    fi</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"># Uninstall Shadowsocks</div><div class=\"line\">function uninstall()&#123;</div><div class=\"line\">    printf &quot;Are you sure uninstall Shadowsocks? (y/n) &quot;</div><div class=\"line\">    printf &quot;\\n&quot;</div><div class=\"line\">    read -p &quot;(Default: n):&quot; answer</div><div class=\"line\">    if [ -z $answer ]; then</div><div class=\"line\">        answer=&quot;n&quot;</div><div class=\"line\">    fi</div><div class=\"line\">    if [ &quot;$answer&quot; = &quot;y&quot; ]; then</div><div class=\"line\">        ps -ef | grep -v grep | grep -v ps | grep -i &quot;ssserver&quot; &gt; /dev/null 2&gt;&amp;1</div><div class=\"line\">        if [ $? -eq 0 ]; then</div><div class=\"line\">            /etc/init.d/shadowsocks stop</div><div class=\"line\">        fi</div><div class=\"line\">        # delete config file</div><div class=\"line\">        rm -f /etc/shadowsocks.json</div><div class=\"line\">        rm -f /var/run/shadowsocks.pid</div><div class=\"line\">        rm -f /etc/init.d/shadowsocks</div><div class=\"line\">        rm -rf /usr/local/shadowsocks</div><div class=\"line\">        chkconfig --del shadowsocks</div><div class=\"line\">        if [ $? -eq 0 ]; then</div><div class=\"line\">            echo &quot;Shadowsocks uninstall success!&quot;</div><div class=\"line\">        else</div><div class=\"line\">            echo &quot;Shadowsocks uninstall failed!&quot;</div><div class=\"line\">        fi</div><div class=\"line\">    else</div><div class=\"line\">        echo &quot;uninstall cancelled, Nothing to do&quot;</div><div class=\"line\">    fi</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">function init_d()&#123;</div><div class=\"line\">\t    cat &gt; /etc/init.d/shadowsocks&lt;&lt;EOF</div><div class=\"line\">#!/bin/sh</div><div class=\"line\"># chkconfig: 2345 90 10</div><div class=\"line\"># description: Start or stop the Shadowsocks server</div><div class=\"line\">#</div><div class=\"line\"> </div><div class=\"line\">name=shadowsocks</div><div class=\"line\">BIN=/usr/local/shadowsocks/shadowsocks/server.py</div><div class=\"line\">conf=/etc/shadowsocks.json</div><div class=\"line\"> </div><div class=\"line\">start()&#123;</div><div class=\"line\">    python \\$BIN -c \\$conf -d start</div><div class=\"line\">    RETVAL=\\$?</div><div class=\"line\">    if [ &quot;\\$RETVAL&quot; = &quot;0&quot; ]; then</div><div class=\"line\">        echo &quot;\\$name start success&quot;</div><div class=\"line\">    else</div><div class=\"line\">        echo &quot;\\$name start failed&quot;</div><div class=\"line\">    fi</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">stop()&#123;</div><div class=\"line\">    pid=\\`ps -ef | grep -v grep | grep -v ps | grep -i &quot;\\$&#123;BIN&#125;&quot; | awk &apos;&#123;print \\$2&#125;&apos;\\`</div><div class=\"line\">    if [ ! -z \\$pid ]; then</div><div class=\"line\">        python \\$BIN -c \\$conf -d stop</div><div class=\"line\">        RETVAL=\\$?</div><div class=\"line\">        if [ &quot;\\$RETVAL&quot; = &quot;0&quot; ]; then</div><div class=\"line\">            echo &quot;\\$name stop success&quot;</div><div class=\"line\">        else</div><div class=\"line\">            echo &quot;\\$name stop failed&quot;</div><div class=\"line\">        fi</div><div class=\"line\">    else</div><div class=\"line\">        echo &quot;\\$name is not running&quot;</div><div class=\"line\">        RETVAL=1</div><div class=\"line\">    fi</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">status()&#123;</div><div class=\"line\">    pid=\\`ps -ef | grep -v grep | grep -v ps | grep -i &quot;\\$&#123;BIN&#125;&quot; | awk &apos;&#123;print \\$2&#125;&apos;\\`</div><div class=\"line\">    if [ -z \\$pid ]; then</div><div class=\"line\">        echo &quot;\\$name is not running&quot;</div><div class=\"line\">        RETVAL=1</div><div class=\"line\">    else</div><div class=\"line\">        echo &quot;\\$name is running with PID \\$pid&quot;</div><div class=\"line\">        RETVAL=0</div><div class=\"line\">    fi</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">case &quot;\\$1&quot; in</div><div class=\"line\">&apos;start&apos;)</div><div class=\"line\">    start</div><div class=\"line\">    ;;</div><div class=\"line\">&apos;stop&apos;)</div><div class=\"line\">    stop</div><div class=\"line\">    ;;</div><div class=\"line\">&apos;status&apos;)</div><div class=\"line\">    status</div><div class=\"line\">    ;;</div><div class=\"line\">&apos;restart&apos;)</div><div class=\"line\">    stop</div><div class=\"line\">    start</div><div class=\"line\">    RETVAL=\\$?</div><div class=\"line\">    ;;</div><div class=\"line\">*)</div><div class=\"line\">    echo &quot;Usage: \\$0 &#123; start | stop | restart | status &#125;&quot;</div><div class=\"line\">    RETVAL=1</div><div class=\"line\">    ;;</div><div class=\"line\">esac</div><div class=\"line\">exit \\$RETVAL</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function install()&#123;</div><div class=\"line\">\tcd /usr/local</div><div class=\"line\">\tyum install -y m2crypto git libsodium</div><div class=\"line\"></div><div class=\"line\">\t#wget https://github.com/jedisct1/libsodium/releases/download/1.0.8/libsodium-1.0.8.tar.gz</div><div class=\"line\">\t#tar xf libsodium-1.0.8.tar.gz &amp;&amp; cd libsodium-1.0.8</div><div class=\"line\">\t#./configure &amp;&amp; make -j2 &amp;&amp; make install</div><div class=\"line\">\t#ldconfig</div><div class=\"line\"></div><div class=\"line\">\tif [ -d /usr/local/shadowsocks ]; then</div><div class=\"line\">\t\techo &quot;shadowsocks already exists and is not an empty directory&quot;</div><div class=\"line\">\t\texit 1</div><div class=\"line\">\tfi</div><div class=\"line\"></div><div class=\"line\">\tgit clone -b manyuser https://github.com/breakwa11/shadowsocks.git</div><div class=\"line\"></div><div class=\"line\">\tcd /usr/local/shadowsocks/shadowsocks</div><div class=\"line\"></div><div class=\"line\">\tif [ -d /usr/local/shadowsocks ]; then</div><div class=\"line\">\t\t    init_d</div><div class=\"line\">            # Add run on system start up</div><div class=\"line\">            if [ -f  /etc/init.d/shadowsocks ]; then</div><div class=\"line\">            \tchmod +x /etc/init.d/shadowsocks</div><div class=\"line\">                chkconfig --add shadowsocks</div><div class=\"line\">                chkconfig shadowsocks on</div><div class=\"line\">            fi</div><div class=\"line\">            # Run shadowsocks in the background</div><div class=\"line\">            /etc/init.d/shadowsocks start</div><div class=\"line\">        else</div><div class=\"line\">            echo &quot;&quot;</div><div class=\"line\">            echo &quot;Shadowsocks install failed! Please visit https://teddysun.com/342.html and contact.&quot;</div><div class=\"line\">            exit 1</div><div class=\"line\">        fi</div><div class=\"line\">        clear</div><div class=\"line\">        echo &quot;&quot;</div><div class=\"line\">        echo &quot;Congratulations, shadowsocks install completed!&quot;</div><div class=\"line\">        echo -e &quot;Your Server IP: \\033[41;37m $&#123;IP&#125; \\033[0m&quot;</div><div class=\"line\">        echo -e &quot;Your Server Port: \\033[41;37m $&#123;shadowsocksport&#125; \\033[0m&quot;</div><div class=\"line\">        echo -e &quot;Your Password: \\033[41;37m $&#123;shadowsockspwd&#125; \\033[0m&quot;</div><div class=\"line\">        echo -e &quot;Your Local IP: \\033[41;37m 127.0.0.1 \\033[0m&quot;</div><div class=\"line\">        echo -e &quot;Your Local Port: \\033[41;37m 1080 \\033[0m&quot;</div><div class=\"line\">        echo -e &quot;Your Encryption Method: \\033[41;37m aes-256-cfb \\033[0m&quot;</div><div class=\"line\">        echo &quot;&quot;</div><div class=\"line\">        echo &quot;Welcome to visit:https://teddysun.com/342.html&quot;</div><div class=\"line\">        echo &quot;Enjoy it!&quot;</div><div class=\"line\">        echo &quot;&quot;</div><div class=\"line\">        exit 0</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"># Initialization step</div><div class=\"line\">action=$1</div><div class=\"line\">[  -z $1 ] &amp;&amp; action=install</div><div class=\"line\">case &quot;$action&quot; in</div><div class=\"line\">install)</div><div class=\"line\">    config_shadowsocks</div><div class=\"line\">    install</div><div class=\"line\">    ;;</div><div class=\"line\">uninstall)</div><div class=\"line\">    uninstall</div><div class=\"line\">    ;;</div><div class=\"line\">*)</div><div class=\"line\">    echo &quot;Arguments error! [$&#123;action&#125; ]&quot;</div><div class=\"line\">    echo &quot;Usage: `basename $0` &#123;install|uninstall&#125;&quot;</div><div class=\"line\">    ;;</div><div class=\"line\">esac</div><div class=\"line\"></div></pre></td></tr></table></figure>"},{"title":"yum源的配置和使用","date":"2016-02-22T02:34:39.000Z","comments":1,"_content":"1.yum?\nYum（Yellow dog Updater, Modified）是一个在Fedora和RedHat以及CentOS中基于RPM包的软件包管理器。能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，自动安装软件.\nyum 的主要功能是自动化地升级，安装/移除rpm包，收集rpm 包的相关信息，检查依赖性并自动提示用户解决.\n\nyum 主要要有可靠的软件的仓库(repository),它可以是http 或ftp 站点，也可以是本地软件池，但必须包含rpm 的header，header 包括了rpm 包的各种信息，包括描述，功能，提供的文件，依赖性等。正是收集了这些header 并加以分析，才能自动化地完成余下的任务。\n\nyum 可以同时配置多个资源库(Repository)，简洁的配置文件（/etc/yum.conf），自动解决增加或删除rpm 包时遇到的依赖性问题，保持与RPM 数据库的一致性.\n\n查看本机安装的yum:\n\n{% codeblock %}\n[root@localhost ~]# rpm -qa|grep yum\nyum-3.4.3-132.el7.centos.0.1.noarch  #yum主程序\nyum-plugin-fastestmirror-1.1.31-34.el7.noarch #快速从资源库中查找bao的yum 插件\nyum-metadata-parser-1.1.4-10.el7.x86_64 #分析 metadata\n{% endcodeblock %}\n\ncentos 默认安装有yum,如果liunx没有安装yum,可以通过下载rpm包.\n{% codeblock %}\nwget http://mirrors.163.com/centos/6/os/x86_64/Packages/python-iniparse-0.3.1-2.1.el6.noarch.rpm \nwget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-metadata-parser-1.1.2-16.el6.x86_64.rpm \nwget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-3.2.29-40.el6.centos.noarch.rpm  \nwget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.30-14.el6.noarch.rpm\n\n# rpm -ivh yum-3.2.22-33.el5.centos.noarch.rpm yum-fastestmirror-1.1.16-14.el5.centos.1.noarch.rpm yum-metadata-parser-1.1.2-3.el5.centos.i386.rpm\n{% endcodeblock %}\n\n2.配置\n\nyum 的配置文件分为两部分：main和repository\n\nmain 定义了全局配置选项，整个yum 配置文件应该只有一个main。常位于/etc/yum.conf 中。\nrepository 部分定义了每个源/服务器的具体配置，可以有一到多个。常位于/etc/yum.repo.d 目录下的各文件中。\n\n1)yum.conf\n\n{% codeblock %}\n[main]\n#yum的缓存目录.yum下载的rpm版保存的位置 ,默认/var/cache/yum\ncachedir=/var/cache/yum/$basearch/$releasever\n#安装后是否保存软件包,0(默认),不保存 1 保存\nkeepcache=0\n#debug信息输出等级, 范围0-10 ,默认2\ndebuglevel=2\n#日志文件位置\nlogfile=/var/log/yum.log\n# 1 yum只安装和系统架构匹配的软件包 0 则相反\nexactarch=1\n# 1 允许更新陈旧软件包\nobsoletes=1\n#是否进行gpg校验，如果没有这一项，默认是1。\ngpgcheck=1\n#是否启用插件，默认1为允许，0表示不允许。我们一般会用yum-fastestmirror这个插件。\nplugins=1\ninstallonly_limit=5\nbugtracker_url=http://bugs.centos.org/set_project.php?project_id=23&ref=http://bugs.centos.org/bug_report_page.php?category=yum\n#指定一个软件包，yum 会根据这个包判断你的发行版本，默认是redhat-release，也可以是安装的任何针对自己发行版的rpm 包。\ndistroverpkg=centos-release\n#包的策略。一共有两个选项，newest 和last，这个作用是如果你设置了多个repository，而同一软件在不同的repository 中同时存在，\n#yum 应该安装哪一个，如果是newest，则yum 会安装最新的那个版本。如果是last，则yum 会将服务器id 以字母表排序，并选择最后的那个服务器上的软件安装。一般都是选newest。\npkgpolicy=newest\n#有1和0两个选项，表示yum 是否容忍命令行发生与软件包有关的错误，比如你要安装1,2,3三个包，而其中3此前已经安装了，如果你设为1,则yum 不会出现错误信息。默认是0\ntolerant=1\n#exclude 排除某些软件在升级名单之外，可以用通配符，列表中各个项目要用空格隔开，这个对于安装了诸如美化包，中文补丁的朋友特别有用。\n#exclude=xxx\n#设置 keepcache=1，yum 在成功安装软件包之后保留缓存的头文件 (headers) 和软件包。默认值为 keepcache=0 不保存\n#keepcache=[1 or 0]\n\n#  This is the default, if you make this bigger yum won't see if the metadata\n# is newer on the remote and so you'll \"gain\" the bandwidth of not having to\n# download the new metadata and \"pay\" for it by yum not having correct\n# information.\n#  It is esp. important, to have correct metadata, for distributions like\n# Fedora which don't keep old packages around. If you don't like this checking\n# interupting your command line usage, it's much better to have something\n# manually check the metadata once an hour (yum-updatesd will do this).\n# metadata_expire=90m\n\n# PUT YOUR REPOS HERE OR IN separate files named file.repo\n# in /etc/yum.repos.d\n#默认都会被include 进来 也就是说 /etc/yum.repos.d/xx.repo 无论配置文件有多少个 每个里面有多少个[name] 最后其实都被整合到 一个里面看就是了 重复的[name]后面的覆盖前面的\nreposdir=/etc/yum.repos.d/\n\n{% endcodeblock %}\n\n2)rpo配置\n\nyum可以配置多个资源库,可以在/etc/yum.repos.d/新增和修改,也可以在/etc/yum.conf直接配置.\n格式:\n[serverid] #唯一\nname=Some name for this server\nbaseurl=url://path/to/repository/\nserverid 是用于区别各个不同的repository，必须有一个独一无二的名称；\nname 是对repository 的描述，支持像$releasever $basearch这样的变量；\nbaseurl 是服务器设置中最重要的部分，只有设置正确，才能从上面获取软件。url 支持的协议有 http:// ftp:// file:// \n\n\n例如下面:\n{% codeblock %}\n[centosplus]\n#支持$releasever(发行版本) $basearch(cpu的基本体系组) $arch(cpu体系)这样的变量\nname=CentOS-$releasever - Plus - 163.com\nbaseurl=http://mirrors.163.com/centos/$releasever/centosplus/$basearch/\n使用gpg对包进行校验，确保下载包的完整性\ngpgcheck=1\n##当某个软件仓库被配置成 enabled=0 时，yum 在安装或升级软件包时不会将该仓库做为软件包提供源。使用这个选项，可以启用或禁用软件仓库。\n#通过 yum 的 --enablerepo=[repo_name] 和 --disablerepo=[repo_name] 选项，或者通过 PackageKit 的\"添加/删除软件\"工具，也能够方便地启用和禁用指定的软件仓库\nenabled=0\n#确保下载包的完整性，可以指定repository站点的gpg key.\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n{% endcodeblock %}\n\n还有注意的是,如果要使用gpg对包进行校验,还需要导入每个reposity的GPG,先到repo库站点下载,然后用\nrpm --import xxx.txt 命令将它们导入.\n最好把发行版自带GPG-KEY也导入，rpm --import /usr/share/doc/redhat-release-*/RPM-GPG-KEY 官方软件升级用的上.\n\n3)更换yum源\n有时候centos的自动的yum地址访问不了,或者下载速度太慢,可以换为国内的地址:\n如换为网易163 yum源:\n\n推荐先备份/etc/yum.repos.d/CentOS-Base.repo\n{% codeblock %}\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n{% endcodeblock %}\n\n然后修改/etc/yum.repos.d/CentOS-Base.repo文件\n{% codeblock %}\n# CentOS-Base.repo\n#\n# The mirror system uses the connecting IP address of the client and the\n# update status of each mirror to pick mirrors that are updated to and\n# geographically close to the client.  You should use this for CentOS updates\n# unless you are manually picking other mirrors.\n#\n# If the mirrorlist= does not work for you, as a fall back you can try the \n# remarked out baseurl= line instead.\n#\n#\n[base]\nname=CentOS-$releasever - Base - 163.com\n#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=os\nbaseurl=http://mirrors.163.com/centos/$releasever/os/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n\n#released updates\n[updates]\nname=CentOS-$releasever - Updates - 163.com\n#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=updates\nbaseurl=http://mirrors.163.com/centos/$releasever/updates/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n\n#additional packages that may be useful\n[extras]\nname=CentOS-$releasever - Extras - 163.com\n#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=extras\nbaseurl=http://mirrors.163.com/centos/$releasever/extras/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n\n#additional packages that extend functionality of existing packages\n[centosplus]\nname=CentOS-$releasever - Plus - 163.com\nbaseurl=http://mirrors.163.com/centos/$releasever/centosplus/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n{% endcodeblock %}\n\n最后清除旧缓存,生产新缓存\n{% codeblock %}\nyum clean all\nyum makecache\n{% endcodeblock %}\n\n更换为阿里云yum源:\n有时候服务器使用的阿里云的话,换为阿里云的yum源会比较快.\n阿里云Linux安装镜像源地址：http://mirrors.aliyun.com/\n{% codeblock %}\n#备份原镜像文件(老规矩)\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n#下载新的CentOS-Base.repo 到/etc/yum.repos.d/\n#CentOS 5\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo\n#CentOS 6\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo\n#CentOS 7\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n#生成缓存\nyum clean all\nyum makecache\n{% endcodeblock %}\n\n当然国内还有其他的yum源\n\n3.yum命令使用\n\nUsage: yum [options] COMMAND\n\nList of Commands:\n检查问题\ncheck          Check for problems in the rpmdb\n检查可更新的程序\ncheck-update   Check for available package updates\n清除缓存\nclean          Remove cached data\nyum clean packages 清除缓存目录下的软件包\nyum clean headers 清除缓存目录下的 headers\nyum clean oldheaders 清除缓存目录下旧的 headers\nyum clean, yum clean all (= yum clean packages; yum clean oldheaders) 清除缓存目录下的软件包及旧的headers\n\n查看包的依赖列表\ndeplist        List a package's dependencies\n\ndistribution-synchronization Synchronize installed packages to the latest available versions\ndowngrade      downgrade a package\nerase          Remove a package or packages from your system\nfs             Creates filesystem snapshots, or lists/deletes current snapshots.\nfssnapshot     Creates filesystem snapshots, or lists/deletes current snapshots.\ngroups         Display, or use, the groups information\n显示帮助信息\nhelp           Display a helpful usage message\n显示使用历史\nhistory        Display, or use, the transaction history\n显示包信息\ninfo           Display details about a package or group of packages\n安装指定包\ninstall        Install a package or packages on your system\n列出所有可安裝的软件清单\nlist           List a package or groups of packages\nload-transaction load a saved transaction from filename\n生产缓存\nmakecache      Generate the metadata cache\nprovides       Find what package provides the given value\n删除指定的rpm软件包\nremove\n重新安装\nreinstall      reinstall a package\nrepo-pkgs      Treat a repo. as a group of packages, so we can install/remove all of them\nrepolist       Display the configured software repositories\n搜索软件包\nsearch         Search package details for the given string\n进入yum的shell提示符\nshell          Run an interactive yum shell\nswap           Simple way to swap packages, instead of using shell\n全部更新 \nupdate         Update a package or packages on your system\nupdate-minimal Works like upgrade, but goes to the 'newest' package match which fixes a problem that affects your system\nyum update 全部更新\nyum update package1 更新指定程序包package1\n\nupdateinfo     Acts on repository update information\n升级指定程序包\nupgrade        Update packages taking obsoletes into account\n显示yum版本信息\nversion        Display a version for the machine and/or available repos.\n\n\nOptions:\n  -h, --help            show this help message and exit  显示帮助信息\n  -t, --tolerant        be tolerant of errors 包错误是否执行\n  -C, --cacheonly       run entirely from system cache, don't update cache  缓存安装,完全从缓存中运行，而不去下载或者更新任何头文件。\n\n  -c [config file], --config=[config file]  指定配置文件\n                        config file location\n  -R [minutes], --randomwait=[minutes]   设置yum处理一个命令的最大等待之间\n                        maximum command wait time\n  -d [debug level], --debuglevel=[debug level]  设置调试等级(0-10)\n                        debugging output level\n  --showduplicates      show duplicates, in repos, in list/search commands\n  -e [error level], --errorlevel=[error level] 设置错误等级(0-10)\n                        error output level\n  --rpmverbosity=[debug level name]\n                        debugging output level for rpm\n  -q, --quiet           quiet operation 安装模式,不显示信息\n  -v, --verbose         verbose operation 显示操作信息\n  -y, --assumeyes       answer yes for all questions 允许安装\n  --assumeno            answer no for all questions\n  --version             show Yum version and exit\n  --installroot=[path]  set install root\n  --enablerepo=[repo]   enable one or more repositories (wildcards allowed)\n  --disablerepo=[repo]  disable one or more repositories (wildcards allowed)\n  -x [package], --exclude=[package]\n                        exclude package(s) by name or glob\n  --disableexcludes=[repo]\n                        disable exclude from main, for a repo or for\n                        everything\n  --disableincludes=[repo]\n                        disable includepkgs for a repo or for everything\n  --obsoletes           enable obsoletes processing during updates\n  --noplugins           disable Yum plugins  禁止使用插件\n  --nogpgcheck          disable gpg signature checking  不进行gpg检查\n  --disableplugin=[plugin]    根据插件名称禁止使用插件\n                        disable plugins by name\n  --enableplugin=[plugin]\t  启用某个插件\n                        enable plugins by name\n  --skip-broken         skip packages with depsolving problems\n  --color=COLOR         control whether color is used\n  --releasever=RELEASEVER\n                        set value of $releasever in yum config and repo files\n  --downloadonly        don't update, just download\n  --downloaddir=DLDIR   specifies an alternate directory to store packages\n  --setopt=SETOPTS      set arbitrary config and repo options\n  --bugfix              Include bugfix relevant packages, in updates\n  --security            Include security relevant packages, in updates\n  --advisory=ADVS, --advisories=ADVS\n                        Include packages needed to fix the given advisory, in\n                        updates\n  --bzs=BZS             Include packages needed to fix the given BZ, in\n                        updates\n  --cves=CVES           Include packages needed to fix the given CVE, in\n                        updates\n  --sec-severity=SEVS, --secseverity=SEVS\n                        Include security relevant packages matching the\n                        severity, in updates\n\n\n参考:\n{% link 163CentOS镜像使用帮助 http://mirrors.163.com/.help/centos.html %}\n{% link rpm命令 http://man.linuxde.net/rpm %}\n{% link yum命令 http://man.linuxde.net/yum %}\n\n","source":"_posts/yum源的配置和使用.md","raw":"---\ntitle: yum源的配置和使用\ndate: 2016-02-22 10:34:39\ntags: yum\ncategories: liunx\ncomments: true\n---\n1.yum?\nYum（Yellow dog Updater, Modified）是一个在Fedora和RedHat以及CentOS中基于RPM包的软件包管理器。能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，自动安装软件.\nyum 的主要功能是自动化地升级，安装/移除rpm包，收集rpm 包的相关信息，检查依赖性并自动提示用户解决.\n\nyum 主要要有可靠的软件的仓库(repository),它可以是http 或ftp 站点，也可以是本地软件池，但必须包含rpm 的header，header 包括了rpm 包的各种信息，包括描述，功能，提供的文件，依赖性等。正是收集了这些header 并加以分析，才能自动化地完成余下的任务。\n\nyum 可以同时配置多个资源库(Repository)，简洁的配置文件（/etc/yum.conf），自动解决增加或删除rpm 包时遇到的依赖性问题，保持与RPM 数据库的一致性.\n\n查看本机安装的yum:\n\n{% codeblock %}\n[root@localhost ~]# rpm -qa|grep yum\nyum-3.4.3-132.el7.centos.0.1.noarch  #yum主程序\nyum-plugin-fastestmirror-1.1.31-34.el7.noarch #快速从资源库中查找bao的yum 插件\nyum-metadata-parser-1.1.4-10.el7.x86_64 #分析 metadata\n{% endcodeblock %}\n\ncentos 默认安装有yum,如果liunx没有安装yum,可以通过下载rpm包.\n{% codeblock %}\nwget http://mirrors.163.com/centos/6/os/x86_64/Packages/python-iniparse-0.3.1-2.1.el6.noarch.rpm \nwget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-metadata-parser-1.1.2-16.el6.x86_64.rpm \nwget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-3.2.29-40.el6.centos.noarch.rpm  \nwget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.30-14.el6.noarch.rpm\n\n# rpm -ivh yum-3.2.22-33.el5.centos.noarch.rpm yum-fastestmirror-1.1.16-14.el5.centos.1.noarch.rpm yum-metadata-parser-1.1.2-3.el5.centos.i386.rpm\n{% endcodeblock %}\n\n2.配置\n\nyum 的配置文件分为两部分：main和repository\n\nmain 定义了全局配置选项，整个yum 配置文件应该只有一个main。常位于/etc/yum.conf 中。\nrepository 部分定义了每个源/服务器的具体配置，可以有一到多个。常位于/etc/yum.repo.d 目录下的各文件中。\n\n1)yum.conf\n\n{% codeblock %}\n[main]\n#yum的缓存目录.yum下载的rpm版保存的位置 ,默认/var/cache/yum\ncachedir=/var/cache/yum/$basearch/$releasever\n#安装后是否保存软件包,0(默认),不保存 1 保存\nkeepcache=0\n#debug信息输出等级, 范围0-10 ,默认2\ndebuglevel=2\n#日志文件位置\nlogfile=/var/log/yum.log\n# 1 yum只安装和系统架构匹配的软件包 0 则相反\nexactarch=1\n# 1 允许更新陈旧软件包\nobsoletes=1\n#是否进行gpg校验，如果没有这一项，默认是1。\ngpgcheck=1\n#是否启用插件，默认1为允许，0表示不允许。我们一般会用yum-fastestmirror这个插件。\nplugins=1\ninstallonly_limit=5\nbugtracker_url=http://bugs.centos.org/set_project.php?project_id=23&ref=http://bugs.centos.org/bug_report_page.php?category=yum\n#指定一个软件包，yum 会根据这个包判断你的发行版本，默认是redhat-release，也可以是安装的任何针对自己发行版的rpm 包。\ndistroverpkg=centos-release\n#包的策略。一共有两个选项，newest 和last，这个作用是如果你设置了多个repository，而同一软件在不同的repository 中同时存在，\n#yum 应该安装哪一个，如果是newest，则yum 会安装最新的那个版本。如果是last，则yum 会将服务器id 以字母表排序，并选择最后的那个服务器上的软件安装。一般都是选newest。\npkgpolicy=newest\n#有1和0两个选项，表示yum 是否容忍命令行发生与软件包有关的错误，比如你要安装1,2,3三个包，而其中3此前已经安装了，如果你设为1,则yum 不会出现错误信息。默认是0\ntolerant=1\n#exclude 排除某些软件在升级名单之外，可以用通配符，列表中各个项目要用空格隔开，这个对于安装了诸如美化包，中文补丁的朋友特别有用。\n#exclude=xxx\n#设置 keepcache=1，yum 在成功安装软件包之后保留缓存的头文件 (headers) 和软件包。默认值为 keepcache=0 不保存\n#keepcache=[1 or 0]\n\n#  This is the default, if you make this bigger yum won't see if the metadata\n# is newer on the remote and so you'll \"gain\" the bandwidth of not having to\n# download the new metadata and \"pay\" for it by yum not having correct\n# information.\n#  It is esp. important, to have correct metadata, for distributions like\n# Fedora which don't keep old packages around. If you don't like this checking\n# interupting your command line usage, it's much better to have something\n# manually check the metadata once an hour (yum-updatesd will do this).\n# metadata_expire=90m\n\n# PUT YOUR REPOS HERE OR IN separate files named file.repo\n# in /etc/yum.repos.d\n#默认都会被include 进来 也就是说 /etc/yum.repos.d/xx.repo 无论配置文件有多少个 每个里面有多少个[name] 最后其实都被整合到 一个里面看就是了 重复的[name]后面的覆盖前面的\nreposdir=/etc/yum.repos.d/\n\n{% endcodeblock %}\n\n2)rpo配置\n\nyum可以配置多个资源库,可以在/etc/yum.repos.d/新增和修改,也可以在/etc/yum.conf直接配置.\n格式:\n[serverid] #唯一\nname=Some name for this server\nbaseurl=url://path/to/repository/\nserverid 是用于区别各个不同的repository，必须有一个独一无二的名称；\nname 是对repository 的描述，支持像$releasever $basearch这样的变量；\nbaseurl 是服务器设置中最重要的部分，只有设置正确，才能从上面获取软件。url 支持的协议有 http:// ftp:// file:// \n\n\n例如下面:\n{% codeblock %}\n[centosplus]\n#支持$releasever(发行版本) $basearch(cpu的基本体系组) $arch(cpu体系)这样的变量\nname=CentOS-$releasever - Plus - 163.com\nbaseurl=http://mirrors.163.com/centos/$releasever/centosplus/$basearch/\n使用gpg对包进行校验，确保下载包的完整性\ngpgcheck=1\n##当某个软件仓库被配置成 enabled=0 时，yum 在安装或升级软件包时不会将该仓库做为软件包提供源。使用这个选项，可以启用或禁用软件仓库。\n#通过 yum 的 --enablerepo=[repo_name] 和 --disablerepo=[repo_name] 选项，或者通过 PackageKit 的\"添加/删除软件\"工具，也能够方便地启用和禁用指定的软件仓库\nenabled=0\n#确保下载包的完整性，可以指定repository站点的gpg key.\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n{% endcodeblock %}\n\n还有注意的是,如果要使用gpg对包进行校验,还需要导入每个reposity的GPG,先到repo库站点下载,然后用\nrpm --import xxx.txt 命令将它们导入.\n最好把发行版自带GPG-KEY也导入，rpm --import /usr/share/doc/redhat-release-*/RPM-GPG-KEY 官方软件升级用的上.\n\n3)更换yum源\n有时候centos的自动的yum地址访问不了,或者下载速度太慢,可以换为国内的地址:\n如换为网易163 yum源:\n\n推荐先备份/etc/yum.repos.d/CentOS-Base.repo\n{% codeblock %}\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n{% endcodeblock %}\n\n然后修改/etc/yum.repos.d/CentOS-Base.repo文件\n{% codeblock %}\n# CentOS-Base.repo\n#\n# The mirror system uses the connecting IP address of the client and the\n# update status of each mirror to pick mirrors that are updated to and\n# geographically close to the client.  You should use this for CentOS updates\n# unless you are manually picking other mirrors.\n#\n# If the mirrorlist= does not work for you, as a fall back you can try the \n# remarked out baseurl= line instead.\n#\n#\n[base]\nname=CentOS-$releasever - Base - 163.com\n#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=os\nbaseurl=http://mirrors.163.com/centos/$releasever/os/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n\n#released updates\n[updates]\nname=CentOS-$releasever - Updates - 163.com\n#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=updates\nbaseurl=http://mirrors.163.com/centos/$releasever/updates/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n\n#additional packages that may be useful\n[extras]\nname=CentOS-$releasever - Extras - 163.com\n#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=extras\nbaseurl=http://mirrors.163.com/centos/$releasever/extras/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n\n#additional packages that extend functionality of existing packages\n[centosplus]\nname=CentOS-$releasever - Plus - 163.com\nbaseurl=http://mirrors.163.com/centos/$releasever/centosplus/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n{% endcodeblock %}\n\n最后清除旧缓存,生产新缓存\n{% codeblock %}\nyum clean all\nyum makecache\n{% endcodeblock %}\n\n更换为阿里云yum源:\n有时候服务器使用的阿里云的话,换为阿里云的yum源会比较快.\n阿里云Linux安装镜像源地址：http://mirrors.aliyun.com/\n{% codeblock %}\n#备份原镜像文件(老规矩)\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n#下载新的CentOS-Base.repo 到/etc/yum.repos.d/\n#CentOS 5\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo\n#CentOS 6\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo\n#CentOS 7\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n#生成缓存\nyum clean all\nyum makecache\n{% endcodeblock %}\n\n当然国内还有其他的yum源\n\n3.yum命令使用\n\nUsage: yum [options] COMMAND\n\nList of Commands:\n检查问题\ncheck          Check for problems in the rpmdb\n检查可更新的程序\ncheck-update   Check for available package updates\n清除缓存\nclean          Remove cached data\nyum clean packages 清除缓存目录下的软件包\nyum clean headers 清除缓存目录下的 headers\nyum clean oldheaders 清除缓存目录下旧的 headers\nyum clean, yum clean all (= yum clean packages; yum clean oldheaders) 清除缓存目录下的软件包及旧的headers\n\n查看包的依赖列表\ndeplist        List a package's dependencies\n\ndistribution-synchronization Synchronize installed packages to the latest available versions\ndowngrade      downgrade a package\nerase          Remove a package or packages from your system\nfs             Creates filesystem snapshots, or lists/deletes current snapshots.\nfssnapshot     Creates filesystem snapshots, or lists/deletes current snapshots.\ngroups         Display, or use, the groups information\n显示帮助信息\nhelp           Display a helpful usage message\n显示使用历史\nhistory        Display, or use, the transaction history\n显示包信息\ninfo           Display details about a package or group of packages\n安装指定包\ninstall        Install a package or packages on your system\n列出所有可安裝的软件清单\nlist           List a package or groups of packages\nload-transaction load a saved transaction from filename\n生产缓存\nmakecache      Generate the metadata cache\nprovides       Find what package provides the given value\n删除指定的rpm软件包\nremove\n重新安装\nreinstall      reinstall a package\nrepo-pkgs      Treat a repo. as a group of packages, so we can install/remove all of them\nrepolist       Display the configured software repositories\n搜索软件包\nsearch         Search package details for the given string\n进入yum的shell提示符\nshell          Run an interactive yum shell\nswap           Simple way to swap packages, instead of using shell\n全部更新 \nupdate         Update a package or packages on your system\nupdate-minimal Works like upgrade, but goes to the 'newest' package match which fixes a problem that affects your system\nyum update 全部更新\nyum update package1 更新指定程序包package1\n\nupdateinfo     Acts on repository update information\n升级指定程序包\nupgrade        Update packages taking obsoletes into account\n显示yum版本信息\nversion        Display a version for the machine and/or available repos.\n\n\nOptions:\n  -h, --help            show this help message and exit  显示帮助信息\n  -t, --tolerant        be tolerant of errors 包错误是否执行\n  -C, --cacheonly       run entirely from system cache, don't update cache  缓存安装,完全从缓存中运行，而不去下载或者更新任何头文件。\n\n  -c [config file], --config=[config file]  指定配置文件\n                        config file location\n  -R [minutes], --randomwait=[minutes]   设置yum处理一个命令的最大等待之间\n                        maximum command wait time\n  -d [debug level], --debuglevel=[debug level]  设置调试等级(0-10)\n                        debugging output level\n  --showduplicates      show duplicates, in repos, in list/search commands\n  -e [error level], --errorlevel=[error level] 设置错误等级(0-10)\n                        error output level\n  --rpmverbosity=[debug level name]\n                        debugging output level for rpm\n  -q, --quiet           quiet operation 安装模式,不显示信息\n  -v, --verbose         verbose operation 显示操作信息\n  -y, --assumeyes       answer yes for all questions 允许安装\n  --assumeno            answer no for all questions\n  --version             show Yum version and exit\n  --installroot=[path]  set install root\n  --enablerepo=[repo]   enable one or more repositories (wildcards allowed)\n  --disablerepo=[repo]  disable one or more repositories (wildcards allowed)\n  -x [package], --exclude=[package]\n                        exclude package(s) by name or glob\n  --disableexcludes=[repo]\n                        disable exclude from main, for a repo or for\n                        everything\n  --disableincludes=[repo]\n                        disable includepkgs for a repo or for everything\n  --obsoletes           enable obsoletes processing during updates\n  --noplugins           disable Yum plugins  禁止使用插件\n  --nogpgcheck          disable gpg signature checking  不进行gpg检查\n  --disableplugin=[plugin]    根据插件名称禁止使用插件\n                        disable plugins by name\n  --enableplugin=[plugin]\t  启用某个插件\n                        enable plugins by name\n  --skip-broken         skip packages with depsolving problems\n  --color=COLOR         control whether color is used\n  --releasever=RELEASEVER\n                        set value of $releasever in yum config and repo files\n  --downloadonly        don't update, just download\n  --downloaddir=DLDIR   specifies an alternate directory to store packages\n  --setopt=SETOPTS      set arbitrary config and repo options\n  --bugfix              Include bugfix relevant packages, in updates\n  --security            Include security relevant packages, in updates\n  --advisory=ADVS, --advisories=ADVS\n                        Include packages needed to fix the given advisory, in\n                        updates\n  --bzs=BZS             Include packages needed to fix the given BZ, in\n                        updates\n  --cves=CVES           Include packages needed to fix the given CVE, in\n                        updates\n  --sec-severity=SEVS, --secseverity=SEVS\n                        Include security relevant packages matching the\n                        severity, in updates\n\n\n参考:\n{% link 163CentOS镜像使用帮助 http://mirrors.163.com/.help/centos.html %}\n{% link rpm命令 http://man.linuxde.net/rpm %}\n{% link yum命令 http://man.linuxde.net/yum %}\n\n","slug":"yum源的配置和使用","published":1,"updated":"2017-03-01T02:52:32.000Z","layout":"post","photos":[],"link":"","_id":"cizqeieny001uznz4zt8ejbgx","content":"<p>1.yum?<br>Yum（Yellow dog Updater, Modified）是一个在Fedora和RedHat以及CentOS中基于RPM包的软件包管理器。能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，自动安装软件.<br>yum 的主要功能是自动化地升级，安装/移除rpm包，收集rpm 包的相关信息，检查依赖性并自动提示用户解决.</p>\n<p>yum 主要要有可靠的软件的仓库(repository),它可以是http 或ftp 站点，也可以是本地软件池，但必须包含rpm 的header，header 包括了rpm 包的各种信息，包括描述，功能，提供的文件，依赖性等。正是收集了这些header 并加以分析，才能自动化地完成余下的任务。</p>\n<p>yum 可以同时配置多个资源库(Repository)，简洁的配置文件（/etc/yum.conf），自动解决增加或删除rpm 包时遇到的依赖性问题，保持与RPM 数据库的一致性.</p>\n<p>查看本机安装的yum:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]# rpm -qa|grep yum</div><div class=\"line\">yum-3.4.3-132.el7.centos.0.1.noarch  #yum主程序</div><div class=\"line\">yum-plugin-fastestmirror-1.1.31-34.el7.noarch #快速从资源库中查找bao的yum 插件</div><div class=\"line\">yum-metadata-parser-1.1.4-10.el7.x86_64 #分析 metadata</div></pre></td></tr></table></figure>\n<p>centos 默认安装有yum,如果liunx没有安装yum,可以通过下载rpm包.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://mirrors.163.com/centos/6/os/x86_64/Packages/python-iniparse-0.3.1-2.1.el6.noarch.rpm </div><div class=\"line\">wget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-metadata-parser-1.1.2-16.el6.x86_64.rpm </div><div class=\"line\">wget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-3.2.29-40.el6.centos.noarch.rpm  </div><div class=\"line\">wget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.30-14.el6.noarch.rpm</div><div class=\"line\"></div><div class=\"line\"># rpm -ivh yum-3.2.22-33.el5.centos.noarch.rpm yum-fastestmirror-1.1.16-14.el5.centos.1.noarch.rpm yum-metadata-parser-1.1.2-3.el5.centos.i386.rpm</div></pre></td></tr></table></figure></p>\n<p>2.配置</p>\n<p>yum 的配置文件分为两部分：main和repository</p>\n<p>main 定义了全局配置选项，整个yum 配置文件应该只有一个main。常位于/etc/yum.conf 中。<br>repository 部分定义了每个源/服务器的具体配置，可以有一到多个。常位于/etc/yum.repo.d 目录下的各文件中。</p>\n<p>1)yum.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">[main]</div><div class=\"line\">#yum的缓存目录.yum下载的rpm版保存的位置 ,默认/var/cache/yum</div><div class=\"line\">cachedir=/var/cache/yum/$basearch/$releasever</div><div class=\"line\">#安装后是否保存软件包,0(默认),不保存 1 保存</div><div class=\"line\">keepcache=0</div><div class=\"line\">#debug信息输出等级, 范围0-10 ,默认2</div><div class=\"line\">debuglevel=2</div><div class=\"line\">#日志文件位置</div><div class=\"line\">logfile=/var/log/yum.log</div><div class=\"line\"># 1 yum只安装和系统架构匹配的软件包 0 则相反</div><div class=\"line\">exactarch=1</div><div class=\"line\"># 1 允许更新陈旧软件包</div><div class=\"line\">obsoletes=1</div><div class=\"line\">#是否进行gpg校验，如果没有这一项，默认是1。</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">#是否启用插件，默认1为允许，0表示不允许。我们一般会用yum-fastestmirror这个插件。</div><div class=\"line\">plugins=1</div><div class=\"line\">installonly_limit=5</div><div class=\"line\">bugtracker_url=http://bugs.centos.org/set_project.php?project_id=23&amp;ref=http://bugs.centos.org/bug_report_page.php?category=yum</div><div class=\"line\">#指定一个软件包，yum 会根据这个包判断你的发行版本，默认是redhat-release，也可以是安装的任何针对自己发行版的rpm 包。</div><div class=\"line\">distroverpkg=centos-release</div><div class=\"line\">#包的策略。一共有两个选项，newest 和last，这个作用是如果你设置了多个repository，而同一软件在不同的repository 中同时存在，</div><div class=\"line\">#yum 应该安装哪一个，如果是newest，则yum 会安装最新的那个版本。如果是last，则yum 会将服务器id 以字母表排序，并选择最后的那个服务器上的软件安装。一般都是选newest。</div><div class=\"line\">pkgpolicy=newest</div><div class=\"line\">#有1和0两个选项，表示yum 是否容忍命令行发生与软件包有关的错误，比如你要安装1,2,3三个包，而其中3此前已经安装了，如果你设为1,则yum 不会出现错误信息。默认是0</div><div class=\"line\">tolerant=1</div><div class=\"line\">#exclude 排除某些软件在升级名单之外，可以用通配符，列表中各个项目要用空格隔开，这个对于安装了诸如美化包，中文补丁的朋友特别有用。</div><div class=\"line\">#exclude=xxx</div><div class=\"line\">#设置 keepcache=1，yum 在成功安装软件包之后保留缓存的头文件 (headers) 和软件包。默认值为 keepcache=0 不保存</div><div class=\"line\">#keepcache=[1 or 0]</div><div class=\"line\"></div><div class=\"line\">#  This is the default, if you make this bigger yum won&apos;t see if the metadata</div><div class=\"line\"># is newer on the remote and so you&apos;ll &quot;gain&quot; the bandwidth of not having to</div><div class=\"line\"># download the new metadata and &quot;pay&quot; for it by yum not having correct</div><div class=\"line\"># information.</div><div class=\"line\">#  It is esp. important, to have correct metadata, for distributions like</div><div class=\"line\"># Fedora which don&apos;t keep old packages around. If you don&apos;t like this checking</div><div class=\"line\"># interupting your command line usage, it&apos;s much better to have something</div><div class=\"line\"># manually check the metadata once an hour (yum-updatesd will do this).</div><div class=\"line\"># metadata_expire=90m</div><div class=\"line\"></div><div class=\"line\"># PUT YOUR REPOS HERE OR IN separate files named file.repo</div><div class=\"line\"># in /etc/yum.repos.d</div><div class=\"line\">#默认都会被include 进来 也就是说 /etc/yum.repos.d/xx.repo 无论配置文件有多少个 每个里面有多少个[name] 最后其实都被整合到 一个里面看就是了 重复的[name]后面的覆盖前面的</div><div class=\"line\">reposdir=/etc/yum.repos.d/</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>2)rpo配置</p>\n<p>yum可以配置多个资源库,可以在/etc/yum.repos.d/新增和修改,也可以在/etc/yum.conf直接配置.<br>格式:<br>[serverid] #唯一<br>name=Some name for this server<br>baseurl=url://path/to/repository/<br>serverid 是用于区别各个不同的repository，必须有一个独一无二的名称；<br>name 是对repository 的描述，支持像$releasever $basearch这样的变量；<br>baseurl 是服务器设置中最重要的部分，只有设置正确，才能从上面获取软件。url 支持的协议有 http:// ftp:// file:// </p>\n<p>例如下面:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[centosplus]</div><div class=\"line\">#支持$releasever(发行版本) $basearch(cpu的基本体系组) $arch(cpu体系)这样的变量</div><div class=\"line\">name=CentOS-$releasever - Plus - 163.com</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/$releasever/centosplus/$basearch/</div><div class=\"line\">使用gpg对包进行校验，确保下载包的完整性</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">##当某个软件仓库被配置成 enabled=0 时，yum 在安装或升级软件包时不会将该仓库做为软件包提供源。使用这个选项，可以启用或禁用软件仓库。</div><div class=\"line\">#通过 yum 的 --enablerepo=[repo_name] 和 --disablerepo=[repo_name] 选项，或者通过 PackageKit 的&quot;添加/删除软件&quot;工具，也能够方便地启用和禁用指定的软件仓库</div><div class=\"line\">enabled=0</div><div class=\"line\">#确保下载包的完整性，可以指定repository站点的gpg key.</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div></pre></td></tr></table></figure></p>\n<p>还有注意的是,如果要使用gpg对包进行校验,还需要导入每个reposity的GPG,先到repo库站点下载,然后用<br>rpm –import xxx.txt 命令将它们导入.<br>最好把发行版自带GPG-KEY也导入，rpm –import /usr/share/doc/redhat-release-*/RPM-GPG-KEY 官方软件升级用的上.</p>\n<p>3)更换yum源<br>有时候centos的自动的yum地址访问不了,或者下载速度太慢,可以换为国内的地址:<br>如换为网易163 yum源:</p>\n<p>推荐先备份/etc/yum.repos.d/CentOS-Base.repo<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</div></pre></td></tr></table></figure></p>\n<p>然后修改/etc/yum.repos.d/CentOS-Base.repo文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"># CentOS-Base.repo</div><div class=\"line\">#</div><div class=\"line\"># The mirror system uses the connecting IP address of the client and the</div><div class=\"line\"># update status of each mirror to pick mirrors that are updated to and</div><div class=\"line\"># geographically close to the client.  You should use this for CentOS updates</div><div class=\"line\"># unless you are manually picking other mirrors.</div><div class=\"line\">#</div><div class=\"line\"># If the mirrorlist= does not work for you, as a fall back you can try the </div><div class=\"line\"># remarked out baseurl= line instead.</div><div class=\"line\">#</div><div class=\"line\">#</div><div class=\"line\">[base]</div><div class=\"line\">name=CentOS-$releasever - Base - 163.com</div><div class=\"line\">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/$releasever/os/$basearch/</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div><div class=\"line\"></div><div class=\"line\">#released updates</div><div class=\"line\">[updates]</div><div class=\"line\">name=CentOS-$releasever - Updates - 163.com</div><div class=\"line\">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/$releasever/updates/$basearch/</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div><div class=\"line\"></div><div class=\"line\">#additional packages that may be useful</div><div class=\"line\">[extras]</div><div class=\"line\">name=CentOS-$releasever - Extras - 163.com</div><div class=\"line\">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/$releasever/extras/$basearch/</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div><div class=\"line\"></div><div class=\"line\">#additional packages that extend functionality of existing packages</div><div class=\"line\">[centosplus]</div><div class=\"line\">name=CentOS-$releasever - Plus - 163.com</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/$releasever/centosplus/$basearch/</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">enabled=0</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div></pre></td></tr></table></figure></p>\n<p>最后清除旧缓存,生产新缓存<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum clean all</div><div class=\"line\">yum makecache</div></pre></td></tr></table></figure></p>\n<p>更换为阿里云yum源:<br>有时候服务器使用的阿里云的话,换为阿里云的yum源会比较快.<br>阿里云Linux安装镜像源地址：<a href=\"http://mirrors.aliyun.com/\" target=\"_blank\" rel=\"external\">http://mirrors.aliyun.com/</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">#备份原镜像文件(老规矩)</div><div class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</div><div class=\"line\">#下载新的CentOS-Base.repo 到/etc/yum.repos.d/</div><div class=\"line\">#CentOS 5</div><div class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</div><div class=\"line\">#CentOS 6</div><div class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</div><div class=\"line\">#CentOS 7</div><div class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</div><div class=\"line\">#生成缓存</div><div class=\"line\">yum clean all</div><div class=\"line\">yum makecache</div></pre></td></tr></table></figure></p>\n<p>当然国内还有其他的yum源</p>\n<p>3.yum命令使用</p>\n<p>Usage: yum [options] COMMAND</p>\n<p>List of Commands:<br>检查问题<br>check          Check for problems in the rpmdb<br>检查可更新的程序<br>check-update   Check for available package updates<br>清除缓存<br>clean          Remove cached data<br>yum clean packages 清除缓存目录下的软件包<br>yum clean headers 清除缓存目录下的 headers<br>yum clean oldheaders 清除缓存目录下旧的 headers<br>yum clean, yum clean all (= yum clean packages; yum clean oldheaders) 清除缓存目录下的软件包及旧的headers</p>\n<p>查看包的依赖列表<br>deplist        List a package’s dependencies</p>\n<p>distribution-synchronization Synchronize installed packages to the latest available versions<br>downgrade      downgrade a package<br>erase          Remove a package or packages from your system<br>fs             Creates filesystem snapshots, or lists/deletes current snapshots.<br>fssnapshot     Creates filesystem snapshots, or lists/deletes current snapshots.<br>groups         Display, or use, the groups information<br>显示帮助信息<br>help           Display a helpful usage message<br>显示使用历史<br>history        Display, or use, the transaction history<br>显示包信息<br>info           Display details about a package or group of packages<br>安装指定包<br>install        Install a package or packages on your system<br>列出所有可安裝的软件清单<br>list           List a package or groups of packages<br>load-transaction load a saved transaction from filename<br>生产缓存<br>makecache      Generate the metadata cache<br>provides       Find what package provides the given value<br>删除指定的rpm软件包<br>remove<br>重新安装<br>reinstall      reinstall a package<br>repo-pkgs      Treat a repo. as a group of packages, so we can install/remove all of them<br>repolist       Display the configured software repositories<br>搜索软件包<br>search         Search package details for the given string<br>进入yum的shell提示符<br>shell          Run an interactive yum shell<br>swap           Simple way to swap packages, instead of using shell<br>全部更新<br>update         Update a package or packages on your system<br>update-minimal Works like upgrade, but goes to the ‘newest’ package match which fixes a problem that affects your system<br>yum update 全部更新<br>yum update package1 更新指定程序包package1</p>\n<p>updateinfo     Acts on repository update information<br>升级指定程序包<br>upgrade        Update packages taking obsoletes into account<br>显示yum版本信息<br>version        Display a version for the machine and/or available repos.</p>\n<p>Options:<br>  -h, –help            show this help message and exit  显示帮助信息<br>  -t, –tolerant        be tolerant of errors 包错误是否执行<br>  -C, –cacheonly       run entirely from system cache, don’t update cache  缓存安装,完全从缓存中运行，而不去下载或者更新任何头文件。</p>\n<p>  -c [config file], –config=[config file]  指定配置文件<br>                        config file location<br>  -R [minutes], –randomwait=[minutes]   设置yum处理一个命令的最大等待之间<br>                        maximum command wait time<br>  -d [debug level], –debuglevel=[debug level]  设置调试等级(0-10)<br>                        debugging output level<br>  –showduplicates      show duplicates, in repos, in list/search commands<br>  -e [error level], –errorlevel=[error level] 设置错误等级(0-10)<br>                        error output level<br>  –rpmverbosity=[debug level name]<br>                        debugging output level for rpm<br>  -q, –quiet           quiet operation 安装模式,不显示信息<br>  -v, –verbose         verbose operation 显示操作信息<br>  -y, –assumeyes       answer yes for all questions 允许安装<br>  –assumeno            answer no for all questions<br>  –version             show Yum version and exit<br>  –installroot=[path]  set install root<br>  –enablerepo=[repo]   enable one or more repositories (wildcards allowed)<br>  –disablerepo=[repo]  disable one or more repositories (wildcards allowed)<br>  -x [package], –exclude=[package]<br>                        exclude package(s) by name or glob<br>  –disableexcludes=[repo]<br>                        disable exclude from main, for a repo or for<br>                        everything<br>  –disableincludes=[repo]<br>                        disable includepkgs for a repo or for everything<br>  –obsoletes           enable obsoletes processing during updates<br>  –noplugins           disable Yum plugins  禁止使用插件<br>  –nogpgcheck          disable gpg signature checking  不进行gpg检查<br>  –disableplugin=[plugin]    根据插件名称禁止使用插件<br>                        disable plugins by name<br>  –enableplugin=[plugin]      启用某个插件<br>                        enable plugins by name<br>  –skip-broken         skip packages with depsolving problems<br>  –color=COLOR         control whether color is used<br>  –releasever=RELEASEVER<br>                        set value of $releasever in yum config and repo files<br>  –downloadonly        don’t update, just download<br>  –downloaddir=DLDIR   specifies an alternate directory to store packages<br>  –setopt=SETOPTS      set arbitrary config and repo options<br>  –bugfix              Include bugfix relevant packages, in updates<br>  –security            Include security relevant packages, in updates<br>  –advisory=ADVS, –advisories=ADVS<br>                        Include packages needed to fix the given advisory, in<br>                        updates<br>  –bzs=BZS             Include packages needed to fix the given BZ, in<br>                        updates<br>  –cves=CVES           Include packages needed to fix the given CVE, in<br>                        updates<br>  –sec-severity=SEVS, –secseverity=SEVS<br>                        Include security relevant packages matching the<br>                        severity, in updates</p>\n<p>参考:<br><a href=\"http://mirrors.163.com/.help/centos.html\" target=\"_blank\" rel=\"external\">163CentOS镜像使用帮助</a><br><a href=\"http://man.linuxde.net/rpm\" target=\"_blank\" rel=\"external\">rpm命令</a><br><a href=\"http://man.linuxde.net/yum\" target=\"_blank\" rel=\"external\">yum命令</a></p>\n","excerpt":"","more":"<p>1.yum?<br>Yum（Yellow dog Updater, Modified）是一个在Fedora和RedHat以及CentOS中基于RPM包的软件包管理器。能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，自动安装软件.<br>yum 的主要功能是自动化地升级，安装/移除rpm包，收集rpm 包的相关信息，检查依赖性并自动提示用户解决.</p>\n<p>yum 主要要有可靠的软件的仓库(repository),它可以是http 或ftp 站点，也可以是本地软件池，但必须包含rpm 的header，header 包括了rpm 包的各种信息，包括描述，功能，提供的文件，依赖性等。正是收集了这些header 并加以分析，才能自动化地完成余下的任务。</p>\n<p>yum 可以同时配置多个资源库(Repository)，简洁的配置文件（/etc/yum.conf），自动解决增加或删除rpm 包时遇到的依赖性问题，保持与RPM 数据库的一致性.</p>\n<p>查看本机安装的yum:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]# rpm -qa|grep yum</div><div class=\"line\">yum-3.4.3-132.el7.centos.0.1.noarch  #yum主程序</div><div class=\"line\">yum-plugin-fastestmirror-1.1.31-34.el7.noarch #快速从资源库中查找bao的yum 插件</div><div class=\"line\">yum-metadata-parser-1.1.4-10.el7.x86_64 #分析 metadata</div></pre></td></tr></table></figure>\n<p>centos 默认安装有yum,如果liunx没有安装yum,可以通过下载rpm包.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://mirrors.163.com/centos/6/os/x86_64/Packages/python-iniparse-0.3.1-2.1.el6.noarch.rpm </div><div class=\"line\">wget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-metadata-parser-1.1.2-16.el6.x86_64.rpm </div><div class=\"line\">wget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-3.2.29-40.el6.centos.noarch.rpm  </div><div class=\"line\">wget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.30-14.el6.noarch.rpm</div><div class=\"line\"></div><div class=\"line\"># rpm -ivh yum-3.2.22-33.el5.centos.noarch.rpm yum-fastestmirror-1.1.16-14.el5.centos.1.noarch.rpm yum-metadata-parser-1.1.2-3.el5.centos.i386.rpm</div></pre></td></tr></table></figure></p>\n<p>2.配置</p>\n<p>yum 的配置文件分为两部分：main和repository</p>\n<p>main 定义了全局配置选项，整个yum 配置文件应该只有一个main。常位于/etc/yum.conf 中。<br>repository 部分定义了每个源/服务器的具体配置，可以有一到多个。常位于/etc/yum.repo.d 目录下的各文件中。</p>\n<p>1)yum.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">[main]</div><div class=\"line\">#yum的缓存目录.yum下载的rpm版保存的位置 ,默认/var/cache/yum</div><div class=\"line\">cachedir=/var/cache/yum/$basearch/$releasever</div><div class=\"line\">#安装后是否保存软件包,0(默认),不保存 1 保存</div><div class=\"line\">keepcache=0</div><div class=\"line\">#debug信息输出等级, 范围0-10 ,默认2</div><div class=\"line\">debuglevel=2</div><div class=\"line\">#日志文件位置</div><div class=\"line\">logfile=/var/log/yum.log</div><div class=\"line\"># 1 yum只安装和系统架构匹配的软件包 0 则相反</div><div class=\"line\">exactarch=1</div><div class=\"line\"># 1 允许更新陈旧软件包</div><div class=\"line\">obsoletes=1</div><div class=\"line\">#是否进行gpg校验，如果没有这一项，默认是1。</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">#是否启用插件，默认1为允许，0表示不允许。我们一般会用yum-fastestmirror这个插件。</div><div class=\"line\">plugins=1</div><div class=\"line\">installonly_limit=5</div><div class=\"line\">bugtracker_url=http://bugs.centos.org/set_project.php?project_id=23&amp;ref=http://bugs.centos.org/bug_report_page.php?category=yum</div><div class=\"line\">#指定一个软件包，yum 会根据这个包判断你的发行版本，默认是redhat-release，也可以是安装的任何针对自己发行版的rpm 包。</div><div class=\"line\">distroverpkg=centos-release</div><div class=\"line\">#包的策略。一共有两个选项，newest 和last，这个作用是如果你设置了多个repository，而同一软件在不同的repository 中同时存在，</div><div class=\"line\">#yum 应该安装哪一个，如果是newest，则yum 会安装最新的那个版本。如果是last，则yum 会将服务器id 以字母表排序，并选择最后的那个服务器上的软件安装。一般都是选newest。</div><div class=\"line\">pkgpolicy=newest</div><div class=\"line\">#有1和0两个选项，表示yum 是否容忍命令行发生与软件包有关的错误，比如你要安装1,2,3三个包，而其中3此前已经安装了，如果你设为1,则yum 不会出现错误信息。默认是0</div><div class=\"line\">tolerant=1</div><div class=\"line\">#exclude 排除某些软件在升级名单之外，可以用通配符，列表中各个项目要用空格隔开，这个对于安装了诸如美化包，中文补丁的朋友特别有用。</div><div class=\"line\">#exclude=xxx</div><div class=\"line\">#设置 keepcache=1，yum 在成功安装软件包之后保留缓存的头文件 (headers) 和软件包。默认值为 keepcache=0 不保存</div><div class=\"line\">#keepcache=[1 or 0]</div><div class=\"line\"></div><div class=\"line\">#  This is the default, if you make this bigger yum won&apos;t see if the metadata</div><div class=\"line\"># is newer on the remote and so you&apos;ll &quot;gain&quot; the bandwidth of not having to</div><div class=\"line\"># download the new metadata and &quot;pay&quot; for it by yum not having correct</div><div class=\"line\"># information.</div><div class=\"line\">#  It is esp. important, to have correct metadata, for distributions like</div><div class=\"line\"># Fedora which don&apos;t keep old packages around. If you don&apos;t like this checking</div><div class=\"line\"># interupting your command line usage, it&apos;s much better to have something</div><div class=\"line\"># manually check the metadata once an hour (yum-updatesd will do this).</div><div class=\"line\"># metadata_expire=90m</div><div class=\"line\"></div><div class=\"line\"># PUT YOUR REPOS HERE OR IN separate files named file.repo</div><div class=\"line\"># in /etc/yum.repos.d</div><div class=\"line\">#默认都会被include 进来 也就是说 /etc/yum.repos.d/xx.repo 无论配置文件有多少个 每个里面有多少个[name] 最后其实都被整合到 一个里面看就是了 重复的[name]后面的覆盖前面的</div><div class=\"line\">reposdir=/etc/yum.repos.d/</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>2)rpo配置</p>\n<p>yum可以配置多个资源库,可以在/etc/yum.repos.d/新增和修改,也可以在/etc/yum.conf直接配置.<br>格式:<br>[serverid] #唯一<br>name=Some name for this server<br>baseurl=url://path/to/repository/<br>serverid 是用于区别各个不同的repository，必须有一个独一无二的名称；<br>name 是对repository 的描述，支持像$releasever $basearch这样的变量；<br>baseurl 是服务器设置中最重要的部分，只有设置正确，才能从上面获取软件。url 支持的协议有 http:// ftp:// file:// </p>\n<p>例如下面:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[centosplus]</div><div class=\"line\">#支持$releasever(发行版本) $basearch(cpu的基本体系组) $arch(cpu体系)这样的变量</div><div class=\"line\">name=CentOS-$releasever - Plus - 163.com</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/$releasever/centosplus/$basearch/</div><div class=\"line\">使用gpg对包进行校验，确保下载包的完整性</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">##当某个软件仓库被配置成 enabled=0 时，yum 在安装或升级软件包时不会将该仓库做为软件包提供源。使用这个选项，可以启用或禁用软件仓库。</div><div class=\"line\">#通过 yum 的 --enablerepo=[repo_name] 和 --disablerepo=[repo_name] 选项，或者通过 PackageKit 的&quot;添加/删除软件&quot;工具，也能够方便地启用和禁用指定的软件仓库</div><div class=\"line\">enabled=0</div><div class=\"line\">#确保下载包的完整性，可以指定repository站点的gpg key.</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div></pre></td></tr></table></figure></p>\n<p>还有注意的是,如果要使用gpg对包进行校验,还需要导入每个reposity的GPG,先到repo库站点下载,然后用<br>rpm –import xxx.txt 命令将它们导入.<br>最好把发行版自带GPG-KEY也导入，rpm –import /usr/share/doc/redhat-release-*/RPM-GPG-KEY 官方软件升级用的上.</p>\n<p>3)更换yum源<br>有时候centos的自动的yum地址访问不了,或者下载速度太慢,可以换为国内的地址:<br>如换为网易163 yum源:</p>\n<p>推荐先备份/etc/yum.repos.d/CentOS-Base.repo<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</div></pre></td></tr></table></figure></p>\n<p>然后修改/etc/yum.repos.d/CentOS-Base.repo文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"># CentOS-Base.repo</div><div class=\"line\">#</div><div class=\"line\"># The mirror system uses the connecting IP address of the client and the</div><div class=\"line\"># update status of each mirror to pick mirrors that are updated to and</div><div class=\"line\"># geographically close to the client.  You should use this for CentOS updates</div><div class=\"line\"># unless you are manually picking other mirrors.</div><div class=\"line\">#</div><div class=\"line\"># If the mirrorlist= does not work for you, as a fall back you can try the </div><div class=\"line\"># remarked out baseurl= line instead.</div><div class=\"line\">#</div><div class=\"line\">#</div><div class=\"line\">[base]</div><div class=\"line\">name=CentOS-$releasever - Base - 163.com</div><div class=\"line\">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/$releasever/os/$basearch/</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div><div class=\"line\"></div><div class=\"line\">#released updates</div><div class=\"line\">[updates]</div><div class=\"line\">name=CentOS-$releasever - Updates - 163.com</div><div class=\"line\">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/$releasever/updates/$basearch/</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div><div class=\"line\"></div><div class=\"line\">#additional packages that may be useful</div><div class=\"line\">[extras]</div><div class=\"line\">name=CentOS-$releasever - Extras - 163.com</div><div class=\"line\">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/$releasever/extras/$basearch/</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div><div class=\"line\"></div><div class=\"line\">#additional packages that extend functionality of existing packages</div><div class=\"line\">[centosplus]</div><div class=\"line\">name=CentOS-$releasever - Plus - 163.com</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/$releasever/centosplus/$basearch/</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">enabled=0</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div></pre></td></tr></table></figure></p>\n<p>最后清除旧缓存,生产新缓存<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum clean all</div><div class=\"line\">yum makecache</div></pre></td></tr></table></figure></p>\n<p>更换为阿里云yum源:<br>有时候服务器使用的阿里云的话,换为阿里云的yum源会比较快.<br>阿里云Linux安装镜像源地址：<a href=\"http://mirrors.aliyun.com/\">http://mirrors.aliyun.com/</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">#备份原镜像文件(老规矩)</div><div class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</div><div class=\"line\">#下载新的CentOS-Base.repo 到/etc/yum.repos.d/</div><div class=\"line\">#CentOS 5</div><div class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</div><div class=\"line\">#CentOS 6</div><div class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</div><div class=\"line\">#CentOS 7</div><div class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</div><div class=\"line\">#生成缓存</div><div class=\"line\">yum clean all</div><div class=\"line\">yum makecache</div></pre></td></tr></table></figure></p>\n<p>当然国内还有其他的yum源</p>\n<p>3.yum命令使用</p>\n<p>Usage: yum [options] COMMAND</p>\n<p>List of Commands:<br>检查问题<br>check          Check for problems in the rpmdb<br>检查可更新的程序<br>check-update   Check for available package updates<br>清除缓存<br>clean          Remove cached data<br>yum clean packages 清除缓存目录下的软件包<br>yum clean headers 清除缓存目录下的 headers<br>yum clean oldheaders 清除缓存目录下旧的 headers<br>yum clean, yum clean all (= yum clean packages; yum clean oldheaders) 清除缓存目录下的软件包及旧的headers</p>\n<p>查看包的依赖列表<br>deplist        List a package’s dependencies</p>\n<p>distribution-synchronization Synchronize installed packages to the latest available versions<br>downgrade      downgrade a package<br>erase          Remove a package or packages from your system<br>fs             Creates filesystem snapshots, or lists/deletes current snapshots.<br>fssnapshot     Creates filesystem snapshots, or lists/deletes current snapshots.<br>groups         Display, or use, the groups information<br>显示帮助信息<br>help           Display a helpful usage message<br>显示使用历史<br>history        Display, or use, the transaction history<br>显示包信息<br>info           Display details about a package or group of packages<br>安装指定包<br>install        Install a package or packages on your system<br>列出所有可安裝的软件清单<br>list           List a package or groups of packages<br>load-transaction load a saved transaction from filename<br>生产缓存<br>makecache      Generate the metadata cache<br>provides       Find what package provides the given value<br>删除指定的rpm软件包<br>remove<br>重新安装<br>reinstall      reinstall a package<br>repo-pkgs      Treat a repo. as a group of packages, so we can install/remove all of them<br>repolist       Display the configured software repositories<br>搜索软件包<br>search         Search package details for the given string<br>进入yum的shell提示符<br>shell          Run an interactive yum shell<br>swap           Simple way to swap packages, instead of using shell<br>全部更新<br>update         Update a package or packages on your system<br>update-minimal Works like upgrade, but goes to the ‘newest’ package match which fixes a problem that affects your system<br>yum update 全部更新<br>yum update package1 更新指定程序包package1</p>\n<p>updateinfo     Acts on repository update information<br>升级指定程序包<br>upgrade        Update packages taking obsoletes into account<br>显示yum版本信息<br>version        Display a version for the machine and/or available repos.</p>\n<p>Options:<br>  -h, –help            show this help message and exit  显示帮助信息<br>  -t, –tolerant        be tolerant of errors 包错误是否执行<br>  -C, –cacheonly       run entirely from system cache, don’t update cache  缓存安装,完全从缓存中运行，而不去下载或者更新任何头文件。</p>\n<p>  -c [config file], –config=[config file]  指定配置文件<br>                        config file location<br>  -R [minutes], –randomwait=[minutes]   设置yum处理一个命令的最大等待之间<br>                        maximum command wait time<br>  -d [debug level], –debuglevel=[debug level]  设置调试等级(0-10)<br>                        debugging output level<br>  –showduplicates      show duplicates, in repos, in list/search commands<br>  -e [error level], –errorlevel=[error level] 设置错误等级(0-10)<br>                        error output level<br>  –rpmverbosity=[debug level name]<br>                        debugging output level for rpm<br>  -q, –quiet           quiet operation 安装模式,不显示信息<br>  -v, –verbose         verbose operation 显示操作信息<br>  -y, –assumeyes       answer yes for all questions 允许安装<br>  –assumeno            answer no for all questions<br>  –version             show Yum version and exit<br>  –installroot=[path]  set install root<br>  –enablerepo=[repo]   enable one or more repositories (wildcards allowed)<br>  –disablerepo=[repo]  disable one or more repositories (wildcards allowed)<br>  -x [package], –exclude=[package]<br>                        exclude package(s) by name or glob<br>  –disableexcludes=[repo]<br>                        disable exclude from main, for a repo or for<br>                        everything<br>  –disableincludes=[repo]<br>                        disable includepkgs for a repo or for everything<br>  –obsoletes           enable obsoletes processing during updates<br>  –noplugins           disable Yum plugins  禁止使用插件<br>  –nogpgcheck          disable gpg signature checking  不进行gpg检查<br>  –disableplugin=[plugin]    根据插件名称禁止使用插件<br>                        disable plugins by name<br>  –enableplugin=[plugin]      启用某个插件<br>                        enable plugins by name<br>  –skip-broken         skip packages with depsolving problems<br>  –color=COLOR         control whether color is used<br>  –releasever=RELEASEVER<br>                        set value of $releasever in yum config and repo files<br>  –downloadonly        don’t update, just download<br>  –downloaddir=DLDIR   specifies an alternate directory to store packages<br>  –setopt=SETOPTS      set arbitrary config and repo options<br>  –bugfix              Include bugfix relevant packages, in updates<br>  –security            Include security relevant packages, in updates<br>  –advisory=ADVS, –advisories=ADVS<br>                        Include packages needed to fix the given advisory, in<br>                        updates<br>  –bzs=BZS             Include packages needed to fix the given BZ, in<br>                        updates<br>  –cves=CVES           Include packages needed to fix the given CVE, in<br>                        updates<br>  –sec-severity=SEVS, –secseverity=SEVS<br>                        Include security relevant packages matching the<br>                        severity, in updates</p>\n<p>参考:<br><a href=\"http://mirrors.163.com/.help/centos.html\">163CentOS镜像使用帮助</a><br><a href=\"http://man.linuxde.net/rpm\">rpm命令</a><br><a href=\"http://man.linuxde.net/yum\">yum命令</a></p>\n"},{"title":"优雅的终端","date":"2016-09-12T13:48:07.000Z","_content":"Mac优点是 GUI 和命令行的完美结合,是我享受GUI程序的同时,也能用各种shell.\nShell是Linux/Unix的一个外壳。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序.\nLinux/Unix提供了很多种Shell,常用的Shell有这么几种，sh、bash、csh等，为什么有那么shell?,答案是如果你牛逼也可以自己写一个shell.\n想知道系统有几种shell，可以通过以下命令查看：\n\n{% codeblock %}\ncat /etc/shells\n{% endcodeblock %}\n显示如下：\n\n/bin/bash\n/bin/csh\n/bin/ksh\n/bin/sh\n/bin/tcsh\n/bin/zsh\n\n而查看正在使用的shell\n{% codeblock %}\n echo $SHELL\n{% endcodeblock %}\n\n安装\nmac默认安装zsh,如果没有的话,可以使用brew安装\n{% codeblock %}\n brew install zsh\n\n #安装过程\n huangchengkaideMacBook-Air:~ kai$ brew install zsh\n\n==> Installing dependencies for zsh: gdbm\n==> Installing zsh dependency: gdbm\n==> Downloading https://homebrew.bintray.com/bottles/gdbm-1.11.el_capitan.bottle\n######################################################################## 100.0%\n==> Pouring gdbm-1.11.el_capitan.bottle.2.tar.gz\n🍺  /usr/local/Cellar/gdbm/1.11: 17 files, 485.2K\n==> Installing zsh\n==> Downloading https://homebrew.bintray.com/bottles/zsh-5.2.el_capitan.bottle.t\n######################################################################## 100.0%\n==> Pouring zsh-5.2.el_capitan.bottle.tar.gz\n==> Caveats\nIn order to use this build of zsh as your login shell,\nit must be added to /etc/shells.\nAdd the following to your zshrc to access the online help:\n  unalias run-help\n  autoload run-help\n  HELPDIR=/usr/local/share/zsh/help\n==> Summary\n🍺  /usr/local/Cellar/zsh/5.2: 1,138 files, 8.7M\n {% endcodeblock %}\n\n 修改默认 Shell\n在 /etc/shells 文件中加入如下一行\n\n/usr/local/bin/zsh\n然后运行命令\n{% codeblock %}\nchsh -s /usr/local/bin/zsh\n{% endcodeblock %}\n\n配置:\n当 Zsh 启动时，它会按照顺序依次读取下面的配置文件：\n/etc/zsh/zshenv\n该文件应该包含用来设置PATH 环境变量[broken link: invalid section]以及其他一些环境变量的命令；不应该包含那些可以产生输出结果或者假设终端已经附着到 tty 上的命令。\n~/.zshenv\n该文件和 /etc/zsh/zshenv 相似，但是它是针对每个用户而言的。一般来说是用来设置一些有用的环境变量。\n/etc/zsh/zprofile\n这是一个全局的配置文件，在用户登录的时候加载。一般是用来在登录的时候执行一些命令。请注意，在 Arch Linux 里该文件默认包含一行配置，用来加载 /etc/profile 文件，详见 #全局配置文件。\n/etc/profile\n在登录时，该文件应该被所有和伯克利（Bourne）终端相兼容的终端加载：它在登录的的时候会加载应用相关的配置（/etc/profile.d/*.sh）。注意在 Arch Linux 里，Zsh 会默认加载该文件。\n~/.zprofile\n该文件一般用来在登录的时候自动执行一些用户脚本。\n/etc/zsh/zshrc\n当 Zsh 被作为交互式终端的时候，会加载这样一个全局配置文件。\n~/.zshrc\n当 Zsh 被作为交互式终端的时候，会加载这样一个用户配置文件。\n/etc/zsh/zlogin\n在登录完毕后加载的一个全局配置文件。\n~/.zlogin\n和 /etc/zsh/zlogin 相似，但是它是针对每个用户而言的。\n/etc/zsh/zlogout\n在注销的时候被加载的一个全局配置文件。\n~/.zlogout\n和 /etc/zsh/zlogout 相似，但是它是针对每个用户而言\n\n\n\nOh My Zsh \n\nzsh的配置是非常繁琐的,oh-my-zsh就是解决这个问题而生的,它是我们可以愉快的使用zsh了\n\n项目地址:https://github.com/robbyrussell/oh-my-zsh\n\n安装;\n\n使用curl\n{% codeblock %}\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n\n#或者使用wegt\n\nsh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n\n#安装过程\n\nsh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n\n--2016-09-09 16:20:35--  http://install.ohmyz.sh/\nResolving install.ohmyz.sh...\n50.31.225.93\nConnecting to install.ohmyz.sh|50.31.225.93|:80... connected.\nHTTP request sent, awaiting response... 301 Moved Permanently\nLocation: https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh [following]\n--2016-09-09 16:20:40--  https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh\nResolving raw.githubusercontent.com... 151.101.16.133\nConnecting to raw.githubusercontent.com|151.101.16.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 4018 (3.9K) [text/plain]\nSaving to: 'STDOUT'\n\n-                   100%[===================>]   3.92K  11.0KB/s    in 0.4s\n\n2016-09-09 16:20:42 (11.0 KB/s) - written to stdout [4018/4018]\n\nCloning Oh My Zsh...\nCloning into '/Users/kai/.oh-my-zsh'...\nremote: Counting objects: 798, done.\nremote: Compressing objects: 100% (667/667), done.\nremote: Total 798 (delta 19), reused 693 (delta 9), pack-reused 0\nReceiving objects: 100% (798/798), 535.07 KiB | 234.00 KiB/s, done.\nResolving deltas: 100% (19/19), done.\nChecking connectivity... done.\nLooking for an existing zsh config...\nFound ~/.zshrc. Backing up to ~/.zshrc.pre-oh-my-zsh\nUsing the Oh My Zsh template file and adding it to ~/.zshrc\n         __                                     __\n  ____  / /_     ____ ___  __  __   ____  _____/ /_\n / __ \\/ __ \\   / __ `__ \\/ / / /  /_  / / ___/ __ \\\n/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / /\n\\____/_/ /_/  /_/ /_/ /_/\\__, /    /___/____/_/ /_/\n                        /____/                       ....is now installed!\n\n\nPlease look over the ~/.zshrc file to select plugins, themes, and options.\n\np.s. Follow us at https://twitter.com/ohmyzsh.\n\np.p.s. Get stickers and t-shirts at http://shop.planetargon.com.\n\n\n{% endcodeblock %}\n\n这样oh-my-zsh就安装完成了。开始对其进行配置。主要是对~./zshrc进行配置\n\noh-my-zsh的插件\n在 GitHub 中有一个文档列出了插件目前的版本\n地址:\n\n现在插件下载,放在~/.oh-my-zsh/custom/plugins/目录下\n\n打开你的 .zshrc 文件，找到 plugins=()，在括号中列出使用的插件,多个插件空格分开：\n\nplugins=(git bower sublime brew history node npm sudo web-search)\n\n\n例如安装语法高亮插件\n\n1)下载\n{% codeblock %}\nkai@huangchengkaideMacBook-Air  ~  git clone git://github.com/zsh-users/zsh-syntax-highlighting.git\nCloning into 'zsh-syntax-highlighting'...\nremote: Counting objects: 3357, done.\nremote: Compressing objects: 100% (32/32), done.\nremote: Total 3357 (delta 11), reused 0 (delta 0), pack-reused 3325\nReceiving objects: 100% (3357/3357), 676.96 KiB | 66.00 KiB/s, done.\nResolving deltas: 100% (2153/2153), done.\nChecking connectivity... done.\n{% endcodeblock %}\n2)立即使用一下,先看看效果\n{% codeblock %}\n kai@huangchengkaideMacBook-Air  ~  source ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\n {% endcodeblock %}\n\n3)将插件放入相应目录\n{% codeblock %}\n kai@huangchengkaideMacBook-Air  ~  cd ~/.oh-my-zsh/custom/plugins/\n {% endcodeblock %}\n\n4)配置 \n{% codeblock %}\n kai@huangchengkaideMacBook-Air  ~  vim .zshrc\n ........\nplugins=(git zsh-syntax-highlighting)\n........\n{% endcodeblock %}\n\noh-my-zsh的主题\n可以配置各种不同风格的主题\n在这个地址可以找到所有的主题\n地址:https://github.com/robbyrussell/oh-my-zsh/wiki/themes\n\n安装主题需要下载主题到~/oh-my-zsh/themes目录下,然后在./zshrc问价中配置\n\nZSH_THEME=\"robbyrussell\" #默认主题\n\nagnoster主题\n这么多主题中,我觉的就agnoster主题最好看,现在记录以下安装过程\n1)先在.zshrc中配置\n{% codeblock %}\nvim ~/.zshrc\n\nZSH_THEME=\"agnoster\" \n\n{% endcodeblock %}\n\n2)安装powerline字体\n\n可以通过pip来安装,具体看官方文档\n地址:http://powerline.readthedocs.io/en/latest/installation.html\n\n或者使用处理好的字体库\n{% codeblock %}\n#先下载\n➜  ~ git clone https://github.com/powerline/fonts.git\nCloning into 'fonts'...\nremote: Counting objects: 602, done.\nremote: Total 602 (delta 0), reused 0 (delta 0), pack-reused 602\nReceiving objects: 100% (602/602), 12.25 MiB | 358.00 KiB/s, done.\nResolving deltas: 100% (207/207), done.\nChecking connectivity... done.\n\n#clone好了,就如目录\n\n➜  ~ cd fonts/  \n➜  fonts git:(master) ls\nAnonymousPro         Inconsolata          SourceCodePro\nArimo                Inconsolata-g        SymbolNeu\nCousine              InconsolataDz        Terminus\nDejaVuSansMono       InputMono            Tinos\nDroidSansMono        LiberationMono       UbuntuMono\nDroidSansMonoDotted  Meslo                install.ps1\nDroidSansMonoSlashed Monofur              install.sh\nFiraMono             README.rst           samples\nHack                 RobotoMono\n➜  fonts git:(master) \n\n#执行install.sh,将字体复制到mac的字体库目录\n➜  fonts git:(master) ./install.sh \nCopying fonts...\nAll Powerline fonts installed to /Users/kai/Library/Fonts\n➜  fonts git:(master) \n{% endcodeblock %}\n\n\n\niTerm2\n\niTerm2 是一个mac平台最好的终端，没有之一\n\n官方网站：http://www.iterm2.com/\n\n安装:\n到官网下载安装包安装\n或者使用brew cask\n{% codeblock %}\n\n#如果没有安装brew cask ,就先安装它\n\nbrew install cask\n\n#安装\nbrew cask install iterm2\n{% endcodeblock %}\n\n基本配置\n\n打开偏好设定窗口: 按Command + ,(快捷方式)\n\n设置占上半屏现在 : 选择Profiles / Window，把Settings for New Windows中的Style改成  Full with Top of Screen  (个人爱好) \n\n现在/隐藏 :勾选Hotkey中的Show/hide iTerm2 with a system-wide hotkey，然后设定一个热键,Command + .(个人爱好,我觉的超实用) 你还可以在Profile中更改字体等，其他的希望大家自己研究。\n\n使用刚刚装好的powline字体: 选择Profile/ext 选项卡中里的Regular Font和Non-ASCII Font的字体都设置成 Powerline的字体，我设置的字体是12pt Meslo LG S DZ Regular for Powerline (还是个人爱好咯)\n\n配色: \n那就装个Solarized吧,比较流行的配色方案，其优美的配色和众多软件的支持,\n下载解压，地址:http://ethanschoonover.com/solarized\n\n看下文件:\n{% codeblock %}\nhuangchengkaideMacBook-Air:solarized kai$ ls -l\ntotal 72\n-rw-r--r--@ 1 kai  staff   5534  4 16  2011 CHANGELOG.mkd\n-rw-r--r--@ 1 kai  staff   2141  4 16  2011 DEVELOPERS.mkd\n-rw-r--r--@ 1 kai  staff   1061  4 16  2011 LICENSE\n-rw-r--r--@ 1 kai  staff  20362  4 16  2011 README.md\ndrwxr-xr-x@ 5 kai  staff    170  4 16  2011 adobe-swatches-solarized\ndrwxr-xr-x@ 6 kai  staff    204  4 16  2011 apple-colorpalette-solarized\ndrwxr-xr-x@ 2 kai  staff     68  4 16  2011 css-web\ndrwxr-xr-x@ 2 kai  staff     68  4 16  2011 editors-ides\ndrwxr-xr-x@ 5 kai  staff    170  4 16  2011 emacs-colors-solarized\ndrwxr-xr-x@ 4 kai  staff    136  4 16  2011 gimp-palette-solarized\ndrwxr-xr-x@ 7 kai  staff    238  4 16  2011 intellij-colors-solarized\ndrwxr-xr-x@ 5 kai  staff    170  4 16  2011 iterm2-colors-solarized\ndrwxr-xr-x@ 2 kai  staff     68  4 16  2011 misc-apps\ndrwxr-xr-x@ 9 kai  staff    306  4 16  2011 mutt-colors-solarized\ndrwxr-xr-x@ 4 kai  staff    136  4 16  2011 netbeans-colors-solarized\ndrwxr-xr-x@ 6 kai  staff    204  4 16  2011 osx-terminal.app-colors-solarized\ndrwxr-xr-x@ 2 kai  staff     68  4 16  2011 palettes\ndrwxr-xr-x@ 2 kai  staff     68  4 16  2011 project-resources\ndrwxr-xr-x@ 9 kai  staff    306  4 16  2011 putty-colors-solarized\ndrwxr-xr-x@ 4 kai  staff    136  4 16  2011 seestyle-colors-solarized\ndrwxr-xr-x@ 2 kai  staff     68  4 16  2011 terminal-emulators\ndrwxr-xr-x@ 5 kai  staff    170  4 16  2011 textmate-colors-solarized\ndrwxr-xr-x@ 6 kai  staff    204  4 16  2011 textwrangler-bbedit-colors-solarized\ndrwxr-xr-x@ 6 kai  staff    204  4 16  2011 vim-colors-solarized\ndrwxr-xr-x@ 5 kai  staff    170  4 16  2011 visualstudio-colors-solarized\ndrwxr-xr-x@ 3 kai  staff    102  4 16  2011 xresources-colors-solarized\n{% endcodeblock %}\n\n然后打开iTerm2的偏好设定，Profiles / Colors，最下面的Load Presets ... / Import... 直接加载iterm2-colors-solarized/Solarized Dark.itermcolors配色方案就可以了.\n\n弄完了,感觉效果好不错,赞下.\n\n\n\n\n快捷键:\n\n选中\n双击选中，三击选中整行，四击智能选中（智能规则可配置），可以识别网址，引号引起的字符串，邮箱地址等。\n\n切换 tab：⌘+←, ⌘+→, ⌘+shift+{, ⌘+shift+}。⌘+数字直接定位到该 tab；\n新建 tab：⌘+t；\n顺序切换 pane：⌘+[, ⌘+]；\n按方向切换 pane：⌘+Option+方向键；\n关闭pane: ⌘+w\n切分屏幕：⌘+d 水平切分，⌘+Shift+d 垂直切分；\n智能查找，支持正则查找：⌘+f。\n全屏切换: ⌘+enter\n自动补全: ⌘+;\n历史记录窗口:⌘+Shift+h\n全屏展示所有的 tab，可以搜索:⌘+Option+e\n定位当前的鼠标:⌘+/\n显示/隐藏: alt+space (个人喜好已改为⌘+. )\n\n\n⌘键:\n\n1)可以拖拽选中的字符串；\n2)点击 url：调用默认浏览器访问该网址；\n3)点击文件：调用默认程序打开文件；\n4)如果文件名是filename:42，且默认文本编辑器是 Macvim、Textmate或BBEdit，将会直接打开到这一行；\n5)点击文件夹：在 finder 中打开该文件夹；\n6)同时按住option键，可以以矩形选中\n\n自动登陆:\n这是个小记录,由于经常要登陆ssh,但ssh命令又不能保存密码.\n现在用itrem2了,不再使用secureCRT或xshell等了.\n自动登陆ssh,用公钥/私钥感觉也不喜欢,所有找个shell来处理,感觉也不错\n\n地址:https://github.com/wufeifei/autossh\n\n{% codeblock %}\n\nkai@huangchengkaideMacBook-Air  ~  git clone https://github.com/wufeifei/autossh.git\nCloning into 'autossh'...\nremote: Counting objects: 92, done.\nremote: Total 92 (delta 0), reused 0 (delta 0), pack-reused 92\nUnpacking objects: 100% (92/92), done.\nChecking connectivity... done.\n kai@huangchengkaideMacBook-Air  ~  sudo cp autossh/autossh /usr/local/bin/\n kai@huangchengkaideMacBook-Air  ~  autossh\ncat: /Users/kai/.autosshrc: No such file or directory\n############################################################\n#                     [AUTO SSH]                           #\n#                                                          #\n#                                                          #\n#              Config(~/.autosshrc) Not Found              #\n#                                                          #\n#                                                          #\n############################################################\n\n{% endcodeblock %}\n","source":"_posts/优雅的终端.md","raw":"---\ntitle: 优雅的终端\ndate: 2016-09-12 21:48:07\ntags:\n---\nMac优点是 GUI 和命令行的完美结合,是我享受GUI程序的同时,也能用各种shell.\nShell是Linux/Unix的一个外壳。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序.\nLinux/Unix提供了很多种Shell,常用的Shell有这么几种，sh、bash、csh等，为什么有那么shell?,答案是如果你牛逼也可以自己写一个shell.\n想知道系统有几种shell，可以通过以下命令查看：\n\n{% codeblock %}\ncat /etc/shells\n{% endcodeblock %}\n显示如下：\n\n/bin/bash\n/bin/csh\n/bin/ksh\n/bin/sh\n/bin/tcsh\n/bin/zsh\n\n而查看正在使用的shell\n{% codeblock %}\n echo $SHELL\n{% endcodeblock %}\n\n安装\nmac默认安装zsh,如果没有的话,可以使用brew安装\n{% codeblock %}\n brew install zsh\n\n #安装过程\n huangchengkaideMacBook-Air:~ kai$ brew install zsh\n\n==> Installing dependencies for zsh: gdbm\n==> Installing zsh dependency: gdbm\n==> Downloading https://homebrew.bintray.com/bottles/gdbm-1.11.el_capitan.bottle\n######################################################################## 100.0%\n==> Pouring gdbm-1.11.el_capitan.bottle.2.tar.gz\n🍺  /usr/local/Cellar/gdbm/1.11: 17 files, 485.2K\n==> Installing zsh\n==> Downloading https://homebrew.bintray.com/bottles/zsh-5.2.el_capitan.bottle.t\n######################################################################## 100.0%\n==> Pouring zsh-5.2.el_capitan.bottle.tar.gz\n==> Caveats\nIn order to use this build of zsh as your login shell,\nit must be added to /etc/shells.\nAdd the following to your zshrc to access the online help:\n  unalias run-help\n  autoload run-help\n  HELPDIR=/usr/local/share/zsh/help\n==> Summary\n🍺  /usr/local/Cellar/zsh/5.2: 1,138 files, 8.7M\n {% endcodeblock %}\n\n 修改默认 Shell\n在 /etc/shells 文件中加入如下一行\n\n/usr/local/bin/zsh\n然后运行命令\n{% codeblock %}\nchsh -s /usr/local/bin/zsh\n{% endcodeblock %}\n\n配置:\n当 Zsh 启动时，它会按照顺序依次读取下面的配置文件：\n/etc/zsh/zshenv\n该文件应该包含用来设置PATH 环境变量[broken link: invalid section]以及其他一些环境变量的命令；不应该包含那些可以产生输出结果或者假设终端已经附着到 tty 上的命令。\n~/.zshenv\n该文件和 /etc/zsh/zshenv 相似，但是它是针对每个用户而言的。一般来说是用来设置一些有用的环境变量。\n/etc/zsh/zprofile\n这是一个全局的配置文件，在用户登录的时候加载。一般是用来在登录的时候执行一些命令。请注意，在 Arch Linux 里该文件默认包含一行配置，用来加载 /etc/profile 文件，详见 #全局配置文件。\n/etc/profile\n在登录时，该文件应该被所有和伯克利（Bourne）终端相兼容的终端加载：它在登录的的时候会加载应用相关的配置（/etc/profile.d/*.sh）。注意在 Arch Linux 里，Zsh 会默认加载该文件。\n~/.zprofile\n该文件一般用来在登录的时候自动执行一些用户脚本。\n/etc/zsh/zshrc\n当 Zsh 被作为交互式终端的时候，会加载这样一个全局配置文件。\n~/.zshrc\n当 Zsh 被作为交互式终端的时候，会加载这样一个用户配置文件。\n/etc/zsh/zlogin\n在登录完毕后加载的一个全局配置文件。\n~/.zlogin\n和 /etc/zsh/zlogin 相似，但是它是针对每个用户而言的。\n/etc/zsh/zlogout\n在注销的时候被加载的一个全局配置文件。\n~/.zlogout\n和 /etc/zsh/zlogout 相似，但是它是针对每个用户而言\n\n\n\nOh My Zsh \n\nzsh的配置是非常繁琐的,oh-my-zsh就是解决这个问题而生的,它是我们可以愉快的使用zsh了\n\n项目地址:https://github.com/robbyrussell/oh-my-zsh\n\n安装;\n\n使用curl\n{% codeblock %}\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n\n#或者使用wegt\n\nsh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n\n#安装过程\n\nsh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n\n--2016-09-09 16:20:35--  http://install.ohmyz.sh/\nResolving install.ohmyz.sh...\n50.31.225.93\nConnecting to install.ohmyz.sh|50.31.225.93|:80... connected.\nHTTP request sent, awaiting response... 301 Moved Permanently\nLocation: https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh [following]\n--2016-09-09 16:20:40--  https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh\nResolving raw.githubusercontent.com... 151.101.16.133\nConnecting to raw.githubusercontent.com|151.101.16.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 4018 (3.9K) [text/plain]\nSaving to: 'STDOUT'\n\n-                   100%[===================>]   3.92K  11.0KB/s    in 0.4s\n\n2016-09-09 16:20:42 (11.0 KB/s) - written to stdout [4018/4018]\n\nCloning Oh My Zsh...\nCloning into '/Users/kai/.oh-my-zsh'...\nremote: Counting objects: 798, done.\nremote: Compressing objects: 100% (667/667), done.\nremote: Total 798 (delta 19), reused 693 (delta 9), pack-reused 0\nReceiving objects: 100% (798/798), 535.07 KiB | 234.00 KiB/s, done.\nResolving deltas: 100% (19/19), done.\nChecking connectivity... done.\nLooking for an existing zsh config...\nFound ~/.zshrc. Backing up to ~/.zshrc.pre-oh-my-zsh\nUsing the Oh My Zsh template file and adding it to ~/.zshrc\n         __                                     __\n  ____  / /_     ____ ___  __  __   ____  _____/ /_\n / __ \\/ __ \\   / __ `__ \\/ / / /  /_  / / ___/ __ \\\n/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / /\n\\____/_/ /_/  /_/ /_/ /_/\\__, /    /___/____/_/ /_/\n                        /____/                       ....is now installed!\n\n\nPlease look over the ~/.zshrc file to select plugins, themes, and options.\n\np.s. Follow us at https://twitter.com/ohmyzsh.\n\np.p.s. Get stickers and t-shirts at http://shop.planetargon.com.\n\n\n{% endcodeblock %}\n\n这样oh-my-zsh就安装完成了。开始对其进行配置。主要是对~./zshrc进行配置\n\noh-my-zsh的插件\n在 GitHub 中有一个文档列出了插件目前的版本\n地址:\n\n现在插件下载,放在~/.oh-my-zsh/custom/plugins/目录下\n\n打开你的 .zshrc 文件，找到 plugins=()，在括号中列出使用的插件,多个插件空格分开：\n\nplugins=(git bower sublime brew history node npm sudo web-search)\n\n\n例如安装语法高亮插件\n\n1)下载\n{% codeblock %}\nkai@huangchengkaideMacBook-Air  ~  git clone git://github.com/zsh-users/zsh-syntax-highlighting.git\nCloning into 'zsh-syntax-highlighting'...\nremote: Counting objects: 3357, done.\nremote: Compressing objects: 100% (32/32), done.\nremote: Total 3357 (delta 11), reused 0 (delta 0), pack-reused 3325\nReceiving objects: 100% (3357/3357), 676.96 KiB | 66.00 KiB/s, done.\nResolving deltas: 100% (2153/2153), done.\nChecking connectivity... done.\n{% endcodeblock %}\n2)立即使用一下,先看看效果\n{% codeblock %}\n kai@huangchengkaideMacBook-Air  ~  source ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\n {% endcodeblock %}\n\n3)将插件放入相应目录\n{% codeblock %}\n kai@huangchengkaideMacBook-Air  ~  cd ~/.oh-my-zsh/custom/plugins/\n {% endcodeblock %}\n\n4)配置 \n{% codeblock %}\n kai@huangchengkaideMacBook-Air  ~  vim .zshrc\n ........\nplugins=(git zsh-syntax-highlighting)\n........\n{% endcodeblock %}\n\noh-my-zsh的主题\n可以配置各种不同风格的主题\n在这个地址可以找到所有的主题\n地址:https://github.com/robbyrussell/oh-my-zsh/wiki/themes\n\n安装主题需要下载主题到~/oh-my-zsh/themes目录下,然后在./zshrc问价中配置\n\nZSH_THEME=\"robbyrussell\" #默认主题\n\nagnoster主题\n这么多主题中,我觉的就agnoster主题最好看,现在记录以下安装过程\n1)先在.zshrc中配置\n{% codeblock %}\nvim ~/.zshrc\n\nZSH_THEME=\"agnoster\" \n\n{% endcodeblock %}\n\n2)安装powerline字体\n\n可以通过pip来安装,具体看官方文档\n地址:http://powerline.readthedocs.io/en/latest/installation.html\n\n或者使用处理好的字体库\n{% codeblock %}\n#先下载\n➜  ~ git clone https://github.com/powerline/fonts.git\nCloning into 'fonts'...\nremote: Counting objects: 602, done.\nremote: Total 602 (delta 0), reused 0 (delta 0), pack-reused 602\nReceiving objects: 100% (602/602), 12.25 MiB | 358.00 KiB/s, done.\nResolving deltas: 100% (207/207), done.\nChecking connectivity... done.\n\n#clone好了,就如目录\n\n➜  ~ cd fonts/  \n➜  fonts git:(master) ls\nAnonymousPro         Inconsolata          SourceCodePro\nArimo                Inconsolata-g        SymbolNeu\nCousine              InconsolataDz        Terminus\nDejaVuSansMono       InputMono            Tinos\nDroidSansMono        LiberationMono       UbuntuMono\nDroidSansMonoDotted  Meslo                install.ps1\nDroidSansMonoSlashed Monofur              install.sh\nFiraMono             README.rst           samples\nHack                 RobotoMono\n➜  fonts git:(master) \n\n#执行install.sh,将字体复制到mac的字体库目录\n➜  fonts git:(master) ./install.sh \nCopying fonts...\nAll Powerline fonts installed to /Users/kai/Library/Fonts\n➜  fonts git:(master) \n{% endcodeblock %}\n\n\n\niTerm2\n\niTerm2 是一个mac平台最好的终端，没有之一\n\n官方网站：http://www.iterm2.com/\n\n安装:\n到官网下载安装包安装\n或者使用brew cask\n{% codeblock %}\n\n#如果没有安装brew cask ,就先安装它\n\nbrew install cask\n\n#安装\nbrew cask install iterm2\n{% endcodeblock %}\n\n基本配置\n\n打开偏好设定窗口: 按Command + ,(快捷方式)\n\n设置占上半屏现在 : 选择Profiles / Window，把Settings for New Windows中的Style改成  Full with Top of Screen  (个人爱好) \n\n现在/隐藏 :勾选Hotkey中的Show/hide iTerm2 with a system-wide hotkey，然后设定一个热键,Command + .(个人爱好,我觉的超实用) 你还可以在Profile中更改字体等，其他的希望大家自己研究。\n\n使用刚刚装好的powline字体: 选择Profile/ext 选项卡中里的Regular Font和Non-ASCII Font的字体都设置成 Powerline的字体，我设置的字体是12pt Meslo LG S DZ Regular for Powerline (还是个人爱好咯)\n\n配色: \n那就装个Solarized吧,比较流行的配色方案，其优美的配色和众多软件的支持,\n下载解压，地址:http://ethanschoonover.com/solarized\n\n看下文件:\n{% codeblock %}\nhuangchengkaideMacBook-Air:solarized kai$ ls -l\ntotal 72\n-rw-r--r--@ 1 kai  staff   5534  4 16  2011 CHANGELOG.mkd\n-rw-r--r--@ 1 kai  staff   2141  4 16  2011 DEVELOPERS.mkd\n-rw-r--r--@ 1 kai  staff   1061  4 16  2011 LICENSE\n-rw-r--r--@ 1 kai  staff  20362  4 16  2011 README.md\ndrwxr-xr-x@ 5 kai  staff    170  4 16  2011 adobe-swatches-solarized\ndrwxr-xr-x@ 6 kai  staff    204  4 16  2011 apple-colorpalette-solarized\ndrwxr-xr-x@ 2 kai  staff     68  4 16  2011 css-web\ndrwxr-xr-x@ 2 kai  staff     68  4 16  2011 editors-ides\ndrwxr-xr-x@ 5 kai  staff    170  4 16  2011 emacs-colors-solarized\ndrwxr-xr-x@ 4 kai  staff    136  4 16  2011 gimp-palette-solarized\ndrwxr-xr-x@ 7 kai  staff    238  4 16  2011 intellij-colors-solarized\ndrwxr-xr-x@ 5 kai  staff    170  4 16  2011 iterm2-colors-solarized\ndrwxr-xr-x@ 2 kai  staff     68  4 16  2011 misc-apps\ndrwxr-xr-x@ 9 kai  staff    306  4 16  2011 mutt-colors-solarized\ndrwxr-xr-x@ 4 kai  staff    136  4 16  2011 netbeans-colors-solarized\ndrwxr-xr-x@ 6 kai  staff    204  4 16  2011 osx-terminal.app-colors-solarized\ndrwxr-xr-x@ 2 kai  staff     68  4 16  2011 palettes\ndrwxr-xr-x@ 2 kai  staff     68  4 16  2011 project-resources\ndrwxr-xr-x@ 9 kai  staff    306  4 16  2011 putty-colors-solarized\ndrwxr-xr-x@ 4 kai  staff    136  4 16  2011 seestyle-colors-solarized\ndrwxr-xr-x@ 2 kai  staff     68  4 16  2011 terminal-emulators\ndrwxr-xr-x@ 5 kai  staff    170  4 16  2011 textmate-colors-solarized\ndrwxr-xr-x@ 6 kai  staff    204  4 16  2011 textwrangler-bbedit-colors-solarized\ndrwxr-xr-x@ 6 kai  staff    204  4 16  2011 vim-colors-solarized\ndrwxr-xr-x@ 5 kai  staff    170  4 16  2011 visualstudio-colors-solarized\ndrwxr-xr-x@ 3 kai  staff    102  4 16  2011 xresources-colors-solarized\n{% endcodeblock %}\n\n然后打开iTerm2的偏好设定，Profiles / Colors，最下面的Load Presets ... / Import... 直接加载iterm2-colors-solarized/Solarized Dark.itermcolors配色方案就可以了.\n\n弄完了,感觉效果好不错,赞下.\n\n\n\n\n快捷键:\n\n选中\n双击选中，三击选中整行，四击智能选中（智能规则可配置），可以识别网址，引号引起的字符串，邮箱地址等。\n\n切换 tab：⌘+←, ⌘+→, ⌘+shift+{, ⌘+shift+}。⌘+数字直接定位到该 tab；\n新建 tab：⌘+t；\n顺序切换 pane：⌘+[, ⌘+]；\n按方向切换 pane：⌘+Option+方向键；\n关闭pane: ⌘+w\n切分屏幕：⌘+d 水平切分，⌘+Shift+d 垂直切分；\n智能查找，支持正则查找：⌘+f。\n全屏切换: ⌘+enter\n自动补全: ⌘+;\n历史记录窗口:⌘+Shift+h\n全屏展示所有的 tab，可以搜索:⌘+Option+e\n定位当前的鼠标:⌘+/\n显示/隐藏: alt+space (个人喜好已改为⌘+. )\n\n\n⌘键:\n\n1)可以拖拽选中的字符串；\n2)点击 url：调用默认浏览器访问该网址；\n3)点击文件：调用默认程序打开文件；\n4)如果文件名是filename:42，且默认文本编辑器是 Macvim、Textmate或BBEdit，将会直接打开到这一行；\n5)点击文件夹：在 finder 中打开该文件夹；\n6)同时按住option键，可以以矩形选中\n\n自动登陆:\n这是个小记录,由于经常要登陆ssh,但ssh命令又不能保存密码.\n现在用itrem2了,不再使用secureCRT或xshell等了.\n自动登陆ssh,用公钥/私钥感觉也不喜欢,所有找个shell来处理,感觉也不错\n\n地址:https://github.com/wufeifei/autossh\n\n{% codeblock %}\n\nkai@huangchengkaideMacBook-Air  ~  git clone https://github.com/wufeifei/autossh.git\nCloning into 'autossh'...\nremote: Counting objects: 92, done.\nremote: Total 92 (delta 0), reused 0 (delta 0), pack-reused 92\nUnpacking objects: 100% (92/92), done.\nChecking connectivity... done.\n kai@huangchengkaideMacBook-Air  ~  sudo cp autossh/autossh /usr/local/bin/\n kai@huangchengkaideMacBook-Air  ~  autossh\ncat: /Users/kai/.autosshrc: No such file or directory\n############################################################\n#                     [AUTO SSH]                           #\n#                                                          #\n#                                                          #\n#              Config(~/.autosshrc) Not Found              #\n#                                                          #\n#                                                          #\n############################################################\n\n{% endcodeblock %}\n","slug":"优雅的终端","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeieo2001wznz4ofvehzag","content":"<p>Mac优点是 GUI 和命令行的完美结合,是我享受GUI程序的同时,也能用各种shell.<br>Shell是Linux/Unix的一个外壳。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序.<br>Linux/Unix提供了很多种Shell,常用的Shell有这么几种，sh、bash、csh等，为什么有那么shell?,答案是如果你牛逼也可以自己写一个shell.<br>想知道系统有几种shell，可以通过以下命令查看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/shells</div></pre></td></tr></table></figure>\n<p>显示如下：</p>\n<p>/bin/bash<br>/bin/csh<br>/bin/ksh<br>/bin/sh<br>/bin/tcsh<br>/bin/zsh</p>\n<p>而查看正在使用的shell<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo $SHELL</div></pre></td></tr></table></figure></p>\n<p>安装<br>mac默认安装zsh,如果没有的话,可以使用brew安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"> brew install zsh</div><div class=\"line\"></div><div class=\"line\"> #安装过程</div><div class=\"line\"> huangchengkaideMacBook-Air:~ kai$ brew install zsh</div><div class=\"line\"></div><div class=\"line\">==&gt; Installing dependencies for zsh: gdbm</div><div class=\"line\">==&gt; Installing zsh dependency: gdbm</div><div class=\"line\">==&gt; Downloading https://homebrew.bintray.com/bottles/gdbm-1.11.el_capitan.bottle</div><div class=\"line\">######################################################################## 100.0%</div><div class=\"line\">==&gt; Pouring gdbm-1.11.el_capitan.bottle.2.tar.gz</div><div class=\"line\">🍺  /usr/local/Cellar/gdbm/1.11: 17 files, 485.2K</div><div class=\"line\">==&gt; Installing zsh</div><div class=\"line\">==&gt; Downloading https://homebrew.bintray.com/bottles/zsh-5.2.el_capitan.bottle.t</div><div class=\"line\">######################################################################## 100.0%</div><div class=\"line\">==&gt; Pouring zsh-5.2.el_capitan.bottle.tar.gz</div><div class=\"line\">==&gt; Caveats</div><div class=\"line\">In order to use this build of zsh as your login shell,</div><div class=\"line\">it must be added to /etc/shells.</div><div class=\"line\">Add the following to your zshrc to access the online help:</div><div class=\"line\">  unalias run-help</div><div class=\"line\">  autoload run-help</div><div class=\"line\">  HELPDIR=/usr/local/share/zsh/help</div><div class=\"line\">==&gt; Summary</div><div class=\"line\">🍺  /usr/local/Cellar/zsh/5.2: 1,138 files, 8.7M</div><div class=\"line\"> </div></pre></td></tr></table></figure></p>\n<p> 修改默认 Shell<br>在 /etc/shells 文件中加入如下一行</p>\n<p>/usr/local/bin/zsh<br>然后运行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chsh -s /usr/local/bin/zsh</div></pre></td></tr></table></figure></p>\n<p>配置:<br>当 Zsh 启动时，它会按照顺序依次读取下面的配置文件：<br>/etc/zsh/zshenv<br>该文件应该包含用来设置PATH 环境变量[broken link: invalid section]以及其他一些环境变量的命令；不应该包含那些可以产生输出结果或者假设终端已经附着到 tty 上的命令。<br>~/.zshenv<br>该文件和 /etc/zsh/zshenv 相似，但是它是针对每个用户而言的。一般来说是用来设置一些有用的环境变量。<br>/etc/zsh/zprofile<br>这是一个全局的配置文件，在用户登录的时候加载。一般是用来在登录的时候执行一些命令。请注意，在 Arch Linux 里该文件默认包含一行配置，用来加载 /etc/profile 文件，详见 #全局配置文件。<br>/etc/profile<br>在登录时，该文件应该被所有和伯克利（Bourne）终端相兼容的终端加载：它在登录的的时候会加载应用相关的配置（/etc/profile.d/*.sh）。注意在 Arch Linux 里，Zsh 会默认加载该文件。<br>~/.zprofile<br>该文件一般用来在登录的时候自动执行一些用户脚本。<br>/etc/zsh/zshrc<br>当 Zsh 被作为交互式终端的时候，会加载这样一个全局配置文件。<br>~/.zshrc<br>当 Zsh 被作为交互式终端的时候，会加载这样一个用户配置文件。<br>/etc/zsh/zlogin<br>在登录完毕后加载的一个全局配置文件。<br>~/.zlogin<br>和 /etc/zsh/zlogin 相似，但是它是针对每个用户而言的。<br>/etc/zsh/zlogout<br>在注销的时候被加载的一个全局配置文件。<br>~/.zlogout<br>和 /etc/zsh/zlogout 相似，但是它是针对每个用户而言</p>\n<p>Oh My Zsh </p>\n<p>zsh的配置是非常繁琐的,oh-my-zsh就是解决这个问题而生的,它是我们可以愉快的使用zsh了</p>\n<p>项目地址:<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">https://github.com/robbyrussell/oh-my-zsh</a></p>\n<p>安装;</p>\n<p>使用curl<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</div><div class=\"line\"></div><div class=\"line\">#或者使用wegt</div><div class=\"line\"></div><div class=\"line\">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</div><div class=\"line\"></div><div class=\"line\">#安装过程</div><div class=\"line\"></div><div class=\"line\">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</div><div class=\"line\"></div><div class=\"line\">--2016-09-09 16:20:35--  http://install.ohmyz.sh/</div><div class=\"line\">Resolving install.ohmyz.sh...</div><div class=\"line\">50.31.225.93</div><div class=\"line\">Connecting to install.ohmyz.sh|50.31.225.93|:80... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 301 Moved Permanently</div><div class=\"line\">Location: https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh [following]</div><div class=\"line\">--2016-09-09 16:20:40--  https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh</div><div class=\"line\">Resolving raw.githubusercontent.com... 151.101.16.133</div><div class=\"line\">Connecting to raw.githubusercontent.com|151.101.16.133|:443... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 200 OK</div><div class=\"line\">Length: 4018 (3.9K) [text/plain]</div><div class=\"line\">Saving to: &apos;STDOUT&apos;</div><div class=\"line\"></div><div class=\"line\">-                   100%[===================&gt;]   3.92K  11.0KB/s    in 0.4s</div><div class=\"line\"></div><div class=\"line\">2016-09-09 16:20:42 (11.0 KB/s) - written to stdout [4018/4018]</div><div class=\"line\"></div><div class=\"line\">Cloning Oh My Zsh...</div><div class=\"line\">Cloning into &apos;/Users/kai/.oh-my-zsh&apos;...</div><div class=\"line\">remote: Counting objects: 798, done.</div><div class=\"line\">remote: Compressing objects: 100% (667/667), done.</div><div class=\"line\">remote: Total 798 (delta 19), reused 693 (delta 9), pack-reused 0</div><div class=\"line\">Receiving objects: 100% (798/798), 535.07 KiB | 234.00 KiB/s, done.</div><div class=\"line\">Resolving deltas: 100% (19/19), done.</div><div class=\"line\">Checking connectivity... done.</div><div class=\"line\">Looking for an existing zsh config...</div><div class=\"line\">Found ~/.zshrc. Backing up to ~/.zshrc.pre-oh-my-zsh</div><div class=\"line\">Using the Oh My Zsh template file and adding it to ~/.zshrc</div><div class=\"line\">         __                                     __</div><div class=\"line\">  ____  / /_     ____ ___  __  __   ____  _____/ /_</div><div class=\"line\"> / __ \\/ __ \\   / __ `__ \\/ / / /  /_  / / ___/ __ \\</div><div class=\"line\">/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / /</div><div class=\"line\">\\____/_/ /_/  /_/ /_/ /_/\\__, /    /___/____/_/ /_/</div><div class=\"line\">                        /____/                       ....is now installed!</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Please look over the ~/.zshrc file to select plugins, themes, and options.</div><div class=\"line\"></div><div class=\"line\">p.s. Follow us at https://twitter.com/ohmyzsh.</div><div class=\"line\"></div><div class=\"line\">p.p.s. Get stickers and t-shirts at http://shop.planetargon.com.</div><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>这样oh-my-zsh就安装完成了。开始对其进行配置。主要是对~./zshrc进行配置</p>\n<p>oh-my-zsh的插件<br>在 GitHub 中有一个文档列出了插件目前的版本<br>地址:</p>\n<p>现在插件下载,放在~/.oh-my-zsh/custom/plugins/目录下</p>\n<p>打开你的 .zshrc 文件，找到 plugins=()，在括号中列出使用的插件,多个插件空格分开：</p>\n<p>plugins=(git bower sublime brew history node npm sudo web-search)</p>\n<p>例如安装语法高亮插件</p>\n<p>1)下载<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">kai@huangchengkaideMacBook-Air  ~  git clone git://github.com/zsh-users/zsh-syntax-highlighting.git</div><div class=\"line\">Cloning into &apos;zsh-syntax-highlighting&apos;...</div><div class=\"line\">remote: Counting objects: 3357, done.</div><div class=\"line\">remote: Compressing objects: 100% (32/32), done.</div><div class=\"line\">remote: Total 3357 (delta 11), reused 0 (delta 0), pack-reused 3325</div><div class=\"line\">Receiving objects: 100% (3357/3357), 676.96 KiB | 66.00 KiB/s, done.</div><div class=\"line\">Resolving deltas: 100% (2153/2153), done.</div><div class=\"line\">Checking connectivity... done.</div></pre></td></tr></table></figure><br>2)立即使用一下,先看看效果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kai@huangchengkaideMacBook-Air  ~  source ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</div></pre></td></tr></table></figure></p>\n<p>3)将插件放入相应目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kai@huangchengkaideMacBook-Air  ~  cd ~/.oh-my-zsh/custom/plugins/</div></pre></td></tr></table></figure></p>\n<p>4)配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> kai@huangchengkaideMacBook-Air  ~  vim .zshrc</div><div class=\"line\"> ........</div><div class=\"line\">plugins=(git zsh-syntax-highlighting)</div><div class=\"line\">........</div></pre></td></tr></table></figure></p>\n<p>oh-my-zsh的主题<br>可以配置各种不同风格的主题<br>在这个地址可以找到所有的主题<br>地址:<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/themes\" target=\"_blank\" rel=\"external\">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a></p>\n<p>安装主题需要下载主题到~/oh-my-zsh/themes目录下,然后在./zshrc问价中配置</p>\n<p>ZSH_THEME=”robbyrussell” #默认主题</p>\n<p>agnoster主题<br>这么多主题中,我觉的就agnoster主题最好看,现在记录以下安装过程<br>1)先在.zshrc中配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim ~/.zshrc</div><div class=\"line\"></div><div class=\"line\">ZSH_THEME=&quot;agnoster&quot; </div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>2)安装powerline字体</p>\n<p>可以通过pip来安装,具体看官方文档<br>地址:<a href=\"http://powerline.readthedocs.io/en/latest/installation.html\" target=\"_blank\" rel=\"external\">http://powerline.readthedocs.io/en/latest/installation.html</a></p>\n<p>或者使用处理好的字体库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">#先下载</div><div class=\"line\">➜  ~ git clone https://github.com/powerline/fonts.git</div><div class=\"line\">Cloning into &apos;fonts&apos;...</div><div class=\"line\">remote: Counting objects: 602, done.</div><div class=\"line\">remote: Total 602 (delta 0), reused 0 (delta 0), pack-reused 602</div><div class=\"line\">Receiving objects: 100% (602/602), 12.25 MiB | 358.00 KiB/s, done.</div><div class=\"line\">Resolving deltas: 100% (207/207), done.</div><div class=\"line\">Checking connectivity... done.</div><div class=\"line\"></div><div class=\"line\">#clone好了,就如目录</div><div class=\"line\"></div><div class=\"line\">➜  ~ cd fonts/  </div><div class=\"line\">➜  fonts git:(master) ls</div><div class=\"line\">AnonymousPro         Inconsolata          SourceCodePro</div><div class=\"line\">Arimo                Inconsolata-g        SymbolNeu</div><div class=\"line\">Cousine              InconsolataDz        Terminus</div><div class=\"line\">DejaVuSansMono       InputMono            Tinos</div><div class=\"line\">DroidSansMono        LiberationMono       UbuntuMono</div><div class=\"line\">DroidSansMonoDotted  Meslo                install.ps1</div><div class=\"line\">DroidSansMonoSlashed Monofur              install.sh</div><div class=\"line\">FiraMono             README.rst           samples</div><div class=\"line\">Hack                 RobotoMono</div><div class=\"line\">➜  fonts git:(master) </div><div class=\"line\"></div><div class=\"line\">#执行install.sh,将字体复制到mac的字体库目录</div><div class=\"line\">➜  fonts git:(master) ./install.sh </div><div class=\"line\">Copying fonts...</div><div class=\"line\">All Powerline fonts installed to /Users/kai/Library/Fonts</div><div class=\"line\">➜  fonts git:(master) </div></pre></td></tr></table></figure></p>\n<p>iTerm2</p>\n<p>iTerm2 是一个mac平台最好的终端，没有之一</p>\n<p>官方网站：<a href=\"http://www.iterm2.com/\" target=\"_blank\" rel=\"external\">http://www.iterm2.com/</a></p>\n<p>安装:<br>到官网下载安装包安装<br>或者使用brew cask<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#如果没有安装brew cask ,就先安装它</div><div class=\"line\"></div><div class=\"line\">brew install cask</div><div class=\"line\"></div><div class=\"line\">#安装</div><div class=\"line\">brew cask install iterm2</div></pre></td></tr></table></figure></p>\n<p>基本配置</p>\n<p>打开偏好设定窗口: 按Command + ,(快捷方式)</p>\n<p>设置占上半屏现在 : 选择Profiles / Window，把Settings for New Windows中的Style改成  Full with Top of Screen  (个人爱好) </p>\n<p>现在/隐藏 :勾选Hotkey中的Show/hide iTerm2 with a system-wide hotkey，然后设定一个热键,Command + .(个人爱好,我觉的超实用) 你还可以在Profile中更改字体等，其他的希望大家自己研究。</p>\n<p>使用刚刚装好的powline字体: 选择Profile/ext 选项卡中里的Regular Font和Non-ASCII Font的字体都设置成 Powerline的字体，我设置的字体是12pt Meslo LG S DZ Regular for Powerline (还是个人爱好咯)</p>\n<p>配色:<br>那就装个Solarized吧,比较流行的配色方案，其优美的配色和众多软件的支持,<br>下载解压，地址:<a href=\"http://ethanschoonover.com/solarized\" target=\"_blank\" rel=\"external\">http://ethanschoonover.com/solarized</a></p>\n<p>看下文件:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchengkaideMacBook-Air:solarized kai$ ls -l</div><div class=\"line\">total 72</div><div class=\"line\">-rw-r--r--@ 1 kai  staff   5534  4 16  2011 CHANGELOG.mkd</div><div class=\"line\">-rw-r--r--@ 1 kai  staff   2141  4 16  2011 DEVELOPERS.mkd</div><div class=\"line\">-rw-r--r--@ 1 kai  staff   1061  4 16  2011 LICENSE</div><div class=\"line\">-rw-r--r--@ 1 kai  staff  20362  4 16  2011 README.md</div><div class=\"line\">drwxr-xr-x@ 5 kai  staff    170  4 16  2011 adobe-swatches-solarized</div><div class=\"line\">drwxr-xr-x@ 6 kai  staff    204  4 16  2011 apple-colorpalette-solarized</div><div class=\"line\">drwxr-xr-x@ 2 kai  staff     68  4 16  2011 css-web</div><div class=\"line\">drwxr-xr-x@ 2 kai  staff     68  4 16  2011 editors-ides</div><div class=\"line\">drwxr-xr-x@ 5 kai  staff    170  4 16  2011 emacs-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 4 kai  staff    136  4 16  2011 gimp-palette-solarized</div><div class=\"line\">drwxr-xr-x@ 7 kai  staff    238  4 16  2011 intellij-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 5 kai  staff    170  4 16  2011 iterm2-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 2 kai  staff     68  4 16  2011 misc-apps</div><div class=\"line\">drwxr-xr-x@ 9 kai  staff    306  4 16  2011 mutt-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 4 kai  staff    136  4 16  2011 netbeans-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 6 kai  staff    204  4 16  2011 osx-terminal.app-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 2 kai  staff     68  4 16  2011 palettes</div><div class=\"line\">drwxr-xr-x@ 2 kai  staff     68  4 16  2011 project-resources</div><div class=\"line\">drwxr-xr-x@ 9 kai  staff    306  4 16  2011 putty-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 4 kai  staff    136  4 16  2011 seestyle-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 2 kai  staff     68  4 16  2011 terminal-emulators</div><div class=\"line\">drwxr-xr-x@ 5 kai  staff    170  4 16  2011 textmate-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 6 kai  staff    204  4 16  2011 textwrangler-bbedit-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 6 kai  staff    204  4 16  2011 vim-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 5 kai  staff    170  4 16  2011 visualstudio-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 3 kai  staff    102  4 16  2011 xresources-colors-solarized</div></pre></td></tr></table></figure></p>\n<p>然后打开iTerm2的偏好设定，Profiles / Colors，最下面的Load Presets … / Import… 直接加载iterm2-colors-solarized/Solarized Dark.itermcolors配色方案就可以了.</p>\n<p>弄完了,感觉效果好不错,赞下.</p>\n<p>快捷键:</p>\n<p>选中<br>双击选中，三击选中整行，四击智能选中（智能规则可配置），可以识别网址，引号引起的字符串，邮箱地址等。</p>\n<p>切换 tab：⌘+←, ⌘+→, ⌘+shift+{, ⌘+shift+}。⌘+数字直接定位到该 tab；<br>新建 tab：⌘+t；<br>顺序切换 pane：⌘+[, ⌘+]；<br>按方向切换 pane：⌘+Option+方向键；<br>关闭pane: ⌘+w<br>切分屏幕：⌘+d 水平切分，⌘+Shift+d 垂直切分；<br>智能查找，支持正则查找：⌘+f。<br>全屏切换: ⌘+enter<br>自动补全: ⌘+;<br>历史记录窗口:⌘+Shift+h<br>全屏展示所有的 tab，可以搜索:⌘+Option+e<br>定位当前的鼠标:⌘+/<br>显示/隐藏: alt+space (个人喜好已改为⌘+. )</p>\n<p>⌘键:</p>\n<p>1)可以拖拽选中的字符串；<br>2)点击 url：调用默认浏览器访问该网址；<br>3)点击文件：调用默认程序打开文件；<br>4)如果文件名是filename:42，且默认文本编辑器是 Macvim、Textmate或BBEdit，将会直接打开到这一行；<br>5)点击文件夹：在 finder 中打开该文件夹；<br>6)同时按住option键，可以以矩形选中</p>\n<p>自动登陆:<br>这是个小记录,由于经常要登陆ssh,但ssh命令又不能保存密码.<br>现在用itrem2了,不再使用secureCRT或xshell等了.<br>自动登陆ssh,用公钥/私钥感觉也不喜欢,所有找个shell来处理,感觉也不错</p>\n<p>地址:<a href=\"https://github.com/wufeifei/autossh\" target=\"_blank\" rel=\"external\">https://github.com/wufeifei/autossh</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">kai@huangchengkaideMacBook-Air  ~  git clone https://github.com/wufeifei/autossh.git</div><div class=\"line\">Cloning into &apos;autossh&apos;...</div><div class=\"line\">remote: Counting objects: 92, done.</div><div class=\"line\">remote: Total 92 (delta 0), reused 0 (delta 0), pack-reused 92</div><div class=\"line\">Unpacking objects: 100% (92/92), done.</div><div class=\"line\">Checking connectivity... done.</div><div class=\"line\"> kai@huangchengkaideMacBook-Air  ~  sudo cp autossh/autossh /usr/local/bin/</div><div class=\"line\"> kai@huangchengkaideMacBook-Air  ~  autossh</div><div class=\"line\">cat: /Users/kai/.autosshrc: No such file or directory</div><div class=\"line\">############################################################</div><div class=\"line\">#                     [AUTO SSH]                           #</div><div class=\"line\">#                                                          #</div><div class=\"line\">#                                                          #</div><div class=\"line\">#              Config(~/.autosshrc) Not Found              #</div><div class=\"line\">#                                                          #</div><div class=\"line\">#                                                          #</div><div class=\"line\">############################################################</div><div class=\"line\"></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>Mac优点是 GUI 和命令行的完美结合,是我享受GUI程序的同时,也能用各种shell.<br>Shell是Linux/Unix的一个外壳。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序.<br>Linux/Unix提供了很多种Shell,常用的Shell有这么几种，sh、bash、csh等，为什么有那么shell?,答案是如果你牛逼也可以自己写一个shell.<br>想知道系统有几种shell，可以通过以下命令查看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/shells</div></pre></td></tr></table></figure>\n<p>显示如下：</p>\n<p>/bin/bash<br>/bin/csh<br>/bin/ksh<br>/bin/sh<br>/bin/tcsh<br>/bin/zsh</p>\n<p>而查看正在使用的shell<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo $SHELL</div></pre></td></tr></table></figure></p>\n<p>安装<br>mac默认安装zsh,如果没有的话,可以使用brew安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"> brew install zsh</div><div class=\"line\"></div><div class=\"line\"> #安装过程</div><div class=\"line\"> huangchengkaideMacBook-Air:~ kai$ brew install zsh</div><div class=\"line\"></div><div class=\"line\">==&gt; Installing dependencies for zsh: gdbm</div><div class=\"line\">==&gt; Installing zsh dependency: gdbm</div><div class=\"line\">==&gt; Downloading https://homebrew.bintray.com/bottles/gdbm-1.11.el_capitan.bottle</div><div class=\"line\">######################################################################## 100.0%</div><div class=\"line\">==&gt; Pouring gdbm-1.11.el_capitan.bottle.2.tar.gz</div><div class=\"line\">🍺  /usr/local/Cellar/gdbm/1.11: 17 files, 485.2K</div><div class=\"line\">==&gt; Installing zsh</div><div class=\"line\">==&gt; Downloading https://homebrew.bintray.com/bottles/zsh-5.2.el_capitan.bottle.t</div><div class=\"line\">######################################################################## 100.0%</div><div class=\"line\">==&gt; Pouring zsh-5.2.el_capitan.bottle.tar.gz</div><div class=\"line\">==&gt; Caveats</div><div class=\"line\">In order to use this build of zsh as your login shell,</div><div class=\"line\">it must be added to /etc/shells.</div><div class=\"line\">Add the following to your zshrc to access the online help:</div><div class=\"line\">  unalias run-help</div><div class=\"line\">  autoload run-help</div><div class=\"line\">  HELPDIR=/usr/local/share/zsh/help</div><div class=\"line\">==&gt; Summary</div><div class=\"line\">🍺  /usr/local/Cellar/zsh/5.2: 1,138 files, 8.7M</div><div class=\"line\"> </div></pre></td></tr></table></figure></p>\n<p> 修改默认 Shell<br>在 /etc/shells 文件中加入如下一行</p>\n<p>/usr/local/bin/zsh<br>然后运行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chsh -s /usr/local/bin/zsh</div></pre></td></tr></table></figure></p>\n<p>配置:<br>当 Zsh 启动时，它会按照顺序依次读取下面的配置文件：<br>/etc/zsh/zshenv<br>该文件应该包含用来设置PATH 环境变量[broken link: invalid section]以及其他一些环境变量的命令；不应该包含那些可以产生输出结果或者假设终端已经附着到 tty 上的命令。<br>~/.zshenv<br>该文件和 /etc/zsh/zshenv 相似，但是它是针对每个用户而言的。一般来说是用来设置一些有用的环境变量。<br>/etc/zsh/zprofile<br>这是一个全局的配置文件，在用户登录的时候加载。一般是用来在登录的时候执行一些命令。请注意，在 Arch Linux 里该文件默认包含一行配置，用来加载 /etc/profile 文件，详见 #全局配置文件。<br>/etc/profile<br>在登录时，该文件应该被所有和伯克利（Bourne）终端相兼容的终端加载：它在登录的的时候会加载应用相关的配置（/etc/profile.d/*.sh）。注意在 Arch Linux 里，Zsh 会默认加载该文件。<br>~/.zprofile<br>该文件一般用来在登录的时候自动执行一些用户脚本。<br>/etc/zsh/zshrc<br>当 Zsh 被作为交互式终端的时候，会加载这样一个全局配置文件。<br>~/.zshrc<br>当 Zsh 被作为交互式终端的时候，会加载这样一个用户配置文件。<br>/etc/zsh/zlogin<br>在登录完毕后加载的一个全局配置文件。<br>~/.zlogin<br>和 /etc/zsh/zlogin 相似，但是它是针对每个用户而言的。<br>/etc/zsh/zlogout<br>在注销的时候被加载的一个全局配置文件。<br>~/.zlogout<br>和 /etc/zsh/zlogout 相似，但是它是针对每个用户而言</p>\n<p>Oh My Zsh </p>\n<p>zsh的配置是非常繁琐的,oh-my-zsh就是解决这个问题而生的,它是我们可以愉快的使用zsh了</p>\n<p>项目地址:<a href=\"https://github.com/robbyrussell/oh-my-zsh\">https://github.com/robbyrussell/oh-my-zsh</a></p>\n<p>安装;</p>\n<p>使用curl<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</div><div class=\"line\"></div><div class=\"line\">#或者使用wegt</div><div class=\"line\"></div><div class=\"line\">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</div><div class=\"line\"></div><div class=\"line\">#安装过程</div><div class=\"line\"></div><div class=\"line\">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</div><div class=\"line\"></div><div class=\"line\">--2016-09-09 16:20:35--  http://install.ohmyz.sh/</div><div class=\"line\">Resolving install.ohmyz.sh...</div><div class=\"line\">50.31.225.93</div><div class=\"line\">Connecting to install.ohmyz.sh|50.31.225.93|:80... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 301 Moved Permanently</div><div class=\"line\">Location: https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh [following]</div><div class=\"line\">--2016-09-09 16:20:40--  https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh</div><div class=\"line\">Resolving raw.githubusercontent.com... 151.101.16.133</div><div class=\"line\">Connecting to raw.githubusercontent.com|151.101.16.133|:443... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 200 OK</div><div class=\"line\">Length: 4018 (3.9K) [text/plain]</div><div class=\"line\">Saving to: &apos;STDOUT&apos;</div><div class=\"line\"></div><div class=\"line\">-                   100%[===================&gt;]   3.92K  11.0KB/s    in 0.4s</div><div class=\"line\"></div><div class=\"line\">2016-09-09 16:20:42 (11.0 KB/s) - written to stdout [4018/4018]</div><div class=\"line\"></div><div class=\"line\">Cloning Oh My Zsh...</div><div class=\"line\">Cloning into &apos;/Users/kai/.oh-my-zsh&apos;...</div><div class=\"line\">remote: Counting objects: 798, done.</div><div class=\"line\">remote: Compressing objects: 100% (667/667), done.</div><div class=\"line\">remote: Total 798 (delta 19), reused 693 (delta 9), pack-reused 0</div><div class=\"line\">Receiving objects: 100% (798/798), 535.07 KiB | 234.00 KiB/s, done.</div><div class=\"line\">Resolving deltas: 100% (19/19), done.</div><div class=\"line\">Checking connectivity... done.</div><div class=\"line\">Looking for an existing zsh config...</div><div class=\"line\">Found ~/.zshrc. Backing up to ~/.zshrc.pre-oh-my-zsh</div><div class=\"line\">Using the Oh My Zsh template file and adding it to ~/.zshrc</div><div class=\"line\">         __                                     __</div><div class=\"line\">  ____  / /_     ____ ___  __  __   ____  _____/ /_</div><div class=\"line\"> / __ \\/ __ \\   / __ `__ \\/ / / /  /_  / / ___/ __ \\</div><div class=\"line\">/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / /</div><div class=\"line\">\\____/_/ /_/  /_/ /_/ /_/\\__, /    /___/____/_/ /_/</div><div class=\"line\">                        /____/                       ....is now installed!</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Please look over the ~/.zshrc file to select plugins, themes, and options.</div><div class=\"line\"></div><div class=\"line\">p.s. Follow us at https://twitter.com/ohmyzsh.</div><div class=\"line\"></div><div class=\"line\">p.p.s. Get stickers and t-shirts at http://shop.planetargon.com.</div><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>这样oh-my-zsh就安装完成了。开始对其进行配置。主要是对~./zshrc进行配置</p>\n<p>oh-my-zsh的插件<br>在 GitHub 中有一个文档列出了插件目前的版本<br>地址:</p>\n<p>现在插件下载,放在~/.oh-my-zsh/custom/plugins/目录下</p>\n<p>打开你的 .zshrc 文件，找到 plugins=()，在括号中列出使用的插件,多个插件空格分开：</p>\n<p>plugins=(git bower sublime brew history node npm sudo web-search)</p>\n<p>例如安装语法高亮插件</p>\n<p>1)下载<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">kai@huangchengkaideMacBook-Air  ~  git clone git://github.com/zsh-users/zsh-syntax-highlighting.git</div><div class=\"line\">Cloning into &apos;zsh-syntax-highlighting&apos;...</div><div class=\"line\">remote: Counting objects: 3357, done.</div><div class=\"line\">remote: Compressing objects: 100% (32/32), done.</div><div class=\"line\">remote: Total 3357 (delta 11), reused 0 (delta 0), pack-reused 3325</div><div class=\"line\">Receiving objects: 100% (3357/3357), 676.96 KiB | 66.00 KiB/s, done.</div><div class=\"line\">Resolving deltas: 100% (2153/2153), done.</div><div class=\"line\">Checking connectivity... done.</div></pre></td></tr></table></figure><br>2)立即使用一下,先看看效果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kai@huangchengkaideMacBook-Air  ~  source ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</div></pre></td></tr></table></figure></p>\n<p>3)将插件放入相应目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kai@huangchengkaideMacBook-Air  ~  cd ~/.oh-my-zsh/custom/plugins/</div></pre></td></tr></table></figure></p>\n<p>4)配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> kai@huangchengkaideMacBook-Air  ~  vim .zshrc</div><div class=\"line\"> ........</div><div class=\"line\">plugins=(git zsh-syntax-highlighting)</div><div class=\"line\">........</div></pre></td></tr></table></figure></p>\n<p>oh-my-zsh的主题<br>可以配置各种不同风格的主题<br>在这个地址可以找到所有的主题<br>地址:<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/themes\">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a></p>\n<p>安装主题需要下载主题到~/oh-my-zsh/themes目录下,然后在./zshrc问价中配置</p>\n<p>ZSH_THEME=”robbyrussell” #默认主题</p>\n<p>agnoster主题<br>这么多主题中,我觉的就agnoster主题最好看,现在记录以下安装过程<br>1)先在.zshrc中配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim ~/.zshrc</div><div class=\"line\"></div><div class=\"line\">ZSH_THEME=&quot;agnoster&quot; </div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>2)安装powerline字体</p>\n<p>可以通过pip来安装,具体看官方文档<br>地址:<a href=\"http://powerline.readthedocs.io/en/latest/installation.html\">http://powerline.readthedocs.io/en/latest/installation.html</a></p>\n<p>或者使用处理好的字体库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">#先下载</div><div class=\"line\">➜  ~ git clone https://github.com/powerline/fonts.git</div><div class=\"line\">Cloning into &apos;fonts&apos;...</div><div class=\"line\">remote: Counting objects: 602, done.</div><div class=\"line\">remote: Total 602 (delta 0), reused 0 (delta 0), pack-reused 602</div><div class=\"line\">Receiving objects: 100% (602/602), 12.25 MiB | 358.00 KiB/s, done.</div><div class=\"line\">Resolving deltas: 100% (207/207), done.</div><div class=\"line\">Checking connectivity... done.</div><div class=\"line\"></div><div class=\"line\">#clone好了,就如目录</div><div class=\"line\"></div><div class=\"line\">➜  ~ cd fonts/  </div><div class=\"line\">➜  fonts git:(master) ls</div><div class=\"line\">AnonymousPro         Inconsolata          SourceCodePro</div><div class=\"line\">Arimo                Inconsolata-g        SymbolNeu</div><div class=\"line\">Cousine              InconsolataDz        Terminus</div><div class=\"line\">DejaVuSansMono       InputMono            Tinos</div><div class=\"line\">DroidSansMono        LiberationMono       UbuntuMono</div><div class=\"line\">DroidSansMonoDotted  Meslo                install.ps1</div><div class=\"line\">DroidSansMonoSlashed Monofur              install.sh</div><div class=\"line\">FiraMono             README.rst           samples</div><div class=\"line\">Hack                 RobotoMono</div><div class=\"line\">➜  fonts git:(master) </div><div class=\"line\"></div><div class=\"line\">#执行install.sh,将字体复制到mac的字体库目录</div><div class=\"line\">➜  fonts git:(master) ./install.sh </div><div class=\"line\">Copying fonts...</div><div class=\"line\">All Powerline fonts installed to /Users/kai/Library/Fonts</div><div class=\"line\">➜  fonts git:(master) </div></pre></td></tr></table></figure></p>\n<p>iTerm2</p>\n<p>iTerm2 是一个mac平台最好的终端，没有之一</p>\n<p>官方网站：<a href=\"http://www.iterm2.com/\">http://www.iterm2.com/</a></p>\n<p>安装:<br>到官网下载安装包安装<br>或者使用brew cask<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#如果没有安装brew cask ,就先安装它</div><div class=\"line\"></div><div class=\"line\">brew install cask</div><div class=\"line\"></div><div class=\"line\">#安装</div><div class=\"line\">brew cask install iterm2</div></pre></td></tr></table></figure></p>\n<p>基本配置</p>\n<p>打开偏好设定窗口: 按Command + ,(快捷方式)</p>\n<p>设置占上半屏现在 : 选择Profiles / Window，把Settings for New Windows中的Style改成  Full with Top of Screen  (个人爱好) </p>\n<p>现在/隐藏 :勾选Hotkey中的Show/hide iTerm2 with a system-wide hotkey，然后设定一个热键,Command + .(个人爱好,我觉的超实用) 你还可以在Profile中更改字体等，其他的希望大家自己研究。</p>\n<p>使用刚刚装好的powline字体: 选择Profile/ext 选项卡中里的Regular Font和Non-ASCII Font的字体都设置成 Powerline的字体，我设置的字体是12pt Meslo LG S DZ Regular for Powerline (还是个人爱好咯)</p>\n<p>配色:<br>那就装个Solarized吧,比较流行的配色方案，其优美的配色和众多软件的支持,<br>下载解压，地址:<a href=\"http://ethanschoonover.com/solarized\">http://ethanschoonover.com/solarized</a></p>\n<p>看下文件:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchengkaideMacBook-Air:solarized kai$ ls -l</div><div class=\"line\">total 72</div><div class=\"line\">-rw-r--r--@ 1 kai  staff   5534  4 16  2011 CHANGELOG.mkd</div><div class=\"line\">-rw-r--r--@ 1 kai  staff   2141  4 16  2011 DEVELOPERS.mkd</div><div class=\"line\">-rw-r--r--@ 1 kai  staff   1061  4 16  2011 LICENSE</div><div class=\"line\">-rw-r--r--@ 1 kai  staff  20362  4 16  2011 README.md</div><div class=\"line\">drwxr-xr-x@ 5 kai  staff    170  4 16  2011 adobe-swatches-solarized</div><div class=\"line\">drwxr-xr-x@ 6 kai  staff    204  4 16  2011 apple-colorpalette-solarized</div><div class=\"line\">drwxr-xr-x@ 2 kai  staff     68  4 16  2011 css-web</div><div class=\"line\">drwxr-xr-x@ 2 kai  staff     68  4 16  2011 editors-ides</div><div class=\"line\">drwxr-xr-x@ 5 kai  staff    170  4 16  2011 emacs-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 4 kai  staff    136  4 16  2011 gimp-palette-solarized</div><div class=\"line\">drwxr-xr-x@ 7 kai  staff    238  4 16  2011 intellij-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 5 kai  staff    170  4 16  2011 iterm2-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 2 kai  staff     68  4 16  2011 misc-apps</div><div class=\"line\">drwxr-xr-x@ 9 kai  staff    306  4 16  2011 mutt-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 4 kai  staff    136  4 16  2011 netbeans-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 6 kai  staff    204  4 16  2011 osx-terminal.app-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 2 kai  staff     68  4 16  2011 palettes</div><div class=\"line\">drwxr-xr-x@ 2 kai  staff     68  4 16  2011 project-resources</div><div class=\"line\">drwxr-xr-x@ 9 kai  staff    306  4 16  2011 putty-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 4 kai  staff    136  4 16  2011 seestyle-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 2 kai  staff     68  4 16  2011 terminal-emulators</div><div class=\"line\">drwxr-xr-x@ 5 kai  staff    170  4 16  2011 textmate-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 6 kai  staff    204  4 16  2011 textwrangler-bbedit-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 6 kai  staff    204  4 16  2011 vim-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 5 kai  staff    170  4 16  2011 visualstudio-colors-solarized</div><div class=\"line\">drwxr-xr-x@ 3 kai  staff    102  4 16  2011 xresources-colors-solarized</div></pre></td></tr></table></figure></p>\n<p>然后打开iTerm2的偏好设定，Profiles / Colors，最下面的Load Presets … / Import… 直接加载iterm2-colors-solarized/Solarized Dark.itermcolors配色方案就可以了.</p>\n<p>弄完了,感觉效果好不错,赞下.</p>\n<p>快捷键:</p>\n<p>选中<br>双击选中，三击选中整行，四击智能选中（智能规则可配置），可以识别网址，引号引起的字符串，邮箱地址等。</p>\n<p>切换 tab：⌘+←, ⌘+→, ⌘+shift+{, ⌘+shift+}。⌘+数字直接定位到该 tab；<br>新建 tab：⌘+t；<br>顺序切换 pane：⌘+[, ⌘+]；<br>按方向切换 pane：⌘+Option+方向键；<br>关闭pane: ⌘+w<br>切分屏幕：⌘+d 水平切分，⌘+Shift+d 垂直切分；<br>智能查找，支持正则查找：⌘+f。<br>全屏切换: ⌘+enter<br>自动补全: ⌘+;<br>历史记录窗口:⌘+Shift+h<br>全屏展示所有的 tab，可以搜索:⌘+Option+e<br>定位当前的鼠标:⌘+/<br>显示/隐藏: alt+space (个人喜好已改为⌘+. )</p>\n<p>⌘键:</p>\n<p>1)可以拖拽选中的字符串；<br>2)点击 url：调用默认浏览器访问该网址；<br>3)点击文件：调用默认程序打开文件；<br>4)如果文件名是filename:42，且默认文本编辑器是 Macvim、Textmate或BBEdit，将会直接打开到这一行；<br>5)点击文件夹：在 finder 中打开该文件夹；<br>6)同时按住option键，可以以矩形选中</p>\n<p>自动登陆:<br>这是个小记录,由于经常要登陆ssh,但ssh命令又不能保存密码.<br>现在用itrem2了,不再使用secureCRT或xshell等了.<br>自动登陆ssh,用公钥/私钥感觉也不喜欢,所有找个shell来处理,感觉也不错</p>\n<p>地址:<a href=\"https://github.com/wufeifei/autossh\">https://github.com/wufeifei/autossh</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">kai@huangchengkaideMacBook-Air  ~  git clone https://github.com/wufeifei/autossh.git</div><div class=\"line\">Cloning into &apos;autossh&apos;...</div><div class=\"line\">remote: Counting objects: 92, done.</div><div class=\"line\">remote: Total 92 (delta 0), reused 0 (delta 0), pack-reused 92</div><div class=\"line\">Unpacking objects: 100% (92/92), done.</div><div class=\"line\">Checking connectivity... done.</div><div class=\"line\"> kai@huangchengkaideMacBook-Air  ~  sudo cp autossh/autossh /usr/local/bin/</div><div class=\"line\"> kai@huangchengkaideMacBook-Air  ~  autossh</div><div class=\"line\">cat: /Users/kai/.autosshrc: No such file or directory</div><div class=\"line\">############################################################</div><div class=\"line\">#                     [AUTO SSH]                           #</div><div class=\"line\">#                                                          #</div><div class=\"line\">#                                                          #</div><div class=\"line\">#              Config(~/.autosshrc) Not Found              #</div><div class=\"line\">#                                                          #</div><div class=\"line\">#                                                          #</div><div class=\"line\">############################################################</div><div class=\"line\"></div></pre></td></tr></table></figure>\n"},{"title":"使用ownCloud搭建云盘","date":"2016-07-27T08:31:31.000Z","_content":"\nownCloud:\n\townCloud是一个自由且开源的个人云存储解决方案(网盘)，包括两个部分：服务器和客户端。\nownCloud在客户端可通过网页界面，或者安装专用的客户端软件来使用。网页界面当然就是任何能打开网页的平台都支持，而客户端软件也支持相当多平台，Windows、Linux、iOS、Android皆有。\n除了云存储之外，ownCloud也可用于同步行事历、电子邮件联系人、网页浏览器的书签；此外还有多人在线文件同步协作的功能。(维基百科).\n\t同时ownCloud使用php语言进行开发的,github地址:https://github.com/owncloud,官网地址: http://owncloud.org\n\n安装:\n\n1)前提\n\n需要安装php && http服务器软件.\n这里我安装php7和nginx,具体安装方法请参考网上或者<php7和nignx一键安装脚本>\n\n需要安装mysql || mariadb\nmariadb:是mysql的一个开源分支,兼容mysql.这里为了方便一下,直接用yum安装mariadb了\n先搜索一下包:\n{% codeblock %}\n[root@niaoyun49026 libiconv-1.14]# yum search mariadb\n#启动mariadb\nsystemctl start mariadb\n#可以设置为开机启动\nsystemctl enable mariadb \n#设置 root密码等相关\nmysql_secure_installation\n\n#停止\nsystemctl stop mariadb\n\n#测试登陆\nmysql -uroot -p\n\n{% endcodeblock %}\n\n设置db密码等安全:\n\n{% codeblock %}\n[root@niaoyun49026 libiconv-1.14]# mysql_secure_installation \n/usr/bin/mysql_secure_installation: line 379: find_mysql_client: command not found\n\nNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\n      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!\n\nIn order to log into MariaDB to secure it, we'll need the current\npassword for the root user.  If you've just installed MariaDB, and\nyou haven't set the root password yet, the password will be blank,\nso you should just press enter here.\n\nEnter current password for root (enter for none): \nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)\nEnter current password for root (enter for none): \nOK, successfully used password, moving on...\n\nSetting the root password ensures that nobody can log into the MariaDB\nroot user without the proper authorisation.\n\nSet root password? [Y/n] y\nNew password: \nRe-enter new password: \nPassword updated successfully!\nReloading privilege tables..\n ... Success!\n\n\nBy default, a MariaDB installation has an anonymous user, allowing anyone\nto log into MariaDB without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] y\n ... Success!\n\nNormally, root should only be allowed to connect from 'localhost'.  This\nensures that someone cannot guess at the root password from the network.\n\nDisallow root login remotely? [Y/n] \n ... Success!\n\nBy default, MariaDB comes with a database named 'test' that anyone can\naccess.  This is also intended only for testing, and should be removed\nbefore moving into a production environment.\n\nRemove test database and access to it? [Y/n] \n - Dropping test database...\n ... Success!\n - Removing privileges on test database...\n ... Success!\n\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\n\nReload privilege tables now? [Y/n] \n ... Success!\n\nCleaning up...\n\nAll done!  If you've completed all of the above steps, your MariaDB\ninstallation should now be secure.\n\nThanks for using MariaDB!\n[root@niaoyun49026 libiconv-1.14]# \n\n{% endcodeblock %}\n\n2)安装\n先下载源码:\n{% codeblock %}\n[root@niaoyun49026 data]# mkdir /data/codebase\n[root@niaoyun49026 data]# wget https://download.owncloud.org/community/owncloud-9.1.0.tar.bz2\n--2016-07-27 17:21:11--  https://download.owncloud.org/community/owncloud-9.1.0.tar.bz2\nResolving download.owncloud.org (download.owncloud.org)... 188.40.127.122, 148.251.209.106, 188.40.68.177, ...\nConnecting to download.owncloud.org (download.owncloud.org)|188.40.127.122|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 29055490 (28M) [application/x-bzip2]\nSaving to: wncloud-9.1.0.tar.bz2\n2016-07-27 17:44:55 (21.0 KB/s) - wncloud-9.1.0.tar.bz2saved [29055490/29055490]\n{% endcodeblock %}\n \n配置数据文件夹:\n{% codeblock %}\n#解压:\ntar -xvf /data/owncloud-9.1.0.tar.bz2 -C /data/codebase/\n#进入owncloud文件\ncd /data/codebase/owncloud\n#owncloud需要对apps、data、config目录有write的权限，要是没有这三个文件需要手动创建\n#由于wget下来的版本没有data，那么就来mkdir\nmkdir data\n#分别给予write权限\nsudo chown -R www: www data\nsudo chown -R  www: www config\nsudo chown -R  www: www apps\n{% endcodeblock %}\n\n nginx配置:\n{% codeblock %}\nupstream php-handler {\n    server 127.0.0.1:9000;\n    #server unix:/var/run/php5-fpm.sock;\n}\n\nserver {\n    listen 80;\n    server_name cloud.miaoxiaohei.com;\n    # enforce https\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl;\n    server_name cloud.miaoxiaohei.com;\n\n    ssl_certificate /data/ssl/cloud.miaoxiaohei.com.crt;\n    ssl_certificate_key /data/ssl/cloud.miaoxiaohei.com.key;\n\n    # Add headers to serve security related headers\n    # Before enabling Strict-Transport-Security headers please read into this topic first.\n    # add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload;\";\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Robots-Tag none;\n    add_header X-Download-Options noopen;\n    add_header X-Permitted-Cross-Domain-Policies none;\n\n    # Path to the root of your installation\n    root /data/codebase/owncloud/;\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # The following 2 rules are only needed for the user_webfinger app.\n    # Uncomment it if you're planning to use this app.\n    #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;\n    #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;\n\n    location = /.well-known/carddav {\n        return 301 $scheme://$host/remote.php/dav;\n    }\n    location = /.well-known/caldav {\n        return 301 $scheme://$host/remote.php/dav;\n    }\n\n    location /.well-known/acme-challenge { }\n\n    # set max upload size\n    client_max_body_size 512M;\n    fastcgi_buffers 64 4K;\n\n    # Disable gzip to avoid the removal of the ETag header\n    gzip off;\n\n    # Uncomment if your server is build with the ngx_pagespeed module\n    # This module is currently not supported.\n    # pagespeed off;\n\n    error_page 403 /core/templates/403.php;\n    error_page 404 /core/templates/404.php;\n\n    location / {\n        rewrite ^ /index.php$uri;\n    }\n\n    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {\n        return 404;\n    }\n    location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) {\n        return 404;\n    }\n\n    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) {\n        fastcgi_split_path_info ^(.+\\.php)(/.*)$;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param PATH_INFO $fastcgi_path_info;\n        fastcgi_param HTTPS on;\n        fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice\n        fastcgi_param front_controller_active true;\n        fastcgi_pass php-handler;\n        fastcgi_intercept_errors on;\n        fastcgi_request_buffering off;\n    }\n\n    location ~ ^/(?:updater|ocs-provider)(?:$|/) {\n        try_files $uri/ =404;\n        index index.php;\n    }\n\n    # Adding the cache control header for js and css files\n    # Make sure it is BELOW the PHP block\n    location ~* \\.(?:css|js)$ {\n        try_files $uri /index.php$uri$is_args$args;\n        add_header Cache-Control \"public, max-age=7200\";\n        # Add headers to serve security related headers (It is intended to have those duplicated to the ones above)\n        # Before enabling Strict-Transport-Security headers please read into this topic first.\n        # add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload;\";\n        add_header X-Content-Type-Options nosniff;\n        add_header X-Frame-Options \"SAMEORIGIN\";\n        add_header X-XSS-Protection \"1; mode=block\";\n        add_header X-Robots-Tag none;\n        add_header X-Download-Options noopen;\n        add_header X-Permitted-Cross-Domain-Policies none;\n        # Optional: Don't log access to assets\n        access_log off;\n    }\n\n    location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ {\n        try_files $uri /index.php$uri$is_args$args;\n        # Optional: Don't log access to other assets\n        access_log off;\n    }\n}\n\n{% endcodeblock %}\n\n同时记得开发80和443端口:\n{% codeblock %}\n\n#80端口 http\niptables -A INPUT -p tcp -m tcp --sport 80 -j ACCEPT\niptables -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT \n#443端口 https,ssl\niptables -A INPUT -p tcp -m tcp --sport 443 -j ACCEPT\niptables -A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT\n{% endcodeblock %}\n\n当然,如果不想那么烦,可以 将防火墙关闭(但这样很危险)\n{% codeblock %}\nsystemctl stop  iptables.service\n{% endcodeblock %}\n\n在浏览器打开地址安装:\n\n![安装](/images/owncloud_install.png)\n\n数据选择有两种,SQLite||Mysql,其中sqlite比较省服务器资源,但对于访问量比较多的情况下,建议还是使用mysql咯\n\n\n\n\n\n\n\n\n","source":"_posts/使用ownCloud搭建云盘.md","raw":"---\ntitle: 使用ownCloud搭建云盘\ndate: 2016-07-27 16:31:31\ntags:\n---\n\nownCloud:\n\townCloud是一个自由且开源的个人云存储解决方案(网盘)，包括两个部分：服务器和客户端。\nownCloud在客户端可通过网页界面，或者安装专用的客户端软件来使用。网页界面当然就是任何能打开网页的平台都支持，而客户端软件也支持相当多平台，Windows、Linux、iOS、Android皆有。\n除了云存储之外，ownCloud也可用于同步行事历、电子邮件联系人、网页浏览器的书签；此外还有多人在线文件同步协作的功能。(维基百科).\n\t同时ownCloud使用php语言进行开发的,github地址:https://github.com/owncloud,官网地址: http://owncloud.org\n\n安装:\n\n1)前提\n\n需要安装php && http服务器软件.\n这里我安装php7和nginx,具体安装方法请参考网上或者<php7和nignx一键安装脚本>\n\n需要安装mysql || mariadb\nmariadb:是mysql的一个开源分支,兼容mysql.这里为了方便一下,直接用yum安装mariadb了\n先搜索一下包:\n{% codeblock %}\n[root@niaoyun49026 libiconv-1.14]# yum search mariadb\n#启动mariadb\nsystemctl start mariadb\n#可以设置为开机启动\nsystemctl enable mariadb \n#设置 root密码等相关\nmysql_secure_installation\n\n#停止\nsystemctl stop mariadb\n\n#测试登陆\nmysql -uroot -p\n\n{% endcodeblock %}\n\n设置db密码等安全:\n\n{% codeblock %}\n[root@niaoyun49026 libiconv-1.14]# mysql_secure_installation \n/usr/bin/mysql_secure_installation: line 379: find_mysql_client: command not found\n\nNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\n      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!\n\nIn order to log into MariaDB to secure it, we'll need the current\npassword for the root user.  If you've just installed MariaDB, and\nyou haven't set the root password yet, the password will be blank,\nso you should just press enter here.\n\nEnter current password for root (enter for none): \nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)\nEnter current password for root (enter for none): \nOK, successfully used password, moving on...\n\nSetting the root password ensures that nobody can log into the MariaDB\nroot user without the proper authorisation.\n\nSet root password? [Y/n] y\nNew password: \nRe-enter new password: \nPassword updated successfully!\nReloading privilege tables..\n ... Success!\n\n\nBy default, a MariaDB installation has an anonymous user, allowing anyone\nto log into MariaDB without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] y\n ... Success!\n\nNormally, root should only be allowed to connect from 'localhost'.  This\nensures that someone cannot guess at the root password from the network.\n\nDisallow root login remotely? [Y/n] \n ... Success!\n\nBy default, MariaDB comes with a database named 'test' that anyone can\naccess.  This is also intended only for testing, and should be removed\nbefore moving into a production environment.\n\nRemove test database and access to it? [Y/n] \n - Dropping test database...\n ... Success!\n - Removing privileges on test database...\n ... Success!\n\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\n\nReload privilege tables now? [Y/n] \n ... Success!\n\nCleaning up...\n\nAll done!  If you've completed all of the above steps, your MariaDB\ninstallation should now be secure.\n\nThanks for using MariaDB!\n[root@niaoyun49026 libiconv-1.14]# \n\n{% endcodeblock %}\n\n2)安装\n先下载源码:\n{% codeblock %}\n[root@niaoyun49026 data]# mkdir /data/codebase\n[root@niaoyun49026 data]# wget https://download.owncloud.org/community/owncloud-9.1.0.tar.bz2\n--2016-07-27 17:21:11--  https://download.owncloud.org/community/owncloud-9.1.0.tar.bz2\nResolving download.owncloud.org (download.owncloud.org)... 188.40.127.122, 148.251.209.106, 188.40.68.177, ...\nConnecting to download.owncloud.org (download.owncloud.org)|188.40.127.122|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 29055490 (28M) [application/x-bzip2]\nSaving to: wncloud-9.1.0.tar.bz2\n2016-07-27 17:44:55 (21.0 KB/s) - wncloud-9.1.0.tar.bz2saved [29055490/29055490]\n{% endcodeblock %}\n \n配置数据文件夹:\n{% codeblock %}\n#解压:\ntar -xvf /data/owncloud-9.1.0.tar.bz2 -C /data/codebase/\n#进入owncloud文件\ncd /data/codebase/owncloud\n#owncloud需要对apps、data、config目录有write的权限，要是没有这三个文件需要手动创建\n#由于wget下来的版本没有data，那么就来mkdir\nmkdir data\n#分别给予write权限\nsudo chown -R www: www data\nsudo chown -R  www: www config\nsudo chown -R  www: www apps\n{% endcodeblock %}\n\n nginx配置:\n{% codeblock %}\nupstream php-handler {\n    server 127.0.0.1:9000;\n    #server unix:/var/run/php5-fpm.sock;\n}\n\nserver {\n    listen 80;\n    server_name cloud.miaoxiaohei.com;\n    # enforce https\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl;\n    server_name cloud.miaoxiaohei.com;\n\n    ssl_certificate /data/ssl/cloud.miaoxiaohei.com.crt;\n    ssl_certificate_key /data/ssl/cloud.miaoxiaohei.com.key;\n\n    # Add headers to serve security related headers\n    # Before enabling Strict-Transport-Security headers please read into this topic first.\n    # add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload;\";\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Robots-Tag none;\n    add_header X-Download-Options noopen;\n    add_header X-Permitted-Cross-Domain-Policies none;\n\n    # Path to the root of your installation\n    root /data/codebase/owncloud/;\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # The following 2 rules are only needed for the user_webfinger app.\n    # Uncomment it if you're planning to use this app.\n    #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;\n    #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;\n\n    location = /.well-known/carddav {\n        return 301 $scheme://$host/remote.php/dav;\n    }\n    location = /.well-known/caldav {\n        return 301 $scheme://$host/remote.php/dav;\n    }\n\n    location /.well-known/acme-challenge { }\n\n    # set max upload size\n    client_max_body_size 512M;\n    fastcgi_buffers 64 4K;\n\n    # Disable gzip to avoid the removal of the ETag header\n    gzip off;\n\n    # Uncomment if your server is build with the ngx_pagespeed module\n    # This module is currently not supported.\n    # pagespeed off;\n\n    error_page 403 /core/templates/403.php;\n    error_page 404 /core/templates/404.php;\n\n    location / {\n        rewrite ^ /index.php$uri;\n    }\n\n    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {\n        return 404;\n    }\n    location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) {\n        return 404;\n    }\n\n    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) {\n        fastcgi_split_path_info ^(.+\\.php)(/.*)$;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param PATH_INFO $fastcgi_path_info;\n        fastcgi_param HTTPS on;\n        fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice\n        fastcgi_param front_controller_active true;\n        fastcgi_pass php-handler;\n        fastcgi_intercept_errors on;\n        fastcgi_request_buffering off;\n    }\n\n    location ~ ^/(?:updater|ocs-provider)(?:$|/) {\n        try_files $uri/ =404;\n        index index.php;\n    }\n\n    # Adding the cache control header for js and css files\n    # Make sure it is BELOW the PHP block\n    location ~* \\.(?:css|js)$ {\n        try_files $uri /index.php$uri$is_args$args;\n        add_header Cache-Control \"public, max-age=7200\";\n        # Add headers to serve security related headers (It is intended to have those duplicated to the ones above)\n        # Before enabling Strict-Transport-Security headers please read into this topic first.\n        # add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload;\";\n        add_header X-Content-Type-Options nosniff;\n        add_header X-Frame-Options \"SAMEORIGIN\";\n        add_header X-XSS-Protection \"1; mode=block\";\n        add_header X-Robots-Tag none;\n        add_header X-Download-Options noopen;\n        add_header X-Permitted-Cross-Domain-Policies none;\n        # Optional: Don't log access to assets\n        access_log off;\n    }\n\n    location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ {\n        try_files $uri /index.php$uri$is_args$args;\n        # Optional: Don't log access to other assets\n        access_log off;\n    }\n}\n\n{% endcodeblock %}\n\n同时记得开发80和443端口:\n{% codeblock %}\n\n#80端口 http\niptables -A INPUT -p tcp -m tcp --sport 80 -j ACCEPT\niptables -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT \n#443端口 https,ssl\niptables -A INPUT -p tcp -m tcp --sport 443 -j ACCEPT\niptables -A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT\n{% endcodeblock %}\n\n当然,如果不想那么烦,可以 将防火墙关闭(但这样很危险)\n{% codeblock %}\nsystemctl stop  iptables.service\n{% endcodeblock %}\n\n在浏览器打开地址安装:\n\n![安装](/images/owncloud_install.png)\n\n数据选择有两种,SQLite||Mysql,其中sqlite比较省服务器资源,但对于访问量比较多的情况下,建议还是使用mysql咯\n\n\n\n\n\n\n\n\n","slug":"使用ownCloud搭建云盘","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeieo6001yznz4hy8nz39w","content":"<p>ownCloud:<br>    ownCloud是一个自由且开源的个人云存储解决方案(网盘)，包括两个部分：服务器和客户端。<br>ownCloud在客户端可通过网页界面，或者安装专用的客户端软件来使用。网页界面当然就是任何能打开网页的平台都支持，而客户端软件也支持相当多平台，Windows、Linux、iOS、Android皆有。<br>除了云存储之外，ownCloud也可用于同步行事历、电子邮件联系人、网页浏览器的书签；此外还有多人在线文件同步协作的功能。(维基百科).<br>    同时ownCloud使用php语言进行开发的,github地址:<a href=\"https://github.com/owncloud,官网地址\" target=\"_blank\" rel=\"external\">https://github.com/owncloud,官网地址</a>: <a href=\"http://owncloud.org\" target=\"_blank\" rel=\"external\">http://owncloud.org</a></p>\n<p>安装:</p>\n<p>1)前提</p>\n<p>需要安装php &amp;&amp; http服务器软件.<br>这里我安装php7和nginx,具体安装方法请参考网上或者<php7和nignx一键安装脚本></php7和nignx一键安装脚本></p>\n<p>需要安装mysql || mariadb<br>mariadb:是mysql的一个开源分支,兼容mysql.这里为了方便一下,直接用yum安装mariadb了<br>先搜索一下包:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@niaoyun49026 libiconv-1.14]# yum search mariadb</div><div class=\"line\">#启动mariadb</div><div class=\"line\">systemctl start mariadb</div><div class=\"line\">#可以设置为开机启动</div><div class=\"line\">systemctl enable mariadb </div><div class=\"line\">#设置 root密码等相关</div><div class=\"line\">mysql_secure_installation</div><div class=\"line\"></div><div class=\"line\">#停止</div><div class=\"line\">systemctl stop mariadb</div><div class=\"line\"></div><div class=\"line\">#测试登陆</div><div class=\"line\">mysql -uroot -p</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>设置db密码等安全:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@niaoyun49026 libiconv-1.14]# mysql_secure_installation </div><div class=\"line\">/usr/bin/mysql_secure_installation: line 379: find_mysql_client: command not found</div><div class=\"line\"></div><div class=\"line\">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</div><div class=\"line\">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</div><div class=\"line\"></div><div class=\"line\">In order to log into MariaDB to secure it, we&apos;ll need the current</div><div class=\"line\">password for the root user.  If you&apos;ve just installed MariaDB, and</div><div class=\"line\">you haven&apos;t set the root password yet, the password will be blank,</div><div class=\"line\">so you should just press enter here.</div><div class=\"line\"></div><div class=\"line\">Enter current password for root (enter for none): </div><div class=\"line\">ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: YES)</div><div class=\"line\">Enter current password for root (enter for none): </div><div class=\"line\">OK, successfully used password, moving on...</div><div class=\"line\"></div><div class=\"line\">Setting the root password ensures that nobody can log into the MariaDB</div><div class=\"line\">root user without the proper authorisation.</div><div class=\"line\"></div><div class=\"line\">Set root password? [Y/n] y</div><div class=\"line\">New password: </div><div class=\"line\">Re-enter new password: </div><div class=\"line\">Password updated successfully!</div><div class=\"line\">Reloading privilege tables..</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">By default, a MariaDB installation has an anonymous user, allowing anyone</div><div class=\"line\">to log into MariaDB without having to have a user account created for</div><div class=\"line\">them.  This is intended only for testing, and to make the installation</div><div class=\"line\">go a bit smoother.  You should remove them before moving into a</div><div class=\"line\">production environment.</div><div class=\"line\"></div><div class=\"line\">Remove anonymous users? [Y/n] y</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">Normally, root should only be allowed to connect from &apos;localhost&apos;.  This</div><div class=\"line\">ensures that someone cannot guess at the root password from the network.</div><div class=\"line\"></div><div class=\"line\">Disallow root login remotely? [Y/n] </div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">By default, MariaDB comes with a database named &apos;test&apos; that anyone can</div><div class=\"line\">access.  This is also intended only for testing, and should be removed</div><div class=\"line\">before moving into a production environment.</div><div class=\"line\"></div><div class=\"line\">Remove test database and access to it? [Y/n] </div><div class=\"line\"> - Dropping test database...</div><div class=\"line\"> ... Success!</div><div class=\"line\"> - Removing privileges on test database...</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">Reloading the privilege tables will ensure that all changes made so far</div><div class=\"line\">will take effect immediately.</div><div class=\"line\"></div><div class=\"line\">Reload privilege tables now? [Y/n] </div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">Cleaning up...</div><div class=\"line\"></div><div class=\"line\">All done!  If you&apos;ve completed all of the above steps, your MariaDB</div><div class=\"line\">installation should now be secure.</div><div class=\"line\"></div><div class=\"line\">Thanks for using MariaDB!</div><div class=\"line\">[root@niaoyun49026 libiconv-1.14]# </div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>2)安装<br>先下载源码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@niaoyun49026 data]# mkdir /data/codebase</div><div class=\"line\">[root@niaoyun49026 data]# wget https://download.owncloud.org/community/owncloud-9.1.0.tar.bz2</div><div class=\"line\">--2016-07-27 17:21:11--  https://download.owncloud.org/community/owncloud-9.1.0.tar.bz2</div><div class=\"line\">Resolving download.owncloud.org (download.owncloud.org)... 188.40.127.122, 148.251.209.106, 188.40.68.177, ...</div><div class=\"line\">Connecting to download.owncloud.org (download.owncloud.org)|188.40.127.122|:443... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 200 OK</div><div class=\"line\">Length: 29055490 (28M) [application/x-bzip2]</div><div class=\"line\">Saving to: wncloud-9.1.0.tar.bz2</div><div class=\"line\">2016-07-27 17:44:55 (21.0 KB/s) - wncloud-9.1.0.tar.bz2saved [29055490/29055490]</div></pre></td></tr></table></figure></p>\n<p>配置数据文件夹:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#解压:</div><div class=\"line\">tar -xvf /data/owncloud-9.1.0.tar.bz2 -C /data/codebase/</div><div class=\"line\">#进入owncloud文件</div><div class=\"line\">cd /data/codebase/owncloud</div><div class=\"line\">#owncloud需要对apps、data、config目录有write的权限，要是没有这三个文件需要手动创建</div><div class=\"line\">#由于wget下来的版本没有data，那么就来mkdir</div><div class=\"line\">mkdir data</div><div class=\"line\">#分别给予write权限</div><div class=\"line\">sudo chown -R www: www data</div><div class=\"line\">sudo chown -R  www: www config</div><div class=\"line\">sudo chown -R  www: www apps</div></pre></td></tr></table></figure></p>\n<p> nginx配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\">upstream php-handler &#123;</div><div class=\"line\">    server 127.0.0.1:9000;</div><div class=\"line\">    #server unix:/var/run/php5-fpm.sock;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">    listen 80;</div><div class=\"line\">    server_name cloud.miaoxiaohei.com;</div><div class=\"line\">    # enforce https</div><div class=\"line\">    return 301 https://$server_name$request_uri;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">    listen 443 ssl;</div><div class=\"line\">    server_name cloud.miaoxiaohei.com;</div><div class=\"line\"></div><div class=\"line\">    ssl_certificate /data/ssl/cloud.miaoxiaohei.com.crt;</div><div class=\"line\">    ssl_certificate_key /data/ssl/cloud.miaoxiaohei.com.key;</div><div class=\"line\"></div><div class=\"line\">    # Add headers to serve security related headers</div><div class=\"line\">    # Before enabling Strict-Transport-Security headers please read into this topic first.</div><div class=\"line\">    # add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot;;</div><div class=\"line\">    add_header X-Content-Type-Options nosniff;</div><div class=\"line\">    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</div><div class=\"line\">    add_header X-XSS-Protection &quot;1; mode=block&quot;;</div><div class=\"line\">    add_header X-Robots-Tag none;</div><div class=\"line\">    add_header X-Download-Options noopen;</div><div class=\"line\">    add_header X-Permitted-Cross-Domain-Policies none;</div><div class=\"line\"></div><div class=\"line\">    # Path to the root of your installation</div><div class=\"line\">    root /data/codebase/owncloud/;</div><div class=\"line\"></div><div class=\"line\">    location = /robots.txt &#123;</div><div class=\"line\">        allow all;</div><div class=\"line\">        log_not_found off;</div><div class=\"line\">        access_log off;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    # The following 2 rules are only needed for the user_webfinger app.</div><div class=\"line\">    # Uncomment it if you&apos;re planning to use this app.</div><div class=\"line\">    #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;</div><div class=\"line\">    #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;</div><div class=\"line\"></div><div class=\"line\">    location = /.well-known/carddav &#123;</div><div class=\"line\">        return 301 $scheme://$host/remote.php/dav;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location = /.well-known/caldav &#123;</div><div class=\"line\">        return 301 $scheme://$host/remote.php/dav;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location /.well-known/acme-challenge &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">    # set max upload size</div><div class=\"line\">    client_max_body_size 512M;</div><div class=\"line\">    fastcgi_buffers 64 4K;</div><div class=\"line\"></div><div class=\"line\">    # Disable gzip to avoid the removal of the ETag header</div><div class=\"line\">    gzip off;</div><div class=\"line\"></div><div class=\"line\">    # Uncomment if your server is build with the ngx_pagespeed module</div><div class=\"line\">    # This module is currently not supported.</div><div class=\"line\">    # pagespeed off;</div><div class=\"line\"></div><div class=\"line\">    error_page 403 /core/templates/403.php;</div><div class=\"line\">    error_page 404 /core/templates/404.php;</div><div class=\"line\"></div><div class=\"line\">    location / &#123;</div><div class=\"line\">        rewrite ^ /index.php$uri;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ &#123;</div><div class=\"line\">        return 404;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) &#123;</div><div class=\"line\">        return 404;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) &#123;</div><div class=\"line\">        fastcgi_split_path_info ^(.+\\.php)(/.*)$;</div><div class=\"line\">        include fastcgi_params;</div><div class=\"line\">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class=\"line\">        fastcgi_param PATH_INFO $fastcgi_path_info;</div><div class=\"line\">        fastcgi_param HTTPS on;</div><div class=\"line\">        fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice</div><div class=\"line\">        fastcgi_param front_controller_active true;</div><div class=\"line\">        fastcgi_pass php-handler;</div><div class=\"line\">        fastcgi_intercept_errors on;</div><div class=\"line\">        fastcgi_request_buffering off;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~ ^/(?:updater|ocs-provider)(?:$|/) &#123;</div><div class=\"line\">        try_files $uri/ =404;</div><div class=\"line\">        index index.php;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    # Adding the cache control header for js and css files</div><div class=\"line\">    # Make sure it is BELOW the PHP block</div><div class=\"line\">    location ~* \\.(?:css|js)$ &#123;</div><div class=\"line\">        try_files $uri /index.php$uri$is_args$args;</div><div class=\"line\">        add_header Cache-Control &quot;public, max-age=7200&quot;;</div><div class=\"line\">        # Add headers to serve security related headers (It is intended to have those duplicated to the ones above)</div><div class=\"line\">        # Before enabling Strict-Transport-Security headers please read into this topic first.</div><div class=\"line\">        # add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot;;</div><div class=\"line\">        add_header X-Content-Type-Options nosniff;</div><div class=\"line\">        add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</div><div class=\"line\">        add_header X-XSS-Protection &quot;1; mode=block&quot;;</div><div class=\"line\">        add_header X-Robots-Tag none;</div><div class=\"line\">        add_header X-Download-Options noopen;</div><div class=\"line\">        add_header X-Permitted-Cross-Domain-Policies none;</div><div class=\"line\">        # Optional: Don&apos;t log access to assets</div><div class=\"line\">        access_log off;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ &#123;</div><div class=\"line\">        try_files $uri /index.php$uri$is_args$args;</div><div class=\"line\">        # Optional: Don&apos;t log access to other assets</div><div class=\"line\">        access_log off;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>同时记得开发80和443端口:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#80端口 http</div><div class=\"line\">iptables -A INPUT -p tcp -m tcp --sport 80 -j ACCEPT</div><div class=\"line\">iptables -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT </div><div class=\"line\">#443端口 https,ssl</div><div class=\"line\">iptables -A INPUT -p tcp -m tcp --sport 443 -j ACCEPT</div><div class=\"line\">iptables -A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT</div></pre></td></tr></table></figure></p>\n<p>当然,如果不想那么烦,可以 将防火墙关闭(但这样很危险)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl stop  iptables.service</div></pre></td></tr></table></figure></p>\n<p>在浏览器打开地址安装:</p>\n<p><img src=\"/images/owncloud_install.png\" alt=\"安装\"></p>\n<p>数据选择有两种,SQLite||Mysql,其中sqlite比较省服务器资源,但对于访问量比较多的情况下,建议还是使用mysql咯</p>\n","excerpt":"","more":"<p>ownCloud:<br>    ownCloud是一个自由且开源的个人云存储解决方案(网盘)，包括两个部分：服务器和客户端。<br>ownCloud在客户端可通过网页界面，或者安装专用的客户端软件来使用。网页界面当然就是任何能打开网页的平台都支持，而客户端软件也支持相当多平台，Windows、Linux、iOS、Android皆有。<br>除了云存储之外，ownCloud也可用于同步行事历、电子邮件联系人、网页浏览器的书签；此外还有多人在线文件同步协作的功能。(维基百科).<br>    同时ownCloud使用php语言进行开发的,github地址:<a href=\"https://github.com/owncloud,官网地址\">https://github.com/owncloud,官网地址</a>: <a href=\"http://owncloud.org\">http://owncloud.org</a></p>\n<p>安装:</p>\n<p>1)前提</p>\n<p>需要安装php &amp;&amp; http服务器软件.<br>这里我安装php7和nginx,具体安装方法请参考网上或者<php7和nignx一键安装脚本></p>\n<p>需要安装mysql || mariadb<br>mariadb:是mysql的一个开源分支,兼容mysql.这里为了方便一下,直接用yum安装mariadb了<br>先搜索一下包:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@niaoyun49026 libiconv-1.14]# yum search mariadb</div><div class=\"line\">#启动mariadb</div><div class=\"line\">systemctl start mariadb</div><div class=\"line\">#可以设置为开机启动</div><div class=\"line\">systemctl enable mariadb </div><div class=\"line\">#设置 root密码等相关</div><div class=\"line\">mysql_secure_installation</div><div class=\"line\"></div><div class=\"line\">#停止</div><div class=\"line\">systemctl stop mariadb</div><div class=\"line\"></div><div class=\"line\">#测试登陆</div><div class=\"line\">mysql -uroot -p</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>设置db密码等安全:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@niaoyun49026 libiconv-1.14]# mysql_secure_installation </div><div class=\"line\">/usr/bin/mysql_secure_installation: line 379: find_mysql_client: command not found</div><div class=\"line\"></div><div class=\"line\">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</div><div class=\"line\">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</div><div class=\"line\"></div><div class=\"line\">In order to log into MariaDB to secure it, we&apos;ll need the current</div><div class=\"line\">password for the root user.  If you&apos;ve just installed MariaDB, and</div><div class=\"line\">you haven&apos;t set the root password yet, the password will be blank,</div><div class=\"line\">so you should just press enter here.</div><div class=\"line\"></div><div class=\"line\">Enter current password for root (enter for none): </div><div class=\"line\">ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: YES)</div><div class=\"line\">Enter current password for root (enter for none): </div><div class=\"line\">OK, successfully used password, moving on...</div><div class=\"line\"></div><div class=\"line\">Setting the root password ensures that nobody can log into the MariaDB</div><div class=\"line\">root user without the proper authorisation.</div><div class=\"line\"></div><div class=\"line\">Set root password? [Y/n] y</div><div class=\"line\">New password: </div><div class=\"line\">Re-enter new password: </div><div class=\"line\">Password updated successfully!</div><div class=\"line\">Reloading privilege tables..</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">By default, a MariaDB installation has an anonymous user, allowing anyone</div><div class=\"line\">to log into MariaDB without having to have a user account created for</div><div class=\"line\">them.  This is intended only for testing, and to make the installation</div><div class=\"line\">go a bit smoother.  You should remove them before moving into a</div><div class=\"line\">production environment.</div><div class=\"line\"></div><div class=\"line\">Remove anonymous users? [Y/n] y</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">Normally, root should only be allowed to connect from &apos;localhost&apos;.  This</div><div class=\"line\">ensures that someone cannot guess at the root password from the network.</div><div class=\"line\"></div><div class=\"line\">Disallow root login remotely? [Y/n] </div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">By default, MariaDB comes with a database named &apos;test&apos; that anyone can</div><div class=\"line\">access.  This is also intended only for testing, and should be removed</div><div class=\"line\">before moving into a production environment.</div><div class=\"line\"></div><div class=\"line\">Remove test database and access to it? [Y/n] </div><div class=\"line\"> - Dropping test database...</div><div class=\"line\"> ... Success!</div><div class=\"line\"> - Removing privileges on test database...</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">Reloading the privilege tables will ensure that all changes made so far</div><div class=\"line\">will take effect immediately.</div><div class=\"line\"></div><div class=\"line\">Reload privilege tables now? [Y/n] </div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">Cleaning up...</div><div class=\"line\"></div><div class=\"line\">All done!  If you&apos;ve completed all of the above steps, your MariaDB</div><div class=\"line\">installation should now be secure.</div><div class=\"line\"></div><div class=\"line\">Thanks for using MariaDB!</div><div class=\"line\">[root@niaoyun49026 libiconv-1.14]# </div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>2)安装<br>先下载源码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@niaoyun49026 data]# mkdir /data/codebase</div><div class=\"line\">[root@niaoyun49026 data]# wget https://download.owncloud.org/community/owncloud-9.1.0.tar.bz2</div><div class=\"line\">--2016-07-27 17:21:11--  https://download.owncloud.org/community/owncloud-9.1.0.tar.bz2</div><div class=\"line\">Resolving download.owncloud.org (download.owncloud.org)... 188.40.127.122, 148.251.209.106, 188.40.68.177, ...</div><div class=\"line\">Connecting to download.owncloud.org (download.owncloud.org)|188.40.127.122|:443... connected.</div><div class=\"line\">HTTP request sent, awaiting response... 200 OK</div><div class=\"line\">Length: 29055490 (28M) [application/x-bzip2]</div><div class=\"line\">Saving to: wncloud-9.1.0.tar.bz2</div><div class=\"line\">2016-07-27 17:44:55 (21.0 KB/s) - wncloud-9.1.0.tar.bz2saved [29055490/29055490]</div></pre></td></tr></table></figure></p>\n<p>配置数据文件夹:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#解压:</div><div class=\"line\">tar -xvf /data/owncloud-9.1.0.tar.bz2 -C /data/codebase/</div><div class=\"line\">#进入owncloud文件</div><div class=\"line\">cd /data/codebase/owncloud</div><div class=\"line\">#owncloud需要对apps、data、config目录有write的权限，要是没有这三个文件需要手动创建</div><div class=\"line\">#由于wget下来的版本没有data，那么就来mkdir</div><div class=\"line\">mkdir data</div><div class=\"line\">#分别给予write权限</div><div class=\"line\">sudo chown -R www: www data</div><div class=\"line\">sudo chown -R  www: www config</div><div class=\"line\">sudo chown -R  www: www apps</div></pre></td></tr></table></figure></p>\n<p> nginx配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\">upstream php-handler &#123;</div><div class=\"line\">    server 127.0.0.1:9000;</div><div class=\"line\">    #server unix:/var/run/php5-fpm.sock;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">    listen 80;</div><div class=\"line\">    server_name cloud.miaoxiaohei.com;</div><div class=\"line\">    # enforce https</div><div class=\"line\">    return 301 https://$server_name$request_uri;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">    listen 443 ssl;</div><div class=\"line\">    server_name cloud.miaoxiaohei.com;</div><div class=\"line\"></div><div class=\"line\">    ssl_certificate /data/ssl/cloud.miaoxiaohei.com.crt;</div><div class=\"line\">    ssl_certificate_key /data/ssl/cloud.miaoxiaohei.com.key;</div><div class=\"line\"></div><div class=\"line\">    # Add headers to serve security related headers</div><div class=\"line\">    # Before enabling Strict-Transport-Security headers please read into this topic first.</div><div class=\"line\">    # add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot;;</div><div class=\"line\">    add_header X-Content-Type-Options nosniff;</div><div class=\"line\">    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</div><div class=\"line\">    add_header X-XSS-Protection &quot;1; mode=block&quot;;</div><div class=\"line\">    add_header X-Robots-Tag none;</div><div class=\"line\">    add_header X-Download-Options noopen;</div><div class=\"line\">    add_header X-Permitted-Cross-Domain-Policies none;</div><div class=\"line\"></div><div class=\"line\">    # Path to the root of your installation</div><div class=\"line\">    root /data/codebase/owncloud/;</div><div class=\"line\"></div><div class=\"line\">    location = /robots.txt &#123;</div><div class=\"line\">        allow all;</div><div class=\"line\">        log_not_found off;</div><div class=\"line\">        access_log off;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    # The following 2 rules are only needed for the user_webfinger app.</div><div class=\"line\">    # Uncomment it if you&apos;re planning to use this app.</div><div class=\"line\">    #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;</div><div class=\"line\">    #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;</div><div class=\"line\"></div><div class=\"line\">    location = /.well-known/carddav &#123;</div><div class=\"line\">        return 301 $scheme://$host/remote.php/dav;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location = /.well-known/caldav &#123;</div><div class=\"line\">        return 301 $scheme://$host/remote.php/dav;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location /.well-known/acme-challenge &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">    # set max upload size</div><div class=\"line\">    client_max_body_size 512M;</div><div class=\"line\">    fastcgi_buffers 64 4K;</div><div class=\"line\"></div><div class=\"line\">    # Disable gzip to avoid the removal of the ETag header</div><div class=\"line\">    gzip off;</div><div class=\"line\"></div><div class=\"line\">    # Uncomment if your server is build with the ngx_pagespeed module</div><div class=\"line\">    # This module is currently not supported.</div><div class=\"line\">    # pagespeed off;</div><div class=\"line\"></div><div class=\"line\">    error_page 403 /core/templates/403.php;</div><div class=\"line\">    error_page 404 /core/templates/404.php;</div><div class=\"line\"></div><div class=\"line\">    location / &#123;</div><div class=\"line\">        rewrite ^ /index.php$uri;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ &#123;</div><div class=\"line\">        return 404;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) &#123;</div><div class=\"line\">        return 404;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\\.php(?:$|/) &#123;</div><div class=\"line\">        fastcgi_split_path_info ^(.+\\.php)(/.*)$;</div><div class=\"line\">        include fastcgi_params;</div><div class=\"line\">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class=\"line\">        fastcgi_param PATH_INFO $fastcgi_path_info;</div><div class=\"line\">        fastcgi_param HTTPS on;</div><div class=\"line\">        fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice</div><div class=\"line\">        fastcgi_param front_controller_active true;</div><div class=\"line\">        fastcgi_pass php-handler;</div><div class=\"line\">        fastcgi_intercept_errors on;</div><div class=\"line\">        fastcgi_request_buffering off;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~ ^/(?:updater|ocs-provider)(?:$|/) &#123;</div><div class=\"line\">        try_files $uri/ =404;</div><div class=\"line\">        index index.php;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    # Adding the cache control header for js and css files</div><div class=\"line\">    # Make sure it is BELOW the PHP block</div><div class=\"line\">    location ~* \\.(?:css|js)$ &#123;</div><div class=\"line\">        try_files $uri /index.php$uri$is_args$args;</div><div class=\"line\">        add_header Cache-Control &quot;public, max-age=7200&quot;;</div><div class=\"line\">        # Add headers to serve security related headers (It is intended to have those duplicated to the ones above)</div><div class=\"line\">        # Before enabling Strict-Transport-Security headers please read into this topic first.</div><div class=\"line\">        # add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload;&quot;;</div><div class=\"line\">        add_header X-Content-Type-Options nosniff;</div><div class=\"line\">        add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</div><div class=\"line\">        add_header X-XSS-Protection &quot;1; mode=block&quot;;</div><div class=\"line\">        add_header X-Robots-Tag none;</div><div class=\"line\">        add_header X-Download-Options noopen;</div><div class=\"line\">        add_header X-Permitted-Cross-Domain-Policies none;</div><div class=\"line\">        # Optional: Don&apos;t log access to assets</div><div class=\"line\">        access_log off;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~* \\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ &#123;</div><div class=\"line\">        try_files $uri /index.php$uri$is_args$args;</div><div class=\"line\">        # Optional: Don&apos;t log access to other assets</div><div class=\"line\">        access_log off;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>同时记得开发80和443端口:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#80端口 http</div><div class=\"line\">iptables -A INPUT -p tcp -m tcp --sport 80 -j ACCEPT</div><div class=\"line\">iptables -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT </div><div class=\"line\">#443端口 https,ssl</div><div class=\"line\">iptables -A INPUT -p tcp -m tcp --sport 443 -j ACCEPT</div><div class=\"line\">iptables -A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT</div></pre></td></tr></table></figure></p>\n<p>当然,如果不想那么烦,可以 将防火墙关闭(但这样很危险)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl stop  iptables.service</div></pre></td></tr></table></figure></p>\n<p>在浏览器打开地址安装:</p>\n<p><img src=\"/images/owncloud_install.png\" alt=\"安装\"></p>\n<p>数据选择有两种,SQLite||Mysql,其中sqlite比较省服务器资源,但对于访问量比较多的情况下,建议还是使用mysql咯</p>\n"},{"title":"使用seafile搭建云盘","date":"2016-07-27T03:25:58.000Z","_content":"","source":"_posts/使用seafile搭建云盘.md","raw":"---\ntitle: 使用seafile搭建云盘\ndate: 2016-07-27 11:25:58\ntags:\n---\n","slug":"使用seafile搭建云盘","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeieo70022znz47c3omz7z","content":"","excerpt":"","more":""},{"title":"字符编码总结","date":"2016-08-15T12:16:00.000Z","_content":"最近工作中,经常遇到字符编码的问题,所有花了些时间好好的学习了字符编码的知识点,现在做下总结\n字符编码:\n所谓字符编码，就是定义了一套规则，指定了计算机显示的符号和数值之间的对应关系.\n计算机中存放的0和1的二进制值,8个位为1字节,常用16进制表示,故要将这数值转为对应的字符,就要一套字符编码规则,而且这套规则要被所有的计算业界所认可.\n\n字符编码标准:\n\n既然需要字符编码,那编码的规则谁来定义,如果每个厂商都有自己的一套规则,会导致计算机之间的交流非常的混乱,所有需要统一的字符编码标准.\n\n最初得到大家认可的 字符编制有:\nEBCDIC : 扩充的二进制编码的十进制交换码（Extended Binary Coded Decimal Interchange Code),\nIBM于1963年－1964年间推出的字符编码表，根据早期打孔机式的二进化十进数（BCD，Bindary Coded Decimal）排列而成。是IBM迷尔级以上电脑的标准码。\n\n它的缺点是：英文字母不是连续地排列，中间出现多次断续，为撰写程序的人带来了一些困难。(维基百科)\n\n由于EBDIC是IBM推出的,所以在当时得到了大家的认可(谁当时IBM是行业龙头老大呢),但现在已经很少有人使用了\n更多请参考维基百科\nhttps://zh.wikipedia.org/wiki/EBCDIC\n\nASCII: 美国信息交换标准代码(American Standard Code for Information Interchange),\n是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本EASCII则可以部分支持其他西欧语言，并等同于国际标准ISO/IEC 646。\nASCII第一次以规范标准的型态发表是在1967年，最后一次更新则是在1986年，至今为止共定义了128个字符；其中33个字符无法显示,95个可显示的字符.\n\nASCII在现在广泛使用,可大家所认可(计算机是美国人所发明和使用的，所以计算机的早期，所设计编码标准，自然需要先为英文字符来设计和考虑，所以此最早的字符编码ASCII可以显示常见的英文字符)\n\n更多请参考维基百科\nhttps://zh.wikipedia.org/wiki/ASCII\n\nASCII的字符编码规则:\n由于最初只是为英文字母所考虑的，而英文只有26个字母，以及加上其他大小写字母，常见的字符，常见数字等，所有的加起来，也就几十个，而一个字节8位中前7位的理论上可以表示27=128个字符，所以对于设计出来的编码规则来说，只需要用一个字节来表示，就足够了。\n\n1)7位的字符编码，即每个字节的最高位第8位为0，其余7位的某个值对应着某个字符。\n\n1)ASCII字符集共27=128个字符 = 33个控制字符 + 95个可见字符。\n\nASCII的字符编码是美国自己定义的标准，而其对应的国际标准叫做ISO/IEC 646。\n\nISO/IEC是参考了多个国家的字符编码标准，其中主要是美国ASCII标准，然后制定出来的7位的国际字符编码标准。可以简单看成美国的国家标准ASCII和国际标准ISO/IEC 646，两者是是等价的，\n\n\nEASCII和ISO 8859:\n\n西方国家大多是使用拉丁字母,所以只要拓展ASCII标志就可以即兼容旧的ASCII的编码，又支持欧洲多个国家的那些衍生拉丁字母\n\n这样的标准有两个，一个是EASCII(Extended ASCII，延伸美国标准信息交换码)编码标准，一个是国际标准ISO 8859字符编码标准。\n\n\nEASCII码由7位扩充为8位而成。EASCII的内码是由0到255共有256个字符组成。EASCII码比ASCII码扩充出来的符号包括表格符号、计算符号、希腊字母和特殊的拉丁符号，这样就可以实现支持那么多欧洲的衍生拉丁字母了\n\nISO/IEC 8859，是在ASCII中的普通的可见字符(0x20-0x7E)的基础上，利用了ASCII的7位编码所没有用到的第8位，这样就编码范围就从原先ASCII的0x00-0x7F多扩展出了0x80-0xFF，其中的0xA0-0xFF部分，被ISO/IEC 8859编码所用到。有别于ASCII的单个独立的编码规则，ISO/IEC 8859是一组编码规则的总称,其下包含了共15个字符集，即ISO/IEC 8859-n,其中n=1,...,11,13,...,16\n\n之所以用15字符集表示,是因为欧洲国家的不同语系的特殊字符数多,无法用8位来完全标志,所有分为15个字符集,各个国家可以根据自己过来的需要来选择\n缺点是ISO/IEC 8859的某一个单独的字符集来表示出来，即无法在同一个文档中支持显示不同语系的不同的字符。\n\nISO/IEC 8859编码标准中的15种字符集\n\nISO/IEC 8859-n\t\t英文别名\t\t\t\t\t中文解释\nISO/IEC 8859 -1\t\tLatin-1\t\t\t\t\t西欧语言\nISO/IEC 8859 -2\t\tLatin-2\t\t\t\t\t中欧语言\nISO/IEC 8859 -3\t\tLatin-3\t\t\t\t\t南欧语言。世界语也可用此字符集显示。\nISO/IEC 8859 -4\t\tLatin-4\t\t\t\t\t北欧语言\nISO/IEC 8859 -5\t\tCyrillic\t\t\t\t斯拉夫语言\nISO/IEC 8859 -6\t\tArabic\t\t\t\t\t阿拉伯语\nISO/IEC 8859 -7\t\tGreek\t\t\t\t\t希腊语\nISO/IEC 8859 -8\t\tHebrew\t\t\t\t\t希伯来语（视觉顺序）；ISO 8859-8-I是 希伯来语（逻辑顺序）\nISO/IEC 8859 -9\t\tLatin-5 或 Turkish\t\t它把Latin-1的冰岛语字母换走，加入土耳其语字母\nISO/IEC 8859 -10\tLatin-6 或 Nordic\t\t北日耳曼语支，用来代替Latin-4\nISO/IEC 8859 -11\tThai\t\t\t\t\t从泰国的 TIS620 标准字集演化而来\nISO/IEC 8859 -13\tLatin-7 或 Baltic Rim\t波罗的语族\nISO/IEC 8859 -14\tLatin-8 或 Celtic\t\t凯尔特语族\nISO/IEC 8859 -15\tLatin-9\t\t\t\t\t西欧语言，加入Latin-1欠缺的芬兰语字母和大写法语重音字母，以及欧元（€）符号。\nISO/IEC 8859 -16\tLatin-10\t\t\t\t东南欧语言。主要供罗马尼亚语使用，并加入欧元符号。\n\n\nISO 10646:\n\n国际标准组织ISO，定义了对应的编码标准ISO/IEC 10646，简称为ISO 10646，此标准所定义的字符集，称作为通用字符集（Universal Character Set，UCS）。\n通用字符集包括了其他所有字符集。它保证了与其他字符集的双向兼容，即，如果你将任何文本字符串翻译到UCS格式，然后再翻译回原编码，你不会丢失任何信息。\n\nUCS包含了已知语言的所有字符。除了拉丁语、希腊语、斯拉夫语、希伯来语、阿拉伯语、亚美尼亚语、格鲁吉亚语，还包括中文、日文、韩文这样的方块文字，UCS还包括大量的图形、印刷、数学、科学符号。\n并不是所有的系统都需要支持像组合字符这样的的先进机制。因此ISO 10646指定了如下三种实现级别：\n\n级别1：不支持组合字符和谚文字母字符。\n级别2：类似于级别1，但在某些文字中，允许一列固定的组合字符，因为如果没有最起码的几个组合字符，UCS就不能完整地表达这些语言。\n级别3：支持所有的通用字符集字符，如，可以在任意一个字符上加上一个箭头或一个鼻音化符号.\n\nUnicode:\n\n由来:\n为解决传统的字符编码方案的局限,奥多比系统、苹果公司、惠普、IBM、微软、施乐等公司组建统一码联盟,于1991年首次发布了The Unicode Standard。Unicode的开发结合了国际标准化组织所制定的ISO/IEC 10646，即通用字符集.\n\nUnicode和ISO 10646的关系:\n\n历史上存在两个独立的尝试创立单一字符集的组织，即\n\n国际标准化组织（ISO）于1984年创建的ISO/IEC\nJTC1/SC2/WG2，其含义是International Organization for Standardization / International Electrotechnical Commission, Joint Technical Committee #1 [Information Technology], Subcommittee #2 [Coded Character Sets], Working Group #2 [Multi-octet codes]). ISO 10646表示这是ISO 646的扩展。\n\n由Xerox、Apple等软件制造商于1988年组成的统一码联盟。前者开发的ISO/IEC 10646项目，后者开发的统一码项目。因此最初制定了不同的标准。\n1991年前后，两个项目的参与者都认识到，世界不需要两个不兼容的字符集。于是，它们开始合并双方的工作成果，并为创立一个单一编码表而协同工作。1991年，不包含CJK统一汉字集的Unicode 1.0发布。随后，CJK统一汉字集的制定于1993年完成，发布了ISO 10646-1:1993，即Unicode 1.1。\n\n从Unicode 2.0开始，Unicode采用了与ISO 10646-1相同的字库和字码；ISO也承诺，ISO 10646将不会替超出U+10FFFF的UCS-4编码赋值，以使得两者保持一致。两个项目仍都独立存在，并独立地公布各自的标准。但统一码联盟和ISO/IEC JTC1/SC2都同意保持两者标准的码表兼容，并紧密地共同调整任何未来的扩展。在发布的时候，Unicode一般都会采用有关字码最常见的字体，但ISO 10646一般都尽可能采用Century字体。\n\n下面是Unicode与ISO 10646的版本对应表\n\nISO/IEC 10646-1:1993 = Unicode 1.1 = GB 13000.1-93《信息技术　通用多八位编码字符集（UCS）第一部分：体系结构与基本多文种平面》。\nISO/IEC 10646-1:1993 plus Amendments 5 to 7 = Unicode 2.0\nISO/IEC 10646-1:1993 plus Amendments 5 to 7 = Unicode 2.1 excluding Euro Sign and Object Replacement Character, which are included in Amendment 18\nISO/IEC 10646-1:2000 = Unicode 3.0\nISO/IEC 10646-1:2000 and ISO/IEC 10646-2:2001 = Unicode 3.1\nISO/IEC 10646-1:2000 plus Amendment 1 and ISO/IEC 10646-2:2001 = Unicode 3.2\nISO/IEC 10646:2003 = Unicode 4.0 = GB 13000-2010\nISO/IEC 10646:2003 plus Amendment 1 = Unicode 4.1\nISO/IEC 10646:2003 plus Amendments 1 to 2 = Unicode 5.0 excluding Devanagari Letters GGA, JJA, DDDA and BBA, which are included in Amendment 3\nISO/IEC 10646:2003 plus Amendments 1 to 4 = Unicode 5.1\nISO/IEC 10646:2003 plus Amendments 1 to 6 = Unicode 5.2\nISO/IEC 10646:2003 plus Amendments 1 to 8 = ISO/IEC 10646:2011 = Unicode 6.0 excluding Indian Rupee Sign\nISO/IEC 10646:2012 = Unicode 6.1\nISO/IEC 10646:2012 = Unicode 6.2 excluding Turkish Lira Sign, which is included in Amendment 1\nISO/IEC 10646:2012 = Unicode 6.3 excluding Turkish Lira Sign, which is included in Amendment 1, and five bidirectional control characters (Arabic Letter Mark, Left-To-Right Isolate, Right-To-Left Isolate, First Strong Isolate, Pop Directional Isolate), which are included in Amendment 2\nISO/IEC 10646:2012 plus Amendments 1 and 2 = Unicode 7.0 excluding the Ruble sign\nISO/IEC 10646:2014 plus Amendment 1 = Unicode 8.0[1]\n\nUnicode和ISO 10646的区别:\nISO 10646中定义了编码规则，定义了哪些值对应了哪些字符，而Unicode不仅定义了这些编码规则，还定义了其他一些关于文字处理的细节算法等内容。\n\nUnicode = ISO 10646的编码规则 + 某些语言的细节处理算法\n\nUnicode = ISO 10646编码标准 = 标准所制定的UCS字符集\n两者部分样例字形有显著的区别。ISO/IEC 10646-1标准同样使用四种不同的风格变体来显示表意文字如中文、日文、韩文（即CJK），但Unicode 2.0的表里只有中文的变体。甚至存在“Unicode对日本用户来说不可接受”的不实传说。\n\n更多请看维基百科\nhttps://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%AD%97%E7%AC%A6%E9%9B%86\n\n统一码的编码方式与ISO 10646的通用字符集概念相对应。目前实际应用的统一码版本对应于UCS-2，使用16位的编码空间。也就是每个字符占用2个字节。这样理论上一共最多可以表示216（即65536）个字符。基本满足各种语言的使用。实际上当前版本的统一码并未完全使用这16位编码，而是保留了大量空间以作为特殊使用或将来扩展。\n\n上述16位统一码字符构成基本多文种平面。最新（但未实际广泛使用）的统一码版本定义了16个辅助平面，两者合起来至少需要占据21位的编码空间，比3字节略少。但事实上辅助平面字符仍然占用4字节编码空间，与UCS-4保持一致。未来版本会扩充到ISO 10646-1实现级别3，即涵盖UCS-4的所有字符。UCS-4是一个更大的尚未填充完全的31位字符集，加上恒为0的首位，共需占据32位，即4字节。理论上最多能表示231个字符，完全可以涵盖一切语言所用的符号。\n\n基本多文种平面的字符的编码为U+hhhh，其中每个h代表一个十六进制数字，与UCS-2编码完全相同。而其对应的4字节UCS-4编码后两个字节一致，前两个字节则所有位均为0\n\n\nUTF-8:\nUTF-8是Unicode的实现方式之一,UTF-8就是在互联网上使用最广的一种Unicode的实现方式\n\nTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。\n\nUTF-8的编码规则很简单，只有二条：\n\n对于单字节的符号，字节的第一位设为0，后面7位为这个符号的Unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的\n对于n字节的符号（n>1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的Unicode码\n下表总结了编码规则，字母x表示可用编码的位。\n\nUnicode与UTF-8之间的编码映射关系\n\nUnicode符号范围(十六进制)\tUTF-8编码方式（二进制）\n0000 0000-0000 007F\t0xxxxxxx\n0000 0080-0000 07FF\t110xxxxx 10xxxxxx\n0000 0800-0000 FFFF\t1110xxxx 10xxxxxx 10xxxxxx\n0001 0000-0010 FFFF\t11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\n\nUTF-16:\nUTF-16是Unicode字符编码五层次模型的第三层：字符编码表（Character Encoding Form，也称为\"storage format\"）的一种实现方式。即把Unicode字符集的抽象码位映射为16位长的整数（即码元）的序列，用于数据存储或传递。Unicode字符的码位，需要1个或者2个16位长的码元来表示，因此这是一个变长表示。\nUTF-16编码以16位无符号整数为单位。注意是16位为一个单位，不表示一个字符就只有16位。现在机器上的unicode编\n\n码一般指的就是UTF-16。绝大部分2个字节就够了，但是不能绝对的说所有字符都是2个字节。这个要看字符的unicode\n\n编码处于什么范围而定，有可能是2个字节，也可能是4个字节\nUTF-16比起UTF-8，好处在于大部分字符都以固定长度的字节（2字节）存储，但UTF-16却无法兼容于ASCII编码。\n\n\n\n编码规则:\n从U+0000至U+D7FF以及从U+E000至U+FFFF的码位\n第一个Unicode平面（码位从U+0000至U+FFFF）包含了最常用的字符。该平面被称为基本多语言平面，缩写为BMP（Basic Multilingual Plane, BMP）。UTF-16与UCS-2编码这个范围内的码位为16比特长的单个码元，数值等价于对应的码位. BMP中的这些码位是仅有的可以在UCS-2中表示的码位。\n\n从U+10000到U+10FFFF的码位\n辅助平面（Supplementary Planes）中的码位，在UTF-16中被编码为一对16比特长的码元（即32bit,4Bytes），称作代理对（surrogate pair），具体方法是：\n码位减去0x10000,得到的值的范围为20比特长的0..0xFFFFF.\n高位的10比特的值（值的范围为0..0x3FF）被加上0xD800得到第一个码元或称作高位代理（high surrogate），值的范围是0xD800..0xDBFF.由于高位代理比低位代理的值要小，所以为了避免混淆使用，Unicode标准现在称高位代理为前导代理（lead surrogates）。\n低位的10比特的值（值的范围也是0..0x3FF）被加上0xDC00得到第二个码元或称作低位代理（low surrogate），现在值的范围是0xDC00..0xDFFF.由于低位代理比高位代理的值要大，所以为了避免混淆使用，Unicode标准现在称低位代理为后尾代理（trail surrogates）。\n例如U+10437编码（𐐷）:\n\n0x10437减去0x10000,结果为0x00437,二进制为0000 0000 0100 0011 0111。\n分区它的上10位值和下10位值（使用二进制）:0000000001 and 0000110111。\n添加0xD800到上值，以形成高位：0xD800 + 0x0001 = 0xD801。\n添加0xDC00到下值，以形成低位：0xDC00 + 0x0037 = 0xDC37。\n\n字符\t\t\t普通二进制\t\t\t\t\tUTF-16二进制\t\t\t\t\t\t\t\tUTF-16十六进制字节字符代码\tUTF-16BE十六进制字节\tUTF-16LE 十六进制字节\n$\tU+0024\t0000 0000 0010 0100\t\t\t0000 0000 0010 0100\t\t\t\t\t\t0024\t\t\t   \t\t00 24\t\t\t\t24 00\n€\tU+20AC\t0010 0000 1010 1100\t\t\t0010 0000 1010 1100\t\t\t\t\t\t20AC\t\t\t   \t\t20 AC\t\t\t\tAC 20\n𐐷\tU+10437\t0001 0000 0100 0011 0111 \t1101 1000 0000 0001 1101 1100 0011 0111\tD801 DC37\t\t   \t\tD8 01 DC 37\t\t\t01 D8 37 DC\n𤭢\tU+24B62\t0010 0100 1011 0110 0010 \t1101 1000 0101 0010 1101 1111 0110 0010\tD852 DF62\t\t   \t\tD8 52 DF 62\t\t\t52 D8 62 DF\n\n\nUTF-16的大尾序和小尾序存储形式都在用。一般来说，以Macintosh制作或存储的文字使用大尾序格式，以Microsoft或Linux制作或存储的文字使用小尾序格式。\n\n为了弄清楚UTF-16文件的大小尾序，在UTF-16文件的开首，都会放置一个U+FEFF字符作为Byte Order Mark（UTF-16LE以FF FE代表，UTF-16BE以FE FF代表\n\n\nBOM:\nBOM是一个Unicode字符。\n\nBOM用于指示文件/字符流的大小端（字节序）。\n\n不同编码所对应的BOM不同。\n\n\n编码类型\t\t\tBOM值(16进制)\t\tBOM值(10进制)\nUTF-8\t\t\tEF BB BF\t\t\t239 187 191\nUTF-16 (BE)\t\tFE FF\t\t\t\t254 255\nUTF-16 (LE)\t\tFF FE\t\t\t\t255 254\nUTF-32 (BE)\t\t00 00 FE FF\t\t\t0 0 254 255\nUTF-32 (LE)\t\tFF FE 00 00\t\t\t255 254 0 0\nUTF-7\t\t\t2B 2F 76 38\t\t\t43 47 118 56\n\t\t\t\t2B 2F 76 39\t\t\t43 47 118 57\n\t\t\t\t2B 2F 76 2B\t\t\t43 47 118 43\n\t\t\t\t2B 2F 76 2F\t\t\t43 47 118 47\nUTF-1\t\t\tF7 64 4C\t\t\t247 100 76\nUTF-EBCDIC\t\tDD 73 66 73\t\t\t221 115 102 115\nSCSU\t\t\t0E FE FF\t\t\t14 254 255\nBOCU-1\t\t\tFB EE 28\t\t\t251 238 40\nGB-18030\t\t84 31 95 33\t\t\t132 49 149 51\n\n\n中文字符编码标准:\n1)GB2312\n1980年，中国制定了GB2312-80，一共收录了 7445 个字符，包括 6763 个汉字和 682 个其它符号。GB2312-80，简称为GB2312。\n2)GB13000\n1993年，国际标准Unicode 1.1版本推出，收录中国大陆、台湾、日本及韩国通用字符集的汉字，总共有20,902个。中国订定了等同于Unicode 1.1版本的“GB 13000.1-93”，简称为GB13000。\nGB13000，显然包含的GB2312已有的文字和其他很多为包含的文字\n3)GBK\n微软，对GB2312-80的扩展，即利用GB 2312-80未使用的编码空间，收录所有的GB 13000.1-93和Unicode 1.1之中的汉字全部字符，制定了GBK编码。\n\nGBK 收录了 21886 个符号，它分为汉字区和图形符号区。汉字区包括 21003 个字符。\n\nGBK 作为对 GB2312 的扩展，在现在的 Windows 系统中仍然使用代码页 CP936 表示，但是同样的 936 的代码页跟一开始的 936 的代码页只支持 GB2312 编码不同，现在的 936 代码页支持 GBK 的编码，GBK 同时也向下兼容GB2312 编码。\n\n所以，技术编码上，GBK兼容旧的GB2312，但是编码方式和GB13000不同，不兼容GB13000，但是所包含文字上，算是和GB13000相同。\n\n4)GB18030\nGBK自身并非国家标准，只是曾由国家技术监督局标准化司、电子工业部科技与质量监督司公布为“技术规范指导性文件”。\n\n原始GB13000一直未被业界采用，2000年，国家出了标准GB18030-2000，简称GB18030，技术上兼容GBK而非GB13000，取代了 GBK1.0，成了正式的国家标准。\n\n该标准收录了 27484 个汉字，同时还收录了藏文、蒙文、维吾尔文等主要的少数民族文字。\n\n现在的PC平台必须支持 GB18030 ，对嵌入式产品暂不作要求。所以手机、MP3 一般只支持 GB2312。\n\nGB18030 在 Windows 中的代码页是 CP54936\n\n\n各种中文字符编码标准的关系:\n\n（ 中国大陆的标准）GB 13000.1-93 =（国际标准）Unicode 1.1\n\n（中国大陆标准）GB2312-80 = 简称GB2312 = Windows系统中的原先的CP936\n\n（微软制定的）GBK = （微软在编码方面）对 GB2312 的扩展 = （微软在所包含字符方面上包含了）GB 13000.1-93 + 其他部分汉字+ 台湾和香港的繁体 + 日语 + 朝鲜汉字 = Unicode 1.1 + 其他部分汉字+ 台湾和香港的繁体 + 日语 + 朝鲜汉字\n\n对于GBK：\n\n在编码方面：向下兼容GB2312，但是和GB 13000不同\n在内容方面：等价于GB13000\n微软中现在的新的CP936\n\n= GBK\n\n=兼容旧的GB2312\n\n\n在技术编码方面上，演化顺序为：\n\nASCII ⇒ GB2312 ⇒ GBK ⇒ GB18030\n\n后者对之前的，都是支持之前的编码，即向下兼容，即同一个字符，在这些编码中，都是同样的值，后面的标准，支持更多的字符。\n\n区分中文编码的方法是高字节的最高位不为 0。\n\n按照程序员的称呼，GB2312、GBK 到 GB18030 都属于双字节字符集 (DBCS)\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/字符编码总结.md","raw":"---\ntitle: 字符编码总结\ndate: 2016-08-15 20:16:00\ntags:\n---\n最近工作中,经常遇到字符编码的问题,所有花了些时间好好的学习了字符编码的知识点,现在做下总结\n字符编码:\n所谓字符编码，就是定义了一套规则，指定了计算机显示的符号和数值之间的对应关系.\n计算机中存放的0和1的二进制值,8个位为1字节,常用16进制表示,故要将这数值转为对应的字符,就要一套字符编码规则,而且这套规则要被所有的计算业界所认可.\n\n字符编码标准:\n\n既然需要字符编码,那编码的规则谁来定义,如果每个厂商都有自己的一套规则,会导致计算机之间的交流非常的混乱,所有需要统一的字符编码标准.\n\n最初得到大家认可的 字符编制有:\nEBCDIC : 扩充的二进制编码的十进制交换码（Extended Binary Coded Decimal Interchange Code),\nIBM于1963年－1964年间推出的字符编码表，根据早期打孔机式的二进化十进数（BCD，Bindary Coded Decimal）排列而成。是IBM迷尔级以上电脑的标准码。\n\n它的缺点是：英文字母不是连续地排列，中间出现多次断续，为撰写程序的人带来了一些困难。(维基百科)\n\n由于EBDIC是IBM推出的,所以在当时得到了大家的认可(谁当时IBM是行业龙头老大呢),但现在已经很少有人使用了\n更多请参考维基百科\nhttps://zh.wikipedia.org/wiki/EBCDIC\n\nASCII: 美国信息交换标准代码(American Standard Code for Information Interchange),\n是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本EASCII则可以部分支持其他西欧语言，并等同于国际标准ISO/IEC 646。\nASCII第一次以规范标准的型态发表是在1967年，最后一次更新则是在1986年，至今为止共定义了128个字符；其中33个字符无法显示,95个可显示的字符.\n\nASCII在现在广泛使用,可大家所认可(计算机是美国人所发明和使用的，所以计算机的早期，所设计编码标准，自然需要先为英文字符来设计和考虑，所以此最早的字符编码ASCII可以显示常见的英文字符)\n\n更多请参考维基百科\nhttps://zh.wikipedia.org/wiki/ASCII\n\nASCII的字符编码规则:\n由于最初只是为英文字母所考虑的，而英文只有26个字母，以及加上其他大小写字母，常见的字符，常见数字等，所有的加起来，也就几十个，而一个字节8位中前7位的理论上可以表示27=128个字符，所以对于设计出来的编码规则来说，只需要用一个字节来表示，就足够了。\n\n1)7位的字符编码，即每个字节的最高位第8位为0，其余7位的某个值对应着某个字符。\n\n1)ASCII字符集共27=128个字符 = 33个控制字符 + 95个可见字符。\n\nASCII的字符编码是美国自己定义的标准，而其对应的国际标准叫做ISO/IEC 646。\n\nISO/IEC是参考了多个国家的字符编码标准，其中主要是美国ASCII标准，然后制定出来的7位的国际字符编码标准。可以简单看成美国的国家标准ASCII和国际标准ISO/IEC 646，两者是是等价的，\n\n\nEASCII和ISO 8859:\n\n西方国家大多是使用拉丁字母,所以只要拓展ASCII标志就可以即兼容旧的ASCII的编码，又支持欧洲多个国家的那些衍生拉丁字母\n\n这样的标准有两个，一个是EASCII(Extended ASCII，延伸美国标准信息交换码)编码标准，一个是国际标准ISO 8859字符编码标准。\n\n\nEASCII码由7位扩充为8位而成。EASCII的内码是由0到255共有256个字符组成。EASCII码比ASCII码扩充出来的符号包括表格符号、计算符号、希腊字母和特殊的拉丁符号，这样就可以实现支持那么多欧洲的衍生拉丁字母了\n\nISO/IEC 8859，是在ASCII中的普通的可见字符(0x20-0x7E)的基础上，利用了ASCII的7位编码所没有用到的第8位，这样就编码范围就从原先ASCII的0x00-0x7F多扩展出了0x80-0xFF，其中的0xA0-0xFF部分，被ISO/IEC 8859编码所用到。有别于ASCII的单个独立的编码规则，ISO/IEC 8859是一组编码规则的总称,其下包含了共15个字符集，即ISO/IEC 8859-n,其中n=1,...,11,13,...,16\n\n之所以用15字符集表示,是因为欧洲国家的不同语系的特殊字符数多,无法用8位来完全标志,所有分为15个字符集,各个国家可以根据自己过来的需要来选择\n缺点是ISO/IEC 8859的某一个单独的字符集来表示出来，即无法在同一个文档中支持显示不同语系的不同的字符。\n\nISO/IEC 8859编码标准中的15种字符集\n\nISO/IEC 8859-n\t\t英文别名\t\t\t\t\t中文解释\nISO/IEC 8859 -1\t\tLatin-1\t\t\t\t\t西欧语言\nISO/IEC 8859 -2\t\tLatin-2\t\t\t\t\t中欧语言\nISO/IEC 8859 -3\t\tLatin-3\t\t\t\t\t南欧语言。世界语也可用此字符集显示。\nISO/IEC 8859 -4\t\tLatin-4\t\t\t\t\t北欧语言\nISO/IEC 8859 -5\t\tCyrillic\t\t\t\t斯拉夫语言\nISO/IEC 8859 -6\t\tArabic\t\t\t\t\t阿拉伯语\nISO/IEC 8859 -7\t\tGreek\t\t\t\t\t希腊语\nISO/IEC 8859 -8\t\tHebrew\t\t\t\t\t希伯来语（视觉顺序）；ISO 8859-8-I是 希伯来语（逻辑顺序）\nISO/IEC 8859 -9\t\tLatin-5 或 Turkish\t\t它把Latin-1的冰岛语字母换走，加入土耳其语字母\nISO/IEC 8859 -10\tLatin-6 或 Nordic\t\t北日耳曼语支，用来代替Latin-4\nISO/IEC 8859 -11\tThai\t\t\t\t\t从泰国的 TIS620 标准字集演化而来\nISO/IEC 8859 -13\tLatin-7 或 Baltic Rim\t波罗的语族\nISO/IEC 8859 -14\tLatin-8 或 Celtic\t\t凯尔特语族\nISO/IEC 8859 -15\tLatin-9\t\t\t\t\t西欧语言，加入Latin-1欠缺的芬兰语字母和大写法语重音字母，以及欧元（€）符号。\nISO/IEC 8859 -16\tLatin-10\t\t\t\t东南欧语言。主要供罗马尼亚语使用，并加入欧元符号。\n\n\nISO 10646:\n\n国际标准组织ISO，定义了对应的编码标准ISO/IEC 10646，简称为ISO 10646，此标准所定义的字符集，称作为通用字符集（Universal Character Set，UCS）。\n通用字符集包括了其他所有字符集。它保证了与其他字符集的双向兼容，即，如果你将任何文本字符串翻译到UCS格式，然后再翻译回原编码，你不会丢失任何信息。\n\nUCS包含了已知语言的所有字符。除了拉丁语、希腊语、斯拉夫语、希伯来语、阿拉伯语、亚美尼亚语、格鲁吉亚语，还包括中文、日文、韩文这样的方块文字，UCS还包括大量的图形、印刷、数学、科学符号。\n并不是所有的系统都需要支持像组合字符这样的的先进机制。因此ISO 10646指定了如下三种实现级别：\n\n级别1：不支持组合字符和谚文字母字符。\n级别2：类似于级别1，但在某些文字中，允许一列固定的组合字符，因为如果没有最起码的几个组合字符，UCS就不能完整地表达这些语言。\n级别3：支持所有的通用字符集字符，如，可以在任意一个字符上加上一个箭头或一个鼻音化符号.\n\nUnicode:\n\n由来:\n为解决传统的字符编码方案的局限,奥多比系统、苹果公司、惠普、IBM、微软、施乐等公司组建统一码联盟,于1991年首次发布了The Unicode Standard。Unicode的开发结合了国际标准化组织所制定的ISO/IEC 10646，即通用字符集.\n\nUnicode和ISO 10646的关系:\n\n历史上存在两个独立的尝试创立单一字符集的组织，即\n\n国际标准化组织（ISO）于1984年创建的ISO/IEC\nJTC1/SC2/WG2，其含义是International Organization for Standardization / International Electrotechnical Commission, Joint Technical Committee #1 [Information Technology], Subcommittee #2 [Coded Character Sets], Working Group #2 [Multi-octet codes]). ISO 10646表示这是ISO 646的扩展。\n\n由Xerox、Apple等软件制造商于1988年组成的统一码联盟。前者开发的ISO/IEC 10646项目，后者开发的统一码项目。因此最初制定了不同的标准。\n1991年前后，两个项目的参与者都认识到，世界不需要两个不兼容的字符集。于是，它们开始合并双方的工作成果，并为创立一个单一编码表而协同工作。1991年，不包含CJK统一汉字集的Unicode 1.0发布。随后，CJK统一汉字集的制定于1993年完成，发布了ISO 10646-1:1993，即Unicode 1.1。\n\n从Unicode 2.0开始，Unicode采用了与ISO 10646-1相同的字库和字码；ISO也承诺，ISO 10646将不会替超出U+10FFFF的UCS-4编码赋值，以使得两者保持一致。两个项目仍都独立存在，并独立地公布各自的标准。但统一码联盟和ISO/IEC JTC1/SC2都同意保持两者标准的码表兼容，并紧密地共同调整任何未来的扩展。在发布的时候，Unicode一般都会采用有关字码最常见的字体，但ISO 10646一般都尽可能采用Century字体。\n\n下面是Unicode与ISO 10646的版本对应表\n\nISO/IEC 10646-1:1993 = Unicode 1.1 = GB 13000.1-93《信息技术　通用多八位编码字符集（UCS）第一部分：体系结构与基本多文种平面》。\nISO/IEC 10646-1:1993 plus Amendments 5 to 7 = Unicode 2.0\nISO/IEC 10646-1:1993 plus Amendments 5 to 7 = Unicode 2.1 excluding Euro Sign and Object Replacement Character, which are included in Amendment 18\nISO/IEC 10646-1:2000 = Unicode 3.0\nISO/IEC 10646-1:2000 and ISO/IEC 10646-2:2001 = Unicode 3.1\nISO/IEC 10646-1:2000 plus Amendment 1 and ISO/IEC 10646-2:2001 = Unicode 3.2\nISO/IEC 10646:2003 = Unicode 4.0 = GB 13000-2010\nISO/IEC 10646:2003 plus Amendment 1 = Unicode 4.1\nISO/IEC 10646:2003 plus Amendments 1 to 2 = Unicode 5.0 excluding Devanagari Letters GGA, JJA, DDDA and BBA, which are included in Amendment 3\nISO/IEC 10646:2003 plus Amendments 1 to 4 = Unicode 5.1\nISO/IEC 10646:2003 plus Amendments 1 to 6 = Unicode 5.2\nISO/IEC 10646:2003 plus Amendments 1 to 8 = ISO/IEC 10646:2011 = Unicode 6.0 excluding Indian Rupee Sign\nISO/IEC 10646:2012 = Unicode 6.1\nISO/IEC 10646:2012 = Unicode 6.2 excluding Turkish Lira Sign, which is included in Amendment 1\nISO/IEC 10646:2012 = Unicode 6.3 excluding Turkish Lira Sign, which is included in Amendment 1, and five bidirectional control characters (Arabic Letter Mark, Left-To-Right Isolate, Right-To-Left Isolate, First Strong Isolate, Pop Directional Isolate), which are included in Amendment 2\nISO/IEC 10646:2012 plus Amendments 1 and 2 = Unicode 7.0 excluding the Ruble sign\nISO/IEC 10646:2014 plus Amendment 1 = Unicode 8.0[1]\n\nUnicode和ISO 10646的区别:\nISO 10646中定义了编码规则，定义了哪些值对应了哪些字符，而Unicode不仅定义了这些编码规则，还定义了其他一些关于文字处理的细节算法等内容。\n\nUnicode = ISO 10646的编码规则 + 某些语言的细节处理算法\n\nUnicode = ISO 10646编码标准 = 标准所制定的UCS字符集\n两者部分样例字形有显著的区别。ISO/IEC 10646-1标准同样使用四种不同的风格变体来显示表意文字如中文、日文、韩文（即CJK），但Unicode 2.0的表里只有中文的变体。甚至存在“Unicode对日本用户来说不可接受”的不实传说。\n\n更多请看维基百科\nhttps://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%AD%97%E7%AC%A6%E9%9B%86\n\n统一码的编码方式与ISO 10646的通用字符集概念相对应。目前实际应用的统一码版本对应于UCS-2，使用16位的编码空间。也就是每个字符占用2个字节。这样理论上一共最多可以表示216（即65536）个字符。基本满足各种语言的使用。实际上当前版本的统一码并未完全使用这16位编码，而是保留了大量空间以作为特殊使用或将来扩展。\n\n上述16位统一码字符构成基本多文种平面。最新（但未实际广泛使用）的统一码版本定义了16个辅助平面，两者合起来至少需要占据21位的编码空间，比3字节略少。但事实上辅助平面字符仍然占用4字节编码空间，与UCS-4保持一致。未来版本会扩充到ISO 10646-1实现级别3，即涵盖UCS-4的所有字符。UCS-4是一个更大的尚未填充完全的31位字符集，加上恒为0的首位，共需占据32位，即4字节。理论上最多能表示231个字符，完全可以涵盖一切语言所用的符号。\n\n基本多文种平面的字符的编码为U+hhhh，其中每个h代表一个十六进制数字，与UCS-2编码完全相同。而其对应的4字节UCS-4编码后两个字节一致，前两个字节则所有位均为0\n\n\nUTF-8:\nUTF-8是Unicode的实现方式之一,UTF-8就是在互联网上使用最广的一种Unicode的实现方式\n\nTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。\n\nUTF-8的编码规则很简单，只有二条：\n\n对于单字节的符号，字节的第一位设为0，后面7位为这个符号的Unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的\n对于n字节的符号（n>1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的Unicode码\n下表总结了编码规则，字母x表示可用编码的位。\n\nUnicode与UTF-8之间的编码映射关系\n\nUnicode符号范围(十六进制)\tUTF-8编码方式（二进制）\n0000 0000-0000 007F\t0xxxxxxx\n0000 0080-0000 07FF\t110xxxxx 10xxxxxx\n0000 0800-0000 FFFF\t1110xxxx 10xxxxxx 10xxxxxx\n0001 0000-0010 FFFF\t11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\n\nUTF-16:\nUTF-16是Unicode字符编码五层次模型的第三层：字符编码表（Character Encoding Form，也称为\"storage format\"）的一种实现方式。即把Unicode字符集的抽象码位映射为16位长的整数（即码元）的序列，用于数据存储或传递。Unicode字符的码位，需要1个或者2个16位长的码元来表示，因此这是一个变长表示。\nUTF-16编码以16位无符号整数为单位。注意是16位为一个单位，不表示一个字符就只有16位。现在机器上的unicode编\n\n码一般指的就是UTF-16。绝大部分2个字节就够了，但是不能绝对的说所有字符都是2个字节。这个要看字符的unicode\n\n编码处于什么范围而定，有可能是2个字节，也可能是4个字节\nUTF-16比起UTF-8，好处在于大部分字符都以固定长度的字节（2字节）存储，但UTF-16却无法兼容于ASCII编码。\n\n\n\n编码规则:\n从U+0000至U+D7FF以及从U+E000至U+FFFF的码位\n第一个Unicode平面（码位从U+0000至U+FFFF）包含了最常用的字符。该平面被称为基本多语言平面，缩写为BMP（Basic Multilingual Plane, BMP）。UTF-16与UCS-2编码这个范围内的码位为16比特长的单个码元，数值等价于对应的码位. BMP中的这些码位是仅有的可以在UCS-2中表示的码位。\n\n从U+10000到U+10FFFF的码位\n辅助平面（Supplementary Planes）中的码位，在UTF-16中被编码为一对16比特长的码元（即32bit,4Bytes），称作代理对（surrogate pair），具体方法是：\n码位减去0x10000,得到的值的范围为20比特长的0..0xFFFFF.\n高位的10比特的值（值的范围为0..0x3FF）被加上0xD800得到第一个码元或称作高位代理（high surrogate），值的范围是0xD800..0xDBFF.由于高位代理比低位代理的值要小，所以为了避免混淆使用，Unicode标准现在称高位代理为前导代理（lead surrogates）。\n低位的10比特的值（值的范围也是0..0x3FF）被加上0xDC00得到第二个码元或称作低位代理（low surrogate），现在值的范围是0xDC00..0xDFFF.由于低位代理比高位代理的值要大，所以为了避免混淆使用，Unicode标准现在称低位代理为后尾代理（trail surrogates）。\n例如U+10437编码（𐐷）:\n\n0x10437减去0x10000,结果为0x00437,二进制为0000 0000 0100 0011 0111。\n分区它的上10位值和下10位值（使用二进制）:0000000001 and 0000110111。\n添加0xD800到上值，以形成高位：0xD800 + 0x0001 = 0xD801。\n添加0xDC00到下值，以形成低位：0xDC00 + 0x0037 = 0xDC37。\n\n字符\t\t\t普通二进制\t\t\t\t\tUTF-16二进制\t\t\t\t\t\t\t\tUTF-16十六进制字节字符代码\tUTF-16BE十六进制字节\tUTF-16LE 十六进制字节\n$\tU+0024\t0000 0000 0010 0100\t\t\t0000 0000 0010 0100\t\t\t\t\t\t0024\t\t\t   \t\t00 24\t\t\t\t24 00\n€\tU+20AC\t0010 0000 1010 1100\t\t\t0010 0000 1010 1100\t\t\t\t\t\t20AC\t\t\t   \t\t20 AC\t\t\t\tAC 20\n𐐷\tU+10437\t0001 0000 0100 0011 0111 \t1101 1000 0000 0001 1101 1100 0011 0111\tD801 DC37\t\t   \t\tD8 01 DC 37\t\t\t01 D8 37 DC\n𤭢\tU+24B62\t0010 0100 1011 0110 0010 \t1101 1000 0101 0010 1101 1111 0110 0010\tD852 DF62\t\t   \t\tD8 52 DF 62\t\t\t52 D8 62 DF\n\n\nUTF-16的大尾序和小尾序存储形式都在用。一般来说，以Macintosh制作或存储的文字使用大尾序格式，以Microsoft或Linux制作或存储的文字使用小尾序格式。\n\n为了弄清楚UTF-16文件的大小尾序，在UTF-16文件的开首，都会放置一个U+FEFF字符作为Byte Order Mark（UTF-16LE以FF FE代表，UTF-16BE以FE FF代表\n\n\nBOM:\nBOM是一个Unicode字符。\n\nBOM用于指示文件/字符流的大小端（字节序）。\n\n不同编码所对应的BOM不同。\n\n\n编码类型\t\t\tBOM值(16进制)\t\tBOM值(10进制)\nUTF-8\t\t\tEF BB BF\t\t\t239 187 191\nUTF-16 (BE)\t\tFE FF\t\t\t\t254 255\nUTF-16 (LE)\t\tFF FE\t\t\t\t255 254\nUTF-32 (BE)\t\t00 00 FE FF\t\t\t0 0 254 255\nUTF-32 (LE)\t\tFF FE 00 00\t\t\t255 254 0 0\nUTF-7\t\t\t2B 2F 76 38\t\t\t43 47 118 56\n\t\t\t\t2B 2F 76 39\t\t\t43 47 118 57\n\t\t\t\t2B 2F 76 2B\t\t\t43 47 118 43\n\t\t\t\t2B 2F 76 2F\t\t\t43 47 118 47\nUTF-1\t\t\tF7 64 4C\t\t\t247 100 76\nUTF-EBCDIC\t\tDD 73 66 73\t\t\t221 115 102 115\nSCSU\t\t\t0E FE FF\t\t\t14 254 255\nBOCU-1\t\t\tFB EE 28\t\t\t251 238 40\nGB-18030\t\t84 31 95 33\t\t\t132 49 149 51\n\n\n中文字符编码标准:\n1)GB2312\n1980年，中国制定了GB2312-80，一共收录了 7445 个字符，包括 6763 个汉字和 682 个其它符号。GB2312-80，简称为GB2312。\n2)GB13000\n1993年，国际标准Unicode 1.1版本推出，收录中国大陆、台湾、日本及韩国通用字符集的汉字，总共有20,902个。中国订定了等同于Unicode 1.1版本的“GB 13000.1-93”，简称为GB13000。\nGB13000，显然包含的GB2312已有的文字和其他很多为包含的文字\n3)GBK\n微软，对GB2312-80的扩展，即利用GB 2312-80未使用的编码空间，收录所有的GB 13000.1-93和Unicode 1.1之中的汉字全部字符，制定了GBK编码。\n\nGBK 收录了 21886 个符号，它分为汉字区和图形符号区。汉字区包括 21003 个字符。\n\nGBK 作为对 GB2312 的扩展，在现在的 Windows 系统中仍然使用代码页 CP936 表示，但是同样的 936 的代码页跟一开始的 936 的代码页只支持 GB2312 编码不同，现在的 936 代码页支持 GBK 的编码，GBK 同时也向下兼容GB2312 编码。\n\n所以，技术编码上，GBK兼容旧的GB2312，但是编码方式和GB13000不同，不兼容GB13000，但是所包含文字上，算是和GB13000相同。\n\n4)GB18030\nGBK自身并非国家标准，只是曾由国家技术监督局标准化司、电子工业部科技与质量监督司公布为“技术规范指导性文件”。\n\n原始GB13000一直未被业界采用，2000年，国家出了标准GB18030-2000，简称GB18030，技术上兼容GBK而非GB13000，取代了 GBK1.0，成了正式的国家标准。\n\n该标准收录了 27484 个汉字，同时还收录了藏文、蒙文、维吾尔文等主要的少数民族文字。\n\n现在的PC平台必须支持 GB18030 ，对嵌入式产品暂不作要求。所以手机、MP3 一般只支持 GB2312。\n\nGB18030 在 Windows 中的代码页是 CP54936\n\n\n各种中文字符编码标准的关系:\n\n（ 中国大陆的标准）GB 13000.1-93 =（国际标准）Unicode 1.1\n\n（中国大陆标准）GB2312-80 = 简称GB2312 = Windows系统中的原先的CP936\n\n（微软制定的）GBK = （微软在编码方面）对 GB2312 的扩展 = （微软在所包含字符方面上包含了）GB 13000.1-93 + 其他部分汉字+ 台湾和香港的繁体 + 日语 + 朝鲜汉字 = Unicode 1.1 + 其他部分汉字+ 台湾和香港的繁体 + 日语 + 朝鲜汉字\n\n对于GBK：\n\n在编码方面：向下兼容GB2312，但是和GB 13000不同\n在内容方面：等价于GB13000\n微软中现在的新的CP936\n\n= GBK\n\n=兼容旧的GB2312\n\n\n在技术编码方面上，演化顺序为：\n\nASCII ⇒ GB2312 ⇒ GBK ⇒ GB18030\n\n后者对之前的，都是支持之前的编码，即向下兼容，即同一个字符，在这些编码中，都是同样的值，后面的标准，支持更多的字符。\n\n区分中文编码的方法是高字节的最高位不为 0。\n\n按照程序员的称呼，GB2312、GBK 到 GB18030 都属于双字节字符集 (DBCS)\n\n\n\n\n\n\n\n\n\n\n","slug":"字符编码总结","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeieoa0024znz4l0mkl818","content":"<p>最近工作中,经常遇到字符编码的问题,所有花了些时间好好的学习了字符编码的知识点,现在做下总结<br>字符编码:<br>所谓字符编码，就是定义了一套规则，指定了计算机显示的符号和数值之间的对应关系.<br>计算机中存放的0和1的二进制值,8个位为1字节,常用16进制表示,故要将这数值转为对应的字符,就要一套字符编码规则,而且这套规则要被所有的计算业界所认可.</p>\n<p>字符编码标准:</p>\n<p>既然需要字符编码,那编码的规则谁来定义,如果每个厂商都有自己的一套规则,会导致计算机之间的交流非常的混乱,所有需要统一的字符编码标准.</p>\n<p>最初得到大家认可的 字符编制有:<br>EBCDIC : 扩充的二进制编码的十进制交换码（Extended Binary Coded Decimal Interchange Code),<br>IBM于1963年－1964年间推出的字符编码表，根据早期打孔机式的二进化十进数（BCD，Bindary Coded Decimal）排列而成。是IBM迷尔级以上电脑的标准码。</p>\n<p>它的缺点是：英文字母不是连续地排列，中间出现多次断续，为撰写程序的人带来了一些困难。(维基百科)</p>\n<p>由于EBDIC是IBM推出的,所以在当时得到了大家的认可(谁当时IBM是行业龙头老大呢),但现在已经很少有人使用了<br>更多请参考维基百科<br><a href=\"https://zh.wikipedia.org/wiki/EBCDIC\" target=\"_blank\" rel=\"external\">https://zh.wikipedia.org/wiki/EBCDIC</a></p>\n<p>ASCII: 美国信息交换标准代码(American Standard Code for Information Interchange),<br>是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本EASCII则可以部分支持其他西欧语言，并等同于国际标准ISO/IEC 646。<br>ASCII第一次以规范标准的型态发表是在1967年，最后一次更新则是在1986年，至今为止共定义了128个字符；其中33个字符无法显示,95个可显示的字符.</p>\n<p>ASCII在现在广泛使用,可大家所认可(计算机是美国人所发明和使用的，所以计算机的早期，所设计编码标准，自然需要先为英文字符来设计和考虑，所以此最早的字符编码ASCII可以显示常见的英文字符)</p>\n<p>更多请参考维基百科<br><a href=\"https://zh.wikipedia.org/wiki/ASCII\" target=\"_blank\" rel=\"external\">https://zh.wikipedia.org/wiki/ASCII</a></p>\n<p>ASCII的字符编码规则:<br>由于最初只是为英文字母所考虑的，而英文只有26个字母，以及加上其他大小写字母，常见的字符，常见数字等，所有的加起来，也就几十个，而一个字节8位中前7位的理论上可以表示27=128个字符，所以对于设计出来的编码规则来说，只需要用一个字节来表示，就足够了。</p>\n<p>1)7位的字符编码，即每个字节的最高位第8位为0，其余7位的某个值对应着某个字符。</p>\n<p>1)ASCII字符集共27=128个字符 = 33个控制字符 + 95个可见字符。</p>\n<p>ASCII的字符编码是美国自己定义的标准，而其对应的国际标准叫做ISO/IEC 646。</p>\n<p>ISO/IEC是参考了多个国家的字符编码标准，其中主要是美国ASCII标准，然后制定出来的7位的国际字符编码标准。可以简单看成美国的国家标准ASCII和国际标准ISO/IEC 646，两者是是等价的，</p>\n<p>EASCII和ISO 8859:</p>\n<p>西方国家大多是使用拉丁字母,所以只要拓展ASCII标志就可以即兼容旧的ASCII的编码，又支持欧洲多个国家的那些衍生拉丁字母</p>\n<p>这样的标准有两个，一个是EASCII(Extended ASCII，延伸美国标准信息交换码)编码标准，一个是国际标准ISO 8859字符编码标准。</p>\n<p>EASCII码由7位扩充为8位而成。EASCII的内码是由0到255共有256个字符组成。EASCII码比ASCII码扩充出来的符号包括表格符号、计算符号、希腊字母和特殊的拉丁符号，这样就可以实现支持那么多欧洲的衍生拉丁字母了</p>\n<p>ISO/IEC 8859，是在ASCII中的普通的可见字符(0x20-0x7E)的基础上，利用了ASCII的7位编码所没有用到的第8位，这样就编码范围就从原先ASCII的0x00-0x7F多扩展出了0x80-0xFF，其中的0xA0-0xFF部分，被ISO/IEC 8859编码所用到。有别于ASCII的单个独立的编码规则，ISO/IEC 8859是一组编码规则的总称,其下包含了共15个字符集，即ISO/IEC 8859-n,其中n=1,…,11,13,…,16</p>\n<p>之所以用15字符集表示,是因为欧洲国家的不同语系的特殊字符数多,无法用8位来完全标志,所有分为15个字符集,各个国家可以根据自己过来的需要来选择<br>缺点是ISO/IEC 8859的某一个单独的字符集来表示出来，即无法在同一个文档中支持显示不同语系的不同的字符。</p>\n<p>ISO/IEC 8859编码标准中的15种字符集</p>\n<p>ISO/IEC 8859-n        英文别名                    中文解释<br>ISO/IEC 8859 -1        Latin-1                    西欧语言<br>ISO/IEC 8859 -2        Latin-2                    中欧语言<br>ISO/IEC 8859 -3        Latin-3                    南欧语言。世界语也可用此字符集显示。<br>ISO/IEC 8859 -4        Latin-4                    北欧语言<br>ISO/IEC 8859 -5        Cyrillic                斯拉夫语言<br>ISO/IEC 8859 -6        Arabic                    阿拉伯语<br>ISO/IEC 8859 -7        Greek                    希腊语<br>ISO/IEC 8859 -8        Hebrew                    希伯来语（视觉顺序）；ISO 8859-8-I是 希伯来语（逻辑顺序）<br>ISO/IEC 8859 -9        Latin-5 或 Turkish        它把Latin-1的冰岛语字母换走，加入土耳其语字母<br>ISO/IEC 8859 -10    Latin-6 或 Nordic        北日耳曼语支，用来代替Latin-4<br>ISO/IEC 8859 -11    Thai                    从泰国的 TIS620 标准字集演化而来<br>ISO/IEC 8859 -13    Latin-7 或 Baltic Rim    波罗的语族<br>ISO/IEC 8859 -14    Latin-8 或 Celtic        凯尔特语族<br>ISO/IEC 8859 -15    Latin-9                    西欧语言，加入Latin-1欠缺的芬兰语字母和大写法语重音字母，以及欧元（€）符号。<br>ISO/IEC 8859 -16    Latin-10                东南欧语言。主要供罗马尼亚语使用，并加入欧元符号。</p>\n<p>ISO 10646:</p>\n<p>国际标准组织ISO，定义了对应的编码标准ISO/IEC 10646，简称为ISO 10646，此标准所定义的字符集，称作为通用字符集（Universal Character Set，UCS）。<br>通用字符集包括了其他所有字符集。它保证了与其他字符集的双向兼容，即，如果你将任何文本字符串翻译到UCS格式，然后再翻译回原编码，你不会丢失任何信息。</p>\n<p>UCS包含了已知语言的所有字符。除了拉丁语、希腊语、斯拉夫语、希伯来语、阿拉伯语、亚美尼亚语、格鲁吉亚语，还包括中文、日文、韩文这样的方块文字，UCS还包括大量的图形、印刷、数学、科学符号。<br>并不是所有的系统都需要支持像组合字符这样的的先进机制。因此ISO 10646指定了如下三种实现级别：</p>\n<p>级别1：不支持组合字符和谚文字母字符。<br>级别2：类似于级别1，但在某些文字中，允许一列固定的组合字符，因为如果没有最起码的几个组合字符，UCS就不能完整地表达这些语言。<br>级别3：支持所有的通用字符集字符，如，可以在任意一个字符上加上一个箭头或一个鼻音化符号.</p>\n<p>Unicode:</p>\n<p>由来:<br>为解决传统的字符编码方案的局限,奥多比系统、苹果公司、惠普、IBM、微软、施乐等公司组建统一码联盟,于1991年首次发布了The Unicode Standard。Unicode的开发结合了国际标准化组织所制定的ISO/IEC 10646，即通用字符集.</p>\n<p>Unicode和ISO 10646的关系:</p>\n<p>历史上存在两个独立的尝试创立单一字符集的组织，即</p>\n<p>国际标准化组织（ISO）于1984年创建的ISO/IEC<br>JTC1/SC2/WG2，其含义是International Organization for Standardization / International Electrotechnical Commission, Joint Technical Committee #1 [Information Technology], Subcommittee #2 [Coded Character Sets], Working Group #2 [Multi-octet codes]). ISO 10646表示这是ISO 646的扩展。</p>\n<p>由Xerox、Apple等软件制造商于1988年组成的统一码联盟。前者开发的ISO/IEC 10646项目，后者开发的统一码项目。因此最初制定了不同的标准。<br>1991年前后，两个项目的参与者都认识到，世界不需要两个不兼容的字符集。于是，它们开始合并双方的工作成果，并为创立一个单一编码表而协同工作。1991年，不包含CJK统一汉字集的Unicode 1.0发布。随后，CJK统一汉字集的制定于1993年完成，发布了ISO 10646-1:1993，即Unicode 1.1。</p>\n<p>从Unicode 2.0开始，Unicode采用了与ISO 10646-1相同的字库和字码；ISO也承诺，ISO 10646将不会替超出U+10FFFF的UCS-4编码赋值，以使得两者保持一致。两个项目仍都独立存在，并独立地公布各自的标准。但统一码联盟和ISO/IEC JTC1/SC2都同意保持两者标准的码表兼容，并紧密地共同调整任何未来的扩展。在发布的时候，Unicode一般都会采用有关字码最常见的字体，但ISO 10646一般都尽可能采用Century字体。</p>\n<p>下面是Unicode与ISO 10646的版本对应表</p>\n<p>ISO/IEC 10646-1:1993 = Unicode 1.1 = GB 13000.1-93《信息技术　通用多八位编码字符集（UCS）第一部分：体系结构与基本多文种平面》。<br>ISO/IEC 10646-1:1993 plus Amendments 5 to 7 = Unicode 2.0<br>ISO/IEC 10646-1:1993 plus Amendments 5 to 7 = Unicode 2.1 excluding Euro Sign and Object Replacement Character, which are included in Amendment 18<br>ISO/IEC 10646-1:2000 = Unicode 3.0<br>ISO/IEC 10646-1:2000 and ISO/IEC 10646-2:2001 = Unicode 3.1<br>ISO/IEC 10646-1:2000 plus Amendment 1 and ISO/IEC 10646-2:2001 = Unicode 3.2<br>ISO/IEC 10646:2003 = Unicode 4.0 = GB 13000-2010<br>ISO/IEC 10646:2003 plus Amendment 1 = Unicode 4.1<br>ISO/IEC 10646:2003 plus Amendments 1 to 2 = Unicode 5.0 excluding Devanagari Letters GGA, JJA, DDDA and BBA, which are included in Amendment 3<br>ISO/IEC 10646:2003 plus Amendments 1 to 4 = Unicode 5.1<br>ISO/IEC 10646:2003 plus Amendments 1 to 6 = Unicode 5.2<br>ISO/IEC 10646:2003 plus Amendments 1 to 8 = ISO/IEC 10646:2011 = Unicode 6.0 excluding Indian Rupee Sign<br>ISO/IEC 10646:2012 = Unicode 6.1<br>ISO/IEC 10646:2012 = Unicode 6.2 excluding Turkish Lira Sign, which is included in Amendment 1<br>ISO/IEC 10646:2012 = Unicode 6.3 excluding Turkish Lira Sign, which is included in Amendment 1, and five bidirectional control characters (Arabic Letter Mark, Left-To-Right Isolate, Right-To-Left Isolate, First Strong Isolate, Pop Directional Isolate), which are included in Amendment 2<br>ISO/IEC 10646:2012 plus Amendments 1 and 2 = Unicode 7.0 excluding the Ruble sign<br>ISO/IEC 10646:2014 plus Amendment 1 = Unicode 8.0[1]</p>\n<p>Unicode和ISO 10646的区别:<br>ISO 10646中定义了编码规则，定义了哪些值对应了哪些字符，而Unicode不仅定义了这些编码规则，还定义了其他一些关于文字处理的细节算法等内容。</p>\n<p>Unicode = ISO 10646的编码规则 + 某些语言的细节处理算法</p>\n<p>Unicode = ISO 10646编码标准 = 标准所制定的UCS字符集<br>两者部分样例字形有显著的区别。ISO/IEC 10646-1标准同样使用四种不同的风格变体来显示表意文字如中文、日文、韩文（即CJK），但Unicode 2.0的表里只有中文的变体。甚至存在“Unicode对日本用户来说不可接受”的不实传说。</p>\n<p>更多请看维基百科<br><a href=\"https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%AD%97%E7%AC%A6%E9%9B%86\" target=\"_blank\" rel=\"external\">https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%AD%97%E7%AC%A6%E9%9B%86</a></p>\n<p>统一码的编码方式与ISO 10646的通用字符集概念相对应。目前实际应用的统一码版本对应于UCS-2，使用16位的编码空间。也就是每个字符占用2个字节。这样理论上一共最多可以表示216（即65536）个字符。基本满足各种语言的使用。实际上当前版本的统一码并未完全使用这16位编码，而是保留了大量空间以作为特殊使用或将来扩展。</p>\n<p>上述16位统一码字符构成基本多文种平面。最新（但未实际广泛使用）的统一码版本定义了16个辅助平面，两者合起来至少需要占据21位的编码空间，比3字节略少。但事实上辅助平面字符仍然占用4字节编码空间，与UCS-4保持一致。未来版本会扩充到ISO 10646-1实现级别3，即涵盖UCS-4的所有字符。UCS-4是一个更大的尚未填充完全的31位字符集，加上恒为0的首位，共需占据32位，即4字节。理论上最多能表示231个字符，完全可以涵盖一切语言所用的符号。</p>\n<p>基本多文种平面的字符的编码为U+hhhh，其中每个h代表一个十六进制数字，与UCS-2编码完全相同。而其对应的4字节UCS-4编码后两个字节一致，前两个字节则所有位均为0</p>\n<p>UTF-8:<br>UTF-8是Unicode的实现方式之一,UTF-8就是在互联网上使用最广的一种Unicode的实现方式</p>\n<p>TF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p>\n<p>UTF-8的编码规则很简单，只有二条：</p>\n<p>对于单字节的符号，字节的第一位设为0，后面7位为这个符号的Unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的<br>对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的Unicode码<br>下表总结了编码规则，字母x表示可用编码的位。</p>\n<p>Unicode与UTF-8之间的编码映射关系</p>\n<p>Unicode符号范围(十六进制)    UTF-8编码方式（二进制）<br>0000 0000-0000 007F    0xxxxxxx<br>0000 0080-0000 07FF    110xxxxx 10xxxxxx<br>0000 0800-0000 FFFF    1110xxxx 10xxxxxx 10xxxxxx<br>0001 0000-0010 FFFF    11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</p>\n<p>UTF-16:<br>UTF-16是Unicode字符编码五层次模型的第三层：字符编码表（Character Encoding Form，也称为”storage format”）的一种实现方式。即把Unicode字符集的抽象码位映射为16位长的整数（即码元）的序列，用于数据存储或传递。Unicode字符的码位，需要1个或者2个16位长的码元来表示，因此这是一个变长表示。<br>UTF-16编码以16位无符号整数为单位。注意是16位为一个单位，不表示一个字符就只有16位。现在机器上的unicode编</p>\n<p>码一般指的就是UTF-16。绝大部分2个字节就够了，但是不能绝对的说所有字符都是2个字节。这个要看字符的unicode</p>\n<p>编码处于什么范围而定，有可能是2个字节，也可能是4个字节<br>UTF-16比起UTF-8，好处在于大部分字符都以固定长度的字节（2字节）存储，但UTF-16却无法兼容于ASCII编码。</p>\n<p>编码规则:<br>从U+0000至U+D7FF以及从U+E000至U+FFFF的码位<br>第一个Unicode平面（码位从U+0000至U+FFFF）包含了最常用的字符。该平面被称为基本多语言平面，缩写为BMP（Basic Multilingual Plane, BMP）。UTF-16与UCS-2编码这个范围内的码位为16比特长的单个码元，数值等价于对应的码位. BMP中的这些码位是仅有的可以在UCS-2中表示的码位。</p>\n<p>从U+10000到U+10FFFF的码位<br>辅助平面（Supplementary Planes）中的码位，在UTF-16中被编码为一对16比特长的码元（即32bit,4Bytes），称作代理对（surrogate pair），具体方法是：<br>码位减去0x10000,得到的值的范围为20比特长的0..0xFFFFF.<br>高位的10比特的值（值的范围为0..0x3FF）被加上0xD800得到第一个码元或称作高位代理（high surrogate），值的范围是0xD800..0xDBFF.由于高位代理比低位代理的值要小，所以为了避免混淆使用，Unicode标准现在称高位代理为前导代理（lead surrogates）。<br>低位的10比特的值（值的范围也是0..0x3FF）被加上0xDC00得到第二个码元或称作低位代理（low surrogate），现在值的范围是0xDC00..0xDFFF.由于低位代理比高位代理的值要大，所以为了避免混淆使用，Unicode标准现在称低位代理为后尾代理（trail surrogates）。<br>例如U+10437编码（𐐷）:</p>\n<p>0x10437减去0x10000,结果为0x00437,二进制为0000 0000 0100 0011 0111。<br>分区它的上10位值和下10位值（使用二进制）:0000000001 and 0000110111。<br>添加0xD800到上值，以形成高位：0xD800 + 0x0001 = 0xD801。<br>添加0xDC00到下值，以形成低位：0xDC00 + 0x0037 = 0xDC37。</p>\n<p>字符            普通二进制                    UTF-16二进制                                UTF-16十六进制字节字符代码    UTF-16BE十六进制字节    UTF-16LE 十六进制字节<br>$    U+0024    0000 0000 0010 0100            0000 0000 0010 0100                        0024                       00 24                24 00<br>€    U+20AC    0010 0000 1010 1100            0010 0000 1010 1100                        20AC                       20 AC                AC 20<br>𐐷    U+10437    0001 0000 0100 0011 0111     1101 1000 0000 0001 1101 1100 0011 0111    D801 DC37                   D8 01 DC 37            01 D8 37 DC<br>𤭢    U+24B62    0010 0100 1011 0110 0010     1101 1000 0101 0010 1101 1111 0110 0010    D852 DF62                   D8 52 DF 62            52 D8 62 DF</p>\n<p>UTF-16的大尾序和小尾序存储形式都在用。一般来说，以Macintosh制作或存储的文字使用大尾序格式，以Microsoft或Linux制作或存储的文字使用小尾序格式。</p>\n<p>为了弄清楚UTF-16文件的大小尾序，在UTF-16文件的开首，都会放置一个U+FEFF字符作为Byte Order Mark（UTF-16LE以FF FE代表，UTF-16BE以FE FF代表</p>\n<p>BOM:<br>BOM是一个Unicode字符。</p>\n<p>BOM用于指示文件/字符流的大小端（字节序）。</p>\n<p>不同编码所对应的BOM不同。</p>\n<p>编码类型            BOM值(16进制)        BOM值(10进制)<br>UTF-8            EF BB BF            239 187 191<br>UTF-16 (BE)        FE FF                254 255<br>UTF-16 (LE)        FF FE                255 254<br>UTF-32 (BE)        00 00 FE FF            0 0 254 255<br>UTF-32 (LE)        FF FE 00 00            255 254 0 0<br>UTF-7            2B 2F 76 38            43 47 118 56<br>                2B 2F 76 39            43 47 118 57<br>                2B 2F 76 2B            43 47 118 43<br>                2B 2F 76 2F            43 47 118 47<br>UTF-1            F7 64 4C            247 100 76<br>UTF-EBCDIC        DD 73 66 73            221 115 102 115<br>SCSU            0E FE FF            14 254 255<br>BOCU-1            FB EE 28            251 238 40<br>GB-18030        84 31 95 33            132 49 149 51</p>\n<p>中文字符编码标准:<br>1)GB2312<br>1980年，中国制定了GB2312-80，一共收录了 7445 个字符，包括 6763 个汉字和 682 个其它符号。GB2312-80，简称为GB2312。<br>2)GB13000<br>1993年，国际标准Unicode 1.1版本推出，收录中国大陆、台湾、日本及韩国通用字符集的汉字，总共有20,902个。中国订定了等同于Unicode 1.1版本的“GB 13000.1-93”，简称为GB13000。<br>GB13000，显然包含的GB2312已有的文字和其他很多为包含的文字<br>3)GBK<br>微软，对GB2312-80的扩展，即利用GB 2312-80未使用的编码空间，收录所有的GB 13000.1-93和Unicode 1.1之中的汉字全部字符，制定了GBK编码。</p>\n<p>GBK 收录了 21886 个符号，它分为汉字区和图形符号区。汉字区包括 21003 个字符。</p>\n<p>GBK 作为对 GB2312 的扩展，在现在的 Windows 系统中仍然使用代码页 CP936 表示，但是同样的 936 的代码页跟一开始的 936 的代码页只支持 GB2312 编码不同，现在的 936 代码页支持 GBK 的编码，GBK 同时也向下兼容GB2312 编码。</p>\n<p>所以，技术编码上，GBK兼容旧的GB2312，但是编码方式和GB13000不同，不兼容GB13000，但是所包含文字上，算是和GB13000相同。</p>\n<p>4)GB18030<br>GBK自身并非国家标准，只是曾由国家技术监督局标准化司、电子工业部科技与质量监督司公布为“技术规范指导性文件”。</p>\n<p>原始GB13000一直未被业界采用，2000年，国家出了标准GB18030-2000，简称GB18030，技术上兼容GBK而非GB13000，取代了 GBK1.0，成了正式的国家标准。</p>\n<p>该标准收录了 27484 个汉字，同时还收录了藏文、蒙文、维吾尔文等主要的少数民族文字。</p>\n<p>现在的PC平台必须支持 GB18030 ，对嵌入式产品暂不作要求。所以手机、MP3 一般只支持 GB2312。</p>\n<p>GB18030 在 Windows 中的代码页是 CP54936</p>\n<p>各种中文字符编码标准的关系:</p>\n<p>（ 中国大陆的标准）GB 13000.1-93 =（国际标准）Unicode 1.1</p>\n<p>（中国大陆标准）GB2312-80 = 简称GB2312 = Windows系统中的原先的CP936</p>\n<p>（微软制定的）GBK = （微软在编码方面）对 GB2312 的扩展 = （微软在所包含字符方面上包含了）GB 13000.1-93 + 其他部分汉字+ 台湾和香港的繁体 + 日语 + 朝鲜汉字 = Unicode 1.1 + 其他部分汉字+ 台湾和香港的繁体 + 日语 + 朝鲜汉字</p>\n<p>对于GBK：</p>\n<p>在编码方面：向下兼容GB2312，但是和GB 13000不同<br>在内容方面：等价于GB13000<br>微软中现在的新的CP936</p>\n<p>= GBK</p>\n<p>=兼容旧的GB2312</p>\n<p>在技术编码方面上，演化顺序为：</p>\n<p>ASCII ⇒ GB2312 ⇒ GBK ⇒ GB18030</p>\n<p>后者对之前的，都是支持之前的编码，即向下兼容，即同一个字符，在这些编码中，都是同样的值，后面的标准，支持更多的字符。</p>\n<p>区分中文编码的方法是高字节的最高位不为 0。</p>\n<p>按照程序员的称呼，GB2312、GBK 到 GB18030 都属于双字节字符集 (DBCS)</p>\n","excerpt":"","more":"<p>最近工作中,经常遇到字符编码的问题,所有花了些时间好好的学习了字符编码的知识点,现在做下总结<br>字符编码:<br>所谓字符编码，就是定义了一套规则，指定了计算机显示的符号和数值之间的对应关系.<br>计算机中存放的0和1的二进制值,8个位为1字节,常用16进制表示,故要将这数值转为对应的字符,就要一套字符编码规则,而且这套规则要被所有的计算业界所认可.</p>\n<p>字符编码标准:</p>\n<p>既然需要字符编码,那编码的规则谁来定义,如果每个厂商都有自己的一套规则,会导致计算机之间的交流非常的混乱,所有需要统一的字符编码标准.</p>\n<p>最初得到大家认可的 字符编制有:<br>EBCDIC : 扩充的二进制编码的十进制交换码（Extended Binary Coded Decimal Interchange Code),<br>IBM于1963年－1964年间推出的字符编码表，根据早期打孔机式的二进化十进数（BCD，Bindary Coded Decimal）排列而成。是IBM迷尔级以上电脑的标准码。</p>\n<p>它的缺点是：英文字母不是连续地排列，中间出现多次断续，为撰写程序的人带来了一些困难。(维基百科)</p>\n<p>由于EBDIC是IBM推出的,所以在当时得到了大家的认可(谁当时IBM是行业龙头老大呢),但现在已经很少有人使用了<br>更多请参考维基百科<br><a href=\"https://zh.wikipedia.org/wiki/EBCDIC\">https://zh.wikipedia.org/wiki/EBCDIC</a></p>\n<p>ASCII: 美国信息交换标准代码(American Standard Code for Information Interchange),<br>是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本EASCII则可以部分支持其他西欧语言，并等同于国际标准ISO/IEC 646。<br>ASCII第一次以规范标准的型态发表是在1967年，最后一次更新则是在1986年，至今为止共定义了128个字符；其中33个字符无法显示,95个可显示的字符.</p>\n<p>ASCII在现在广泛使用,可大家所认可(计算机是美国人所发明和使用的，所以计算机的早期，所设计编码标准，自然需要先为英文字符来设计和考虑，所以此最早的字符编码ASCII可以显示常见的英文字符)</p>\n<p>更多请参考维基百科<br><a href=\"https://zh.wikipedia.org/wiki/ASCII\">https://zh.wikipedia.org/wiki/ASCII</a></p>\n<p>ASCII的字符编码规则:<br>由于最初只是为英文字母所考虑的，而英文只有26个字母，以及加上其他大小写字母，常见的字符，常见数字等，所有的加起来，也就几十个，而一个字节8位中前7位的理论上可以表示27=128个字符，所以对于设计出来的编码规则来说，只需要用一个字节来表示，就足够了。</p>\n<p>1)7位的字符编码，即每个字节的最高位第8位为0，其余7位的某个值对应着某个字符。</p>\n<p>1)ASCII字符集共27=128个字符 = 33个控制字符 + 95个可见字符。</p>\n<p>ASCII的字符编码是美国自己定义的标准，而其对应的国际标准叫做ISO/IEC 646。</p>\n<p>ISO/IEC是参考了多个国家的字符编码标准，其中主要是美国ASCII标准，然后制定出来的7位的国际字符编码标准。可以简单看成美国的国家标准ASCII和国际标准ISO/IEC 646，两者是是等价的，</p>\n<p>EASCII和ISO 8859:</p>\n<p>西方国家大多是使用拉丁字母,所以只要拓展ASCII标志就可以即兼容旧的ASCII的编码，又支持欧洲多个国家的那些衍生拉丁字母</p>\n<p>这样的标准有两个，一个是EASCII(Extended ASCII，延伸美国标准信息交换码)编码标准，一个是国际标准ISO 8859字符编码标准。</p>\n<p>EASCII码由7位扩充为8位而成。EASCII的内码是由0到255共有256个字符组成。EASCII码比ASCII码扩充出来的符号包括表格符号、计算符号、希腊字母和特殊的拉丁符号，这样就可以实现支持那么多欧洲的衍生拉丁字母了</p>\n<p>ISO/IEC 8859，是在ASCII中的普通的可见字符(0x20-0x7E)的基础上，利用了ASCII的7位编码所没有用到的第8位，这样就编码范围就从原先ASCII的0x00-0x7F多扩展出了0x80-0xFF，其中的0xA0-0xFF部分，被ISO/IEC 8859编码所用到。有别于ASCII的单个独立的编码规则，ISO/IEC 8859是一组编码规则的总称,其下包含了共15个字符集，即ISO/IEC 8859-n,其中n=1,…,11,13,…,16</p>\n<p>之所以用15字符集表示,是因为欧洲国家的不同语系的特殊字符数多,无法用8位来完全标志,所有分为15个字符集,各个国家可以根据自己过来的需要来选择<br>缺点是ISO/IEC 8859的某一个单独的字符集来表示出来，即无法在同一个文档中支持显示不同语系的不同的字符。</p>\n<p>ISO/IEC 8859编码标准中的15种字符集</p>\n<p>ISO/IEC 8859-n        英文别名                    中文解释<br>ISO/IEC 8859 -1        Latin-1                    西欧语言<br>ISO/IEC 8859 -2        Latin-2                    中欧语言<br>ISO/IEC 8859 -3        Latin-3                    南欧语言。世界语也可用此字符集显示。<br>ISO/IEC 8859 -4        Latin-4                    北欧语言<br>ISO/IEC 8859 -5        Cyrillic                斯拉夫语言<br>ISO/IEC 8859 -6        Arabic                    阿拉伯语<br>ISO/IEC 8859 -7        Greek                    希腊语<br>ISO/IEC 8859 -8        Hebrew                    希伯来语（视觉顺序）；ISO 8859-8-I是 希伯来语（逻辑顺序）<br>ISO/IEC 8859 -9        Latin-5 或 Turkish        它把Latin-1的冰岛语字母换走，加入土耳其语字母<br>ISO/IEC 8859 -10    Latin-6 或 Nordic        北日耳曼语支，用来代替Latin-4<br>ISO/IEC 8859 -11    Thai                    从泰国的 TIS620 标准字集演化而来<br>ISO/IEC 8859 -13    Latin-7 或 Baltic Rim    波罗的语族<br>ISO/IEC 8859 -14    Latin-8 或 Celtic        凯尔特语族<br>ISO/IEC 8859 -15    Latin-9                    西欧语言，加入Latin-1欠缺的芬兰语字母和大写法语重音字母，以及欧元（€）符号。<br>ISO/IEC 8859 -16    Latin-10                东南欧语言。主要供罗马尼亚语使用，并加入欧元符号。</p>\n<p>ISO 10646:</p>\n<p>国际标准组织ISO，定义了对应的编码标准ISO/IEC 10646，简称为ISO 10646，此标准所定义的字符集，称作为通用字符集（Universal Character Set，UCS）。<br>通用字符集包括了其他所有字符集。它保证了与其他字符集的双向兼容，即，如果你将任何文本字符串翻译到UCS格式，然后再翻译回原编码，你不会丢失任何信息。</p>\n<p>UCS包含了已知语言的所有字符。除了拉丁语、希腊语、斯拉夫语、希伯来语、阿拉伯语、亚美尼亚语、格鲁吉亚语，还包括中文、日文、韩文这样的方块文字，UCS还包括大量的图形、印刷、数学、科学符号。<br>并不是所有的系统都需要支持像组合字符这样的的先进机制。因此ISO 10646指定了如下三种实现级别：</p>\n<p>级别1：不支持组合字符和谚文字母字符。<br>级别2：类似于级别1，但在某些文字中，允许一列固定的组合字符，因为如果没有最起码的几个组合字符，UCS就不能完整地表达这些语言。<br>级别3：支持所有的通用字符集字符，如，可以在任意一个字符上加上一个箭头或一个鼻音化符号.</p>\n<p>Unicode:</p>\n<p>由来:<br>为解决传统的字符编码方案的局限,奥多比系统、苹果公司、惠普、IBM、微软、施乐等公司组建统一码联盟,于1991年首次发布了The Unicode Standard。Unicode的开发结合了国际标准化组织所制定的ISO/IEC 10646，即通用字符集.</p>\n<p>Unicode和ISO 10646的关系:</p>\n<p>历史上存在两个独立的尝试创立单一字符集的组织，即</p>\n<p>国际标准化组织（ISO）于1984年创建的ISO/IEC<br>JTC1/SC2/WG2，其含义是International Organization for Standardization / International Electrotechnical Commission, Joint Technical Committee #1 [Information Technology], Subcommittee #2 [Coded Character Sets], Working Group #2 [Multi-octet codes]). ISO 10646表示这是ISO 646的扩展。</p>\n<p>由Xerox、Apple等软件制造商于1988年组成的统一码联盟。前者开发的ISO/IEC 10646项目，后者开发的统一码项目。因此最初制定了不同的标准。<br>1991年前后，两个项目的参与者都认识到，世界不需要两个不兼容的字符集。于是，它们开始合并双方的工作成果，并为创立一个单一编码表而协同工作。1991年，不包含CJK统一汉字集的Unicode 1.0发布。随后，CJK统一汉字集的制定于1993年完成，发布了ISO 10646-1:1993，即Unicode 1.1。</p>\n<p>从Unicode 2.0开始，Unicode采用了与ISO 10646-1相同的字库和字码；ISO也承诺，ISO 10646将不会替超出U+10FFFF的UCS-4编码赋值，以使得两者保持一致。两个项目仍都独立存在，并独立地公布各自的标准。但统一码联盟和ISO/IEC JTC1/SC2都同意保持两者标准的码表兼容，并紧密地共同调整任何未来的扩展。在发布的时候，Unicode一般都会采用有关字码最常见的字体，但ISO 10646一般都尽可能采用Century字体。</p>\n<p>下面是Unicode与ISO 10646的版本对应表</p>\n<p>ISO/IEC 10646-1:1993 = Unicode 1.1 = GB 13000.1-93《信息技术　通用多八位编码字符集（UCS）第一部分：体系结构与基本多文种平面》。<br>ISO/IEC 10646-1:1993 plus Amendments 5 to 7 = Unicode 2.0<br>ISO/IEC 10646-1:1993 plus Amendments 5 to 7 = Unicode 2.1 excluding Euro Sign and Object Replacement Character, which are included in Amendment 18<br>ISO/IEC 10646-1:2000 = Unicode 3.0<br>ISO/IEC 10646-1:2000 and ISO/IEC 10646-2:2001 = Unicode 3.1<br>ISO/IEC 10646-1:2000 plus Amendment 1 and ISO/IEC 10646-2:2001 = Unicode 3.2<br>ISO/IEC 10646:2003 = Unicode 4.0 = GB 13000-2010<br>ISO/IEC 10646:2003 plus Amendment 1 = Unicode 4.1<br>ISO/IEC 10646:2003 plus Amendments 1 to 2 = Unicode 5.0 excluding Devanagari Letters GGA, JJA, DDDA and BBA, which are included in Amendment 3<br>ISO/IEC 10646:2003 plus Amendments 1 to 4 = Unicode 5.1<br>ISO/IEC 10646:2003 plus Amendments 1 to 6 = Unicode 5.2<br>ISO/IEC 10646:2003 plus Amendments 1 to 8 = ISO/IEC 10646:2011 = Unicode 6.0 excluding Indian Rupee Sign<br>ISO/IEC 10646:2012 = Unicode 6.1<br>ISO/IEC 10646:2012 = Unicode 6.2 excluding Turkish Lira Sign, which is included in Amendment 1<br>ISO/IEC 10646:2012 = Unicode 6.3 excluding Turkish Lira Sign, which is included in Amendment 1, and five bidirectional control characters (Arabic Letter Mark, Left-To-Right Isolate, Right-To-Left Isolate, First Strong Isolate, Pop Directional Isolate), which are included in Amendment 2<br>ISO/IEC 10646:2012 plus Amendments 1 and 2 = Unicode 7.0 excluding the Ruble sign<br>ISO/IEC 10646:2014 plus Amendment 1 = Unicode 8.0[1]</p>\n<p>Unicode和ISO 10646的区别:<br>ISO 10646中定义了编码规则，定义了哪些值对应了哪些字符，而Unicode不仅定义了这些编码规则，还定义了其他一些关于文字处理的细节算法等内容。</p>\n<p>Unicode = ISO 10646的编码规则 + 某些语言的细节处理算法</p>\n<p>Unicode = ISO 10646编码标准 = 标准所制定的UCS字符集<br>两者部分样例字形有显著的区别。ISO/IEC 10646-1标准同样使用四种不同的风格变体来显示表意文字如中文、日文、韩文（即CJK），但Unicode 2.0的表里只有中文的变体。甚至存在“Unicode对日本用户来说不可接受”的不实传说。</p>\n<p>更多请看维基百科<br><a href=\"https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%AD%97%E7%AC%A6%E9%9B%86\">https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%AD%97%E7%AC%A6%E9%9B%86</a></p>\n<p>统一码的编码方式与ISO 10646的通用字符集概念相对应。目前实际应用的统一码版本对应于UCS-2，使用16位的编码空间。也就是每个字符占用2个字节。这样理论上一共最多可以表示216（即65536）个字符。基本满足各种语言的使用。实际上当前版本的统一码并未完全使用这16位编码，而是保留了大量空间以作为特殊使用或将来扩展。</p>\n<p>上述16位统一码字符构成基本多文种平面。最新（但未实际广泛使用）的统一码版本定义了16个辅助平面，两者合起来至少需要占据21位的编码空间，比3字节略少。但事实上辅助平面字符仍然占用4字节编码空间，与UCS-4保持一致。未来版本会扩充到ISO 10646-1实现级别3，即涵盖UCS-4的所有字符。UCS-4是一个更大的尚未填充完全的31位字符集，加上恒为0的首位，共需占据32位，即4字节。理论上最多能表示231个字符，完全可以涵盖一切语言所用的符号。</p>\n<p>基本多文种平面的字符的编码为U+hhhh，其中每个h代表一个十六进制数字，与UCS-2编码完全相同。而其对应的4字节UCS-4编码后两个字节一致，前两个字节则所有位均为0</p>\n<p>UTF-8:<br>UTF-8是Unicode的实现方式之一,UTF-8就是在互联网上使用最广的一种Unicode的实现方式</p>\n<p>TF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p>\n<p>UTF-8的编码规则很简单，只有二条：</p>\n<p>对于单字节的符号，字节的第一位设为0，后面7位为这个符号的Unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的<br>对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的Unicode码<br>下表总结了编码规则，字母x表示可用编码的位。</p>\n<p>Unicode与UTF-8之间的编码映射关系</p>\n<p>Unicode符号范围(十六进制)    UTF-8编码方式（二进制）<br>0000 0000-0000 007F    0xxxxxxx<br>0000 0080-0000 07FF    110xxxxx 10xxxxxx<br>0000 0800-0000 FFFF    1110xxxx 10xxxxxx 10xxxxxx<br>0001 0000-0010 FFFF    11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</p>\n<p>UTF-16:<br>UTF-16是Unicode字符编码五层次模型的第三层：字符编码表（Character Encoding Form，也称为”storage format”）的一种实现方式。即把Unicode字符集的抽象码位映射为16位长的整数（即码元）的序列，用于数据存储或传递。Unicode字符的码位，需要1个或者2个16位长的码元来表示，因此这是一个变长表示。<br>UTF-16编码以16位无符号整数为单位。注意是16位为一个单位，不表示一个字符就只有16位。现在机器上的unicode编</p>\n<p>码一般指的就是UTF-16。绝大部分2个字节就够了，但是不能绝对的说所有字符都是2个字节。这个要看字符的unicode</p>\n<p>编码处于什么范围而定，有可能是2个字节，也可能是4个字节<br>UTF-16比起UTF-8，好处在于大部分字符都以固定长度的字节（2字节）存储，但UTF-16却无法兼容于ASCII编码。</p>\n<p>编码规则:<br>从U+0000至U+D7FF以及从U+E000至U+FFFF的码位<br>第一个Unicode平面（码位从U+0000至U+FFFF）包含了最常用的字符。该平面被称为基本多语言平面，缩写为BMP（Basic Multilingual Plane, BMP）。UTF-16与UCS-2编码这个范围内的码位为16比特长的单个码元，数值等价于对应的码位. BMP中的这些码位是仅有的可以在UCS-2中表示的码位。</p>\n<p>从U+10000到U+10FFFF的码位<br>辅助平面（Supplementary Planes）中的码位，在UTF-16中被编码为一对16比特长的码元（即32bit,4Bytes），称作代理对（surrogate pair），具体方法是：<br>码位减去0x10000,得到的值的范围为20比特长的0..0xFFFFF.<br>高位的10比特的值（值的范围为0..0x3FF）被加上0xD800得到第一个码元或称作高位代理（high surrogate），值的范围是0xD800..0xDBFF.由于高位代理比低位代理的值要小，所以为了避免混淆使用，Unicode标准现在称高位代理为前导代理（lead surrogates）。<br>低位的10比特的值（值的范围也是0..0x3FF）被加上0xDC00得到第二个码元或称作低位代理（low surrogate），现在值的范围是0xDC00..0xDFFF.由于低位代理比高位代理的值要大，所以为了避免混淆使用，Unicode标准现在称低位代理为后尾代理（trail surrogates）。<br>例如U+10437编码（𐐷）:</p>\n<p>0x10437减去0x10000,结果为0x00437,二进制为0000 0000 0100 0011 0111。<br>分区它的上10位值和下10位值（使用二进制）:0000000001 and 0000110111。<br>添加0xD800到上值，以形成高位：0xD800 + 0x0001 = 0xD801。<br>添加0xDC00到下值，以形成低位：0xDC00 + 0x0037 = 0xDC37。</p>\n<p>字符            普通二进制                    UTF-16二进制                                UTF-16十六进制字节字符代码    UTF-16BE十六进制字节    UTF-16LE 十六进制字节<br>$    U+0024    0000 0000 0010 0100            0000 0000 0010 0100                        0024                       00 24                24 00<br>€    U+20AC    0010 0000 1010 1100            0010 0000 1010 1100                        20AC                       20 AC                AC 20<br>𐐷    U+10437    0001 0000 0100 0011 0111     1101 1000 0000 0001 1101 1100 0011 0111    D801 DC37                   D8 01 DC 37            01 D8 37 DC<br>𤭢    U+24B62    0010 0100 1011 0110 0010     1101 1000 0101 0010 1101 1111 0110 0010    D852 DF62                   D8 52 DF 62            52 D8 62 DF</p>\n<p>UTF-16的大尾序和小尾序存储形式都在用。一般来说，以Macintosh制作或存储的文字使用大尾序格式，以Microsoft或Linux制作或存储的文字使用小尾序格式。</p>\n<p>为了弄清楚UTF-16文件的大小尾序，在UTF-16文件的开首，都会放置一个U+FEFF字符作为Byte Order Mark（UTF-16LE以FF FE代表，UTF-16BE以FE FF代表</p>\n<p>BOM:<br>BOM是一个Unicode字符。</p>\n<p>BOM用于指示文件/字符流的大小端（字节序）。</p>\n<p>不同编码所对应的BOM不同。</p>\n<p>编码类型            BOM值(16进制)        BOM值(10进制)<br>UTF-8            EF BB BF            239 187 191<br>UTF-16 (BE)        FE FF                254 255<br>UTF-16 (LE)        FF FE                255 254<br>UTF-32 (BE)        00 00 FE FF            0 0 254 255<br>UTF-32 (LE)        FF FE 00 00            255 254 0 0<br>UTF-7            2B 2F 76 38            43 47 118 56<br>                2B 2F 76 39            43 47 118 57<br>                2B 2F 76 2B            43 47 118 43<br>                2B 2F 76 2F            43 47 118 47<br>UTF-1            F7 64 4C            247 100 76<br>UTF-EBCDIC        DD 73 66 73            221 115 102 115<br>SCSU            0E FE FF            14 254 255<br>BOCU-1            FB EE 28            251 238 40<br>GB-18030        84 31 95 33            132 49 149 51</p>\n<p>中文字符编码标准:<br>1)GB2312<br>1980年，中国制定了GB2312-80，一共收录了 7445 个字符，包括 6763 个汉字和 682 个其它符号。GB2312-80，简称为GB2312。<br>2)GB13000<br>1993年，国际标准Unicode 1.1版本推出，收录中国大陆、台湾、日本及韩国通用字符集的汉字，总共有20,902个。中国订定了等同于Unicode 1.1版本的“GB 13000.1-93”，简称为GB13000。<br>GB13000，显然包含的GB2312已有的文字和其他很多为包含的文字<br>3)GBK<br>微软，对GB2312-80的扩展，即利用GB 2312-80未使用的编码空间，收录所有的GB 13000.1-93和Unicode 1.1之中的汉字全部字符，制定了GBK编码。</p>\n<p>GBK 收录了 21886 个符号，它分为汉字区和图形符号区。汉字区包括 21003 个字符。</p>\n<p>GBK 作为对 GB2312 的扩展，在现在的 Windows 系统中仍然使用代码页 CP936 表示，但是同样的 936 的代码页跟一开始的 936 的代码页只支持 GB2312 编码不同，现在的 936 代码页支持 GBK 的编码，GBK 同时也向下兼容GB2312 编码。</p>\n<p>所以，技术编码上，GBK兼容旧的GB2312，但是编码方式和GB13000不同，不兼容GB13000，但是所包含文字上，算是和GB13000相同。</p>\n<p>4)GB18030<br>GBK自身并非国家标准，只是曾由国家技术监督局标准化司、电子工业部科技与质量监督司公布为“技术规范指导性文件”。</p>\n<p>原始GB13000一直未被业界采用，2000年，国家出了标准GB18030-2000，简称GB18030，技术上兼容GBK而非GB13000，取代了 GBK1.0，成了正式的国家标准。</p>\n<p>该标准收录了 27484 个汉字，同时还收录了藏文、蒙文、维吾尔文等主要的少数民族文字。</p>\n<p>现在的PC平台必须支持 GB18030 ，对嵌入式产品暂不作要求。所以手机、MP3 一般只支持 GB2312。</p>\n<p>GB18030 在 Windows 中的代码页是 CP54936</p>\n<p>各种中文字符编码标准的关系:</p>\n<p>（ 中国大陆的标准）GB 13000.1-93 =（国际标准）Unicode 1.1</p>\n<p>（中国大陆标准）GB2312-80 = 简称GB2312 = Windows系统中的原先的CP936</p>\n<p>（微软制定的）GBK = （微软在编码方面）对 GB2312 的扩展 = （微软在所包含字符方面上包含了）GB 13000.1-93 + 其他部分汉字+ 台湾和香港的繁体 + 日语 + 朝鲜汉字 = Unicode 1.1 + 其他部分汉字+ 台湾和香港的繁体 + 日语 + 朝鲜汉字</p>\n<p>对于GBK：</p>\n<p>在编码方面：向下兼容GB2312，但是和GB 13000不同<br>在内容方面：等价于GB13000<br>微软中现在的新的CP936</p>\n<p>= GBK</p>\n<p>=兼容旧的GB2312</p>\n<p>在技术编码方面上，演化顺序为：</p>\n<p>ASCII ⇒ GB2312 ⇒ GBK ⇒ GB18030</p>\n<p>后者对之前的，都是支持之前的编码，即向下兼容，即同一个字符，在这些编码中，都是同样的值，后面的标准，支持更多的字符。</p>\n<p>区分中文编码的方法是高字节的最高位不为 0。</p>\n<p>按照程序员的称呼，GB2312、GBK 到 GB18030 都属于双字节字符集 (DBCS)</p>\n"},{"title":"编译安装libiconv库","date":"2016-07-27T08:29:07.000Z","comments":1,"_content":"\niconv是一个计算机程序以及一套应用程序编程接口的名称。它的作用是在多种国际编码格式之间进行文本内码的转换。支持的内码包括：\nUnicode相关编码，如UTF-8、UTF-16等等\n各国采用的ANSI编码，其中包括GB2312、BIG5等中文编码方式。\n作为应用程序的iconv采用命令行界面，允许将某种特定编码的文件转换为另一种编码。(维基百科)\n\n编译安装libiconv库\n{% codeblock %}\nwget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz\ntar zxf libiconv-1.14.tar.gz\ncd libiconv-1.14\n./configure --prefix=/usr\nmake\nmake install\n{% endcodeblock %}\n\n如果安装出现如下问题:\n{% codeblock %}\n[root@niaoyun49026 libiconv-1.14]# make\ncd lib && make all\nmake[1]: Entering directory `/usr/local/src/libiconv-1.14/lib'\nmake[1]: Nothing to be done for `all'.\nmake[1]: Leaving directory `/usr/local/src/libiconv-1.14/lib'\ncd preload && make all\nmake[1]: Entering directory `/usr/local/src/libiconv-1.14/preload'\nmake[1]: Nothing to be done for `all'.\nmake[1]: Leaving directory `/usr/local/src/libiconv-1.14/preload'\ncd srclib && make all\nmake[1]: Entering directory `/usr/local/src/libiconv-1.14/srclib'\nmake[2]: Entering directory `/usr/local/src/libiconv-1.14'\nmake[2]: Nothing to be done for `am--refresh'.\nmake[2]: Leaving directory `/usr/local/src/libiconv-1.14'\nmake  all-am\nmake[2]: Entering directory `/usr/local/src/libiconv-1.14/srclib'\nmake[3]: Entering directory `/usr/local/src/libiconv-1.14'\nmake[3]: Nothing to be done for `am--refresh'.\nmake[3]: Leaving directory `/usr/local/src/libiconv-1.14'\ngcc -DHAVE_CONFIG_H -DEXEEXT=\\\"\\\" -I. -I.. -I../lib  -I../intl -DDEPENDS_ON_LIBICONV=1 -DDEPENDS_ON_LIBINTL=1   -g -O2 -c progname.c\nIn file included from progname.c:26:0:\n./stdio.h:1010:1: error: [01mgetsundeclared here (not in a function)\n _GL_WARN_ON_USE (gets, \"gets is a security hole - use fgets instead\");\n ^\nmake[2]: *** [progname.o] Error 1\nmake[2]: Leaving directory `/usr/local/src/libiconv-1.14/srclib'\nmake[1]: *** [all] Error 2\nmake[1]: Leaving directory `/usr/local/src/libiconv-1.14/srclib'\nmake: *** [all] Error 2\n[root@niaoyun49026 libiconv-1.14]#\n{% endcodeblock %}\n\n解决方法(靠谱):\nlibiconv-1.14/srclib/stdio.in.h\n\n在stdio.in.h中找到 //_GL_WARN_ON_USE (gets, \"gets is a securityhole - use fgets instead\");\n修改为：\n/* It is very rare that the developer ever has full control of stdin,\n   so any use of gets warrants an unconditional warning.  Assume it is\n   always declared, since it is required by C89.  */\n//_GL_WARN_ON_USE (gets, \"gets is a security hole - use fgets instead\");\n#if defined(__GLIBC__) &&!defined(__UCLIBC__) &&!__GLIBC_PREREQ(2, 16)\n_GL_WARN_ON_USE (gets, \"gets is a security hole -use fgets instead\");\n#endif\n\n\n或者需要安装一下补丁(网上的查到的)\n参考地址{http://www.itkb.ro/kb/linux/patch-libiconv-pentru-glibc-216}\n{% codeblock %}\nwget -c http://www.itkb.ro/userfiles/file/libiconv-glibc-2.16.patch.gz\ncd libiconv-1.14/srclib\npatch -p1 stdio.in.h\n{% endcodeblock %}\n但我执行打补丁命令,等n久都没反应......\n\n使用例子\n文件infile从GB18030编码转换至UTF-8编码并写入到文件outfile中：\n\niconv -f GB18030 -t utf-8 < infile > outfile\n\nphp中使用:\n默认已激活此扩展， 可以使用--without-iconv 选项禁用它。\n\n--with-iconv=dir 用于 PHP编译时指定 iconv 在系统里的路径，否则会扫描默认路径\n\n使用例子:\n./configure --with-iconv=/usr/\n\n\nPHP语言对iconv封装了的函数：\niconv_get_encoding — 获取 iconv 扩展的内部配置变量\niconv_mime_decode_headers — 一次性解码多个 MIME 头字段\niconv_mime_decode — 解码一个MIME头字段\niconv_mime_encode — Composes a MIME header field\niconv_set_encoding — 为字符编码转换设定当前设置\niconv_strlen — 返回字符串的字符数统计\niconv_strpos — Finds position of first occurrence of a needle within a haystack\niconv_strrpos — Finds the last occurrence of a needle within a haystack\niconv_substr — 截取字符串的部分\niconv — 字符串按要求的字符编码来转换\nob_iconv_handler — 以输出缓冲处理程序转换字符编码\n\n\n","source":"_posts/编译安装libiconv库.md","raw":"---\ntitle: 编译安装libiconv库\ndate: 2016-07-27 16:29:07\ntags: libiconv\ncategories: liunx\ncomments: true\n---\n\niconv是一个计算机程序以及一套应用程序编程接口的名称。它的作用是在多种国际编码格式之间进行文本内码的转换。支持的内码包括：\nUnicode相关编码，如UTF-8、UTF-16等等\n各国采用的ANSI编码，其中包括GB2312、BIG5等中文编码方式。\n作为应用程序的iconv采用命令行界面，允许将某种特定编码的文件转换为另一种编码。(维基百科)\n\n编译安装libiconv库\n{% codeblock %}\nwget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz\ntar zxf libiconv-1.14.tar.gz\ncd libiconv-1.14\n./configure --prefix=/usr\nmake\nmake install\n{% endcodeblock %}\n\n如果安装出现如下问题:\n{% codeblock %}\n[root@niaoyun49026 libiconv-1.14]# make\ncd lib && make all\nmake[1]: Entering directory `/usr/local/src/libiconv-1.14/lib'\nmake[1]: Nothing to be done for `all'.\nmake[1]: Leaving directory `/usr/local/src/libiconv-1.14/lib'\ncd preload && make all\nmake[1]: Entering directory `/usr/local/src/libiconv-1.14/preload'\nmake[1]: Nothing to be done for `all'.\nmake[1]: Leaving directory `/usr/local/src/libiconv-1.14/preload'\ncd srclib && make all\nmake[1]: Entering directory `/usr/local/src/libiconv-1.14/srclib'\nmake[2]: Entering directory `/usr/local/src/libiconv-1.14'\nmake[2]: Nothing to be done for `am--refresh'.\nmake[2]: Leaving directory `/usr/local/src/libiconv-1.14'\nmake  all-am\nmake[2]: Entering directory `/usr/local/src/libiconv-1.14/srclib'\nmake[3]: Entering directory `/usr/local/src/libiconv-1.14'\nmake[3]: Nothing to be done for `am--refresh'.\nmake[3]: Leaving directory `/usr/local/src/libiconv-1.14'\ngcc -DHAVE_CONFIG_H -DEXEEXT=\\\"\\\" -I. -I.. -I../lib  -I../intl -DDEPENDS_ON_LIBICONV=1 -DDEPENDS_ON_LIBINTL=1   -g -O2 -c progname.c\nIn file included from progname.c:26:0:\n./stdio.h:1010:1: error: [01mgetsundeclared here (not in a function)\n _GL_WARN_ON_USE (gets, \"gets is a security hole - use fgets instead\");\n ^\nmake[2]: *** [progname.o] Error 1\nmake[2]: Leaving directory `/usr/local/src/libiconv-1.14/srclib'\nmake[1]: *** [all] Error 2\nmake[1]: Leaving directory `/usr/local/src/libiconv-1.14/srclib'\nmake: *** [all] Error 2\n[root@niaoyun49026 libiconv-1.14]#\n{% endcodeblock %}\n\n解决方法(靠谱):\nlibiconv-1.14/srclib/stdio.in.h\n\n在stdio.in.h中找到 //_GL_WARN_ON_USE (gets, \"gets is a securityhole - use fgets instead\");\n修改为：\n/* It is very rare that the developer ever has full control of stdin,\n   so any use of gets warrants an unconditional warning.  Assume it is\n   always declared, since it is required by C89.  */\n//_GL_WARN_ON_USE (gets, \"gets is a security hole - use fgets instead\");\n#if defined(__GLIBC__) &&!defined(__UCLIBC__) &&!__GLIBC_PREREQ(2, 16)\n_GL_WARN_ON_USE (gets, \"gets is a security hole -use fgets instead\");\n#endif\n\n\n或者需要安装一下补丁(网上的查到的)\n参考地址{http://www.itkb.ro/kb/linux/patch-libiconv-pentru-glibc-216}\n{% codeblock %}\nwget -c http://www.itkb.ro/userfiles/file/libiconv-glibc-2.16.patch.gz\ncd libiconv-1.14/srclib\npatch -p1 stdio.in.h\n{% endcodeblock %}\n但我执行打补丁命令,等n久都没反应......\n\n使用例子\n文件infile从GB18030编码转换至UTF-8编码并写入到文件outfile中：\n\niconv -f GB18030 -t utf-8 < infile > outfile\n\nphp中使用:\n默认已激活此扩展， 可以使用--without-iconv 选项禁用它。\n\n--with-iconv=dir 用于 PHP编译时指定 iconv 在系统里的路径，否则会扫描默认路径\n\n使用例子:\n./configure --with-iconv=/usr/\n\n\nPHP语言对iconv封装了的函数：\niconv_get_encoding — 获取 iconv 扩展的内部配置变量\niconv_mime_decode_headers — 一次性解码多个 MIME 头字段\niconv_mime_decode — 解码一个MIME头字段\niconv_mime_encode — Composes a MIME header field\niconv_set_encoding — 为字符编码转换设定当前设置\niconv_strlen — 返回字符串的字符数统计\niconv_strpos — Finds position of first occurrence of a needle within a haystack\niconv_strrpos — Finds the last occurrence of a needle within a haystack\niconv_substr — 截取字符串的部分\niconv — 字符串按要求的字符编码来转换\nob_iconv_handler — 以输出缓冲处理程序转换字符编码\n\n\n","slug":"编译安装libiconv库","published":1,"updated":"2017-03-01T02:52:32.000Z","layout":"post","photos":[],"link":"","_id":"cizqeieob0026znz47033q54i","content":"<p>iconv是一个计算机程序以及一套应用程序编程接口的名称。它的作用是在多种国际编码格式之间进行文本内码的转换。支持的内码包括：<br>Unicode相关编码，如UTF-8、UTF-16等等<br>各国采用的ANSI编码，其中包括GB2312、BIG5等中文编码方式。<br>作为应用程序的iconv采用命令行界面，允许将某种特定编码的文件转换为另一种编码。(维基百科)</p>\n<p>编译安装libiconv库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz</div><div class=\"line\">tar zxf libiconv-1.14.tar.gz</div><div class=\"line\">cd libiconv-1.14</div><div class=\"line\">./configure --prefix=/usr</div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure></p>\n<p>如果安装出现如下问题:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@niaoyun49026 libiconv-1.14]# make</div><div class=\"line\">cd lib &amp;&amp; make all</div><div class=\"line\">make[1]: Entering directory `/usr/local/src/libiconv-1.14/lib&apos;</div><div class=\"line\">make[1]: Nothing to be done for `all&apos;.</div><div class=\"line\">make[1]: Leaving directory `/usr/local/src/libiconv-1.14/lib&apos;</div><div class=\"line\">cd preload &amp;&amp; make all</div><div class=\"line\">make[1]: Entering directory `/usr/local/src/libiconv-1.14/preload&apos;</div><div class=\"line\">make[1]: Nothing to be done for `all&apos;.</div><div class=\"line\">make[1]: Leaving directory `/usr/local/src/libiconv-1.14/preload&apos;</div><div class=\"line\">cd srclib &amp;&amp; make all</div><div class=\"line\">make[1]: Entering directory `/usr/local/src/libiconv-1.14/srclib&apos;</div><div class=\"line\">make[2]: Entering directory `/usr/local/src/libiconv-1.14&apos;</div><div class=\"line\">make[2]: Nothing to be done for `am--refresh&apos;.</div><div class=\"line\">make[2]: Leaving directory `/usr/local/src/libiconv-1.14&apos;</div><div class=\"line\">make  all-am</div><div class=\"line\">make[2]: Entering directory `/usr/local/src/libiconv-1.14/srclib&apos;</div><div class=\"line\">make[3]: Entering directory `/usr/local/src/libiconv-1.14&apos;</div><div class=\"line\">make[3]: Nothing to be done for `am--refresh&apos;.</div><div class=\"line\">make[3]: Leaving directory `/usr/local/src/libiconv-1.14&apos;</div><div class=\"line\">gcc -DHAVE_CONFIG_H -DEXEEXT=\\&quot;\\&quot; -I. -I.. -I../lib  -I../intl -DDEPENDS_ON_LIBICONV=1 -DDEPENDS_ON_LIBINTL=1   -g -O2 -c progname.c</div><div class=\"line\">In file included from progname.c:26:0:</div><div class=\"line\">./stdio.h:1010:1: error: [01mgetsundeclared here (not in a function)</div><div class=\"line\"> _GL_WARN_ON_USE (gets, &quot;gets is a security hole - use fgets instead&quot;);</div><div class=\"line\"> ^</div><div class=\"line\">make[2]: *** [progname.o] Error 1</div><div class=\"line\">make[2]: Leaving directory `/usr/local/src/libiconv-1.14/srclib&apos;</div><div class=\"line\">make[1]: *** [all] Error 2</div><div class=\"line\">make[1]: Leaving directory `/usr/local/src/libiconv-1.14/srclib&apos;</div><div class=\"line\">make: *** [all] Error 2</div><div class=\"line\">[root@niaoyun49026 libiconv-1.14]#</div></pre></td></tr></table></figure></p>\n<p>解决方法(靠谱):<br>libiconv-1.14/srclib/stdio.in.h</p>\n<p>在stdio.in.h中找到 //_GL_WARN_ON_USE (gets, “gets is a securityhole - use fgets instead”);<br>修改为：<br>/<em> It is very rare that the developer ever has full control of stdin,<br>   so any use of gets warrants an unconditional warning.  Assume it is<br>   always declared, since it is required by C89.  </em>/<br>//_GL_WARN_ON_USE (gets, “gets is a security hole - use fgets instead”);</p>\n<p>#if defined(<strong>GLIBC</strong>) &amp;&amp;!defined(<strong>UCLIBC</strong>) &amp;&amp;!__GLIBC_PREREQ(2, 16)<br>_GL_WARN_ON_USE (gets, “gets is a security hole -use fgets instead”);</p>\n<p>#endif</p>\n<p>或者需要安装一下补丁(网上的查到的)<br>参考地址{<a href=\"http://www.itkb.ro/kb/linux/patch-libiconv-pentru-glibc-216}\" target=\"_blank\" rel=\"external\">http://www.itkb.ro/kb/linux/patch-libiconv-pentru-glibc-216}</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -c http://www.itkb.ro/userfiles/file/libiconv-glibc-2.16.patch.gz</div><div class=\"line\">cd libiconv-1.14/srclib</div><div class=\"line\">patch -p1 stdio.in.h</div></pre></td></tr></table></figure><br>但我执行打补丁命令,等n久都没反应……</p>\n<p>使用例子<br>文件infile从GB18030编码转换至UTF-8编码并写入到文件outfile中：</p>\n<p>iconv -f GB18030 -t utf-8 &lt; infile &gt; outfile</p>\n<p>php中使用:<br>默认已激活此扩展， 可以使用–without-iconv 选项禁用它。</p>\n<p>–with-iconv=dir 用于 PHP编译时指定 iconv 在系统里的路径，否则会扫描默认路径</p>\n<p>使用例子:<br>./configure –with-iconv=/usr/</p>\n<p>PHP语言对iconv封装了的函数：<br>iconv_get_encoding — 获取 iconv 扩展的内部配置变量<br>iconv_mime_decode_headers — 一次性解码多个 MIME 头字段<br>iconv_mime_decode — 解码一个MIME头字段<br>iconv_mime_encode — Composes a MIME header field<br>iconv_set_encoding — 为字符编码转换设定当前设置<br>iconv_strlen — 返回字符串的字符数统计<br>iconv_strpos — Finds position of first occurrence of a needle within a haystack<br>iconv_strrpos — Finds the last occurrence of a needle within a haystack<br>iconv_substr — 截取字符串的部分<br>iconv — 字符串按要求的字符编码来转换<br>ob_iconv_handler — 以输出缓冲处理程序转换字符编码</p>\n","excerpt":"","more":"<p>iconv是一个计算机程序以及一套应用程序编程接口的名称。它的作用是在多种国际编码格式之间进行文本内码的转换。支持的内码包括：<br>Unicode相关编码，如UTF-8、UTF-16等等<br>各国采用的ANSI编码，其中包括GB2312、BIG5等中文编码方式。<br>作为应用程序的iconv采用命令行界面，允许将某种特定编码的文件转换为另一种编码。(维基百科)</p>\n<p>编译安装libiconv库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz</div><div class=\"line\">tar zxf libiconv-1.14.tar.gz</div><div class=\"line\">cd libiconv-1.14</div><div class=\"line\">./configure --prefix=/usr</div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure></p>\n<p>如果安装出现如下问题:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@niaoyun49026 libiconv-1.14]# make</div><div class=\"line\">cd lib &amp;&amp; make all</div><div class=\"line\">make[1]: Entering directory `/usr/local/src/libiconv-1.14/lib&apos;</div><div class=\"line\">make[1]: Nothing to be done for `all&apos;.</div><div class=\"line\">make[1]: Leaving directory `/usr/local/src/libiconv-1.14/lib&apos;</div><div class=\"line\">cd preload &amp;&amp; make all</div><div class=\"line\">make[1]: Entering directory `/usr/local/src/libiconv-1.14/preload&apos;</div><div class=\"line\">make[1]: Nothing to be done for `all&apos;.</div><div class=\"line\">make[1]: Leaving directory `/usr/local/src/libiconv-1.14/preload&apos;</div><div class=\"line\">cd srclib &amp;&amp; make all</div><div class=\"line\">make[1]: Entering directory `/usr/local/src/libiconv-1.14/srclib&apos;</div><div class=\"line\">make[2]: Entering directory `/usr/local/src/libiconv-1.14&apos;</div><div class=\"line\">make[2]: Nothing to be done for `am--refresh&apos;.</div><div class=\"line\">make[2]: Leaving directory `/usr/local/src/libiconv-1.14&apos;</div><div class=\"line\">make  all-am</div><div class=\"line\">make[2]: Entering directory `/usr/local/src/libiconv-1.14/srclib&apos;</div><div class=\"line\">make[3]: Entering directory `/usr/local/src/libiconv-1.14&apos;</div><div class=\"line\">make[3]: Nothing to be done for `am--refresh&apos;.</div><div class=\"line\">make[3]: Leaving directory `/usr/local/src/libiconv-1.14&apos;</div><div class=\"line\">gcc -DHAVE_CONFIG_H -DEXEEXT=\\&quot;\\&quot; -I. -I.. -I../lib  -I../intl -DDEPENDS_ON_LIBICONV=1 -DDEPENDS_ON_LIBINTL=1   -g -O2 -c progname.c</div><div class=\"line\">In file included from progname.c:26:0:</div><div class=\"line\">./stdio.h:1010:1: error: [01mgetsundeclared here (not in a function)</div><div class=\"line\"> _GL_WARN_ON_USE (gets, &quot;gets is a security hole - use fgets instead&quot;);</div><div class=\"line\"> ^</div><div class=\"line\">make[2]: *** [progname.o] Error 1</div><div class=\"line\">make[2]: Leaving directory `/usr/local/src/libiconv-1.14/srclib&apos;</div><div class=\"line\">make[1]: *** [all] Error 2</div><div class=\"line\">make[1]: Leaving directory `/usr/local/src/libiconv-1.14/srclib&apos;</div><div class=\"line\">make: *** [all] Error 2</div><div class=\"line\">[root@niaoyun49026 libiconv-1.14]#</div></pre></td></tr></table></figure></p>\n<p>解决方法(靠谱):<br>libiconv-1.14/srclib/stdio.in.h</p>\n<p>在stdio.in.h中找到 //_GL_WARN_ON_USE (gets, “gets is a securityhole - use fgets instead”);<br>修改为：<br>/<em> It is very rare that the developer ever has full control of stdin,<br>   so any use of gets warrants an unconditional warning.  Assume it is<br>   always declared, since it is required by C89.  </em>/<br>//_GL_WARN_ON_USE (gets, “gets is a security hole - use fgets instead”);</p>\n<p>#if defined(<strong>GLIBC</strong>) &amp;&amp;!defined(<strong>UCLIBC</strong>) &amp;&amp;!__GLIBC_PREREQ(2, 16)<br>_GL_WARN_ON_USE (gets, “gets is a security hole -use fgets instead”);</p>\n<p>#endif</p>\n<p>或者需要安装一下补丁(网上的查到的)<br>参考地址{<a href=\"http://www.itkb.ro/kb/linux/patch-libiconv-pentru-glibc-216}\">http://www.itkb.ro/kb/linux/patch-libiconv-pentru-glibc-216}</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -c http://www.itkb.ro/userfiles/file/libiconv-glibc-2.16.patch.gz</div><div class=\"line\">cd libiconv-1.14/srclib</div><div class=\"line\">patch -p1 stdio.in.h</div></pre></td></tr></table></figure><br>但我执行打补丁命令,等n久都没反应……</p>\n<p>使用例子<br>文件infile从GB18030编码转换至UTF-8编码并写入到文件outfile中：</p>\n<p>iconv -f GB18030 -t utf-8 &lt; infile &gt; outfile</p>\n<p>php中使用:<br>默认已激活此扩展， 可以使用–without-iconv 选项禁用它。</p>\n<p>–with-iconv=dir 用于 PHP编译时指定 iconv 在系统里的路径，否则会扫描默认路径</p>\n<p>使用例子:<br>./configure –with-iconv=/usr/</p>\n<p>PHP语言对iconv封装了的函数：<br>iconv_get_encoding — 获取 iconv 扩展的内部配置变量<br>iconv_mime_decode_headers — 一次性解码多个 MIME 头字段<br>iconv_mime_decode — 解码一个MIME头字段<br>iconv_mime_encode — Composes a MIME header field<br>iconv_set_encoding — 为字符编码转换设定当前设置<br>iconv_strlen — 返回字符串的字符数统计<br>iconv_strpos — Finds position of first occurrence of a needle within a haystack<br>iconv_strrpos — Finds the last occurrence of a needle within a haystack<br>iconv_substr — 截取字符串的部分<br>iconv — 字符串按要求的字符编码来转换<br>ob_iconv_handler — 以输出缓冲处理程序转换字符编码</p>\n"},{"title":"路由器刷Pandorabox及SS配置-科学上网","date":"2016-07-03T06:23:40.000Z","_content":"\n最近在JD6.18中便宜获得一台优酷路由宝,使用几天后发现上传赚金币是个很坑的玩意,所以果断刷机,折腾了一天,最后弄好了,在这里记录一下.\n\n1.刷机\n\n1)先找到能开telnet的路由器固件\n刚到手的路由宝系统版本是1.5的,可以互刷其他版本,但我手贱直接升级为2.1了,不能再降级.不再那么容易root了.\n最后找到一个可以使用telnet的固件版,哈哈,只要能进telnet一切都好办了.\n下面是固件获取地址(感谢提供该固件的大神):\n{% link L1_2.1.0613.8617标准版固件（已开telnet) http://bbs.yj.youku.com/forum.php?mod=viewthread&tid=45797&extra=page%3D1 %} \n<!-- more -->\n\n2)进入路由器刷机\n进入路由宝管理地址192.168.11.1 ,选择收到升级,上传下载好的,可以开telnet的固件,进行刷机工作...\n大概几分钟后,就刷机成功.\n发现telnet连接不上\n{% codeblock %}\nhuangchengkaideMacBook-Air:~ kai$ telnet 192.168.11.1\n\nTrying 192.168.11.1...\n\nConnected to youku-router.\n\nEscape character is '^]'.\n\n === IMPORTANT ============================\n\n  Use 'passwd' to set your login password\n\n  this will disable telnet and enable SSH\n\n ------------------------------------------\n\n {% endcodeblock %}\n\n这里坑了我一会,最后通过google和度娘,发现路由宝在有密码的时候telnet是不打开的,所以...\n...当然是恢复出厂设置啦.....\n\n恢复出厂设置后,正常telnet连接上,赞一个\n{% codeblock %}\nhuangchengkaideMacBook-Air:~ kai$ telnet 192.168.11.1\n\nBusyBox v1.22.1 (2016-05-31 09:37:31 CST) built-in shell (ash)\n\nEnter 'help' for a list of built-in commands.\n\n\n\n  _______                     ________        __              \n\n |       |.-----.-----.-----.|  |  |  |.----.|  |_      \n\n |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|        \n\n |_______||   __|_____|__|__||________||__|  |____|       \n\n          |__| W I R E L E S S   F R E E D O M  \n\n\n\n -----------------------------------------------------\n\n BARRIER BREAKER (Barrier Breaker, unknown)\n\n -----------------------------------------------------\n\n  * 1/2 oz Galliano         Pour all ingredients into\n\n  * 4 oz cold Coffee        an irish coffee mug filled\n\n  * 1 1/2 oz Dark Rum       with crushed ice. Stir.\n\n  * 2 tsp. Creme de Cacao\n\n -----------------------------------------------------\n\n customized by youku, \n\n copyright (c) youku, 2015. all rights reserved.\n\n{% endcodeblock %}\n\n3)先刷个breed\n\n其实刷机都是刷firmware分区的内容,可以通过命令:\n\nmtd -r write xxxx固件版本.bin  firmware所在分区名称\n\n但为了安全起见和以后的各种刷机操作,建议先刷个breed.\n\nbreed是一种用于嵌入式系统中的Bootloader,它可以用来恢复路由器的固件，可以说只要刷了这玩意，路由器基本上刷不死了。\n\n那么问题来了,什么是Bootloader \n\nBootloader意思为引导加载器，即为用于加载操作系统的程序。它是一大类此类功能程序的统称。现在的 BIOS、UEFI、GRUB、RedBoot、U-Boot、CFE、Breed 等都是 Bootloader\n\n当然有需要也可以刷其它的Bootloader,但我偏好于breed.也可以通过breed刷进入其它的bootloader哦\n\n所谓的刷不死,指的是所有固件更新操作均在 Breed 里面完成。因为有些官方升级固件自带 Bootloader，如果从官方固件的 Web 进行升级，那么会导致 Breed 被覆盖。\n所以Breed 在刷入固件时会自动去掉固件自带的 Bootloader，因此能够保证 Breed 本身是“不死”的.\n\n下载breed地址:{% link 进入改地址找到适合路由器版本的bredd http://breed.hackpascal.net %}\n\n下面进入正题:\n{% codeblock %}\n#先看下Bootloader在那个分区,\n[root@Youku-router]cat /proc/mtd \ndev:    size   erasesize  name\nmtd0: 02000000 00010000 \"ALL\"\nmtd1: 00030000 00010000 \"Bootloader\"\nmtd2: 00010000 00010000 \"Config\"\nmtd3: 00010000 00010000 \"Factory\"\nmtd4: 00fb0000 00010000 \"firmware\"\nmtd5: 00e2ad1d 00010000 \"rootfs\"\nmtd6: 00730000 00010000 \"rootfs_data\"\n\n#然后将breed写入到mtd1分区,写入成功后会自动重启路由器\n\n[root@Youku-router]mtd -r write /tmp/breed-mt7620-youku-yk1.bin  mtd1\nUnlocking mtd1 ...\n\nWriting from /tmp/breed-mt7620-youku-yk1.bin to mtd1 ...     \nRebooting ...\nConnection closed by foreign host.\n\n{% endcodeblock %}\n\n注意:如果执行mtd -r write /tmp/breed-mt7620-youku-yk1.bin  mtd1 命令报错,说mtd1 不能够打开的话,那就是路由器的固件版本将改分区锁定了,不能进行修改,解决方法是找个可以修改mtd1版的固件,或者直接刷firmware固件进行刷机然后再在新固件中刷breed.\n\n4)刷入Pandorabox\n\npandorabox是一种开放路由器平台，经lintel修改后命名潘多拉openwrt，目前支持MT7620N平台如意云路由器，极路由等等.\n\npandorabox有各种丰富的插件,很自由和开放\n\n下载地址:{% link  http://downloads.openwrt.org.cn/PandoraBox/  %}\n下载适合路由器的版本\n\n先进入breed,按住路由器reset键,先把电源,再查电源,载按住3秒左右.在浏览器中输入192.168.1.1,即可进入breed\n\n![breed界面](/images/breed.png)\n\n现在固件更新,选择固件,上传pandorabox的固件,进行更新.以后刷固件都是以这种方式,从而保证路由器刷不死\n\n等几分钟后,输入192.168.1.1即可进入pandorabox系统,默认账号是root 密码:admin\n\npandorabox系统默认开通telnet和ssh,可以直接进入终端做一些操作\n\n{% codeblock %}\nhuangchkaideAir:~ kai$ ssh root@192.168.1.1\nroot@192.168.1.1's password: \n\n\nBusyBox v1.22.1 (2015-06-09 10:32:22 CST) built-in shell (ash)\nEnter 'help' for a list of built-in commands.\n\n\n  _______________________________________________________________ \n |    ____                 _                 ____               |\n |   |  _ \\ __ _ _ __   __| | ___  _ __ __ _| __ )  _____  __   |\n |   | |_) / _` | '_ \\ / _` |/ _ \\| '__/ _` |  _ \\ / _ \\ \\/ /   |\n |   |  __/ (_| | | | | (_| | (_) | | | (_| | |_) | (_) >  <    |\n |   |_|   \\__,_|_| |_|\\__,_|\\___/|_|  \\__,_|____/ \\___/_/\\_\\   |\n |                                                              |\n |                  PandoraBox SDK Platform                     |\n |                  The Core of SmartRouter                     |\n |       Copyright 2013-2015 D-Team Technology Co.,Ltd.SZ       |\n |                http://www.pandorabox.org.cn                  |\n |______________________________________________________________|\n  Base on OpenWrt BARRIER BREAKER (14.09, r1024)\n[root@PandoraBox:/root]#\n\n{% endcodeblock %}\n\n2.配置Shadowsocks\n\n![登陆pandorabox界面](/images/pandorabox_login.png)\n\n进入pandorabox后,设置:\n拨号: 网络->接口->WAN->修改协议PPPoE->输入宽带账号密码->保存&应用->完成\n修改wifi名称: 网络->无线->修改->基本设置->修改ESSID->保存&退出->完成\n修改wifi密码: 网络->无线->修改->无线安装->现在加密方式->输入密码->保存&退出->完成\n\n下面是科学上网设置:\n首先要有Shadowsocks账号密码,呵呵.\n\n设置Shadowsocks账号密码.开启透明代理(重要).如果是国外网站我们才会走ss科学上网.\n![设置Shadowsocks1](/images/pandorabox_1.png)\n\n设置udp转发\n![设置Shadowsocks2](/images/pandorabox_2.png)\n\n开启chinaDNS解析\n![开启ChinaDNS](/images/pandorabox_3.png)\n\n网络->dhcp/dns->设置\n在DNS转发那里填入127.0.0.1#1053(chinaDNS的地址和端口)\n![dns设置](/images/pandorabox_4.png)\n忽略解析文件,打勾(重要)\n![dns设置](/images/pandorabox_5.png)\n\n以上设置，国外IP走SS通，国内IP直连，从而实现智能梯子,科学上网\n\n透明代理是根据/etc/chinadns_chnroute.txt这个文件来决定走ss还直连.所以这文件要经常更新\n\n{% codeblock %}\n[root@PandoraBox:/root]#crontab -e\n\n00 3 * * * wget -O- 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | grep ipv4 | grep CN | awk -F\\| '{ printf(\"%s/%d\\n\", $4, 32-log($5)/log(2)) }' > /etc/chinadns_chnroute.txt\n\n{% endcodeblock %}\n\n有个更好用的方法redsocks2,一个修改版redsocks.除了redsocks本来的功能之外,redsocks2可以在不需要黑名单的情况下自动判断被封锁的IP并且使用代理服务器建立连接.\n\n但由于redsocks2暂不支持Shadowsocks的chacha20加密方式,我的ss是chacha20加密方式,所以就没有用到\n\n![redsocks2](/images/pandorabox_6.png)\n\n\n\n","source":"_posts/路由器刷Pandorabox及SS配置-科学上网.md","raw":"---\ntitle: 路由器刷Pandorabox及SS配置-科学上网\ndate: 2016-07-03 14:23:40\ntags: 科学上网\n---\n\n最近在JD6.18中便宜获得一台优酷路由宝,使用几天后发现上传赚金币是个很坑的玩意,所以果断刷机,折腾了一天,最后弄好了,在这里记录一下.\n\n1.刷机\n\n1)先找到能开telnet的路由器固件\n刚到手的路由宝系统版本是1.5的,可以互刷其他版本,但我手贱直接升级为2.1了,不能再降级.不再那么容易root了.\n最后找到一个可以使用telnet的固件版,哈哈,只要能进telnet一切都好办了.\n下面是固件获取地址(感谢提供该固件的大神):\n{% link L1_2.1.0613.8617标准版固件（已开telnet) http://bbs.yj.youku.com/forum.php?mod=viewthread&tid=45797&extra=page%3D1 %} \n<!-- more -->\n\n2)进入路由器刷机\n进入路由宝管理地址192.168.11.1 ,选择收到升级,上传下载好的,可以开telnet的固件,进行刷机工作...\n大概几分钟后,就刷机成功.\n发现telnet连接不上\n{% codeblock %}\nhuangchengkaideMacBook-Air:~ kai$ telnet 192.168.11.1\n\nTrying 192.168.11.1...\n\nConnected to youku-router.\n\nEscape character is '^]'.\n\n === IMPORTANT ============================\n\n  Use 'passwd' to set your login password\n\n  this will disable telnet and enable SSH\n\n ------------------------------------------\n\n {% endcodeblock %}\n\n这里坑了我一会,最后通过google和度娘,发现路由宝在有密码的时候telnet是不打开的,所以...\n...当然是恢复出厂设置啦.....\n\n恢复出厂设置后,正常telnet连接上,赞一个\n{% codeblock %}\nhuangchengkaideMacBook-Air:~ kai$ telnet 192.168.11.1\n\nBusyBox v1.22.1 (2016-05-31 09:37:31 CST) built-in shell (ash)\n\nEnter 'help' for a list of built-in commands.\n\n\n\n  _______                     ________        __              \n\n |       |.-----.-----.-----.|  |  |  |.----.|  |_      \n\n |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|        \n\n |_______||   __|_____|__|__||________||__|  |____|       \n\n          |__| W I R E L E S S   F R E E D O M  \n\n\n\n -----------------------------------------------------\n\n BARRIER BREAKER (Barrier Breaker, unknown)\n\n -----------------------------------------------------\n\n  * 1/2 oz Galliano         Pour all ingredients into\n\n  * 4 oz cold Coffee        an irish coffee mug filled\n\n  * 1 1/2 oz Dark Rum       with crushed ice. Stir.\n\n  * 2 tsp. Creme de Cacao\n\n -----------------------------------------------------\n\n customized by youku, \n\n copyright (c) youku, 2015. all rights reserved.\n\n{% endcodeblock %}\n\n3)先刷个breed\n\n其实刷机都是刷firmware分区的内容,可以通过命令:\n\nmtd -r write xxxx固件版本.bin  firmware所在分区名称\n\n但为了安全起见和以后的各种刷机操作,建议先刷个breed.\n\nbreed是一种用于嵌入式系统中的Bootloader,它可以用来恢复路由器的固件，可以说只要刷了这玩意，路由器基本上刷不死了。\n\n那么问题来了,什么是Bootloader \n\nBootloader意思为引导加载器，即为用于加载操作系统的程序。它是一大类此类功能程序的统称。现在的 BIOS、UEFI、GRUB、RedBoot、U-Boot、CFE、Breed 等都是 Bootloader\n\n当然有需要也可以刷其它的Bootloader,但我偏好于breed.也可以通过breed刷进入其它的bootloader哦\n\n所谓的刷不死,指的是所有固件更新操作均在 Breed 里面完成。因为有些官方升级固件自带 Bootloader，如果从官方固件的 Web 进行升级，那么会导致 Breed 被覆盖。\n所以Breed 在刷入固件时会自动去掉固件自带的 Bootloader，因此能够保证 Breed 本身是“不死”的.\n\n下载breed地址:{% link 进入改地址找到适合路由器版本的bredd http://breed.hackpascal.net %}\n\n下面进入正题:\n{% codeblock %}\n#先看下Bootloader在那个分区,\n[root@Youku-router]cat /proc/mtd \ndev:    size   erasesize  name\nmtd0: 02000000 00010000 \"ALL\"\nmtd1: 00030000 00010000 \"Bootloader\"\nmtd2: 00010000 00010000 \"Config\"\nmtd3: 00010000 00010000 \"Factory\"\nmtd4: 00fb0000 00010000 \"firmware\"\nmtd5: 00e2ad1d 00010000 \"rootfs\"\nmtd6: 00730000 00010000 \"rootfs_data\"\n\n#然后将breed写入到mtd1分区,写入成功后会自动重启路由器\n\n[root@Youku-router]mtd -r write /tmp/breed-mt7620-youku-yk1.bin  mtd1\nUnlocking mtd1 ...\n\nWriting from /tmp/breed-mt7620-youku-yk1.bin to mtd1 ...     \nRebooting ...\nConnection closed by foreign host.\n\n{% endcodeblock %}\n\n注意:如果执行mtd -r write /tmp/breed-mt7620-youku-yk1.bin  mtd1 命令报错,说mtd1 不能够打开的话,那就是路由器的固件版本将改分区锁定了,不能进行修改,解决方法是找个可以修改mtd1版的固件,或者直接刷firmware固件进行刷机然后再在新固件中刷breed.\n\n4)刷入Pandorabox\n\npandorabox是一种开放路由器平台，经lintel修改后命名潘多拉openwrt，目前支持MT7620N平台如意云路由器，极路由等等.\n\npandorabox有各种丰富的插件,很自由和开放\n\n下载地址:{% link  http://downloads.openwrt.org.cn/PandoraBox/  %}\n下载适合路由器的版本\n\n先进入breed,按住路由器reset键,先把电源,再查电源,载按住3秒左右.在浏览器中输入192.168.1.1,即可进入breed\n\n![breed界面](/images/breed.png)\n\n现在固件更新,选择固件,上传pandorabox的固件,进行更新.以后刷固件都是以这种方式,从而保证路由器刷不死\n\n等几分钟后,输入192.168.1.1即可进入pandorabox系统,默认账号是root 密码:admin\n\npandorabox系统默认开通telnet和ssh,可以直接进入终端做一些操作\n\n{% codeblock %}\nhuangchkaideAir:~ kai$ ssh root@192.168.1.1\nroot@192.168.1.1's password: \n\n\nBusyBox v1.22.1 (2015-06-09 10:32:22 CST) built-in shell (ash)\nEnter 'help' for a list of built-in commands.\n\n\n  _______________________________________________________________ \n |    ____                 _                 ____               |\n |   |  _ \\ __ _ _ __   __| | ___  _ __ __ _| __ )  _____  __   |\n |   | |_) / _` | '_ \\ / _` |/ _ \\| '__/ _` |  _ \\ / _ \\ \\/ /   |\n |   |  __/ (_| | | | | (_| | (_) | | | (_| | |_) | (_) >  <    |\n |   |_|   \\__,_|_| |_|\\__,_|\\___/|_|  \\__,_|____/ \\___/_/\\_\\   |\n |                                                              |\n |                  PandoraBox SDK Platform                     |\n |                  The Core of SmartRouter                     |\n |       Copyright 2013-2015 D-Team Technology Co.,Ltd.SZ       |\n |                http://www.pandorabox.org.cn                  |\n |______________________________________________________________|\n  Base on OpenWrt BARRIER BREAKER (14.09, r1024)\n[root@PandoraBox:/root]#\n\n{% endcodeblock %}\n\n2.配置Shadowsocks\n\n![登陆pandorabox界面](/images/pandorabox_login.png)\n\n进入pandorabox后,设置:\n拨号: 网络->接口->WAN->修改协议PPPoE->输入宽带账号密码->保存&应用->完成\n修改wifi名称: 网络->无线->修改->基本设置->修改ESSID->保存&退出->完成\n修改wifi密码: 网络->无线->修改->无线安装->现在加密方式->输入密码->保存&退出->完成\n\n下面是科学上网设置:\n首先要有Shadowsocks账号密码,呵呵.\n\n设置Shadowsocks账号密码.开启透明代理(重要).如果是国外网站我们才会走ss科学上网.\n![设置Shadowsocks1](/images/pandorabox_1.png)\n\n设置udp转发\n![设置Shadowsocks2](/images/pandorabox_2.png)\n\n开启chinaDNS解析\n![开启ChinaDNS](/images/pandorabox_3.png)\n\n网络->dhcp/dns->设置\n在DNS转发那里填入127.0.0.1#1053(chinaDNS的地址和端口)\n![dns设置](/images/pandorabox_4.png)\n忽略解析文件,打勾(重要)\n![dns设置](/images/pandorabox_5.png)\n\n以上设置，国外IP走SS通，国内IP直连，从而实现智能梯子,科学上网\n\n透明代理是根据/etc/chinadns_chnroute.txt这个文件来决定走ss还直连.所以这文件要经常更新\n\n{% codeblock %}\n[root@PandoraBox:/root]#crontab -e\n\n00 3 * * * wget -O- 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | grep ipv4 | grep CN | awk -F\\| '{ printf(\"%s/%d\\n\", $4, 32-log($5)/log(2)) }' > /etc/chinadns_chnroute.txt\n\n{% endcodeblock %}\n\n有个更好用的方法redsocks2,一个修改版redsocks.除了redsocks本来的功能之外,redsocks2可以在不需要黑名单的情况下自动判断被封锁的IP并且使用代理服务器建立连接.\n\n但由于redsocks2暂不支持Shadowsocks的chacha20加密方式,我的ss是chacha20加密方式,所以就没有用到\n\n![redsocks2](/images/pandorabox_6.png)\n\n\n\n","slug":"路由器刷Pandorabox及SS配置-科学上网","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeieod0028znz4ro9qcsm2","content":"<p>最近在JD6.18中便宜获得一台优酷路由宝,使用几天后发现上传赚金币是个很坑的玩意,所以果断刷机,折腾了一天,最后弄好了,在这里记录一下.</p>\n<p>1.刷机</p>\n<p>1)先找到能开telnet的路由器固件<br>刚到手的路由宝系统版本是1.5的,可以互刷其他版本,但我手贱直接升级为2.1了,不能再降级.不再那么容易root了.<br>最后找到一个可以使用telnet的固件版,哈哈,只要能进telnet一切都好办了.<br>下面是固件获取地址(感谢提供该固件的大神):<br><a href=\"http://bbs.yj.youku.com/forum.php?mod=viewthread&tid=45797&extra=page%3D1\" target=\"_blank\" rel=\"external\">L1_2.1.0613.8617标准版固件（已开telnet)</a><br><a id=\"more\"></a></p>\n<p>2)进入路由器刷机<br>进入路由宝管理地址192.168.11.1 ,选择收到升级,上传下载好的,可以开telnet的固件,进行刷机工作…<br>大概几分钟后,就刷机成功.<br>发现telnet连接不上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchengkaideMacBook-Air:~ kai$ telnet 192.168.11.1</div><div class=\"line\"></div><div class=\"line\">Trying 192.168.11.1...</div><div class=\"line\"></div><div class=\"line\">Connected to youku-router.</div><div class=\"line\"></div><div class=\"line\">Escape character is &apos;^]&apos;.</div><div class=\"line\"></div><div class=\"line\"> === IMPORTANT ============================</div><div class=\"line\"></div><div class=\"line\">  Use &apos;passwd&apos; to set your login password</div><div class=\"line\"></div><div class=\"line\">  this will disable telnet and enable SSH</div><div class=\"line\"></div><div class=\"line\"> ------------------------------------------</div><div class=\"line\"></div><div class=\"line\"> </div></pre></td></tr></table></figure></p>\n<p>这里坑了我一会,最后通过google和度娘,发现路由宝在有密码的时候telnet是不打开的,所以…<br>…当然是恢复出厂设置啦…..</p>\n<p>恢复出厂设置后,正常telnet连接上,赞一个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchengkaideMacBook-Air:~ kai$ telnet 192.168.11.1</div><div class=\"line\"></div><div class=\"line\">BusyBox v1.22.1 (2016-05-31 09:37:31 CST) built-in shell (ash)</div><div class=\"line\"></div><div class=\"line\">Enter &apos;help&apos; for a list of built-in commands.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  _______                     ________        __              </div><div class=\"line\"></div><div class=\"line\"> |       |.-----.-----.-----.|  |  |  |.----.|  |_      </div><div class=\"line\"></div><div class=\"line\"> |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|        </div><div class=\"line\"></div><div class=\"line\"> |_______||   __|_____|__|__||________||__|  |____|       </div><div class=\"line\"></div><div class=\"line\">          |__| W I R E L E S S   F R E E D O M  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> -----------------------------------------------------</div><div class=\"line\"></div><div class=\"line\"> BARRIER BREAKER (Barrier Breaker, unknown)</div><div class=\"line\"></div><div class=\"line\"> -----------------------------------------------------</div><div class=\"line\"></div><div class=\"line\">  * 1/2 oz Galliano         Pour all ingredients into</div><div class=\"line\"></div><div class=\"line\">  * 4 oz cold Coffee        an irish coffee mug filled</div><div class=\"line\"></div><div class=\"line\">  * 1 1/2 oz Dark Rum       with crushed ice. Stir.</div><div class=\"line\"></div><div class=\"line\">  * 2 tsp. Creme de Cacao</div><div class=\"line\"></div><div class=\"line\"> -----------------------------------------------------</div><div class=\"line\"></div><div class=\"line\"> customized by youku, </div><div class=\"line\"></div><div class=\"line\"> copyright (c) youku, 2015. all rights reserved.</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>3)先刷个breed</p>\n<p>其实刷机都是刷firmware分区的内容,可以通过命令:</p>\n<p>mtd -r write xxxx固件版本.bin  firmware所在分区名称</p>\n<p>但为了安全起见和以后的各种刷机操作,建议先刷个breed.</p>\n<p>breed是一种用于嵌入式系统中的Bootloader,它可以用来恢复路由器的固件，可以说只要刷了这玩意，路由器基本上刷不死了。</p>\n<p>那么问题来了,什么是Bootloader </p>\n<p>Bootloader意思为引导加载器，即为用于加载操作系统的程序。它是一大类此类功能程序的统称。现在的 BIOS、UEFI、GRUB、RedBoot、U-Boot、CFE、Breed 等都是 Bootloader</p>\n<p>当然有需要也可以刷其它的Bootloader,但我偏好于breed.也可以通过breed刷进入其它的bootloader哦</p>\n<p>所谓的刷不死,指的是所有固件更新操作均在 Breed 里面完成。因为有些官方升级固件自带 Bootloader，如果从官方固件的 Web 进行升级，那么会导致 Breed 被覆盖。<br>所以Breed 在刷入固件时会自动去掉固件自带的 Bootloader，因此能够保证 Breed 本身是“不死”的.</p>\n<p>下载breed地址:<a href=\"http://breed.hackpascal.net\" target=\"_blank\" rel=\"external\">进入改地址找到适合路由器版本的bredd</a></p>\n<p>下面进入正题:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">#先看下Bootloader在那个分区,</div><div class=\"line\">[root@Youku-router]cat /proc/mtd </div><div class=\"line\">dev:    size   erasesize  name</div><div class=\"line\">mtd0: 02000000 00010000 &quot;ALL&quot;</div><div class=\"line\">mtd1: 00030000 00010000 &quot;Bootloader&quot;</div><div class=\"line\">mtd2: 00010000 00010000 &quot;Config&quot;</div><div class=\"line\">mtd3: 00010000 00010000 &quot;Factory&quot;</div><div class=\"line\">mtd4: 00fb0000 00010000 &quot;firmware&quot;</div><div class=\"line\">mtd5: 00e2ad1d 00010000 &quot;rootfs&quot;</div><div class=\"line\">mtd6: 00730000 00010000 &quot;rootfs_data&quot;</div><div class=\"line\"></div><div class=\"line\">#然后将breed写入到mtd1分区,写入成功后会自动重启路由器</div><div class=\"line\"></div><div class=\"line\">[root@Youku-router]mtd -r write /tmp/breed-mt7620-youku-yk1.bin  mtd1</div><div class=\"line\">Unlocking mtd1 ...</div><div class=\"line\"></div><div class=\"line\">Writing from /tmp/breed-mt7620-youku-yk1.bin to mtd1 ...     </div><div class=\"line\">Rebooting ...</div><div class=\"line\">Connection closed by foreign host.</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>注意:如果执行mtd -r write /tmp/breed-mt7620-youku-yk1.bin  mtd1 命令报错,说mtd1 不能够打开的话,那就是路由器的固件版本将改分区锁定了,不能进行修改,解决方法是找个可以修改mtd1版的固件,或者直接刷firmware固件进行刷机然后再在新固件中刷breed.</p>\n<p>4)刷入Pandorabox</p>\n<p>pandorabox是一种开放路由器平台，经lintel修改后命名潘多拉openwrt，目前支持MT7620N平台如意云路由器，极路由等等.</p>\n<p>pandorabox有各种丰富的插件,很自由和开放</p>\n<p>下载地址:<a href=\"http://downloads.openwrt.org.cn/PandoraBox/\" target=\"_blank\" rel=\"external\"></a><br>下载适合路由器的版本</p>\n<p>先进入breed,按住路由器reset键,先把电源,再查电源,载按住3秒左右.在浏览器中输入192.168.1.1,即可进入breed</p>\n<p><img src=\"/images/breed.png\" alt=\"breed界面\"></p>\n<p>现在固件更新,选择固件,上传pandorabox的固件,进行更新.以后刷固件都是以这种方式,从而保证路由器刷不死</p>\n<p>等几分钟后,输入192.168.1.1即可进入pandorabox系统,默认账号是root 密码:admin</p>\n<p>pandorabox系统默认开通telnet和ssh,可以直接进入终端做一些操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchkaideAir:~ kai$ ssh root@192.168.1.1</div><div class=\"line\">root@192.168.1.1&apos;s password: </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">BusyBox v1.22.1 (2015-06-09 10:32:22 CST) built-in shell (ash)</div><div class=\"line\">Enter &apos;help&apos; for a list of built-in commands.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  _______________________________________________________________ </div><div class=\"line\"> |    ____                 _                 ____               |</div><div class=\"line\"> |   |  _ \\ __ _ _ __   __| | ___  _ __ __ _| __ )  _____  __   |</div><div class=\"line\"> |   | |_) / _` | &apos;_ \\ / _` |/ _ \\| &apos;__/ _` |  _ \\ / _ \\ \\/ /   |</div><div class=\"line\"> |   |  __/ (_| | | | | (_| | (_) | | | (_| | |_) | (_) &gt;  &lt;    |</div><div class=\"line\"> |   |_|   \\__,_|_| |_|\\__,_|\\___/|_|  \\__,_|____/ \\___/_/\\_\\   |</div><div class=\"line\"> |                                                              |</div><div class=\"line\"> |                  PandoraBox SDK Platform                     |</div><div class=\"line\"> |                  The Core of SmartRouter                     |</div><div class=\"line\"> |       Copyright 2013-2015 D-Team Technology Co.,Ltd.SZ       |</div><div class=\"line\"> |                http://www.pandorabox.org.cn                  |</div><div class=\"line\"> |______________________________________________________________|</div><div class=\"line\">  Base on OpenWrt BARRIER BREAKER (14.09, r1024)</div><div class=\"line\">[root@PandoraBox:/root]#</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>2.配置Shadowsocks</p>\n<p><img src=\"/images/pandorabox_login.png\" alt=\"登陆pandorabox界面\"></p>\n<p>进入pandorabox后,设置:<br>拨号: 网络-&gt;接口-&gt;WAN-&gt;修改协议PPPoE-&gt;输入宽带账号密码-&gt;保存&amp;应用-&gt;完成<br>修改wifi名称: 网络-&gt;无线-&gt;修改-&gt;基本设置-&gt;修改ESSID-&gt;保存&amp;退出-&gt;完成<br>修改wifi密码: 网络-&gt;无线-&gt;修改-&gt;无线安装-&gt;现在加密方式-&gt;输入密码-&gt;保存&amp;退出-&gt;完成</p>\n<p>下面是科学上网设置:<br>首先要有Shadowsocks账号密码,呵呵.</p>\n<p>设置Shadowsocks账号密码.开启透明代理(重要).如果是国外网站我们才会走ss科学上网.<br><img src=\"/images/pandorabox_1.png\" alt=\"设置Shadowsocks1\"></p>\n<p>设置udp转发<br><img src=\"/images/pandorabox_2.png\" alt=\"设置Shadowsocks2\"></p>\n<p>开启chinaDNS解析<br><img src=\"/images/pandorabox_3.png\" alt=\"开启ChinaDNS\"></p>\n<p>网络-&gt;dhcp/dns-&gt;设置<br>在DNS转发那里填入127.0.0.1#1053(chinaDNS的地址和端口)<br><img src=\"/images/pandorabox_4.png\" alt=\"dns设置\"><br>忽略解析文件,打勾(重要)<br><img src=\"/images/pandorabox_5.png\" alt=\"dns设置\"></p>\n<p>以上设置，国外IP走SS通，国内IP直连，从而实现智能梯子,科学上网</p>\n<p>透明代理是根据/etc/chinadns_chnroute.txt这个文件来决定走ss还直连.所以这文件要经常更新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/root]#crontab -e</div><div class=\"line\"></div><div class=\"line\">00 3 * * * wget -O- &apos;http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest&apos; | grep ipv4 | grep CN | awk -F\\| &apos;&#123; printf(&quot;%s/%d\\n&quot;, $4, 32-log($5)/log(2)) &#125;&apos; &gt; /etc/chinadns_chnroute.txt</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>有个更好用的方法redsocks2,一个修改版redsocks.除了redsocks本来的功能之外,redsocks2可以在不需要黑名单的情况下自动判断被封锁的IP并且使用代理服务器建立连接.</p>\n<p>但由于redsocks2暂不支持Shadowsocks的chacha20加密方式,我的ss是chacha20加密方式,所以就没有用到</p>\n<p><img src=\"/images/pandorabox_6.png\" alt=\"redsocks2\"></p>\n","excerpt":"<p>最近在JD6.18中便宜获得一台优酷路由宝,使用几天后发现上传赚金币是个很坑的玩意,所以果断刷机,折腾了一天,最后弄好了,在这里记录一下.</p>\n<p>1.刷机</p>\n<p>1)先找到能开telnet的路由器固件<br>刚到手的路由宝系统版本是1.5的,可以互刷其他版本,但我手贱直接升级为2.1了,不能再降级.不再那么容易root了.<br>最后找到一个可以使用telnet的固件版,哈哈,只要能进telnet一切都好办了.<br>下面是固件获取地址(感谢提供该固件的大神):<br><a href=\"http://bbs.yj.youku.com/forum.php?mod=viewthread&tid=45797&extra=page%3D1\">L1_2.1.0613.8617标准版固件（已开telnet)</a><br>","more":"</p>\n<p>2)进入路由器刷机<br>进入路由宝管理地址192.168.11.1 ,选择收到升级,上传下载好的,可以开telnet的固件,进行刷机工作…<br>大概几分钟后,就刷机成功.<br>发现telnet连接不上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchengkaideMacBook-Air:~ kai$ telnet 192.168.11.1</div><div class=\"line\"></div><div class=\"line\">Trying 192.168.11.1...</div><div class=\"line\"></div><div class=\"line\">Connected to youku-router.</div><div class=\"line\"></div><div class=\"line\">Escape character is &apos;^]&apos;.</div><div class=\"line\"></div><div class=\"line\"> === IMPORTANT ============================</div><div class=\"line\"></div><div class=\"line\">  Use &apos;passwd&apos; to set your login password</div><div class=\"line\"></div><div class=\"line\">  this will disable telnet and enable SSH</div><div class=\"line\"></div><div class=\"line\"> ------------------------------------------</div><div class=\"line\"></div><div class=\"line\"> </div></pre></td></tr></table></figure></p>\n<p>这里坑了我一会,最后通过google和度娘,发现路由宝在有密码的时候telnet是不打开的,所以…<br>…当然是恢复出厂设置啦…..</p>\n<p>恢复出厂设置后,正常telnet连接上,赞一个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchengkaideMacBook-Air:~ kai$ telnet 192.168.11.1</div><div class=\"line\"></div><div class=\"line\">BusyBox v1.22.1 (2016-05-31 09:37:31 CST) built-in shell (ash)</div><div class=\"line\"></div><div class=\"line\">Enter &apos;help&apos; for a list of built-in commands.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  _______                     ________        __              </div><div class=\"line\"></div><div class=\"line\"> |       |.-----.-----.-----.|  |  |  |.----.|  |_      </div><div class=\"line\"></div><div class=\"line\"> |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|        </div><div class=\"line\"></div><div class=\"line\"> |_______||   __|_____|__|__||________||__|  |____|       </div><div class=\"line\"></div><div class=\"line\">          |__| W I R E L E S S   F R E E D O M  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> -----------------------------------------------------</div><div class=\"line\"></div><div class=\"line\"> BARRIER BREAKER (Barrier Breaker, unknown)</div><div class=\"line\"></div><div class=\"line\"> -----------------------------------------------------</div><div class=\"line\"></div><div class=\"line\">  * 1/2 oz Galliano         Pour all ingredients into</div><div class=\"line\"></div><div class=\"line\">  * 4 oz cold Coffee        an irish coffee mug filled</div><div class=\"line\"></div><div class=\"line\">  * 1 1/2 oz Dark Rum       with crushed ice. Stir.</div><div class=\"line\"></div><div class=\"line\">  * 2 tsp. Creme de Cacao</div><div class=\"line\"></div><div class=\"line\"> -----------------------------------------------------</div><div class=\"line\"></div><div class=\"line\"> customized by youku, </div><div class=\"line\"></div><div class=\"line\"> copyright (c) youku, 2015. all rights reserved.</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>3)先刷个breed</p>\n<p>其实刷机都是刷firmware分区的内容,可以通过命令:</p>\n<p>mtd -r write xxxx固件版本.bin  firmware所在分区名称</p>\n<p>但为了安全起见和以后的各种刷机操作,建议先刷个breed.</p>\n<p>breed是一种用于嵌入式系统中的Bootloader,它可以用来恢复路由器的固件，可以说只要刷了这玩意，路由器基本上刷不死了。</p>\n<p>那么问题来了,什么是Bootloader </p>\n<p>Bootloader意思为引导加载器，即为用于加载操作系统的程序。它是一大类此类功能程序的统称。现在的 BIOS、UEFI、GRUB、RedBoot、U-Boot、CFE、Breed 等都是 Bootloader</p>\n<p>当然有需要也可以刷其它的Bootloader,但我偏好于breed.也可以通过breed刷进入其它的bootloader哦</p>\n<p>所谓的刷不死,指的是所有固件更新操作均在 Breed 里面完成。因为有些官方升级固件自带 Bootloader，如果从官方固件的 Web 进行升级，那么会导致 Breed 被覆盖。<br>所以Breed 在刷入固件时会自动去掉固件自带的 Bootloader，因此能够保证 Breed 本身是“不死”的.</p>\n<p>下载breed地址:<a href=\"http://breed.hackpascal.net\">进入改地址找到适合路由器版本的bredd</a></p>\n<p>下面进入正题:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">#先看下Bootloader在那个分区,</div><div class=\"line\">[root@Youku-router]cat /proc/mtd </div><div class=\"line\">dev:    size   erasesize  name</div><div class=\"line\">mtd0: 02000000 00010000 &quot;ALL&quot;</div><div class=\"line\">mtd1: 00030000 00010000 &quot;Bootloader&quot;</div><div class=\"line\">mtd2: 00010000 00010000 &quot;Config&quot;</div><div class=\"line\">mtd3: 00010000 00010000 &quot;Factory&quot;</div><div class=\"line\">mtd4: 00fb0000 00010000 &quot;firmware&quot;</div><div class=\"line\">mtd5: 00e2ad1d 00010000 &quot;rootfs&quot;</div><div class=\"line\">mtd6: 00730000 00010000 &quot;rootfs_data&quot;</div><div class=\"line\"></div><div class=\"line\">#然后将breed写入到mtd1分区,写入成功后会自动重启路由器</div><div class=\"line\"></div><div class=\"line\">[root@Youku-router]mtd -r write /tmp/breed-mt7620-youku-yk1.bin  mtd1</div><div class=\"line\">Unlocking mtd1 ...</div><div class=\"line\"></div><div class=\"line\">Writing from /tmp/breed-mt7620-youku-yk1.bin to mtd1 ...     </div><div class=\"line\">Rebooting ...</div><div class=\"line\">Connection closed by foreign host.</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>注意:如果执行mtd -r write /tmp/breed-mt7620-youku-yk1.bin  mtd1 命令报错,说mtd1 不能够打开的话,那就是路由器的固件版本将改分区锁定了,不能进行修改,解决方法是找个可以修改mtd1版的固件,或者直接刷firmware固件进行刷机然后再在新固件中刷breed.</p>\n<p>4)刷入Pandorabox</p>\n<p>pandorabox是一种开放路由器平台，经lintel修改后命名潘多拉openwrt，目前支持MT7620N平台如意云路由器，极路由等等.</p>\n<p>pandorabox有各种丰富的插件,很自由和开放</p>\n<p>下载地址:<a href=\"http://downloads.openwrt.org.cn/PandoraBox/\"></a><br>下载适合路由器的版本</p>\n<p>先进入breed,按住路由器reset键,先把电源,再查电源,载按住3秒左右.在浏览器中输入192.168.1.1,即可进入breed</p>\n<p><img src=\"/images/breed.png\" alt=\"breed界面\"></p>\n<p>现在固件更新,选择固件,上传pandorabox的固件,进行更新.以后刷固件都是以这种方式,从而保证路由器刷不死</p>\n<p>等几分钟后,输入192.168.1.1即可进入pandorabox系统,默认账号是root 密码:admin</p>\n<p>pandorabox系统默认开通telnet和ssh,可以直接进入终端做一些操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">huangchkaideAir:~ kai$ ssh root@192.168.1.1</div><div class=\"line\">root@192.168.1.1&apos;s password: </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">BusyBox v1.22.1 (2015-06-09 10:32:22 CST) built-in shell (ash)</div><div class=\"line\">Enter &apos;help&apos; for a list of built-in commands.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  _______________________________________________________________ </div><div class=\"line\"> |    ____                 _                 ____               |</div><div class=\"line\"> |   |  _ \\ __ _ _ __   __| | ___  _ __ __ _| __ )  _____  __   |</div><div class=\"line\"> |   | |_) / _` | &apos;_ \\ / _` |/ _ \\| &apos;__/ _` |  _ \\ / _ \\ \\/ /   |</div><div class=\"line\"> |   |  __/ (_| | | | | (_| | (_) | | | (_| | |_) | (_) &gt;  &lt;    |</div><div class=\"line\"> |   |_|   \\__,_|_| |_|\\__,_|\\___/|_|  \\__,_|____/ \\___/_/\\_\\   |</div><div class=\"line\"> |                                                              |</div><div class=\"line\"> |                  PandoraBox SDK Platform                     |</div><div class=\"line\"> |                  The Core of SmartRouter                     |</div><div class=\"line\"> |       Copyright 2013-2015 D-Team Technology Co.,Ltd.SZ       |</div><div class=\"line\"> |                http://www.pandorabox.org.cn                  |</div><div class=\"line\"> |______________________________________________________________|</div><div class=\"line\">  Base on OpenWrt BARRIER BREAKER (14.09, r1024)</div><div class=\"line\">[root@PandoraBox:/root]#</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>2.配置Shadowsocks</p>\n<p><img src=\"/images/pandorabox_login.png\" alt=\"登陆pandorabox界面\"></p>\n<p>进入pandorabox后,设置:<br>拨号: 网络-&gt;接口-&gt;WAN-&gt;修改协议PPPoE-&gt;输入宽带账号密码-&gt;保存&amp;应用-&gt;完成<br>修改wifi名称: 网络-&gt;无线-&gt;修改-&gt;基本设置-&gt;修改ESSID-&gt;保存&amp;退出-&gt;完成<br>修改wifi密码: 网络-&gt;无线-&gt;修改-&gt;无线安装-&gt;现在加密方式-&gt;输入密码-&gt;保存&amp;退出-&gt;完成</p>\n<p>下面是科学上网设置:<br>首先要有Shadowsocks账号密码,呵呵.</p>\n<p>设置Shadowsocks账号密码.开启透明代理(重要).如果是国外网站我们才会走ss科学上网.<br><img src=\"/images/pandorabox_1.png\" alt=\"设置Shadowsocks1\"></p>\n<p>设置udp转发<br><img src=\"/images/pandorabox_2.png\" alt=\"设置Shadowsocks2\"></p>\n<p>开启chinaDNS解析<br><img src=\"/images/pandorabox_3.png\" alt=\"开启ChinaDNS\"></p>\n<p>网络-&gt;dhcp/dns-&gt;设置<br>在DNS转发那里填入127.0.0.1#1053(chinaDNS的地址和端口)<br><img src=\"/images/pandorabox_4.png\" alt=\"dns设置\"><br>忽略解析文件,打勾(重要)<br><img src=\"/images/pandorabox_5.png\" alt=\"dns设置\"></p>\n<p>以上设置，国外IP走SS通，国内IP直连，从而实现智能梯子,科学上网</p>\n<p>透明代理是根据/etc/chinadns_chnroute.txt这个文件来决定走ss还直连.所以这文件要经常更新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/root]#crontab -e</div><div class=\"line\"></div><div class=\"line\">00 3 * * * wget -O- &apos;http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest&apos; | grep ipv4 | grep CN | awk -F\\| &apos;&#123; printf(&quot;%s/%d\\n&quot;, $4, 32-log($5)/log(2)) &#125;&apos; &gt; /etc/chinadns_chnroute.txt</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>有个更好用的方法redsocks2,一个修改版redsocks.除了redsocks本来的功能之外,redsocks2可以在不需要黑名单的情况下自动判断被封锁的IP并且使用代理服务器建立连接.</p>\n<p>但由于redsocks2暂不支持Shadowsocks的chacha20加密方式,我的ss是chacha20加密方式,所以就没有用到</p>\n<p><img src=\"/images/pandorabox_6.png\" alt=\"redsocks2\"></p>"},{"title":"路由宝刷机pandorabox后利用自带存储卡","date":"2016-07-29T14:40:39.000Z","_content":"路由宝,自带8G的内存卡,但刷机后,它的分区太难用了,居然分了8个区,太乱了.\n{% codeblock %}\n[root@PandoraBox:/mnt/mmcblk0p2]#df\nFilesystem                Size      Used Available Use% Mounted on\nrootfs                   19.9M    772.0K     19.2M   4% /\n/dev/root                10.8M     10.8M         0 100% /rom\ntmpfs                    61.8M    396.0K     61.4M   1% /tmp\n/dev/mtdblock7           19.9M    772.0K     19.2M   4% /overlay\noverlayfs:/overlay       19.9M    772.0K     19.2M   4% /\ntmpfs                   512.0K         0    512.0K   0% /dev\n/dev/mmcblk0p2          126.0M      4.5K    126.0M   0% /mnt/mmcblk0p2\n/dev/mmcblk0p3            2.0G      4.0K      2.0G   0% /mnt/mmcblk0p3\n/dev/mmcblk0p1          126.0M      4.5K    126.0M   0% /mnt/mmcblk0p2\n/dev/mmcblk0p5            2.0G      4.0K      2.0G   0% /mnt/mmcblk0p5\n/dev/mmcblk0p6            2.0G      4.0K      2.0G   0% /mnt/mmcblk0p6\n/dev/mmcblk0p7            1.1G      4.0K      1.1G   0% /mnt/mmcblk0p7\n{% endcodeblock %}\n\n所以我将它格式化了,并合并了分区,如下:\n\n先使用opkg包管理器安装e2fsprogs,安装后才能使用(mkfs.ext mkfs.ext2 mkfs.ext3 mkfs.ext4) 等格式化命令\n{% codeblock %}\n[root@PandoraBox:/mnt/mmcblk0p2]#opkg install e2fsprogs\nInstalling e2fsprogs (1.42.4-1) to root...\nDownloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/base/e2fsprogs_1.42.4-1_ralink.ipk.\nConfiguring e2fsprogs.\n{% endcodeblock %}\n将内存卡的挂载点,umount掉,才能删除分区\n{% codeblock %}\n  umount: can't umount /dev/mmcblk0p4: Invalid argument\n[root@PandoraBox:/mnt]#umount /dev/mmcblk0p1\n[root@PandoraBox:/mnt]#umount /dev/mmcblk0p2\n[root@PandoraBox:/mnt]#umount /dev/mmcblk0p3\n[root@PandoraBox:/mnt]#umount /dev/mmcblk0p4\n[root@PandoraBox:/mnt]#umount /dev/mmcblk0p5\n[root@PandoraBox:/mnt]#umount /dev/mmcblk0p6\n[root@PandoraBox:/mnt]#umount /dev/mmcblk0p7\n\n#再看下,发现已经都取消挂载了\n[root@PandoraBox:/mnt]#df\nFilesystem                Size      Used Available Use% Mounted on\nrootfs                   19.9M    968.0K     19.0M   5% /\n/dev/root                10.8M     10.8M         0 100% /rom\ntmpfs                    61.8M    568.0K     61.2M   1% /tmp\n/dev/mtdblock7           19.9M    968.0K     19.0M   5% /overlay\noverlayfs:/overlay       19.9M    968.0K     19.0M   5% /\ntmpfs                   512.0K         0    512.0K   0% /dev\n{% endcodeblock %}\n\n然后再使用cfdisk命令,将分区删除并新建一个分区\n{% codeblock %}\n[root@PandoraBox:/mnt]#cfdisk /dev/mmcblk0 \n{% endcodeblock %}\n\n![分区](/images/cfdisk01.png)\n\n最后结果:\n\n{% codeblock %}\n\n                                               cfdisk (util-linux 2.24.1)\n\n                            Disk Drive: /dev/mmcblk0\n                        Size: 7948206080 bytes, 7948 MB\n              Heads: 4   Sectors per Track: 16   Cylinders: 242560\n\n    Name        Flags      Part Type  FS Type          [Label]        Size (MB)\n ------------------------------------------------------------------------------\n    mmcblk0p1               Primary   Linux                             7948.21 \n\n\n\n     [ Bootable ]  [  Delete  ]  [   Help   ]  [ Maximize ]  [  Print   ]\n     [   Quit   ]  [   Type   ]  [  Units   ]  [  Write   ]\n\n                  Quit program without writing partition table\n\n#最后记得write哦\n{% endcodeblock %}\n\n\n现在只有一个分区了,要格式化一下,我这里将内存卡格式化ext4格式的\n{% codeblock %}\n[root@PandoraBox:/mnt]#mkfs.ext4 /dev/mmcblk0\nmke2fs 1.42.4 (12-June-2012)\nFilesystem label=\nOS type: Linux\nBlock size=4096 (log=2)\nFragment size=4096 (log=2)\nStride=0 blocks, Stripe width=0 blocks\n485760 inodes, 1940480 blocks\n97024 blocks (5.00%) reserved for the super user\nFirst data block=0\nMaximum filesystem blocks=1988100096\n60 block groups\n32768 blocks per group, 32768 fragments per group\n8096 inodes per group\nSuperblock backups stored on blocks: \n\t32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632\n\nAllocating group tables: done                            \nWriting inode tables: done                            \nCreating journal (32768 blocks): \ndone\nWriting superblocks and filesystem accounting information: done \n\n{% endcodeblock %}\n\n最近一步,当然是挂载新分区到相应的目录咯\n{% codeblock %}\n\n[root@PandoraBox:/]#mount /dev/mmcblk0 /data\n#看下结果\n[root@PandoraBox:/]#df\nFilesystem                Size      Used Available Use% Mounted on\nrootfs                   19.9M    972.0K     19.0M   5% /\n/dev/root                10.8M     10.8M         0 100% /rom\ntmpfs                    61.8M    572.0K     61.2M   1% /tmp\n/dev/mtdblock7           19.9M    972.0K     19.0M   5% /overlay\noverlayfs:/overlay       19.9M    972.0K     19.0M   5% /\ntmpfs                   512.0K         0    512.0K   0% /dev\n/dev/mmcblk0              7.2G     16.7M      6.8G   0% /data\n[root@PandoraBox:/]#\n\n{% endcodeblock %}\n\n\n","source":"_posts/路由宝刷机pandorabox后利用自带存储卡.md","raw":"---\ntitle: 路由宝刷机pandorabox后利用自带存储卡\ndate: 2016-07-29 22:40:39\ntags:\n---\n路由宝,自带8G的内存卡,但刷机后,它的分区太难用了,居然分了8个区,太乱了.\n{% codeblock %}\n[root@PandoraBox:/mnt/mmcblk0p2]#df\nFilesystem                Size      Used Available Use% Mounted on\nrootfs                   19.9M    772.0K     19.2M   4% /\n/dev/root                10.8M     10.8M         0 100% /rom\ntmpfs                    61.8M    396.0K     61.4M   1% /tmp\n/dev/mtdblock7           19.9M    772.0K     19.2M   4% /overlay\noverlayfs:/overlay       19.9M    772.0K     19.2M   4% /\ntmpfs                   512.0K         0    512.0K   0% /dev\n/dev/mmcblk0p2          126.0M      4.5K    126.0M   0% /mnt/mmcblk0p2\n/dev/mmcblk0p3            2.0G      4.0K      2.0G   0% /mnt/mmcblk0p3\n/dev/mmcblk0p1          126.0M      4.5K    126.0M   0% /mnt/mmcblk0p2\n/dev/mmcblk0p5            2.0G      4.0K      2.0G   0% /mnt/mmcblk0p5\n/dev/mmcblk0p6            2.0G      4.0K      2.0G   0% /mnt/mmcblk0p6\n/dev/mmcblk0p7            1.1G      4.0K      1.1G   0% /mnt/mmcblk0p7\n{% endcodeblock %}\n\n所以我将它格式化了,并合并了分区,如下:\n\n先使用opkg包管理器安装e2fsprogs,安装后才能使用(mkfs.ext mkfs.ext2 mkfs.ext3 mkfs.ext4) 等格式化命令\n{% codeblock %}\n[root@PandoraBox:/mnt/mmcblk0p2]#opkg install e2fsprogs\nInstalling e2fsprogs (1.42.4-1) to root...\nDownloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/base/e2fsprogs_1.42.4-1_ralink.ipk.\nConfiguring e2fsprogs.\n{% endcodeblock %}\n将内存卡的挂载点,umount掉,才能删除分区\n{% codeblock %}\n  umount: can't umount /dev/mmcblk0p4: Invalid argument\n[root@PandoraBox:/mnt]#umount /dev/mmcblk0p1\n[root@PandoraBox:/mnt]#umount /dev/mmcblk0p2\n[root@PandoraBox:/mnt]#umount /dev/mmcblk0p3\n[root@PandoraBox:/mnt]#umount /dev/mmcblk0p4\n[root@PandoraBox:/mnt]#umount /dev/mmcblk0p5\n[root@PandoraBox:/mnt]#umount /dev/mmcblk0p6\n[root@PandoraBox:/mnt]#umount /dev/mmcblk0p7\n\n#再看下,发现已经都取消挂载了\n[root@PandoraBox:/mnt]#df\nFilesystem                Size      Used Available Use% Mounted on\nrootfs                   19.9M    968.0K     19.0M   5% /\n/dev/root                10.8M     10.8M         0 100% /rom\ntmpfs                    61.8M    568.0K     61.2M   1% /tmp\n/dev/mtdblock7           19.9M    968.0K     19.0M   5% /overlay\noverlayfs:/overlay       19.9M    968.0K     19.0M   5% /\ntmpfs                   512.0K         0    512.0K   0% /dev\n{% endcodeblock %}\n\n然后再使用cfdisk命令,将分区删除并新建一个分区\n{% codeblock %}\n[root@PandoraBox:/mnt]#cfdisk /dev/mmcblk0 \n{% endcodeblock %}\n\n![分区](/images/cfdisk01.png)\n\n最后结果:\n\n{% codeblock %}\n\n                                               cfdisk (util-linux 2.24.1)\n\n                            Disk Drive: /dev/mmcblk0\n                        Size: 7948206080 bytes, 7948 MB\n              Heads: 4   Sectors per Track: 16   Cylinders: 242560\n\n    Name        Flags      Part Type  FS Type          [Label]        Size (MB)\n ------------------------------------------------------------------------------\n    mmcblk0p1               Primary   Linux                             7948.21 \n\n\n\n     [ Bootable ]  [  Delete  ]  [   Help   ]  [ Maximize ]  [  Print   ]\n     [   Quit   ]  [   Type   ]  [  Units   ]  [  Write   ]\n\n                  Quit program without writing partition table\n\n#最后记得write哦\n{% endcodeblock %}\n\n\n现在只有一个分区了,要格式化一下,我这里将内存卡格式化ext4格式的\n{% codeblock %}\n[root@PandoraBox:/mnt]#mkfs.ext4 /dev/mmcblk0\nmke2fs 1.42.4 (12-June-2012)\nFilesystem label=\nOS type: Linux\nBlock size=4096 (log=2)\nFragment size=4096 (log=2)\nStride=0 blocks, Stripe width=0 blocks\n485760 inodes, 1940480 blocks\n97024 blocks (5.00%) reserved for the super user\nFirst data block=0\nMaximum filesystem blocks=1988100096\n60 block groups\n32768 blocks per group, 32768 fragments per group\n8096 inodes per group\nSuperblock backups stored on blocks: \n\t32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632\n\nAllocating group tables: done                            \nWriting inode tables: done                            \nCreating journal (32768 blocks): \ndone\nWriting superblocks and filesystem accounting information: done \n\n{% endcodeblock %}\n\n最近一步,当然是挂载新分区到相应的目录咯\n{% codeblock %}\n\n[root@PandoraBox:/]#mount /dev/mmcblk0 /data\n#看下结果\n[root@PandoraBox:/]#df\nFilesystem                Size      Used Available Use% Mounted on\nrootfs                   19.9M    972.0K     19.0M   5% /\n/dev/root                10.8M     10.8M         0 100% /rom\ntmpfs                    61.8M    572.0K     61.2M   1% /tmp\n/dev/mtdblock7           19.9M    972.0K     19.0M   5% /overlay\noverlayfs:/overlay       19.9M    972.0K     19.0M   5% /\ntmpfs                   512.0K         0    512.0K   0% /dev\n/dev/mmcblk0              7.2G     16.7M      6.8G   0% /data\n[root@PandoraBox:/]#\n\n{% endcodeblock %}\n\n\n","slug":"路由宝刷机pandorabox后利用自带存储卡","published":1,"updated":"2017-03-01T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizqeieog002aznz4kscahzlg","content":"<p>路由宝,自带8G的内存卡,但刷机后,它的分区太难用了,居然分了8个区,太乱了.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/mnt/mmcblk0p2]#df</div><div class=\"line\">Filesystem                Size      Used Available Use% Mounted on</div><div class=\"line\">rootfs                   19.9M    772.0K     19.2M   4% /</div><div class=\"line\">/dev/root                10.8M     10.8M         0 100% /rom</div><div class=\"line\">tmpfs                    61.8M    396.0K     61.4M   1% /tmp</div><div class=\"line\">/dev/mtdblock7           19.9M    772.0K     19.2M   4% /overlay</div><div class=\"line\">overlayfs:/overlay       19.9M    772.0K     19.2M   4% /</div><div class=\"line\">tmpfs                   512.0K         0    512.0K   0% /dev</div><div class=\"line\">/dev/mmcblk0p2          126.0M      4.5K    126.0M   0% /mnt/mmcblk0p2</div><div class=\"line\">/dev/mmcblk0p3            2.0G      4.0K      2.0G   0% /mnt/mmcblk0p3</div><div class=\"line\">/dev/mmcblk0p1          126.0M      4.5K    126.0M   0% /mnt/mmcblk0p2</div><div class=\"line\">/dev/mmcblk0p5            2.0G      4.0K      2.0G   0% /mnt/mmcblk0p5</div><div class=\"line\">/dev/mmcblk0p6            2.0G      4.0K      2.0G   0% /mnt/mmcblk0p6</div><div class=\"line\">/dev/mmcblk0p7            1.1G      4.0K      1.1G   0% /mnt/mmcblk0p7</div></pre></td></tr></table></figure></p>\n<p>所以我将它格式化了,并合并了分区,如下:</p>\n<p>先使用opkg包管理器安装e2fsprogs,安装后才能使用(mkfs.ext mkfs.ext2 mkfs.ext3 mkfs.ext4) 等格式化命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/mnt/mmcblk0p2]#opkg install e2fsprogs</div><div class=\"line\">Installing e2fsprogs (1.42.4-1) to root...</div><div class=\"line\">Downloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/base/e2fsprogs_1.42.4-1_ralink.ipk.</div><div class=\"line\">Configuring e2fsprogs.</div></pre></td></tr></table></figure><br>将内存卡的挂载点,umount掉,才能删除分区<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">  umount: can&apos;t umount /dev/mmcblk0p4: Invalid argument</div><div class=\"line\">[root@PandoraBox:/mnt]#umount /dev/mmcblk0p1</div><div class=\"line\">[root@PandoraBox:/mnt]#umount /dev/mmcblk0p2</div><div class=\"line\">[root@PandoraBox:/mnt]#umount /dev/mmcblk0p3</div><div class=\"line\">[root@PandoraBox:/mnt]#umount /dev/mmcblk0p4</div><div class=\"line\">[root@PandoraBox:/mnt]#umount /dev/mmcblk0p5</div><div class=\"line\">[root@PandoraBox:/mnt]#umount /dev/mmcblk0p6</div><div class=\"line\">[root@PandoraBox:/mnt]#umount /dev/mmcblk0p7</div><div class=\"line\"></div><div class=\"line\">#再看下,发现已经都取消挂载了</div><div class=\"line\">[root@PandoraBox:/mnt]#df</div><div class=\"line\">Filesystem                Size      Used Available Use% Mounted on</div><div class=\"line\">rootfs                   19.9M    968.0K     19.0M   5% /</div><div class=\"line\">/dev/root                10.8M     10.8M         0 100% /rom</div><div class=\"line\">tmpfs                    61.8M    568.0K     61.2M   1% /tmp</div><div class=\"line\">/dev/mtdblock7           19.9M    968.0K     19.0M   5% /overlay</div><div class=\"line\">overlayfs:/overlay       19.9M    968.0K     19.0M   5% /</div><div class=\"line\">tmpfs                   512.0K         0    512.0K   0% /dev</div></pre></td></tr></table></figure></p>\n<p>然后再使用cfdisk命令,将分区删除并新建一个分区<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/mnt]#cfdisk /dev/mmcblk0 </div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/cfdisk01.png\" alt=\"分区\"></p>\n<p>最后结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">                                               cfdisk (util-linux 2.24.1)</div><div class=\"line\"></div><div class=\"line\">                            Disk Drive: /dev/mmcblk0</div><div class=\"line\">                        Size: 7948206080 bytes, 7948 MB</div><div class=\"line\">              Heads: 4   Sectors per Track: 16   Cylinders: 242560</div><div class=\"line\"></div><div class=\"line\">    Name        Flags      Part Type  FS Type          [Label]        Size (MB)</div><div class=\"line\"> ------------------------------------------------------------------------------</div><div class=\"line\">    mmcblk0p1               Primary   Linux                             7948.21 </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     [ Bootable ]  [  Delete  ]  [   Help   ]  [ Maximize ]  [  Print   ]</div><div class=\"line\">     [   Quit   ]  [   Type   ]  [  Units   ]  [  Write   ]</div><div class=\"line\"></div><div class=\"line\">                  Quit program without writing partition table</div><div class=\"line\"></div><div class=\"line\">#最后记得write哦</div></pre></td></tr></table></figure>\n<p>现在只有一个分区了,要格式化一下,我这里将内存卡格式化ext4格式的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/mnt]#mkfs.ext4 /dev/mmcblk0</div><div class=\"line\">mke2fs 1.42.4 (12-June-2012)</div><div class=\"line\">Filesystem label=</div><div class=\"line\">OS type: Linux</div><div class=\"line\">Block size=4096 (log=2)</div><div class=\"line\">Fragment size=4096 (log=2)</div><div class=\"line\">Stride=0 blocks, Stripe width=0 blocks</div><div class=\"line\">485760 inodes, 1940480 blocks</div><div class=\"line\">97024 blocks (5.00%) reserved for the super user</div><div class=\"line\">First data block=0</div><div class=\"line\">Maximum filesystem blocks=1988100096</div><div class=\"line\">60 block groups</div><div class=\"line\">32768 blocks per group, 32768 fragments per group</div><div class=\"line\">8096 inodes per group</div><div class=\"line\">Superblock backups stored on blocks: </div><div class=\"line\">\t32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632</div><div class=\"line\"></div><div class=\"line\">Allocating group tables: done                            </div><div class=\"line\">Writing inode tables: done                            </div><div class=\"line\">Creating journal (32768 blocks): </div><div class=\"line\">done</div><div class=\"line\">Writing superblocks and filesystem accounting information: done </div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>最近一步,当然是挂载新分区到相应的目录咯<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">[root@PandoraBox:/]#mount /dev/mmcblk0 /data</div><div class=\"line\">#看下结果</div><div class=\"line\">[root@PandoraBox:/]#df</div><div class=\"line\">Filesystem                Size      Used Available Use% Mounted on</div><div class=\"line\">rootfs                   19.9M    972.0K     19.0M   5% /</div><div class=\"line\">/dev/root                10.8M     10.8M         0 100% /rom</div><div class=\"line\">tmpfs                    61.8M    572.0K     61.2M   1% /tmp</div><div class=\"line\">/dev/mtdblock7           19.9M    972.0K     19.0M   5% /overlay</div><div class=\"line\">overlayfs:/overlay       19.9M    972.0K     19.0M   5% /</div><div class=\"line\">tmpfs                   512.0K         0    512.0K   0% /dev</div><div class=\"line\">/dev/mmcblk0              7.2G     16.7M      6.8G   0% /data</div><div class=\"line\">[root@PandoraBox:/]#</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>路由宝,自带8G的内存卡,但刷机后,它的分区太难用了,居然分了8个区,太乱了.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/mnt/mmcblk0p2]#df</div><div class=\"line\">Filesystem                Size      Used Available Use% Mounted on</div><div class=\"line\">rootfs                   19.9M    772.0K     19.2M   4% /</div><div class=\"line\">/dev/root                10.8M     10.8M         0 100% /rom</div><div class=\"line\">tmpfs                    61.8M    396.0K     61.4M   1% /tmp</div><div class=\"line\">/dev/mtdblock7           19.9M    772.0K     19.2M   4% /overlay</div><div class=\"line\">overlayfs:/overlay       19.9M    772.0K     19.2M   4% /</div><div class=\"line\">tmpfs                   512.0K         0    512.0K   0% /dev</div><div class=\"line\">/dev/mmcblk0p2          126.0M      4.5K    126.0M   0% /mnt/mmcblk0p2</div><div class=\"line\">/dev/mmcblk0p3            2.0G      4.0K      2.0G   0% /mnt/mmcblk0p3</div><div class=\"line\">/dev/mmcblk0p1          126.0M      4.5K    126.0M   0% /mnt/mmcblk0p2</div><div class=\"line\">/dev/mmcblk0p5            2.0G      4.0K      2.0G   0% /mnt/mmcblk0p5</div><div class=\"line\">/dev/mmcblk0p6            2.0G      4.0K      2.0G   0% /mnt/mmcblk0p6</div><div class=\"line\">/dev/mmcblk0p7            1.1G      4.0K      1.1G   0% /mnt/mmcblk0p7</div></pre></td></tr></table></figure></p>\n<p>所以我将它格式化了,并合并了分区,如下:</p>\n<p>先使用opkg包管理器安装e2fsprogs,安装后才能使用(mkfs.ext mkfs.ext2 mkfs.ext3 mkfs.ext4) 等格式化命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/mnt/mmcblk0p2]#opkg install e2fsprogs</div><div class=\"line\">Installing e2fsprogs (1.42.4-1) to root...</div><div class=\"line\">Downloading http://downloads.openwrt.org.cn/PandoraBox/ralink/packages/base/e2fsprogs_1.42.4-1_ralink.ipk.</div><div class=\"line\">Configuring e2fsprogs.</div></pre></td></tr></table></figure><br>将内存卡的挂载点,umount掉,才能删除分区<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">  umount: can&apos;t umount /dev/mmcblk0p4: Invalid argument</div><div class=\"line\">[root@PandoraBox:/mnt]#umount /dev/mmcblk0p1</div><div class=\"line\">[root@PandoraBox:/mnt]#umount /dev/mmcblk0p2</div><div class=\"line\">[root@PandoraBox:/mnt]#umount /dev/mmcblk0p3</div><div class=\"line\">[root@PandoraBox:/mnt]#umount /dev/mmcblk0p4</div><div class=\"line\">[root@PandoraBox:/mnt]#umount /dev/mmcblk0p5</div><div class=\"line\">[root@PandoraBox:/mnt]#umount /dev/mmcblk0p6</div><div class=\"line\">[root@PandoraBox:/mnt]#umount /dev/mmcblk0p7</div><div class=\"line\"></div><div class=\"line\">#再看下,发现已经都取消挂载了</div><div class=\"line\">[root@PandoraBox:/mnt]#df</div><div class=\"line\">Filesystem                Size      Used Available Use% Mounted on</div><div class=\"line\">rootfs                   19.9M    968.0K     19.0M   5% /</div><div class=\"line\">/dev/root                10.8M     10.8M         0 100% /rom</div><div class=\"line\">tmpfs                    61.8M    568.0K     61.2M   1% /tmp</div><div class=\"line\">/dev/mtdblock7           19.9M    968.0K     19.0M   5% /overlay</div><div class=\"line\">overlayfs:/overlay       19.9M    968.0K     19.0M   5% /</div><div class=\"line\">tmpfs                   512.0K         0    512.0K   0% /dev</div></pre></td></tr></table></figure></p>\n<p>然后再使用cfdisk命令,将分区删除并新建一个分区<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/mnt]#cfdisk /dev/mmcblk0 </div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/cfdisk01.png\" alt=\"分区\"></p>\n<p>最后结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">                                               cfdisk (util-linux 2.24.1)</div><div class=\"line\"></div><div class=\"line\">                            Disk Drive: /dev/mmcblk0</div><div class=\"line\">                        Size: 7948206080 bytes, 7948 MB</div><div class=\"line\">              Heads: 4   Sectors per Track: 16   Cylinders: 242560</div><div class=\"line\"></div><div class=\"line\">    Name        Flags      Part Type  FS Type          [Label]        Size (MB)</div><div class=\"line\"> ------------------------------------------------------------------------------</div><div class=\"line\">    mmcblk0p1               Primary   Linux                             7948.21 </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     [ Bootable ]  [  Delete  ]  [   Help   ]  [ Maximize ]  [  Print   ]</div><div class=\"line\">     [   Quit   ]  [   Type   ]  [  Units   ]  [  Write   ]</div><div class=\"line\"></div><div class=\"line\">                  Quit program without writing partition table</div><div class=\"line\"></div><div class=\"line\">#最后记得write哦</div></pre></td></tr></table></figure>\n<p>现在只有一个分区了,要格式化一下,我这里将内存卡格式化ext4格式的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@PandoraBox:/mnt]#mkfs.ext4 /dev/mmcblk0</div><div class=\"line\">mke2fs 1.42.4 (12-June-2012)</div><div class=\"line\">Filesystem label=</div><div class=\"line\">OS type: Linux</div><div class=\"line\">Block size=4096 (log=2)</div><div class=\"line\">Fragment size=4096 (log=2)</div><div class=\"line\">Stride=0 blocks, Stripe width=0 blocks</div><div class=\"line\">485760 inodes, 1940480 blocks</div><div class=\"line\">97024 blocks (5.00%) reserved for the super user</div><div class=\"line\">First data block=0</div><div class=\"line\">Maximum filesystem blocks=1988100096</div><div class=\"line\">60 block groups</div><div class=\"line\">32768 blocks per group, 32768 fragments per group</div><div class=\"line\">8096 inodes per group</div><div class=\"line\">Superblock backups stored on blocks: </div><div class=\"line\">\t32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632</div><div class=\"line\"></div><div class=\"line\">Allocating group tables: done                            </div><div class=\"line\">Writing inode tables: done                            </div><div class=\"line\">Creating journal (32768 blocks): </div><div class=\"line\">done</div><div class=\"line\">Writing superblocks and filesystem accounting information: done </div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>最近一步,当然是挂载新分区到相应的目录咯<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">[root@PandoraBox:/]#mount /dev/mmcblk0 /data</div><div class=\"line\">#看下结果</div><div class=\"line\">[root@PandoraBox:/]#df</div><div class=\"line\">Filesystem                Size      Used Available Use% Mounted on</div><div class=\"line\">rootfs                   19.9M    972.0K     19.0M   5% /</div><div class=\"line\">/dev/root                10.8M     10.8M         0 100% /rom</div><div class=\"line\">tmpfs                    61.8M    572.0K     61.2M   1% /tmp</div><div class=\"line\">/dev/mtdblock7           19.9M    972.0K     19.0M   5% /overlay</div><div class=\"line\">overlayfs:/overlay       19.9M    972.0K     19.0M   5% /</div><div class=\"line\">tmpfs                   512.0K         0    512.0K   0% /dev</div><div class=\"line\">/dev/mmcblk0              7.2G     16.7M      6.8G   0% /data</div><div class=\"line\">[root@PandoraBox:/]#</div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n"},{"title":"配置SSL证书+搭建HTTPS","date":"2016-02-19T03:48:06.000Z","comments":1,"_content":"配置SSL证书+搭建HTTPS:\n1.https:\n超文本传输安全协议（缩写：HTTPS，全称：Hypertext Transfer Protocol Secure）是超文本传输协议和SSL/TLS的组合，用以提供加密通讯及对网络服务器身份的鉴定。HTTPS连接经常被用于万维网上的交易支付和企业信息系统中敏感信息的传输。HTTPS不应与在RFC 2660中定义的安全超文本传输协议（S-HTTP）相混。\nHTTPS 目前已经是所有注重隐私和安全的网站的首选.\nSSL/TLS:\n理论上讲这是两个协议，后者是前者的继任者，但其实 SSL 3.0 和 TLS 1.0 的差异很小，所以两者很多时候是混为一谈的,这两个都是传输层协议，在他们的基础上可以建议应用层的协议如 FTP 和 Telnet，上面说的 HTTPS 就是建立在 SSL/TLS 基础上的 HTTP。\n证书\n这里的证书主要指使用公私钥对加密的证书。这里所说的证书是SSL/TLS证书 证书了。一般用于服务器加密（网页、邮件服务等），也就是部署 HTTPS 时所必须的。\n这里出现的证书都是用公私钥加密的证书。这涉及到 [[非对称加密]] 技术，每张证书都由一个公钥和一个私钥组成，两个拼在一起才是一套。所以公钥是可以随便发给别人看的，而私钥一定是要保密的，如果私钥泄漏，后果很严重的哦。\n\n信任链与 CA\nCA 就是数字证书认证中心，是证书的签发机构.\n信任链是证书的世界里有一套信任体系,谁都可以做证书的，只是做出来的证书有没有人相信而已,所以有几家特别靠谱的CA都被浏览器愿意信任,把它们的根证书都列为信任了.所以说能获取得到这些Ca签署的证书也会被主流浏览器所信任的.\n\n\n这里记录配置 SSL 证书 + 搭建 HTTPS的过程\n\n2.获取crt证书\n\n1)使用 OpenSSL 生成 SSL Key 和 CSR\n前提条件:先安装openSSl\n这里我使用yum安装:\n{% codeblock %}\n$ yum install -y openssl\n{% endcodeblock %}\n目前在 SSL证书购买时，有三种不同的资料验证方式，从而产生了三类SSL证书。\n\n域名型SSL证书（DV SSL） ，即只对域名的所有者（一般是域名管理员邮箱，比如admin@hotmail.com）进行在线检查，具体是发送验证邮件给域名管理员或以该域名结尾的邮箱至于该域名的管理员是真实注册的单位还是另有其人，就不得而知了。\n\n企业型 SSL 证书（OV SSL） ，是要购买者提交组织机构资料和单位授权信等在官方注册的凭证，认证机构在签发SSL证书前不仅仅要检验域名所有权，还必须对这些资料的真实合法性进行多方查验，只有通过验证的才能颁发SSL证书。\n\n增强型 SSL 证书（EV SSL） ，与其他SSL证书一样，都是基于SSL/TLS安全协议，都是用于网站的身份验证和信息在网上的传输加密。它跟普通SSL证书的区别也是明显的，安全浏览器的地址栏变绿，如果是不受信的SSL证书则拒绝显示，如果是钓鱼网站，地址栏则会变成红色，以警示用户\n\nEV SSL 证书获取比较严格,所以这里一般中小站长/企业,申请DV|OV比较多.\n\n无论你用 DV 还是 OV 生成私钥，都需要填写一些基本信息，具体信息如下：\n\nCN:\n域名，也称为 Common Name，因为特殊的证书不一定是域名：xiaohei.com\nO:\n组织或公司名字（Organization）：cayley\nOU:\n部门（Department）：可以不填写，这里我们写 Web Security\nL:\n城市（City）：Shenzhen\nST:\n省份（State / Province）：Guangdong\nC:\n国家（Country）：CN\n\n加密位数:\n一般加密强度：2048 位，如果你的机器性能强劲，也可以选择 4096 位\n\n所以根据上面的信息，使用 OpenSSL 生成 key 和 csr 的命令:\n{% codeblock %}\nopenssl req -new -newkey rsa:2048 -sha256 -nodes -out b.miaoxiaohei.com.csr -keyout b.miaoxiaohei.com.key -subj \"/C=CN/ST=Guangdong/L=Shenzhen/O=cayley/OU=Web Security/CN=b.miaoxiaohei.com\"  \n{% endcodeblock %}\n\nPS：如果是泛域名证书，则应该填写 *.miaoxiaohei.com\n\n运行命令后,会在当前目录生成两个文件:\n    b.miaoxiaohei.com.csr :用于跟第三方CA机构获取证书\n    b.miaoxiaohei.com.key :ssl私钥,用于服务器配置\n\n2)从第三方CA机构获取证书:\n\n由于只有浏览器或者系统信赖的 CA 才可以让所有的访问者通畅的访问你的加密网站，而不是出现证书错误的提示。所以跳过自签证书的步骤，直接开始签署第三方可信任的 SSL 证书.\n\nb.miaoxiaohei.com.csr 这个 CSR 文件就是你需要提交给 SSL 认证机构的，当你的域名或组织通过验证后，认证机构就会颁发给你一个 b.miaoxiaohei.com.crt\n\n目前一般市面上针对中小站长和企业的 SSL 证书颁发机构有：\n\nStartSSL\n\nComodo / 子品牌 Positive SSL\n\nGlobalSign / 子品牌 AlphaSSL\n\nGeoTrust / 子品牌 RapidSSL\n\n\n这里我使用 {% link StartSSL https://www.startssl.com/ %} 首先进入StartSSL,注册账号,申请免费的证书(免费证书需要一个月申请一次,比较坑),土豪|企业可以直接用钱买.\n\n这时候验证需要提供一些资料,先准备好.\n\n申请成功后会提供,下载证书,会得到下面的几个证书文件\nApacheServer.zip\nIISServer.zip\nNginxServer.zip\nOtherServer.zip\n\n这时候,总共得到3个文件:\n  b.miaoxiaohei.com.csr ,b.miaoxiaohei.com.key  1_b.miaoxiaohei.com_bundle.crt\n\n同时，为了方便操作，我把这三个文件都移动到 /home/www/ssl 目录。\n\n证书获取完成.\n\n3.nginx 配置 HTTPS 网站以及增加安全的配置\n\n1)配置nginx\n然后可以修改 Nginx 配置文件\n{% codeblock %}\n$vim /usr/local/nginx/conf/vhost.d/b.miaoxiaohei.conf\n\nserver {\n    listen 80;\n    #listen [::]:80 ssl ipv6only=on; \n    listen 443 ssl;\n    #listen [::]:443 ssl ipv6only=o\n    server_name b.miaoxiaohei.com;\n    root    /home/www/cayleyblogs;\n    index   index.html;\n    access_log  /home/www/log/cayleyblogs-access.log;\n    error_log   /home/www/log/cayleyblogs-error.log;\n\n    ssl on;\n    ssl_certificate /home/www/ssl/1_b.miaoxiaohei.com_bundle.crt;\n    ssl_certificate_key /home/www/ssl/b.miaoxiaohei.com.key;\n}\n {% endcodeblock %}\n检测配置文件没问题后,重启 Nginx 即可\n{% codeblock %}\n$nginx -t && nginx -s reload\n{% endcodeblock %}\n\n2)增加安全配置\n\n但是这么做并不安全，默认是 SHA-1 形式，而现在主流的方案应该都避免 SHA-1，为了确保更强的安全性，我们可以采取迪菲－赫尔曼密钥交换\n\n首先，进入 /home/www/ssl 目录并生成一个 dhparam.pem\n\n{% codeblock %}\n$cd  /home/www/ssl\n# 如果你的机器性能足够强大，可以用 4096 位加密\n$openssl dhparam -out dhparam.pem 2048   \n\n$ openssl dhparam -out dhparam.pem 2048\nGenerating DH parameters, 2048 bit long safe prime, generator 2\nThis is going to take a long time\n...........................++*++*\n$ ls  #新增一个dhparam.pem文件\n1_b.miaoxiaohei.com_bundle.crt  b.miaoxiaohei.com.csr \n b.miaoxiaohei.com.key  dhparam.pem\n\n{% endcodeblock %}\n生成完毕后，在 Nginx 的 SSL 配置后面加入\n{% codeblock %}\n        ssl_prefer_server_ciphers on;\n        ssl_dhparam /home/www/ssl/dhparam.pem;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers \"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4\";\n        keepalive_timeout 70;\n        ssl_session_cache shared:SSL:10m;\n        ssl_session_timeout 10m; \n{% endcodeblock %}\n同时，如果是全站 HTTPS 并且不考虑 HTTP 的话，可以加入 HSTS 告诉你的浏览器本网站全站加密，并且强制用 HTTPS 访问\n{% codeblock %}\n        add_header Strict-Transport-Security max-age=63072000;\n        add_header X-Frame-Options DENY;\n        add_header X-Content-Type-Options nosniff;\n{% endcodeblock %}\n同时也可以单独开一个 Nginx 配置，把 HTTP 的访问请求都用 301 跳转到 HTTPS\n{% codeblock %}\nserver {  \n        listen 80;\n        #listen [::]:80 ipv6only=on;\n        server_name     b.miaoxiaohei.com;\n        return 301 https://b.miaoxiaohei.com$request_uri;\n}\n{% endcodeblock %}\n\n\n完整配置代码如下:\n{% codeblock %}\n\nserver {\n    listen 80;\n    #listen [::]:80 ssl ipv6only=on; \n    listen 443 ssl;\n    #listen [::]:443 ssl ipv6only=o\n    server_name b.miaoxiaohei.com;\n    root    /home/www/cayleyblogs;\n    index   index.html;\n    #log info\n    access_log  /home/www/log/cayleyblogs-access.log;\n    error_log   /home/www/log/cayleyblogs-error.log;\n    # location / {\n    #    proxy_set_header   X-Real-IP $remote_addr;\n    #    proxy_set_header   Host      $http_host;\n    #    proxy_pass         http://0.0.0.0:4000;\n    # }\n    #告诉浏览器网站已启用https ,并强制使用https\n    add_header Strict-Transport-Security max-age=63072000;\n    add_header X-Frame-Options DENY;\n    add_header X-Content-Type-Options nosniff;\n    #开启https\n    ssl on;\n    ssl_certificate /home/www/ssl/1_b.miaoxiaohei.com_bundle.crt;\n    ssl_certificate_key /home/www/ssl/b.miaoxiaohei.com.key;\n    #增强安全配置\n    ssl_prefer_server_ciphers on;\n    ssl_dhparam /home/www/ssl/dhparam.pem;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers \"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4\";\n    keepalive_timeout 70;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m; \n}\n#只允许https访问\nserver {  \n        listen 80;\n        #listen [::]:80 ipv6only=on;\n        server_name     b.miaoxiaohei.com;\n        return 301 https://b.miaoxiaohei.com$request_uri;\n}\n{% endcodeblock %}\n\n4.apache配置:\n\n申请成功后会提供,下载证书 ,解压ApacheServer.zip,会得到下面两个文件:\n1_root_bundle.crt\n2_b.miaoxiaohei.com.crt\n\n另外需要下載 intermediate 和 root CA 证书\n如果缺少这个两个，Firefox 會出現「sec_error_unknown_issuer」\n并且出現警告该页面,告訴你不要信任 StartSSL 的 SSL 证书\n\n下载地址如下:\nhttp://www.startssl.com/certs/sub.class1.server.ca.pem\nhttp://www.startssl.com/certs/ca.pem\n\n1)首先检查Apache 有沒有安裝 mod_ssl\n如果没有安装,可以通过yum install mod_ssl 來安裝 || 编译安装\n\n2) 接下来将 b.miaoxiaohei.com.key 上到 /etc/pki/tls/private/\n   将2_b.miaoxiaohei.com.crt 上传到 /etc/pki/tls/certs/\n   将sub.class1.server.ca.pem 以及 ca.pem 上传到 /etc/pki/tls/\n\n3) 解密私钥,如果沒有解密的话，每次 Apache 启动后都要加入密码\n解密步骤如下：\n{% codeblock %}\n#cd /etc/pki/tls/private/\n#openssl rsa -in b.miaoxiaohei.com.key -out b.miaoiaohei.com.key\n{% endcodeblock %}\n接下来会提示你输入密码\n\n4) 在打开 /etc/httpd/conf.d/ssl.conf\n将 ssl.conf 各项配置修改如下\n{% codeblock %}\nSSLCertificateFile /etc/pki/tls/certs/2_b.miaoxiaohei.com.crt\nSSLCertificateKeyFile /etc/pki/tls/private/b.miaoxiaohei.com.key\nSSLCertificateChainFile /etc/pki/tls/sub.class1.server.ca.pem\nSSLCACertificateFile /etc/pki/tls/ca.pem\n{% endcodeblock %}\n5) 重启apache\n\n参考:\n\n{% link startssl http://www.startssl.com %}\n\n{% link 申請免費 StartSSL 證書並開啟 Apache SSL 完整教學 http://blog.mowd.tw/index.php?pl=950#p_tb %}\n\n\n","source":"_posts/配置SSL证书-搭建HTTPS.md","raw":"---\ntitle: '配置SSL证书+搭建HTTPS'\ndate: 2016-02-19 11:48:06\ntags: https\ncategories: liunx\ncomments: true\n---\n配置SSL证书+搭建HTTPS:\n1.https:\n超文本传输安全协议（缩写：HTTPS，全称：Hypertext Transfer Protocol Secure）是超文本传输协议和SSL/TLS的组合，用以提供加密通讯及对网络服务器身份的鉴定。HTTPS连接经常被用于万维网上的交易支付和企业信息系统中敏感信息的传输。HTTPS不应与在RFC 2660中定义的安全超文本传输协议（S-HTTP）相混。\nHTTPS 目前已经是所有注重隐私和安全的网站的首选.\nSSL/TLS:\n理论上讲这是两个协议，后者是前者的继任者，但其实 SSL 3.0 和 TLS 1.0 的差异很小，所以两者很多时候是混为一谈的,这两个都是传输层协议，在他们的基础上可以建议应用层的协议如 FTP 和 Telnet，上面说的 HTTPS 就是建立在 SSL/TLS 基础上的 HTTP。\n证书\n这里的证书主要指使用公私钥对加密的证书。这里所说的证书是SSL/TLS证书 证书了。一般用于服务器加密（网页、邮件服务等），也就是部署 HTTPS 时所必须的。\n这里出现的证书都是用公私钥加密的证书。这涉及到 [[非对称加密]] 技术，每张证书都由一个公钥和一个私钥组成，两个拼在一起才是一套。所以公钥是可以随便发给别人看的，而私钥一定是要保密的，如果私钥泄漏，后果很严重的哦。\n\n信任链与 CA\nCA 就是数字证书认证中心，是证书的签发机构.\n信任链是证书的世界里有一套信任体系,谁都可以做证书的，只是做出来的证书有没有人相信而已,所以有几家特别靠谱的CA都被浏览器愿意信任,把它们的根证书都列为信任了.所以说能获取得到这些Ca签署的证书也会被主流浏览器所信任的.\n\n\n这里记录配置 SSL 证书 + 搭建 HTTPS的过程\n\n2.获取crt证书\n\n1)使用 OpenSSL 生成 SSL Key 和 CSR\n前提条件:先安装openSSl\n这里我使用yum安装:\n{% codeblock %}\n$ yum install -y openssl\n{% endcodeblock %}\n目前在 SSL证书购买时，有三种不同的资料验证方式，从而产生了三类SSL证书。\n\n域名型SSL证书（DV SSL） ，即只对域名的所有者（一般是域名管理员邮箱，比如admin@hotmail.com）进行在线检查，具体是发送验证邮件给域名管理员或以该域名结尾的邮箱至于该域名的管理员是真实注册的单位还是另有其人，就不得而知了。\n\n企业型 SSL 证书（OV SSL） ，是要购买者提交组织机构资料和单位授权信等在官方注册的凭证，认证机构在签发SSL证书前不仅仅要检验域名所有权，还必须对这些资料的真实合法性进行多方查验，只有通过验证的才能颁发SSL证书。\n\n增强型 SSL 证书（EV SSL） ，与其他SSL证书一样，都是基于SSL/TLS安全协议，都是用于网站的身份验证和信息在网上的传输加密。它跟普通SSL证书的区别也是明显的，安全浏览器的地址栏变绿，如果是不受信的SSL证书则拒绝显示，如果是钓鱼网站，地址栏则会变成红色，以警示用户\n\nEV SSL 证书获取比较严格,所以这里一般中小站长/企业,申请DV|OV比较多.\n\n无论你用 DV 还是 OV 生成私钥，都需要填写一些基本信息，具体信息如下：\n\nCN:\n域名，也称为 Common Name，因为特殊的证书不一定是域名：xiaohei.com\nO:\n组织或公司名字（Organization）：cayley\nOU:\n部门（Department）：可以不填写，这里我们写 Web Security\nL:\n城市（City）：Shenzhen\nST:\n省份（State / Province）：Guangdong\nC:\n国家（Country）：CN\n\n加密位数:\n一般加密强度：2048 位，如果你的机器性能强劲，也可以选择 4096 位\n\n所以根据上面的信息，使用 OpenSSL 生成 key 和 csr 的命令:\n{% codeblock %}\nopenssl req -new -newkey rsa:2048 -sha256 -nodes -out b.miaoxiaohei.com.csr -keyout b.miaoxiaohei.com.key -subj \"/C=CN/ST=Guangdong/L=Shenzhen/O=cayley/OU=Web Security/CN=b.miaoxiaohei.com\"  \n{% endcodeblock %}\n\nPS：如果是泛域名证书，则应该填写 *.miaoxiaohei.com\n\n运行命令后,会在当前目录生成两个文件:\n    b.miaoxiaohei.com.csr :用于跟第三方CA机构获取证书\n    b.miaoxiaohei.com.key :ssl私钥,用于服务器配置\n\n2)从第三方CA机构获取证书:\n\n由于只有浏览器或者系统信赖的 CA 才可以让所有的访问者通畅的访问你的加密网站，而不是出现证书错误的提示。所以跳过自签证书的步骤，直接开始签署第三方可信任的 SSL 证书.\n\nb.miaoxiaohei.com.csr 这个 CSR 文件就是你需要提交给 SSL 认证机构的，当你的域名或组织通过验证后，认证机构就会颁发给你一个 b.miaoxiaohei.com.crt\n\n目前一般市面上针对中小站长和企业的 SSL 证书颁发机构有：\n\nStartSSL\n\nComodo / 子品牌 Positive SSL\n\nGlobalSign / 子品牌 AlphaSSL\n\nGeoTrust / 子品牌 RapidSSL\n\n\n这里我使用 {% link StartSSL https://www.startssl.com/ %} 首先进入StartSSL,注册账号,申请免费的证书(免费证书需要一个月申请一次,比较坑),土豪|企业可以直接用钱买.\n\n这时候验证需要提供一些资料,先准备好.\n\n申请成功后会提供,下载证书,会得到下面的几个证书文件\nApacheServer.zip\nIISServer.zip\nNginxServer.zip\nOtherServer.zip\n\n这时候,总共得到3个文件:\n  b.miaoxiaohei.com.csr ,b.miaoxiaohei.com.key  1_b.miaoxiaohei.com_bundle.crt\n\n同时，为了方便操作，我把这三个文件都移动到 /home/www/ssl 目录。\n\n证书获取完成.\n\n3.nginx 配置 HTTPS 网站以及增加安全的配置\n\n1)配置nginx\n然后可以修改 Nginx 配置文件\n{% codeblock %}\n$vim /usr/local/nginx/conf/vhost.d/b.miaoxiaohei.conf\n\nserver {\n    listen 80;\n    #listen [::]:80 ssl ipv6only=on; \n    listen 443 ssl;\n    #listen [::]:443 ssl ipv6only=o\n    server_name b.miaoxiaohei.com;\n    root    /home/www/cayleyblogs;\n    index   index.html;\n    access_log  /home/www/log/cayleyblogs-access.log;\n    error_log   /home/www/log/cayleyblogs-error.log;\n\n    ssl on;\n    ssl_certificate /home/www/ssl/1_b.miaoxiaohei.com_bundle.crt;\n    ssl_certificate_key /home/www/ssl/b.miaoxiaohei.com.key;\n}\n {% endcodeblock %}\n检测配置文件没问题后,重启 Nginx 即可\n{% codeblock %}\n$nginx -t && nginx -s reload\n{% endcodeblock %}\n\n2)增加安全配置\n\n但是这么做并不安全，默认是 SHA-1 形式，而现在主流的方案应该都避免 SHA-1，为了确保更强的安全性，我们可以采取迪菲－赫尔曼密钥交换\n\n首先，进入 /home/www/ssl 目录并生成一个 dhparam.pem\n\n{% codeblock %}\n$cd  /home/www/ssl\n# 如果你的机器性能足够强大，可以用 4096 位加密\n$openssl dhparam -out dhparam.pem 2048   \n\n$ openssl dhparam -out dhparam.pem 2048\nGenerating DH parameters, 2048 bit long safe prime, generator 2\nThis is going to take a long time\n...........................++*++*\n$ ls  #新增一个dhparam.pem文件\n1_b.miaoxiaohei.com_bundle.crt  b.miaoxiaohei.com.csr \n b.miaoxiaohei.com.key  dhparam.pem\n\n{% endcodeblock %}\n生成完毕后，在 Nginx 的 SSL 配置后面加入\n{% codeblock %}\n        ssl_prefer_server_ciphers on;\n        ssl_dhparam /home/www/ssl/dhparam.pem;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers \"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4\";\n        keepalive_timeout 70;\n        ssl_session_cache shared:SSL:10m;\n        ssl_session_timeout 10m; \n{% endcodeblock %}\n同时，如果是全站 HTTPS 并且不考虑 HTTP 的话，可以加入 HSTS 告诉你的浏览器本网站全站加密，并且强制用 HTTPS 访问\n{% codeblock %}\n        add_header Strict-Transport-Security max-age=63072000;\n        add_header X-Frame-Options DENY;\n        add_header X-Content-Type-Options nosniff;\n{% endcodeblock %}\n同时也可以单独开一个 Nginx 配置，把 HTTP 的访问请求都用 301 跳转到 HTTPS\n{% codeblock %}\nserver {  \n        listen 80;\n        #listen [::]:80 ipv6only=on;\n        server_name     b.miaoxiaohei.com;\n        return 301 https://b.miaoxiaohei.com$request_uri;\n}\n{% endcodeblock %}\n\n\n完整配置代码如下:\n{% codeblock %}\n\nserver {\n    listen 80;\n    #listen [::]:80 ssl ipv6only=on; \n    listen 443 ssl;\n    #listen [::]:443 ssl ipv6only=o\n    server_name b.miaoxiaohei.com;\n    root    /home/www/cayleyblogs;\n    index   index.html;\n    #log info\n    access_log  /home/www/log/cayleyblogs-access.log;\n    error_log   /home/www/log/cayleyblogs-error.log;\n    # location / {\n    #    proxy_set_header   X-Real-IP $remote_addr;\n    #    proxy_set_header   Host      $http_host;\n    #    proxy_pass         http://0.0.0.0:4000;\n    # }\n    #告诉浏览器网站已启用https ,并强制使用https\n    add_header Strict-Transport-Security max-age=63072000;\n    add_header X-Frame-Options DENY;\n    add_header X-Content-Type-Options nosniff;\n    #开启https\n    ssl on;\n    ssl_certificate /home/www/ssl/1_b.miaoxiaohei.com_bundle.crt;\n    ssl_certificate_key /home/www/ssl/b.miaoxiaohei.com.key;\n    #增强安全配置\n    ssl_prefer_server_ciphers on;\n    ssl_dhparam /home/www/ssl/dhparam.pem;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers \"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4\";\n    keepalive_timeout 70;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m; \n}\n#只允许https访问\nserver {  \n        listen 80;\n        #listen [::]:80 ipv6only=on;\n        server_name     b.miaoxiaohei.com;\n        return 301 https://b.miaoxiaohei.com$request_uri;\n}\n{% endcodeblock %}\n\n4.apache配置:\n\n申请成功后会提供,下载证书 ,解压ApacheServer.zip,会得到下面两个文件:\n1_root_bundle.crt\n2_b.miaoxiaohei.com.crt\n\n另外需要下載 intermediate 和 root CA 证书\n如果缺少这个两个，Firefox 會出現「sec_error_unknown_issuer」\n并且出現警告该页面,告訴你不要信任 StartSSL 的 SSL 证书\n\n下载地址如下:\nhttp://www.startssl.com/certs/sub.class1.server.ca.pem\nhttp://www.startssl.com/certs/ca.pem\n\n1)首先检查Apache 有沒有安裝 mod_ssl\n如果没有安装,可以通过yum install mod_ssl 來安裝 || 编译安装\n\n2) 接下来将 b.miaoxiaohei.com.key 上到 /etc/pki/tls/private/\n   将2_b.miaoxiaohei.com.crt 上传到 /etc/pki/tls/certs/\n   将sub.class1.server.ca.pem 以及 ca.pem 上传到 /etc/pki/tls/\n\n3) 解密私钥,如果沒有解密的话，每次 Apache 启动后都要加入密码\n解密步骤如下：\n{% codeblock %}\n#cd /etc/pki/tls/private/\n#openssl rsa -in b.miaoxiaohei.com.key -out b.miaoiaohei.com.key\n{% endcodeblock %}\n接下来会提示你输入密码\n\n4) 在打开 /etc/httpd/conf.d/ssl.conf\n将 ssl.conf 各项配置修改如下\n{% codeblock %}\nSSLCertificateFile /etc/pki/tls/certs/2_b.miaoxiaohei.com.crt\nSSLCertificateKeyFile /etc/pki/tls/private/b.miaoxiaohei.com.key\nSSLCertificateChainFile /etc/pki/tls/sub.class1.server.ca.pem\nSSLCACertificateFile /etc/pki/tls/ca.pem\n{% endcodeblock %}\n5) 重启apache\n\n参考:\n\n{% link startssl http://www.startssl.com %}\n\n{% link 申請免費 StartSSL 證書並開啟 Apache SSL 完整教學 http://blog.mowd.tw/index.php?pl=950#p_tb %}\n\n\n","slug":"配置SSL证书-搭建HTTPS","published":1,"updated":"2017-03-01T02:52:32.000Z","layout":"post","photos":[],"link":"","_id":"cizqeieoh002dznz4nsknnooz","content":"<p>配置SSL证书+搭建HTTPS:<br>1.https:<br>超文本传输安全协议（缩写：HTTPS，全称：Hypertext Transfer Protocol Secure）是超文本传输协议和SSL/TLS的组合，用以提供加密通讯及对网络服务器身份的鉴定。HTTPS连接经常被用于万维网上的交易支付和企业信息系统中敏感信息的传输。HTTPS不应与在RFC 2660中定义的安全超文本传输协议（S-HTTP）相混。<br>HTTPS 目前已经是所有注重隐私和安全的网站的首选.<br>SSL/TLS:<br>理论上讲这是两个协议，后者是前者的继任者，但其实 SSL 3.0 和 TLS 1.0 的差异很小，所以两者很多时候是混为一谈的,这两个都是传输层协议，在他们的基础上可以建议应用层的协议如 FTP 和 Telnet，上面说的 HTTPS 就是建立在 SSL/TLS 基础上的 HTTP。<br>证书<br>这里的证书主要指使用公私钥对加密的证书。这里所说的证书是SSL/TLS证书 证书了。一般用于服务器加密（网页、邮件服务等），也就是部署 HTTPS 时所必须的。<br>这里出现的证书都是用公私钥加密的证书。这涉及到 [[非对称加密]] 技术，每张证书都由一个公钥和一个私钥组成，两个拼在一起才是一套。所以公钥是可以随便发给别人看的，而私钥一定是要保密的，如果私钥泄漏，后果很严重的哦。</p>\n<p>信任链与 CA<br>CA 就是数字证书认证中心，是证书的签发机构.<br>信任链是证书的世界里有一套信任体系,谁都可以做证书的，只是做出来的证书有没有人相信而已,所以有几家特别靠谱的CA都被浏览器愿意信任,把它们的根证书都列为信任了.所以说能获取得到这些Ca签署的证书也会被主流浏览器所信任的.</p>\n<p>这里记录配置 SSL 证书 + 搭建 HTTPS的过程</p>\n<p>2.获取crt证书</p>\n<p>1)使用 OpenSSL 生成 SSL Key 和 CSR<br>前提条件:先安装openSSl<br>这里我使用yum安装:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ yum install -y openssl</div></pre></td></tr></table></figure><br>目前在 SSL证书购买时，有三种不同的资料验证方式，从而产生了三类SSL证书。</p>\n<p>域名型SSL证书（DV SSL） ，即只对域名的所有者（一般是域名管理员邮箱，比如admin@hotmail.com）进行在线检查，具体是发送验证邮件给域名管理员或以该域名结尾的邮箱至于该域名的管理员是真实注册的单位还是另有其人，就不得而知了。</p>\n<p>企业型 SSL 证书（OV SSL） ，是要购买者提交组织机构资料和单位授权信等在官方注册的凭证，认证机构在签发SSL证书前不仅仅要检验域名所有权，还必须对这些资料的真实合法性进行多方查验，只有通过验证的才能颁发SSL证书。</p>\n<p>增强型 SSL 证书（EV SSL） ，与其他SSL证书一样，都是基于SSL/TLS安全协议，都是用于网站的身份验证和信息在网上的传输加密。它跟普通SSL证书的区别也是明显的，安全浏览器的地址栏变绿，如果是不受信的SSL证书则拒绝显示，如果是钓鱼网站，地址栏则会变成红色，以警示用户</p>\n<p>EV SSL 证书获取比较严格,所以这里一般中小站长/企业,申请DV|OV比较多.</p>\n<p>无论你用 DV 还是 OV 生成私钥，都需要填写一些基本信息，具体信息如下：</p>\n<p>CN:<br>域名，也称为 Common Name，因为特殊的证书不一定是域名：xiaohei.com<br>O:<br>组织或公司名字（Organization）：cayley<br>OU:<br>部门（Department）：可以不填写，这里我们写 Web Security<br>L:<br>城市（City）：Shenzhen<br>ST:<br>省份（State / Province）：Guangdong<br>C:<br>国家（Country）：CN</p>\n<p>加密位数:<br>一般加密强度：2048 位，如果你的机器性能强劲，也可以选择 4096 位</p>\n<p>所以根据上面的信息，使用 OpenSSL 生成 key 和 csr 的命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl req -new -newkey rsa:2048 -sha256 -nodes -out b.miaoxiaohei.com.csr -keyout b.miaoxiaohei.com.key -subj &quot;/C=CN/ST=Guangdong/L=Shenzhen/O=cayley/OU=Web Security/CN=b.miaoxiaohei.com&quot;  </div></pre></td></tr></table></figure></p>\n<p>PS：如果是泛域名证书，则应该填写 *.miaoxiaohei.com</p>\n<p>运行命令后,会在当前目录生成两个文件:<br>    b.miaoxiaohei.com.csr :用于跟第三方CA机构获取证书<br>    b.miaoxiaohei.com.key :ssl私钥,用于服务器配置</p>\n<p>2)从第三方CA机构获取证书:</p>\n<p>由于只有浏览器或者系统信赖的 CA 才可以让所有的访问者通畅的访问你的加密网站，而不是出现证书错误的提示。所以跳过自签证书的步骤，直接开始签署第三方可信任的 SSL 证书.</p>\n<p>b.miaoxiaohei.com.csr 这个 CSR 文件就是你需要提交给 SSL 认证机构的，当你的域名或组织通过验证后，认证机构就会颁发给你一个 b.miaoxiaohei.com.crt</p>\n<p>目前一般市面上针对中小站长和企业的 SSL 证书颁发机构有：</p>\n<p>StartSSL</p>\n<p>Comodo / 子品牌 Positive SSL</p>\n<p>GlobalSign / 子品牌 AlphaSSL</p>\n<p>GeoTrust / 子品牌 RapidSSL</p>\n<p>这里我使用 <a href=\"https://www.startssl.com/\" target=\"_blank\" rel=\"external\">StartSSL</a> 首先进入StartSSL,注册账号,申请免费的证书(免费证书需要一个月申请一次,比较坑),土豪|企业可以直接用钱买.</p>\n<p>这时候验证需要提供一些资料,先准备好.</p>\n<p>申请成功后会提供,下载证书,会得到下面的几个证书文件<br>ApacheServer.zip<br>IISServer.zip<br>NginxServer.zip<br>OtherServer.zip</p>\n<p>这时候,总共得到3个文件:<br>  b.miaoxiaohei.com.csr ,b.miaoxiaohei.com.key  1_b.miaoxiaohei.com_bundle.crt</p>\n<p>同时，为了方便操作，我把这三个文件都移动到 /home/www/ssl 目录。</p>\n<p>证书获取完成.</p>\n<p>3.nginx 配置 HTTPS 网站以及增加安全的配置</p>\n<p>1)配置nginx<br>然后可以修改 Nginx 配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">$vim /usr/local/nginx/conf/vhost.d/b.miaoxiaohei.conf</div><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">    listen 80;</div><div class=\"line\">    #listen [::]:80 ssl ipv6only=on; </div><div class=\"line\">    listen 443 ssl;</div><div class=\"line\">    #listen [::]:443 ssl ipv6only=o</div><div class=\"line\">    server_name b.miaoxiaohei.com;</div><div class=\"line\">    root    /home/www/cayleyblogs;</div><div class=\"line\">    index   index.html;</div><div class=\"line\">    access_log  /home/www/log/cayleyblogs-access.log;</div><div class=\"line\">    error_log   /home/www/log/cayleyblogs-error.log;</div><div class=\"line\"></div><div class=\"line\">    ssl on;</div><div class=\"line\">    ssl_certificate /home/www/ssl/1_b.miaoxiaohei.com_bundle.crt;</div><div class=\"line\">    ssl_certificate_key /home/www/ssl/b.miaoxiaohei.com.key;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div></pre></td></tr></table></figure><br>检测配置文件没问题后,重启 Nginx 即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$nginx -t &amp;&amp; nginx -s reload</div></pre></td></tr></table></figure></p>\n<p>2)增加安全配置</p>\n<p>但是这么做并不安全，默认是 SHA-1 形式，而现在主流的方案应该都避免 SHA-1，为了确保更强的安全性，我们可以采取迪菲－赫尔曼密钥交换</p>\n<p>首先，进入 /home/www/ssl 目录并生成一个 dhparam.pem</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$cd  /home/www/ssl</div><div class=\"line\"># 如果你的机器性能足够强大，可以用 4096 位加密</div><div class=\"line\">$openssl dhparam -out dhparam.pem 2048   </div><div class=\"line\"></div><div class=\"line\">$ openssl dhparam -out dhparam.pem 2048</div><div class=\"line\">Generating DH parameters, 2048 bit long safe prime, generator 2</div><div class=\"line\">This is going to take a long time</div><div class=\"line\">...........................++*++*</div><div class=\"line\">$ ls  #新增一个dhparam.pem文件</div><div class=\"line\">1_b.miaoxiaohei.com_bundle.crt  b.miaoxiaohei.com.csr </div><div class=\"line\"> b.miaoxiaohei.com.key  dhparam.pem</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>生成完毕后，在 Nginx 的 SSL 配置后面加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssl_prefer_server_ciphers on;</div><div class=\"line\">ssl_dhparam /home/www/ssl/dhparam.pem;</div><div class=\"line\">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class=\"line\">ssl_ciphers &quot;EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4&quot;;</div><div class=\"line\">keepalive_timeout 70;</div><div class=\"line\">ssl_session_cache shared:SSL:10m;</div><div class=\"line\">ssl_session_timeout 10m; </div></pre></td></tr></table></figure><br>同时，如果是全站 HTTPS 并且不考虑 HTTP 的话，可以加入 HSTS 告诉你的浏览器本网站全站加密，并且强制用 HTTPS 访问<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">add_header Strict-Transport-Security max-age=63072000;</div><div class=\"line\">add_header X-Frame-Options DENY;</div><div class=\"line\">add_header X-Content-Type-Options nosniff;</div></pre></td></tr></table></figure><br>同时也可以单独开一个 Nginx 配置，把 HTTP 的访问请求都用 301 跳转到 HTTPS<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;  </div><div class=\"line\">        listen 80;</div><div class=\"line\">        #listen [::]:80 ipv6only=on;</div><div class=\"line\">        server_name     b.miaoxiaohei.com;</div><div class=\"line\">        return 301 https://b.miaoxiaohei.com$request_uri;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>完整配置代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">    listen 80;</div><div class=\"line\">    #listen [::]:80 ssl ipv6only=on; </div><div class=\"line\">    listen 443 ssl;</div><div class=\"line\">    #listen [::]:443 ssl ipv6only=o</div><div class=\"line\">    server_name b.miaoxiaohei.com;</div><div class=\"line\">    root    /home/www/cayleyblogs;</div><div class=\"line\">    index   index.html;</div><div class=\"line\">    #log info</div><div class=\"line\">    access_log  /home/www/log/cayleyblogs-access.log;</div><div class=\"line\">    error_log   /home/www/log/cayleyblogs-error.log;</div><div class=\"line\">    # location / &#123;</div><div class=\"line\">    #    proxy_set_header   X-Real-IP $remote_addr;</div><div class=\"line\">    #    proxy_set_header   Host      $http_host;</div><div class=\"line\">    #    proxy_pass         http://0.0.0.0:4000;</div><div class=\"line\">    # &#125;</div><div class=\"line\">    #告诉浏览器网站已启用https ,并强制使用https</div><div class=\"line\">    add_header Strict-Transport-Security max-age=63072000;</div><div class=\"line\">    add_header X-Frame-Options DENY;</div><div class=\"line\">    add_header X-Content-Type-Options nosniff;</div><div class=\"line\">    #开启https</div><div class=\"line\">    ssl on;</div><div class=\"line\">    ssl_certificate /home/www/ssl/1_b.miaoxiaohei.com_bundle.crt;</div><div class=\"line\">    ssl_certificate_key /home/www/ssl/b.miaoxiaohei.com.key;</div><div class=\"line\">    #增强安全配置</div><div class=\"line\">    ssl_prefer_server_ciphers on;</div><div class=\"line\">    ssl_dhparam /home/www/ssl/dhparam.pem;</div><div class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class=\"line\">    ssl_ciphers &quot;EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4&quot;;</div><div class=\"line\">    keepalive_timeout 70;</div><div class=\"line\">    ssl_session_cache shared:SSL:10m;</div><div class=\"line\">    ssl_session_timeout 10m; </div><div class=\"line\">&#125;</div><div class=\"line\">#只允许https访问</div><div class=\"line\">server &#123;  </div><div class=\"line\">        listen 80;</div><div class=\"line\">        #listen [::]:80 ipv6only=on;</div><div class=\"line\">        server_name     b.miaoxiaohei.com;</div><div class=\"line\">        return 301 https://b.miaoxiaohei.com$request_uri;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.apache配置:</p>\n<p>申请成功后会提供,下载证书 ,解压ApacheServer.zip,会得到下面两个文件:<br>1_root_bundle.crt<br>2_b.miaoxiaohei.com.crt</p>\n<p>另外需要下載 intermediate 和 root CA 证书<br>如果缺少这个两个，Firefox 會出現「sec_error_unknown_issuer」<br>并且出現警告该页面,告訴你不要信任 StartSSL 的 SSL 证书</p>\n<p>下载地址如下:<br><a href=\"http://www.startssl.com/certs/sub.class1.server.ca.pem\" target=\"_blank\" rel=\"external\">http://www.startssl.com/certs/sub.class1.server.ca.pem</a><br><a href=\"http://www.startssl.com/certs/ca.pem\" target=\"_blank\" rel=\"external\">http://www.startssl.com/certs/ca.pem</a></p>\n<p>1)首先检查Apache 有沒有安裝 mod_ssl<br>如果没有安装,可以通过yum install mod_ssl 來安裝 || 编译安装</p>\n<p>2) 接下来将 b.miaoxiaohei.com.key 上到 /etc/pki/tls/private/<br>   将2_b.miaoxiaohei.com.crt 上传到 /etc/pki/tls/certs/<br>   将sub.class1.server.ca.pem 以及 ca.pem 上传到 /etc/pki/tls/</p>\n<p>3) 解密私钥,如果沒有解密的话，每次 Apache 启动后都要加入密码<br>解密步骤如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#cd /etc/pki/tls/private/</div><div class=\"line\">#openssl rsa -in b.miaoxiaohei.com.key -out b.miaoiaohei.com.key</div></pre></td></tr></table></figure><br>接下来会提示你输入密码</p>\n<p>4) 在打开 /etc/httpd/conf.d/ssl.conf<br>将 ssl.conf 各项配置修改如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SSLCertificateFile /etc/pki/tls/certs/2_b.miaoxiaohei.com.crt</div><div class=\"line\">SSLCertificateKeyFile /etc/pki/tls/private/b.miaoxiaohei.com.key</div><div class=\"line\">SSLCertificateChainFile /etc/pki/tls/sub.class1.server.ca.pem</div><div class=\"line\">SSLCACertificateFile /etc/pki/tls/ca.pem</div></pre></td></tr></table></figure><br>5) 重启apache</p>\n<p>参考:</p>\n<a href=\"http://www.startssl.com\" target=\"_blank\" rel=\"external\">startssl</a>\n<a href=\"http://blog.mowd.tw/index.php?pl=950#p_tb\" target=\"_blank\" rel=\"external\">申請免費 StartSSL 證書並開啟 Apache SSL 完整教學</a>\n","excerpt":"","more":"<p>配置SSL证书+搭建HTTPS:<br>1.https:<br>超文本传输安全协议（缩写：HTTPS，全称：Hypertext Transfer Protocol Secure）是超文本传输协议和SSL/TLS的组合，用以提供加密通讯及对网络服务器身份的鉴定。HTTPS连接经常被用于万维网上的交易支付和企业信息系统中敏感信息的传输。HTTPS不应与在RFC 2660中定义的安全超文本传输协议（S-HTTP）相混。<br>HTTPS 目前已经是所有注重隐私和安全的网站的首选.<br>SSL/TLS:<br>理论上讲这是两个协议，后者是前者的继任者，但其实 SSL 3.0 和 TLS 1.0 的差异很小，所以两者很多时候是混为一谈的,这两个都是传输层协议，在他们的基础上可以建议应用层的协议如 FTP 和 Telnet，上面说的 HTTPS 就是建立在 SSL/TLS 基础上的 HTTP。<br>证书<br>这里的证书主要指使用公私钥对加密的证书。这里所说的证书是SSL/TLS证书 证书了。一般用于服务器加密（网页、邮件服务等），也就是部署 HTTPS 时所必须的。<br>这里出现的证书都是用公私钥加密的证书。这涉及到 [[非对称加密]] 技术，每张证书都由一个公钥和一个私钥组成，两个拼在一起才是一套。所以公钥是可以随便发给别人看的，而私钥一定是要保密的，如果私钥泄漏，后果很严重的哦。</p>\n<p>信任链与 CA<br>CA 就是数字证书认证中心，是证书的签发机构.<br>信任链是证书的世界里有一套信任体系,谁都可以做证书的，只是做出来的证书有没有人相信而已,所以有几家特别靠谱的CA都被浏览器愿意信任,把它们的根证书都列为信任了.所以说能获取得到这些Ca签署的证书也会被主流浏览器所信任的.</p>\n<p>这里记录配置 SSL 证书 + 搭建 HTTPS的过程</p>\n<p>2.获取crt证书</p>\n<p>1)使用 OpenSSL 生成 SSL Key 和 CSR<br>前提条件:先安装openSSl<br>这里我使用yum安装:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ yum install -y openssl</div></pre></td></tr></table></figure><br>目前在 SSL证书购买时，有三种不同的资料验证方式，从而产生了三类SSL证书。</p>\n<p>域名型SSL证书（DV SSL） ，即只对域名的所有者（一般是域名管理员邮箱，比如admin@hotmail.com）进行在线检查，具体是发送验证邮件给域名管理员或以该域名结尾的邮箱至于该域名的管理员是真实注册的单位还是另有其人，就不得而知了。</p>\n<p>企业型 SSL 证书（OV SSL） ，是要购买者提交组织机构资料和单位授权信等在官方注册的凭证，认证机构在签发SSL证书前不仅仅要检验域名所有权，还必须对这些资料的真实合法性进行多方查验，只有通过验证的才能颁发SSL证书。</p>\n<p>增强型 SSL 证书（EV SSL） ，与其他SSL证书一样，都是基于SSL/TLS安全协议，都是用于网站的身份验证和信息在网上的传输加密。它跟普通SSL证书的区别也是明显的，安全浏览器的地址栏变绿，如果是不受信的SSL证书则拒绝显示，如果是钓鱼网站，地址栏则会变成红色，以警示用户</p>\n<p>EV SSL 证书获取比较严格,所以这里一般中小站长/企业,申请DV|OV比较多.</p>\n<p>无论你用 DV 还是 OV 生成私钥，都需要填写一些基本信息，具体信息如下：</p>\n<p>CN:<br>域名，也称为 Common Name，因为特殊的证书不一定是域名：xiaohei.com<br>O:<br>组织或公司名字（Organization）：cayley<br>OU:<br>部门（Department）：可以不填写，这里我们写 Web Security<br>L:<br>城市（City）：Shenzhen<br>ST:<br>省份（State / Province）：Guangdong<br>C:<br>国家（Country）：CN</p>\n<p>加密位数:<br>一般加密强度：2048 位，如果你的机器性能强劲，也可以选择 4096 位</p>\n<p>所以根据上面的信息，使用 OpenSSL 生成 key 和 csr 的命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl req -new -newkey rsa:2048 -sha256 -nodes -out b.miaoxiaohei.com.csr -keyout b.miaoxiaohei.com.key -subj &quot;/C=CN/ST=Guangdong/L=Shenzhen/O=cayley/OU=Web Security/CN=b.miaoxiaohei.com&quot;  </div></pre></td></tr></table></figure></p>\n<p>PS：如果是泛域名证书，则应该填写 *.miaoxiaohei.com</p>\n<p>运行命令后,会在当前目录生成两个文件:<br>    b.miaoxiaohei.com.csr :用于跟第三方CA机构获取证书<br>    b.miaoxiaohei.com.key :ssl私钥,用于服务器配置</p>\n<p>2)从第三方CA机构获取证书:</p>\n<p>由于只有浏览器或者系统信赖的 CA 才可以让所有的访问者通畅的访问你的加密网站，而不是出现证书错误的提示。所以跳过自签证书的步骤，直接开始签署第三方可信任的 SSL 证书.</p>\n<p>b.miaoxiaohei.com.csr 这个 CSR 文件就是你需要提交给 SSL 认证机构的，当你的域名或组织通过验证后，认证机构就会颁发给你一个 b.miaoxiaohei.com.crt</p>\n<p>目前一般市面上针对中小站长和企业的 SSL 证书颁发机构有：</p>\n<p>StartSSL</p>\n<p>Comodo / 子品牌 Positive SSL</p>\n<p>GlobalSign / 子品牌 AlphaSSL</p>\n<p>GeoTrust / 子品牌 RapidSSL</p>\n<p>这里我使用 <a href=\"https://www.startssl.com/\">StartSSL</a> 首先进入StartSSL,注册账号,申请免费的证书(免费证书需要一个月申请一次,比较坑),土豪|企业可以直接用钱买.</p>\n<p>这时候验证需要提供一些资料,先准备好.</p>\n<p>申请成功后会提供,下载证书,会得到下面的几个证书文件<br>ApacheServer.zip<br>IISServer.zip<br>NginxServer.zip<br>OtherServer.zip</p>\n<p>这时候,总共得到3个文件:<br>  b.miaoxiaohei.com.csr ,b.miaoxiaohei.com.key  1_b.miaoxiaohei.com_bundle.crt</p>\n<p>同时，为了方便操作，我把这三个文件都移动到 /home/www/ssl 目录。</p>\n<p>证书获取完成.</p>\n<p>3.nginx 配置 HTTPS 网站以及增加安全的配置</p>\n<p>1)配置nginx<br>然后可以修改 Nginx 配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">$vim /usr/local/nginx/conf/vhost.d/b.miaoxiaohei.conf</div><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">    listen 80;</div><div class=\"line\">    #listen [::]:80 ssl ipv6only=on; </div><div class=\"line\">    listen 443 ssl;</div><div class=\"line\">    #listen [::]:443 ssl ipv6only=o</div><div class=\"line\">    server_name b.miaoxiaohei.com;</div><div class=\"line\">    root    /home/www/cayleyblogs;</div><div class=\"line\">    index   index.html;</div><div class=\"line\">    access_log  /home/www/log/cayleyblogs-access.log;</div><div class=\"line\">    error_log   /home/www/log/cayleyblogs-error.log;</div><div class=\"line\"></div><div class=\"line\">    ssl on;</div><div class=\"line\">    ssl_certificate /home/www/ssl/1_b.miaoxiaohei.com_bundle.crt;</div><div class=\"line\">    ssl_certificate_key /home/www/ssl/b.miaoxiaohei.com.key;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div></pre></td></tr></table></figure><br>检测配置文件没问题后,重启 Nginx 即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$nginx -t &amp;&amp; nginx -s reload</div></pre></td></tr></table></figure></p>\n<p>2)增加安全配置</p>\n<p>但是这么做并不安全，默认是 SHA-1 形式，而现在主流的方案应该都避免 SHA-1，为了确保更强的安全性，我们可以采取迪菲－赫尔曼密钥交换</p>\n<p>首先，进入 /home/www/ssl 目录并生成一个 dhparam.pem</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$cd  /home/www/ssl</div><div class=\"line\"># 如果你的机器性能足够强大，可以用 4096 位加密</div><div class=\"line\">$openssl dhparam -out dhparam.pem 2048   </div><div class=\"line\"></div><div class=\"line\">$ openssl dhparam -out dhparam.pem 2048</div><div class=\"line\">Generating DH parameters, 2048 bit long safe prime, generator 2</div><div class=\"line\">This is going to take a long time</div><div class=\"line\">...........................++*++*</div><div class=\"line\">$ ls  #新增一个dhparam.pem文件</div><div class=\"line\">1_b.miaoxiaohei.com_bundle.crt  b.miaoxiaohei.com.csr </div><div class=\"line\"> b.miaoxiaohei.com.key  dhparam.pem</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>生成完毕后，在 Nginx 的 SSL 配置后面加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssl_prefer_server_ciphers on;</div><div class=\"line\">ssl_dhparam /home/www/ssl/dhparam.pem;</div><div class=\"line\">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class=\"line\">ssl_ciphers &quot;EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4&quot;;</div><div class=\"line\">keepalive_timeout 70;</div><div class=\"line\">ssl_session_cache shared:SSL:10m;</div><div class=\"line\">ssl_session_timeout 10m; </div></pre></td></tr></table></figure><br>同时，如果是全站 HTTPS 并且不考虑 HTTP 的话，可以加入 HSTS 告诉你的浏览器本网站全站加密，并且强制用 HTTPS 访问<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">add_header Strict-Transport-Security max-age=63072000;</div><div class=\"line\">add_header X-Frame-Options DENY;</div><div class=\"line\">add_header X-Content-Type-Options nosniff;</div></pre></td></tr></table></figure><br>同时也可以单独开一个 Nginx 配置，把 HTTP 的访问请求都用 301 跳转到 HTTPS<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;  </div><div class=\"line\">        listen 80;</div><div class=\"line\">        #listen [::]:80 ipv6only=on;</div><div class=\"line\">        server_name     b.miaoxiaohei.com;</div><div class=\"line\">        return 301 https://b.miaoxiaohei.com$request_uri;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>完整配置代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">    listen 80;</div><div class=\"line\">    #listen [::]:80 ssl ipv6only=on; </div><div class=\"line\">    listen 443 ssl;</div><div class=\"line\">    #listen [::]:443 ssl ipv6only=o</div><div class=\"line\">    server_name b.miaoxiaohei.com;</div><div class=\"line\">    root    /home/www/cayleyblogs;</div><div class=\"line\">    index   index.html;</div><div class=\"line\">    #log info</div><div class=\"line\">    access_log  /home/www/log/cayleyblogs-access.log;</div><div class=\"line\">    error_log   /home/www/log/cayleyblogs-error.log;</div><div class=\"line\">    # location / &#123;</div><div class=\"line\">    #    proxy_set_header   X-Real-IP $remote_addr;</div><div class=\"line\">    #    proxy_set_header   Host      $http_host;</div><div class=\"line\">    #    proxy_pass         http://0.0.0.0:4000;</div><div class=\"line\">    # &#125;</div><div class=\"line\">    #告诉浏览器网站已启用https ,并强制使用https</div><div class=\"line\">    add_header Strict-Transport-Security max-age=63072000;</div><div class=\"line\">    add_header X-Frame-Options DENY;</div><div class=\"line\">    add_header X-Content-Type-Options nosniff;</div><div class=\"line\">    #开启https</div><div class=\"line\">    ssl on;</div><div class=\"line\">    ssl_certificate /home/www/ssl/1_b.miaoxiaohei.com_bundle.crt;</div><div class=\"line\">    ssl_certificate_key /home/www/ssl/b.miaoxiaohei.com.key;</div><div class=\"line\">    #增强安全配置</div><div class=\"line\">    ssl_prefer_server_ciphers on;</div><div class=\"line\">    ssl_dhparam /home/www/ssl/dhparam.pem;</div><div class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class=\"line\">    ssl_ciphers &quot;EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4&quot;;</div><div class=\"line\">    keepalive_timeout 70;</div><div class=\"line\">    ssl_session_cache shared:SSL:10m;</div><div class=\"line\">    ssl_session_timeout 10m; </div><div class=\"line\">&#125;</div><div class=\"line\">#只允许https访问</div><div class=\"line\">server &#123;  </div><div class=\"line\">        listen 80;</div><div class=\"line\">        #listen [::]:80 ipv6only=on;</div><div class=\"line\">        server_name     b.miaoxiaohei.com;</div><div class=\"line\">        return 301 https://b.miaoxiaohei.com$request_uri;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.apache配置:</p>\n<p>申请成功后会提供,下载证书 ,解压ApacheServer.zip,会得到下面两个文件:<br>1_root_bundle.crt<br>2_b.miaoxiaohei.com.crt</p>\n<p>另外需要下載 intermediate 和 root CA 证书<br>如果缺少这个两个，Firefox 會出現「sec_error_unknown_issuer」<br>并且出現警告该页面,告訴你不要信任 StartSSL 的 SSL 证书</p>\n<p>下载地址如下:<br><a href=\"http://www.startssl.com/certs/sub.class1.server.ca.pem\">http://www.startssl.com/certs/sub.class1.server.ca.pem</a><br><a href=\"http://www.startssl.com/certs/ca.pem\">http://www.startssl.com/certs/ca.pem</a></p>\n<p>1)首先检查Apache 有沒有安裝 mod_ssl<br>如果没有安装,可以通过yum install mod_ssl 來安裝 || 编译安装</p>\n<p>2) 接下来将 b.miaoxiaohei.com.key 上到 /etc/pki/tls/private/<br>   将2_b.miaoxiaohei.com.crt 上传到 /etc/pki/tls/certs/<br>   将sub.class1.server.ca.pem 以及 ca.pem 上传到 /etc/pki/tls/</p>\n<p>3) 解密私钥,如果沒有解密的话，每次 Apache 启动后都要加入密码<br>解密步骤如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#cd /etc/pki/tls/private/</div><div class=\"line\">#openssl rsa -in b.miaoxiaohei.com.key -out b.miaoiaohei.com.key</div></pre></td></tr></table></figure><br>接下来会提示你输入密码</p>\n<p>4) 在打开 /etc/httpd/conf.d/ssl.conf<br>将 ssl.conf 各项配置修改如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SSLCertificateFile /etc/pki/tls/certs/2_b.miaoxiaohei.com.crt</div><div class=\"line\">SSLCertificateKeyFile /etc/pki/tls/private/b.miaoxiaohei.com.key</div><div class=\"line\">SSLCertificateChainFile /etc/pki/tls/sub.class1.server.ca.pem</div><div class=\"line\">SSLCACertificateFile /etc/pki/tls/ca.pem</div></pre></td></tr></table></figure><br>5) 重启apache</p>\n<p>参考:</p>\n<a href=\"http://www.startssl.com\">startssl</a>\n<a href=\"http://blog.mowd.tw/index.php?pl=950#p_tb\">申請免費 StartSSL 證書並開啟 Apache SSL 完整教學</a>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cizqeiel30003znz4o2kh3p4u","category_id":"cizqeield0005znz473gjt88k","_id":"cizqeielz000eznz4umele10y"},{"post_id":"cizqeiel60004znz4ala8mdnv","category_id":"cizqeield0005znz473gjt88k","_id":"cizqeiem5000kznz4juqn6zoc"},{"post_id":"cizqeiell0007znz4ee2tzw7q","category_id":"cizqeield0005znz473gjt88k","_id":"cizqeiemc000qznz40yszgepv"},{"post_id":"cizqeiema000pznz4ejky9kav","category_id":"cizqeield0005znz473gjt88k","_id":"cizqeien0000wznz404d82qmr"},{"post_id":"cizqeiels0009znz4r0plppml","category_id":"cizqeiem6000mznz4wykap1r7","_id":"cizqeien30010znz4y0y6kl2l"},{"post_id":"cizqeielx000dznz41z2zmyus","category_id":"cizqeiemw000sznz4k2c9idzt","_id":"cizqeien80014znz4nyqp20ek"},{"post_id":"cizqeiem0000fznz4r020othm","category_id":"cizqeiemw000sznz4k2c9idzt","_id":"cizqeiend001aznz4po27h2wj"},{"post_id":"cizqeiemd000rznz43cqa6yrn","category_id":"cizqeiemw000sznz4k2c9idzt","_id":"cizqeieni001fznz4i0yj94bh"},{"post_id":"cizqeienv001qznz4khpngqt1","category_id":"cizqeiemw000sznz4k2c9idzt","_id":"cizqeieo0001vznz47n4vregf"},{"post_id":"cizqeieno001kznz4smhhicqu","category_id":"cizqeiens001nznz462gqcndi","_id":"cizqeieo5001xznz42bxb1le2"},{"post_id":"cizqeienx001rznz4gom6cbfu","category_id":"cizqeiemw000sznz4k2c9idzt","_id":"cizqeieo70020znz4ir6u3rl0"},{"post_id":"cizqeieny001uznz4zt8ejbgx","category_id":"cizqeiemw000sznz4k2c9idzt","_id":"cizqeieo90023znz4uxww93j3"},{"post_id":"cizqeieob0026znz47033q54i","category_id":"cizqeiemw000sznz4k2c9idzt","_id":"cizqeieoh002cznz44o4f1m0j"},{"post_id":"cizqeieoh002dznz4nsknnooz","category_id":"cizqeiemw000sznz4k2c9idzt","_id":"cizqeieoj002gznz4dcvrudf3"}],"PostTag":[{"post_id":"cizqeiel30003znz4o2kh3p4u","tag_id":"cizqeielj0006znz4x7gnj6hu","_id":"cizqeielx000cznz4uf26vsei"},{"post_id":"cizqeiel60004znz4ala8mdnv","tag_id":"cizqeielj0006znz4x7gnj6hu","_id":"cizqeiem3000iznz43k6ol9po"},{"post_id":"cizqeiell0007znz4ee2tzw7q","tag_id":"cizqeielj0006znz4x7gnj6hu","_id":"cizqeiem9000oznz4tqbo77ry"},{"post_id":"cizqeiels0009znz4r0plppml","tag_id":"cizqeiem7000nznz4c8nmfojd","_id":"cizqeiemz000vznz4r4kfpwmn"},{"post_id":"cizqeielx000dznz41z2zmyus","tag_id":"cizqeiemw000tznz4dcsrezid","_id":"cizqeien60012znz480v33xw1"},{"post_id":"cizqeiem0000fznz4r020othm","tag_id":"cizqeiemw000tznz4dcsrezid","_id":"cizqeienb0018znz4yvh1uffj"},{"post_id":"cizqeiema000pznz4ejky9kav","tag_id":"cizqeien80016znz45n3i7y00","_id":"cizqeieng001dznz4qjapqgmt"},{"post_id":"cizqeiemd000rznz43cqa6yrn","tag_id":"cizqeien80016znz45n3i7y00","_id":"cizqeienm001iznz465650iz2"},{"post_id":"cizqeiemx000uznz4r0xyq3t1","tag_id":"cizqeien80016znz45n3i7y00","_id":"cizqeienq001lznz4f6jcm7a9"},{"post_id":"cizqeieno001kznz4smhhicqu","tag_id":"cizqeiens001oznz4lqh1ef43","_id":"cizqeieny001tznz4tbzf0wok"},{"post_id":"cizqeienv001qznz4khpngqt1","tag_id":"cizqeieny001sznz439tm3c7x","_id":"cizqeieo70021znz4tp5iroaw"},{"post_id":"cizqeienx001rznz4gom6cbfu","tag_id":"cizqeieo7001zznz4kwfn7yuw","_id":"cizqeieod0027znz4yhqd28lk"},{"post_id":"cizqeieny001uznz4zt8ejbgx","tag_id":"cizqeieob0025znz4fwnjckxf","_id":"cizqeieoh002bznz4a2hy9s5p"},{"post_id":"cizqeieod0028znz4ro9qcsm2","tag_id":"cizqeieo7001zznz4kwfn7yuw","_id":"cizqeieoi002eznz4nuc2zuqe"},{"post_id":"cizqeieoh002dznz4nsknnooz","tag_id":"cizqeieny001sznz439tm3c7x","_id":"cizqeieoj002fznz4q5nrxx1z"},{"post_id":"cizqeieob0026znz47033q54i","tag_id":"cizqeieof0029znz4qbxo6dqh","_id":"cizqeieoj002hznz4mye6s0si"}],"Tag":[{"name":"composer","_id":"cizqeielj0006znz4x7gnj6hu"},{"name":"hexo","_id":"cizqeiem7000nznz4c8nmfojd"},{"name":"nginx","_id":"cizqeiemw000tznz4dcsrezid"},{"name":"php","_id":"cizqeien80016znz45n3i7y00"},{"name":"redis","_id":"cizqeiens001oznz4lqh1ef43"},{"name":"https","_id":"cizqeieny001sznz439tm3c7x"},{"name":"科学上网","_id":"cizqeieo7001zznz4kwfn7yuw"},{"name":"yum","_id":"cizqeieob0025znz4fwnjckxf"},{"name":"libiconv","_id":"cizqeieof0029znz4qbxo6dqh"}]}}